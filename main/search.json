[{"path":"https://openpharma.github.io/crmPack/articles/crmPack-jss-paper.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Model-based Dose Escalation Designs in R with crmPack (JSS manuscript)","text":"Model-based dose escalation designs gained increasing interest due need efficient informative Phase trials. wide-spread implementation designs hindered need either licensing specialized commercial software programming design simulations scratch project. R-package crmPack provides simple unified object-oriented framework model-based dose escalation designs. enables standard use designs, able flexibly adapt extend . framework comprises classes methods data structure including dose grid, statistical models including prior specification, rules maximum increments, next best dose, adaptive stopping cohort sizes. addition multiple modified classic continual reassessment method escalation overdose control designs possibly advanced prior specifications (e.g., minimal informative mixture priors), crmPack currently features dual-endpoint (safety biomarker) designs two-part designs. Optional assignment small number patients cohort placebo instead treatment enables use trials outside Oncology. Keywords: continual reassessment method, model based dose escalation, dual-endpoint design, R, object oriented.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/crmPack-jss-paper.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Model-based Dose Escalation Designs in R with crmPack (JSS manuscript)","text":"Phase trials testing new investigational agents humans first time escalate low high doses sequential fashion. dose escalation design necessary order reduce risk high therefore toxic doses probands. can either healthy volunteers (e.g., neurology) patients (e.g., oncology), henceforth use latter ease presentation. higher doses agents usually expected deliver stronger pharmacodynamic effects hence improved efficacy, higher doses also usually cause severe adverse events patients. order simplify decision making usually binary dose-limiting toxicities (DLTs) defined (e.g., adverse events reaching specific severity levels) starting trial. maximum tolerated dose (MTD) defined dose certain probability DLTs (either using single value, e.g., 33%, range, e.g., 20 35%). Historically, patients treated dose cohorts three, dose next cohort determined number DLTs observed current cohort. Algorithmic designs like simple 3+3 design (Carter 1973) disadvantages recognized statistics community, see e.g., (Paoletti, Ezzalfani, Le Tourneau 2015). Fundamentally, escalation rules 3+3 design statistical justification (Storer 1989) terms estimating MTD. Moreover, extended address today’s Phase trials, extension cohorts, dose escalation drug combinations optimal biological dose determination, naming just prominent challenges. Hence model-based dose escalation designs like continual reassessment method (CRM) (O’Quigley, Pepe, Fisher 1990) gained increasing interest due need efficient informative Phase trials. designs based statistical inference, dose-toxicity regression models backbone, therefore flexible adaptation various complex trial designs. Importantly, avoid fixing dose levels advance. wider comparison algorithmic model based designs see e.g., (Jaki, Clive, Weir 2013). However, wide-spread implementation designs hindered need either licensing specialized commercial software (thus losing flexibility) programming design simulations scratch project (thus losing efficiency). models underlying model-based dose escalation procedures can easily fit standard software capability fit generalized linear models, e.g., PROC MIXED SAS ( Institute Inc. 2003), glm Stata (StataCorp 2015) R ( Core Team 2016), still software solutions available dedicated dose escalation studies. commercial packages East (Cytel Inc. 2016) ADDPLAN (ICON Plc 2016) offer extensions basic design software dose escalation studies (ESCALATE East df ADDPLAN) implementing algorithmic 3+3 design various versions CRM. Similarly FACTS (FACTS Development Team 2015) also offers different common dose escalation methods. Due commercial nature implementations , however, limitation much designs can tailored towards individual needs study. Similarly static implementations methods dose escalation available Stata module crm (Mander 2013) implements CRM dfcrm package (K. Cheung 2013) R additionally implements time--event CRM (TITE-CRM) (Y. K. Cheung Chappell 2000). Several R-packages extensions available. bcrm package (M. Sweeting, Mander, Sabin 2013) implements variety one two parameter models, facilitates different ways specify prior distributions, escalation stopping rules. ordcrm package (Dressler Huang 2016) implements ordinal proportional odds continuation ratio models CRMs. dfpk package (Toumazi, Ursino, Zohar 2017) uses pharmacokinetic data dose escalation. paper introduce R-package crmPack (Sabanes Bove et al. 2018) dose escalation studies, publicly available CRAN. package’s name pays tribute original CRM first model-based dose escalation design, package’s functionality differs existing implementations three fundamental ways. Firstly, written using S4 classes methods (Chambers 2008), allows customized methodology added package still able use existing backbone functionalities. Secondly, methods studies placebo group (e.g., healthy volunteer studies) readily implemented. Thirdly, dual endpoint dose escalation methods incorporate safety efficacy allow determination optimal biological dose already available.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/crmPack-jss-paper.html","id":"framework","dir":"Articles","previous_headings":"","what":"Framework","title":"Model-based Dose Escalation Designs in R with crmPack (JSS manuscript)","text":"describing framework package adapt general notation early phase trials (Thall 2010). Figure @ref(fig:schematic) summarizes framework schematic. Schematic framework Separate design features implemented classes (shown gray boxes) bundled together overarching Design object. can processed various methods (blue text) run dose escalation trial produce results (blue boxes). example, Data GeneralModel objects can processed mcmc method order obtain posterior samples model parameters, given sample size dose next cohort, updated Data closes dose escalation loop. higher level, designs can investigated examine simulate methods obtain hypothetical trial courses operating characteristics, respectively. Note individual model classes methods shown clarity, please refer package documentation details, e.g., calling crmPackHelp().’ Data Let xx denote one specific treatment, chosen set possible treatments ${\\cal X}$. one specific dose, also generally vector, containing example doses multiple drugs combination trial. giving treatment xx patient, outcome yy observed, typically safety endpoint e.g., binary DLT y∈{0,1}y \\\\{0, 1\\}. Grouping together njn_{j} patients cohort jj, generating cohort jj data ${\\cal C}_{j} = \\{(x_{j}, y_{j,1}), \\dotsc, (x_{j}, y_{j,n_{j}})\\}$, can denote data generated first NN cohorts ${\\cal D}_{N}= {\\cal C}_{1} \\cup \\dotsb \\cup {\\cal C}_{N}$. crmPack S4 class GeneralData encapsulates notion subclasses implement concrete data structures. Model core model-based dose escalation designs underlying statistical model. Taking Bayesian approach inference, model crmPack consists firstly likelihood, either probability density function f(y|x,θ) f(y | x, \\theta) probability mass function Prob(Y=y|x,θ) Prob(Y=y | x, \\theta) yy patient receives treatment xx assuming parameter (vector) θ\\theta, (likelihood θ\\theta) secondly prior p(θ|ξ) p(\\theta | \\xi) θ\\theta given fixed hyperparameters ξ\\xi. crmPack virtual S4 class GeneralModel encapsulates notion subclasses implement concrete models. example, class LogisticLogNormal implements logistic regression model (Neuenschwander, Branson, Gsponer 2008) logit(Prob(Y=1|x,θ))≡logit(π(x,θ))=α0+α1log⁡(xx*),\\begin{equation} \\label{eq:LogisticLogNormal} \\mathrm{logit}(Prob(Y=1 | x,\\theta)) \\equiv \\mathrm{logit}(\\pi(x,\\theta)) = \\alpha_{0} + \\alpha_{1} \\log\\left(\\frac{x}{x^*}\\right), \\end{equation} parameter vector θ=(α0,α1)\\theta = (\\alpha_{0},\\alpha_{1}), dose x>0x > 0 specified reference dose x*x^{*}. prior p(θ|ξ)p(\\theta | \\xi) specified via bivariate normal distribution transformation θ\\theta ensure α1>0\\alpha_{1} > 0: (α0,log⁡(α1))|ξ∼𝒩2(μ,Σ)\\begin{equation}   \\label{eq:bivariateNormal}   (\\alpha_{0}, \\log(\\alpha_{1})) | \\xi \\sim \\mathcal{N}_{2} (\\mu, \\Sigma) \\end{equation} hyperparameters ξ=(μ,Σ)\\xi = (\\mu, \\Sigma) consisting prior mean vector μ\\mu prior covariance matrix Σ\\Sigma. Decision making next dose Another core element dose escalation design concerns decision making next dose xN+1x_{N+1} tested next cohort N+1N+1. (Thall 2010) notation, function α\\alpha mapping currently accumulated data 𝒟N\\mathcal{D}_{N} dose space 𝒳\\mathcal{X} (dose 00, meaning stop trial doses toxic): $$\\begin{equation} \\alpha: {\\cal D}_{N} \\rightarrow \\mathcal{X} \\cup \\{0\\} \\end{equation}$$ mapping commonly specified via combination two elements: first element function τ\\tau maximum increments dose levels, can calculate current data 𝒟N\\mathcal{D}_{N} (including current dose xNx_{N}) maximum possible next dose tN+1=τ(𝒟N)t_{N+1}=\\tau(\\mathcal{D}_{N}) next cohort. second element rule ν\\nu indirectly acting current data posterior distribution p(θ|𝒟N)p(\\theta | \\mathcal{D}_{N}) maximum possible dose tN+1t_{N+1} finally give next dose xN+1=ν(p(θ|𝒟N),tN+1)x_{N+1} = \\nu(p(\\theta | \\mathcal{D}_{N}), t_{N+1}). crmPack maximum increments specified subclasses Increments, next best dose rule subclasses NextBest. design class Additional features design concern adaptive sizing next cohort adaptive stopping trial. implemented subclasses CohortSize Stopping, respectively. Moreover, starting dose x1x_{1} also feature design. Finally, overall dose escalation design bundling described features together dedicated class typically inheriting Design. noted (Thall 2010), operating characteristics complex dose escalation design can evaluated simulations. can done using simulate methods design classes, recommended performed multitude different scenarios order stress-test design convince oneself properties. particular, operating characteristics reveal whether MTD can estimated well designs. addition, examine method evaluates hypothetical trial outcomes lists resulting trial decisions (dose next cohort trial end). order illustrate use object-oriented framework, next section contains practical examples use existing functionality well example creating new extensions.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/crmPack-jss-paper.html","id":"using-crmpack","dir":"Articles","previous_headings":"","what":"Using crmPack","title":"Model-based Dose Escalation Designs in R with crmPack (JSS manuscript)","text":"consider trial Type II diabetes carried Hoffmann-La Roche Ltd. order illustrate functionality package. patient, observed binary safety (DLT) continuous efficacy outcome. Implementing CRM trial show implement CRM design dose escalation based safety endpoint , Dose escalation safety efficacy also efficacy endpoint considered. Extending crmPack functionality gives example extending crmPack functionality. start, install subsequently load package R: indicated startup message, try crmPackHelp() crmPackExample() open help page package vignette.","code":"library(\"crmPack\") ## Loading required package: ggplot2 ## Registered S3 method overwritten by 'crmPack': ##   method       from   ##   print.gtable gtable ## Type crmPackHelp() to open help browser ## Type crmPackExample() to open example"},{"path":"https://openpharma.github.io/crmPack/articles/crmPack-jss-paper.html","id":"implementing-a-crm-trial","dir":"Articles","previous_headings":"Using crmPack","what":"Implementing a CRM trial","title":"Model-based Dose Escalation Designs in R with crmPack (JSS manuscript)","text":"Suppose 12 dose levels ranging 25 300 mg 25 mg increments novel agent available addition placebo, defining dose grid 𝒳={0.001,25,50,…,300}\\mathcal{X} = \\{0.001,25, 50,\\dotsc, 300\\}, x1=0.001x_{1} = 0.001 mg representing placebo x2=25x_{2} = 25 starting dose. Note used small dose instead zero x1x_{1}, since consider regression model @eqref(eq:LogisticLogNormal) log transformation dose xx (x*=100x^{*} = 100 chosen reference dose). Minimally informative prior assume limited prior information available dose-toxicity relationship, hence like use minimally informative prior (Neuenschwander, Branson, Gsponer 2008) can easily obtained function MinimalInformative. Since stochastic optimization used internally, setting seed required reproducibility. Furthermore, recommended specify coarse dose grid across original dose range (excluding placebo dose) avoid long computation time: resulting model (object class LogisticLogNormal) prior parameters μ=(0.0720313,2)\\mu = (0.0720313, 2) Σ=(1.510.180.180.21)\\Sigma=  \\left(\\begin{smallmatrix}    1.51 & 0.18 \\\\    0.18 & 0.21  \\end{smallmatrix}\\right) approximately 5% probability DLT rate exceed 10% (threshmin argument) 25 mg dose 20% (threshmax) 300 mg dose. Data object definition visualization simple case univariate dose xx resulting binary DLT observations yy, S4 class Data can used. Objects class can created calling accompanying initialization function name (general convention crmPack): argument x takes doses x1=0.001,x2=25,x3=50,x4=100x_{1}=0.001, x_{2}=25, x_{3} = 50, x_{4} = 100 (note repetition match outcome variables yj,ky_{j,k}) doseGrid captures set ${\\cal X}$ possible doses, y takes binary DLTs (y3,3=1y_{3, 3} = 1 denotes DLT observed 3rd patient 3rd cohort), cohort groups patients together cohorts (N=3N=3). option placebo used specify placebo controlled study, placebo patients included cohort. lowest dose x1x_{1} interpreted internally placebo dose. Patient IDs can given optionally ID argument. data can visualized simply applying plot function object, also allows produce blinded plot (hiding patient IDs placebo/treatment assignment) option blind, see Figure @ref(fig:plot-data): Open blinded data plots Open blinded data plots Sampling prior posterior Now model data place, can use MCMC sampling obtaining posterior distribution model parameters θ\\theta, hence DLT rates Prob(Y=1|x,θ)Prob(Y=1 | x,\\theta), various doses xx. MCMC sampling can controlled object class McmcOptions, provided mcmc function, together data model objects: posterior mean curve 95% equi-tailed credible interval curves DLT rates can obtained supplying samples, model data generic plot function. Similarly can also produce similar plot without data, giving prior, see Figure @ref(fig:plot-model-fit): Posterior prior regression model fits illustrated , plots can customized using ggplot2(Wickham 2009) functionality. can see posterior mean estimate (left panel, continuous line) slightly steeper prior mean estimate curve (right panel, continuous line), posterior uncertainty reduced due data (smaller credible intervals, dashed lines). Decision making next dose determine dose administer next (cohort ) patients begin specifying maximum increments function τ\\tau. example maximum increase 100% doses 100 mg, 50% doses range 100 mg 200 mg, 33% doses equal 200 mg specified using class IncrementsRelative: specific rule τ\\tau can evaluated current dataset ${\\cal D}_{N}$ maxDose function obtain maximum next dose $t_{N+1} = \\tau({\\cal D}_{N})$: define function ν\\nu selecting dose next cohort. case like select dose maximizes probability DLT rate target toxicity range 20% 35%, probability overdosing exceeding 25% (Neuenschwander, Branson, Gsponer 2008), using NextBestNCRM class: rule can evaluated function NextBest obtain next dose $x_{N+1}=\\nu({\\cal D}_{N}, t_{N+1})$: returned list also contains accompanying plot (nextDoseRes$plot), see Figure @ref(fig:nextBest-ncrm). Dose recommendation plot NCRM design Adaptive stopping trial like stop dose escalation adaptively maximum sample size n=30n=30 patients reached already, sufficient precision MTD estimate. can specify latter condition follows: probability next dose xN+1x_{N+1} target toxicity range 50%, least 9 patients already dosed within +/- 20% range xN+1x_{N+1}. corresponding Stopping class object constructed combining atomic rules logical operators follows: , specific rule can evaluated function, called stopTrial, specific situation: result FALSE means yet stop trial, attribute message giving results atomic stopping rules. Examine dose escalation design last topic section, want show assess performance given CRM design. first need specify design creating object class Design. contains model, rules dose escalation (Increments, NextBest, Stopping CohortSize), dose grid (example object emptydata) starting dose (see also Figure @ref(fig:schematic). case use fixed cohort size 3 patients active 1 patient placebo (``3+1’’) throughout study: can start looking single trial operating characteristics dose escalation design function examine, generates data frame showing beginning several hypothetical trial courses design. Assuming DLTs seen certain dose, consequences different number DLTs observed dose shown. example, observe 3 DLTs starting dose 25 mg, need stop trial, enroll another cohort dose level case 2 DLTs. last rows output see DLTs observed 250 mg cohort, maximum considered dose 300 mg dose can reached next cohort also DLTs observed 250 mg. 1, 2 3 DLTs observed, next dose recommended 225, 175 150 mg, respectively. Simulating operating characteristics many trials operating characteristics, first define true scenarios, data arise. case, requires function computes probability DLT given dose. example use function contained slot prob object model: %, dose-toxicity curve shown . Note possible R-function returning vector probabilities upon input dose vector can used. particular, trivially possible directly specify probability DLT dose order examine operating characteristics based statistical model. example, assume 5 doses 1–5 probabilities DLT 0.01, 0.02, 0.04, 0.06, 0.09, following code used: Now can proceed simulations using function simulate: number simulated trials depends required accuracy results. argument parallel can set TRUE one wishes run iterations parallel processors computer, can yield meaningful speedup. needed 133 seconds 100 simulated trials Intel Core i5-6300U CPU 2.4 GHz. result object class Simulations containing multiple slots, e.g., data slot containing list simulated trials. slots doses stopReasons contain information final MTD stopping reason trial. can e.g., investigate number patients MTD end third simulated trial: Simulation plot Second, can summarize simulation results, obtain textual description results: Simulation summary plot","code":"coarseGrid <- c(25, 50, 100, 200, 300) model <- MinimalInformative(   dosegrid = coarseGrid, refDose = 100,   logNormal = TRUE, threshmin = 0.1,   threshmax = 0.2, seed = 432,   control = list(max.time = 30) )$model PL <- 0.001 data <- Data(   x = c(PL, 25, 25, 25, PL, 50, 50, 50, PL, 100, 100, 100),   y = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0),   cohort = c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3),   doseGrid = c(PL, seq(25, 300, 25)),   ID = 1:12,   placebo = TRUE ) plot(data) plot(data, blind = TRUE) options <- McmcOptions(burnin = 1000, step = 2, samples = 10000) set.seed(94) samples <- mcmc(data, model, options) plot(samples, model, data) + ggtitle(\"Posterior\")  emptydata <- Data(doseGrid = data@doseGrid, placebo = TRUE) priorsamples <- mcmc(emptydata, model, options) plot(priorsamples, model, emptydata) + ggtitle(\"Prior\") myIncrements <- IncrementsRelative(   intervals = c(0, 100, 200),   increments = c(1, 0.5, 0.33) ) (nextMaxDose <- maxDose(myIncrements, data)) ## [1] 150 myNextBest <- NextBestNCRM(   target = c(0.2, 0.35), overdose = c(0.35, 1),   max_overdose_prob = 0.25 ) nextDoseRes <- nextBest(myNextBest, nextMaxDose, samples, model, data) (nextDoseVal <- nextDoseRes$value) ## [1] 100 myStopping1 <- StoppingMinPatients(nPatients = 30) myStopping2 <- StoppingTargetProb(target = c(0.2, 0.35), prob = 0.5) myStopping3 <- StoppingPatientsNearDose(nPatients = 9, percentage = 20) myStopping <- myStopping1 | (myStopping2 & myStopping3) stopTrial(myStopping, nextDoseVal, samples, model, data) ## [1] FALSE ## attr(,\"message\") ## attr(,\"message\")[[1]] ## [1] \"Number of patients is 12 and thus below the prespecified minimum number 30\" ##  ## attr(,\"message\")[[2]] ## attr(,\"message\")[[2]][[1]] ## [1] \"Probability for target toxicity is 31 % for dose 100 and thus below the required 50 %\" ##  ## attr(,\"message\")[[2]][[2]] ## [1] \"3 patients lie within 20% of the next best dose 100. This is below the required 9 patients\" ##  ##  ## attr(,\"individual\") ## attr(,\"individual\")[[1]] ## [1] FALSE ## attr(,\"message\") ## [1] \"Number of patients is 12 and thus below the prespecified minimum number 30\" ## attr(,\"report_label\") ## [1] \"≥ 30 patients dosed\" ##  ## attr(,\"individual\")[[2]] ## [1] FALSE ## attr(,\"message\") ## attr(,\"message\")[[1]] ## [1] \"Probability for target toxicity is 31 % for dose 100 and thus below the required 50 %\" ##  ## attr(,\"message\")[[2]] ## [1] \"3 patients lie within 20% of the next best dose 100. This is below the required 9 patients\" ##  ## attr(,\"individual\") ## attr(,\"individual\")[[1]] ## [1] FALSE ## attr(,\"message\") ## [1] \"Probability for target toxicity is 31 % for dose 100 and thus below the required 50 %\" ## attr(,\"report_label\") ## [1] \"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5\" ##  ## attr(,\"individual\")[[2]] ## [1] FALSE ## attr(,\"message\") ## [1] \"3 patients lie within 20% of the next best dose 100. This is below the required 9 patients\" ## attr(,\"report_label\") ## [1] \"≥ 9 patients dosed in 20 % dose range around NBD\" ##  ## attr(,\"report_label\") ## [1] NA ##  ## attr(,\"report_label\") ## [1] NA mySize <- CohortSizeConst(3) mySizePL <- CohortSizeConst(1)  design <- Design(   model = model, nextBest = myNextBest,   stopping = myStopping, increments = myIncrements,   cohort_size = mySize, pl_cohort_size = mySizePL,   data = emptydata, startingDose = 25 ) set.seed(23) examine(design, mcmcOptions = options) ##    dose DLTs nextDose  stop increment ## 1    25    0       50 FALSE       100 ## 2    25    1       50 FALSE       100 ## 3    25    2       25 FALSE         0 ## 4    25    3       NA FALSE        NA ## 5    50    0      100 FALSE       100 ## 6    50    1       75 FALSE        50 ## 7    50    2       50 FALSE         0 ## 8    50    3       25 FALSE       -50 ## 9   100    0      125 FALSE        25 ## 10  100    1      100 FALSE         0 ## 11  100    2       75 FALSE       -25 ## 12  100    3       50 FALSE       -50 ## 13  125    0      175 FALSE        40 ## 14  125    1      125 FALSE         0 ## 15  125    2      100 FALSE       -20 ## 16  125    3       75 FALSE       -40 ## 17  175    0      250 FALSE        43 ## 18  175    1      150 FALSE       -14 ## 19  175    2      125 FALSE       -29 ## 20  175    3      100 FALSE       -43 ## 21  250    0      300 FALSE        20 ## 22  250    1      225 FALSE       -10 ## 23  250    2      175 FALSE       -30 ## 24  250    3      150 FALSE       -40 myTruth <- probFunction(model, alpha0 = 4.5, alpha1 = 8) doseProbMatrix <- cbind(c(1, 2, 3, 4, 5), c(0.01, 0.02, 0.04, 0.06, 0.09)) myTruthMatrix <-   function(dose) {     doseProbMatrix[match(dose, doseProbMatrix[, 1]), 2]   } mySimsTime <-   system.time(mySims <- simulate(design,     truth = myTruth, nsim = 100,     seed = 819, mcmcOptions = options,     parallel = FALSE   ))[3] mySims@data[[3]]@nObs ## [1] 32 mySims@doses[3] ## [1] 25 simSum <- summary(mySims, truth = myTruth) simSum ## Summary of 100 simulations ##  ## Target toxicity interval was 20, 35 % ## Target dose interval corresponding to this was 47.9, 52.7  ## Intervals are corresponding to 10 and 90 % quantiles ##  ## Number of patients on placebo : mean 7 (6, 8)  ## Number of patients on active : mean 22 (18, 24)  ## Number of patients overall : mean 30 (24, 32)  ## Number of patients treated above target tox interval : mean 3 (0, 3)  ## Proportions of DLTs in the trials for patients on placebo : mean 0 % (0 %, 0 %)  ## Proportions of DLTs in the trials for patients on active : mean 28 % (21 %, 33 %)  ## Mean toxicity risks for the patients on active : mean 27 % (18 %, 33 %)  ## Doses selected as MTD : mean 46.5 (25, 50)  ## True toxicity at doses selected : mean 22 % (0 %, 26 %)  ## Proportion of trials selecting target MTD: 86 % ## Dose most often selected as MTD: 50  ## Observed toxicity rate at dose most often selected: 26 % ## Fitted toxicity rate at dose most often selected : mean 23 % (17 %, 30 %)  ## Stop reason triggered: ##  ≥ 30 patients dosed :  62 % ##  P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5 :  48 % ##  ≥ 9 patients dosed in 20 % dose range around NBD :  98 %"},{"path":"https://openpharma.github.io/crmPack/articles/crmPack-jss-paper.html","id":"dose-escalation-with-safety-and-efficacy","dir":"Articles","previous_headings":"Using crmPack","what":"Dose escalation with safety and efficacy","title":"Model-based Dose Escalation Designs in R with crmPack (JSS manuscript)","text":"section, dose escalation designs incorporating safety (binary DLT) efficacy endpoints (continuous response) introduced. Dual endpoint datasets implemented DualData class, illustrate addition efficacy data w previous dataset: endpoints can modelled jointly separately. joint modelling derived (Bekele Shen 2005), please see package vignette DualEndpoint class. following section describe separate modelling, proposed (Yeung et al. 2015). show dual endpoint design can help estimate optimal dose level represents best trade-safety efficacy. Methodology Briefly introducing methodology current notation, assume dose grid $\\cal{X}$ contains kk dose levels, logistic regression model @ x*=1x^{*}=1 used safety endpoint yy. continuous efficacy endpoint ww, linear log-log model can used, conditional y=0y=0 (DLT): E(w(x))=γ+δlog⁡{log⁡(x+c)}\\begin{equation}\\label{eq:loglog} E(w(x)) = \\gamma + \\delta \\log\\{\\log(x + c)\\} \\end{equation} w(x)∼N(E(w(x)),σ2)w(x) \\sim N(E(w(x)), \\sigma^2) c≥0c \\geq 0 constant. Usually default value c=0c=0 can used, case choose c=2c=2 allow placebo dose x=0.001x=0.001 close 0. safety efficacy models, prior expressed form imaginary pseudo data see (Yeung et al. 2015) details. Prior posterior modal estimates model parameters can obtained maximum likelihood estimates data set combining pseudo data observed data (Whitehead 2006). variance σ2\\sigma^{2} can fixed assigned inverse gamma prior distribution. Model classes ModelPseudo class contains model classes priors specified terms pseudo data, subclasses safety (ModelTox) efficacy (ModelEff). Coming back example study, pseudo data safety prior assumes 3 subjects treated lowest (25 mg) highest (300 mg) dose level, 1.05 1.8 DLTs observed two dose levels, respectively. corresponds prior means 0.35 0.6 DLT probabilities. implement model @ pseudo data prior follows: efficacy model can similarly specified argument Eff takes vector pseudo efficacy responses two fixed dose levels, assuming one subject treated dose levels. argument nu specifies Gamma prior distribution shape 1 rate 0.025 precision parameter pseudo efficacy responses. Decision making next dose gain function used quantify trade-efficacy safety, next dose maximize estimated gain modulo safety constraints. define gain expected efficacy response, convention DLT automatically lead zero efficacy response: G(x)=Prob(Y=0|x,θ)E(w(x))\\begin{equation} \\label{eq:gainfunction} G(x)=Prob(Y=0 | x, \\theta)E(w(x)) \\end{equation} Note gain function depends safety parameter vector θ\\theta efficacy parameters γ\\gamma δ\\delta, estimated posterior modal estimates using update method: crmPack can implement next best dose recommendation based maximizing gain function follows: prob_target_drt specifies maximum estimated DLT rate tolerated study prob_target_eot maximum estimated DLT rate tolerated end study. Implementing CRM trial rule ν\\nu can evaluated using NextBest obtain xN+1x_{N+1}, evaluating maximum increments rule τ\\tau using maxDose obtain tN+1t_{N+1}: plot next dose allocation contained doseRecGain$plot shown Figure @ref(fig:doseRecommendation). \\begin{figure} Dose recommendation plot dual endpoint design. red, blue green curves correspond (posterior modal) estimated curves safety, efficacy gain, respectively. vertical red line plot shows maximum possible dose tN+1=150t_{N+1} = 150 mg vertical violet line shows next dose xN+1=25x_{N+1} = 25 mg. circle, square triangle symbols mark estimated doses target toxicity (100 mg 35% DLT probability trial 75 mg 30% DLT probability end trial) estimated dose maximum gain, 25 mg. numbers can obtained doseRecGain list. Stopping rules addition simple stopping rule based maximum number patients trial, can use another one relating precision dose optimum gain: stops trial 30 patients reached, ratio upper lower confidence interval bounds around dose recommendation less  5. Simulations simulate operating characteristics, first design built: Note additional slot efficacy model included design class. can specify scenario simulation, defining true DLT efficacy curves using: Please note parameter names phi1, phi2, theta1 theta2 correspond α0,α1,γ\\alpha_0, \\alpha_1, \\gamma δ\\delta, respectively. Simulations produced simulate function: Note fixed precision nu 1/σ21/\\sigma^{2} specified instead variance σ2\\sigma^{2}. % results simulation can plotted summarized shown .","code":"data2 <- DataDual(   x = data@x, y = data@y, placebo = TRUE,   w = c(     0.02, 0.42, 0.59, 0.45, 0.03, 0.7, 0.6, 0.52,     0.01, 0.71, 0.54, 0.45   ), cohort = data@cohort,   doseGrid = data@doseGrid, ID = data@ID ) DLTmodel <- LogisticIndepBeta(   binDLE = c(1.05, 1.8), DLEweights = c(3, 3),   DLEdose = c(25, 300), data = emptydata ) emptydata2 <- DataDual(doseGrid = emptydata@doseGrid, placebo = TRUE) Effmodel <- Effloglog(   eff = c(1.223, 2.513), eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025), data = emptydata2, c = 2 ) newDLTmodel <- update(object = DLTmodel, data = data2) newEffmodel <- update(object = Effmodel, data = data2) GainNextBest <- NextBestMaxGain(   prob_target_drt = 0.35,   prob_target_eot = 0.3 ) (nextMaxDose <- maxDose(myIncrements, data2)) ## [1] 150 doseRecGain <- nextBest(GainNextBest,   doselimit = nextMaxDose,   model = newDLTmodel, model_eff = newEffmodel,   data = data2 ) (nextDoseVal <- doseRecGain$next_dose) ## [1] 25 myStopping4 <- StoppingMaxGainCIRatio(   target_ratio = 5,   prob_target = GainNextBest@prob_target_eot ) myStoppingDual <- myStopping1 | myStopping4 design2 <- DualResponsesDesign(   nextBest = GainNextBest, model = DLTmodel,   eff_model = Effmodel, data = emptydata2,   stopping = myStoppingDual,   increments = myIncrements,   cohort_size = mySize, startingDose = 25 ) myTruthDLT <- probFunction(DLTmodel, phi1 = -53, phi2 = 10) myTruthEff <- efficacyFunction(Effmodel, theta1 = -4.8, theta2 = 3.7) myTruthGain <- function(dose) {   myTruthEff(dose) * (1 - myTruthDLT(dose)) } Sim1 <- simulate(   object = design2, args = NULL, trueDLE = myTruthDLT,   trueEff = myTruthEff, trueNu = 1 / 0.025, nsim = 20,   seed = 819, parallel = FALSE )"},{"path":"https://openpharma.github.io/crmPack/articles/crmPack-jss-paper.html","id":"extending-crmpack-functionality","dir":"Articles","previous_headings":"Using crmPack","what":"Extending crmPack functionality","title":"Model-based Dose Escalation Designs in R with crmPack (JSS manuscript)","text":"One big advantages crmPack existing R implementations flexible framework based S4 classes methods system (Chambers 2008) JAGS (Plummer 2003) Bayesian computations. therefore illustrate users can extend existing functionality easily specific needs study. Objective example implement version one-parameter CRM (O’Quigley, Pepe, Fisher 1990), currently (yet) included package. based one-parameter power model describe relationship binary DLT responses YY corresponding dose levels xx: π(x,θ)=Prob(Y=1|x,θ)=f(x)θ\\begin{equation} \\label{eq:oneparameter} \\pi(x, \\theta) = Prob(Y=1 | x, \\theta) = f(x)^{\\theta} \\end{equation} 0<f(x)<10 < f(x) < 1 monotonically increasing xx specified investigator upfront. sequence f(x1),…,f(xk)f(x_{1}), \\dotsc, f(x_{k}) along dose grid often called ``skeleton’’ CRM. exponential distribution parameter λ\\lambda imposed prior distribution unknown parameter θ\\theta. next dose chosen distance posterior mean estimated DLT probability predefined target toxicity level minimized. Creating new model implement one-parameter model @ crmPack first need define appropriate S4 class inheriting general model class GeneralModel: specify new class called OneParExp contains three additional slots containing resulting skeleton prior probabilities, dose grid, prior parameter λ\\lambda. Second create convenient initialization function, specifies likelihood prior distributions underlying GeneralModel JAGS. choose let user supply just skeleton probabilities along intended dose grid use. likelihood power model specified datamodel uses Data slots specified datanames. prior defined priormodel. Model parameters passed JAGS via modelspecs. init slot contains function giving starting values MCMC sampler, sample defines parameter samples returned: Finally, create dose prob methods. prob method based (skeleton) function interpolation dose grid points order obtain probability DLT. dose, hand, uses inverse (skeleton) function π−1(p,θ)=f−1(p1/θ)\\begin{equation} \\label{eq:oneparameterInverse} \\pi^{-1}(p, \\theta) = f^{-1}(p^{1/\\theta}) \\end{equation} maps probability pp dose xx. Now can already use model, example following specify skeleton probabilities via dose grid use standard exponential prior θ\\theta. resulting posterior fit can plotted usual, see Figure @ref(fig:OneParExp-model-example). Model fit one parameter power model Creating new dose recommendation rule second step like create new dose recommendation rule, proposes dose estimated DLT probability closest target. start class, now inheriting NextBest: Note keep convention separate class definition initialization function, although technical need case. order make usable need define NextBest method new rule. Note specialize method first argument, rule also used models. method definition, can use fit function order obtain estimated DLT rates. need return list method, since required generic function definition. advantage also include plot supporting information return value. Immediately can now use rule order obtain next dose recommendation, e.g., specifying target dose 30%: using CRM, escalate 150 mg, instead just 100 mg . Using new functionality necessary additions code needed implement one-parameter CRM greedy next best dose rule - now can use new classes way classes already contained crmPack! example, can create corresponding new Design object, examine hypothetical trial course run simulations. particular, placebo convention automatically carries .","code":".OneParExp <- setClass(   Class = \"OneParExp\",   contains = \"GeneralModel\",   slots = c(     skeleton_probs = \"numeric\",     dose_grid = \"numeric\",     lambda = \"numeric\"   ) ) OneParExp <- function(skeleton_probs, dose_grid, lambda) {   .OneParExp(     skeleton_probs = skeleton_probs,     dose_grid = dose_grid,     lambda = lambda,     datamodel = function() {       for (i in 1:nObs) {         y[i] ~ dbern(p[i])         p[i] <- skeleton_probs[xLevel[i]]^theta       }     },     priormodel = function() {       theta ~ dexp(lambda)     },     modelspecs = function() {       list(skeleton_probs = skeleton_probs, lambda = lambda)     },     init = function() {       list(theta = 1)     }, sample = \"theta\",     datanames = c(\"nObs\", \"y\", \"xLevel\")   ) } setMethod(   f = \"dose\",   signature = signature(     x = \"numeric\",     model = \"OneParExp\",     samples = \"Samples\"   ),   definition = function(x, model, samples) {     theta <- samples@data$theta     invSkeletonFun <- approxfun(x = model@skeleton_probs, y = model@dose_grid, rule = 1)     invSkeletonFun(x^(1 / theta))   } )  setMethod(   f = \"prob\",   signature = signature(     dose = \"numeric\",     model = \"OneParExp\",     samples = \"Samples\"   ),   definition = function(dose, model, samples) {     theta <- samples@data$theta     skeletonFun <- approxfun(x = model@dose_grid, y = model@skeleton_probs, rule = 2)     skeletonFun(dose)^theta   } ) (skeleton_probs <- round(data@doseGrid / max(data@doseGrid) / 2, 2)) ##  [1] 0.00 0.04 0.08 0.12 0.17 0.21 0.25 0.29 0.33 0.38 0.42 0.46 0.50 newModel <- OneParExp(   skeleton_probs = skeleton_probs,   dose_grid = data@doseGrid,   lambda = 1 ) newSamples <- mcmc(data, newModel, options) plot(newSamples, newModel, data) .NextBestMinDist <- setClass(   Class = \"NextBestMinDist\",   contains = \"NextBest\",   representation(target = \"numeric\") ) NextBestMinDist <- function(target) {   .NextBestMinDist(target = target) } setMethod(   \"nextBest\",   signature = signature(     nextBest = \"NextBestMinDist\",     doselimit = \"numeric\",     samples = \"Samples\",     model = \"OneParExp\",     data = \"Data\"   ),   def = function(nextBest, doselimit, samples, model, data, ...) {     dosesOK <-       if (length(doselimit)) {         which(data@doseGrid <= doselimit)       } else {         seq_along(data@doseGrid)       }     modelfit <- fit(samples, model, data)     probDLT <- modelfit$middle[dosesOK]     doses <- modelfit$dose[dosesOK]     bestIndex <- which.min(abs(probDLT - nextBest@target))     bestDose <- doses[bestIndex]     return(list(value = bestDose))   } ) newMyNextBest <- NextBestMinDist(target = 0.3) newNextDoseVal <- nextBest(newMyNextBest, nextMaxDose, newSamples, newModel, data)$value newNextDoseVal ## [1] 150"},{"path":"https://openpharma.github.io/crmPack/articles/crmPack-jss-paper.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Model-based Dose Escalation Designs in R with crmPack (JSS manuscript)","text":"paper introduced R package crmPack analyzing evaluating dose escalation trials. Unlike existing software package written make full use class structure enabling easy extensions user-specific dose-response models, prior distributions, escalation stopping rules. example Extending crmPack functionality demonstrated : New functionality can added - without changing package. new functionality needs coded one place - side effects need considered. Templates new designs can found looking existing code package - minimal S4 JAGS knowledge required. Therefore, crmPack allows user easily extend package keeping modifications local limited needs changed, experience key success factor wider use model-based dose escalation designs. package , however, already include wide range model-based algorithmic dose escalation procedures, described package’s documentation available crmPackHelp() provide end-users easy access approaches without need coding. Another unique feature package inclusion approaches allow placebo data, routinely collected healthy volunteer studies, utilized. Finally methods [e.g.,](Bekele Shen 2005)(Yeung et al. 2015) dose-finding incorporating safety efficacy implemented already package. designs, underlying structure extend novel dual endpoint methods provided. Simulation facilities approaches relevant graphical displays also available. package actively developed new methods added. Future extensions crmPack include model-based combination dose escalation designs, see example (M. J. Sweeting Mander 2012) [Riviere et al. (2014) recent reviews. Furthermore, data-augmentation CRM designs [see](Liu Ning 2013) allow decoupling inter-cohort waiting times DLT time windows, hence speeding dose escalation trials, included.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/crmPack-jss-paper.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"Model-based Dose Escalation Designs in R with crmPack (JSS manuscript)","text":"like thank Francesca Michielin Peter Dutton valuable comments earlier draft manuscript. report funded Roche Postdoctoral Fellowship programme (RPF-234) research arising Prof Jaki’s Senior Research Fellowship (NIHR-SRF-2015-08-001) supported National Institute Health Research. views expressed publication authors necessarily NHS, National Institute Health Research Department Health. manuscript prepared using knitr (Xie 2018).","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"crmPack: Object-oriented implementation of CRM designs","text":"Many models crmPack rely JAGS (please click link going webpage project) internal MCMC computations. WinBUGS required supported anymore.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"crmPack: Object-oriented implementation of CRM designs","text":"able run anything, load package browsing help pages package, easiest start web browser interface gives list help pages available package. whole R-package built modular form, using S4 classes methods. Please look help page “Methods” read introduction S4 object framework R, typing ?Methods R console. next sections therefore go one one important building blocks (S4 classes corresponding methods) CRM designs crmPack.","code":"library(crmPack) library(data.tree) crmPackHelp()"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"crmPack: Object-oriented implementation of CRM designs","text":"Data classes structure three data classes package. parent class GeneralData class. Data class inheriting GeneralData class DataDual class inheriting Data class. Inheritance means subclass slots (attributes) parent class, can also additional slots. Methods work parent class also work way subclass, unless specialized method subclass defined. First, set data set. beginning trial, observations available. can define empty data set, example: R-package crmPack uses S4 class system implementation dose-escalation designs. convention class initialization functions name class, class names capitalized. Note order create Data object, use initialization function name, give parameters contents object constructed. least doseGrid parameter, contains possible dose levels potentially used trial, must specified call Data() initialization function. middle trial like recommend next dose, data previous patients input model. data can also captured Data object. example: important x (doses) y (DLTs, 0 DLT 1 DLT), using dose grid doseGrid . computations using dose grid specified Data object. example, except patient number 7, patients free DLTs. , can find details help page Data-class. Note received warning , specify patient IDs – however, automatic ones just indexing patients created : can get visual summary data applying plot object:  Note plot calls vignette, can leave away wrapping print function call working interactively R. knitr production vignette print statement needed.","code":"df <- data.frame(   pathString = c(     \"GeneralData/Data/DataDual\"   ) )  tree <- as.Node(df) SetNodeStyle(tree, shape = \"box\") plot(tree) emptydata <- Data(   doseGrid =     c(       0.1, 0.5, 1.5, 3, 6,       seq(from = 10, to = 80, by = 2)     ) ) data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid =     c(       0.1, 0.5, 1.5, 3, 6,       seq(from = 10, to = 80, by = 2)     ) ) ## Used default patient IDs! data@ID ## [1] 1 2 3 4 5 6 7 8 print(plot(data))"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"structure-of-the-model-class","dir":"Articles","previous_headings":"","what":"Structure of the model class","title":"crmPack: Object-oriented implementation of CRM designs","text":"Figure @ref(fig:model-classes) shows structure model class defined package. AllModels class parent class model classes inherit. two sub-classes: First, GeneralModel class models inherit using JAGS specify model prior distribution estimated MCMC later . , second subclass ModelPseudo class prior models specified terms pseudo data standard maximum likelihood routines R used computational purposes. models included package parent class either GeneralModel ModelPseudo classes. two classes ModelPseudo ModelTox class include DLT (occurrence dose-limiting toxicity) class models, class ModelEff includes efficacy class models. Model classes structure","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"logistic-model-with-bivariate-log-normal-prior","dir":"Articles","previous_headings":"Model setup","what":"Logistic model with bivariate (log) normal prior","title":"crmPack: Object-oriented implementation of CRM designs","text":"First, show example setting model inheriting model GeneralModel classes, logistic normal model. can click corresponding help page LogisticLogNormal-class background information next steps. following command, create new model class LogisticLogNormal, certain mean covariance prior parameters reference dose: can query class object belongs class function: can look detail structure model follows: see object 9 slots, names. can accessed @ operator (similarly lists $ operator), example can extract ref_dose slot: can find slots, looking help page Model-class help browser, univariate models JAGS specification just special cases (subclasses) model class. Model-class help page, also find four additional specific model classes sub-classes model class, namely LogisticLogNormalSub, LogisticNormal, LogisticKadane DualEndpoint. Next, show example setting model ModelPseudo class, LogisticIndepBeta model. specifically, also model ModelTox class. LogisticIndepBeta model two-parameter logistic regression model describe relationship probability occurrence DLT corresponding log dose levels. model parameters φ1, intercept φ 2, slope. also model prior expressed form pseudo data. important data set defined defining models ModelPseudo class. ensure obtained updated estimates model parameters using currently available observations. Either empty data set data set contains currently available observations needed. Therefore, let’s assume empty data set set . example, use 12 dose levels 25 300 mg increments 25 mg. : express prior form pseudo data. idea follows. First fix two dose level d(−1)d_{(-1)} d(0)d_{(0)}, usually lowest highest dose level, choose 25 300 mg. elicit experts clinicians probability occurrence DLT, p(−1)p_{(-1)} p(0)p_{(0)} two dose levels. , assuming n(l)n_{(l)} subjects treated two dose levels, l=−1,0l=-1,0, t(l)t_{(l)} n(l)n{(l)} subjects expected observed DLT p(l)=t(l)/n(l)p_{(l)} = t_{(l)}/n_{(l)}. Let p̃(l)\\tilde{p}_{(l)} probability occurrence DLT dose ll dose l=−1,0l=-1,0. p̃(l)\\tilde{p}_{(l)} follow independent Beta distributions joint probability density function p(l)p_{(l)} can obtained. Therefore, model called LogisticIndepBeta. expressed prior data (pseudo data) trial start. prior modal estimates φ1 φ2, also equivalent maximum likelihood estimators, can obtained R function glm. Please refer (Whitehead Williamson 1998) details form prior posterior density model parameters φ1 φ2. following commands, create model class LogisticIndepBeta, prior specified form pseudo data. (Note functions including initialization function, DLE instead DLT used. vignette use unified abbreviation DLT throughout text variable names.) model specified, fixed two dose levels (25 300 mg) represented DLEdose slot. assume 3 subjects treated dose levels, represented DLEweights slot. 1.05 subjects 3 subjects treated 25 mg observed DLT 1.8 subjects 3 subjects treated 300 mg observed DLT represented binDLE slot. Input Data slot also need ensure currently available observations incorporated model obtain updated modal estimates model parameters. empty data set used Data slot, prior modal estimates model parameters, φ1 intercept φ2 slope, can obtained. data set observations, e.g data1 DLTmodel used, can obtain posterior modal estimates model parameters. addition, pseudo data can expressed using 2 dose levels. hand, least two dose levels pseudo information needed obtain modal estimates intercept slope parameter. Therefore, binDLE,DLEweights, DLEdose must vectors least length 2 corresponding values specified position two vectors. Since imaginary nature pseudo data, value tlt_l number subjects observed DLT can non-integer values. principle, nln_l can also non-integer values. can look structure model: total 10 slots names given. Remember can accessed @ operator (similarly lists $ operator), example can extract phi1 slot: gives updated modal estimate intercept parameter φ1. Please find slots using @ operator looking help page ModelPseudo, ModelTox LogisticIndepBeta classes.","code":"model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov =     matrix(c(1, -0.5, -0.5, 1),       nrow = 2     ),   ref_dose = 56 ) class(model) ## [1] \"LogisticLogNormal\" ## attr(,\"package\") ## [1] \"crmPack\" str(model) ## Formal class 'LogisticLogNormal' [package \"crmPack\"] with 9 slots ##   ..@ params         :Formal class 'ModelParamsNormal' [package \"crmPack\"] with 3 slots ##   .. .. ..@ mean: num [1:2] -0.85 1 ##   .. .. ..@ cov : num [1:2, 1:2] 1 -0.5 -0.5 1 ##   .. .. ..@ prec: num [1:2, 1:2] 1.333 0.667 0.667 1.333 ##   ..@ ref_dose       :Formal class 'positive_number' [package \"crmPack\"] with 1 slot ##   .. .. ..@ .Data: num 56 ##   ..@ datamodel      :function ()   ##   ..@ priormodel     :function ()   ##   ..@ modelspecs     :function (from_prior)   ##   ..@ init           :function ()   ##   ..@ datanames      : chr [1:3] \"nObs\" \"y\" \"x\" ##   ..@ datanames_prior: chr(0)  ##   ..@ sample         : chr [1:2] \"alpha0\" \"alpha1\" model@ref_dose ## An object of class \"positive_number\" ## [1] 56 emptydata <- Data(   doseGrid =     seq(from = 25, to = 300, by = 25) ) data1 <- emptydata DLTmodel <- LogisticIndepBeta(   binDLE = c(1.05, 1.8), DLEweights = c(3, 3),   DLEdose = c(25, 300), data = data1 ) str(DLTmodel) ## Formal class 'LogisticIndepBeta' [package \"crmPack\"] with 7 slots ##   ..@ binDLE    : num [1:2] 1.05 1.8 ##   ..@ DLEdose   : num [1:2] 25 300 ##   ..@ DLEweights: int [1:2] 3 3 ##   ..@ phi1      : num -1.95 ##   ..@ phi2      : num 0.412 ##   ..@ Pcov      : num [1:2, 1:2] 10.05 -2.077 -2.077 0.462 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : chr [1:2] \"(Intercept)\" \"log(x)\" ##   .. .. ..$ : chr [1:2] \"(Intercept)\" \"log(x)\" ##   ..@ data      :Formal class 'Data' [package \"crmPack\"] with 9 slots ##   .. .. ..@ x       : num(0)  ##   .. .. ..@ y       : int(0)  ##   .. .. ..@ doseGrid: num [1:12] 25 50 75 100 125 150 175 200 225 250 ... ##   .. .. ..@ nGrid   : int 12 ##   .. .. ..@ xLevel  : int(0)  ##   .. .. ..@ placebo : logi FALSE ##   .. .. ..@ ID      : int(0)  ##   .. .. ..@ cohort  : int(0)  ##   .. .. ..@ nObs    : int 0 DLTmodel@phi1 ## [1] -1.946152"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"advanced-model-specification","dir":"Articles","previous_headings":"Model setup","what":"Advanced model specification","title":"crmPack: Object-oriented implementation of CRM designs","text":", advanced ways specify model object crmPack. First, minimal informative prior (Neuenschwander, Branson, Gsponer 2008) can computed using MinimalInformative function. construction based input minimal maximal dose, certain ranges DLT probabilities deemed unlikely. logistic function fitted corresponding points dose-toxicity plane order derive Beta distributions also doses -. Finally Beta distributions approximated common LogisticNormal (LogisticLogNormal) model. minimal informative construction avoids explicit specification prior parameters logistic regression model. example, construct follows, assuming minimal dose 0.1 mg maximum dose 100 mg: use grid points minimum maximum guide approximation routine, based stochastic optimization method (control argument optimization routine, please see help page Quantiles2LogisticNormal details). Therefore need set random number generator seed beforehand able reproduce results future. Please note currently reproducibility testing– currently advised save approximation result order certainly able use model later . threshmin threshmax values specify probability thresholds , respectively, unlikely (5% probability) true probability DLT minimum maximum dose, respectively. result minInfModel list, can use contents illustrate creation prior:  plot see blue quantiles (2.5%, 50%, 97.5%) Beta distributions approximate red quantiles logistic normal model. see distance still quite large, maximum distance red blue point : Therefore usually let computations take longer (removing control option MinimalInformative call) obtain better approximation. final approximating model, produced red points, contained model list element: see slots mean, cov parameters determined. point slight warning: directly change parameters slots existing model object, parameters also saved invisibly places model object. Therefore, always use class initialization function create new model object, new parameters required. want use approximation model, can save shorter name, e.g.:","code":"coarseGrid <- c(0.1, 10, 30, 60, 100) minInfModel <- MinimalInformative(   dosegrid = coarseGrid,   refDose = 50,   threshmin = 0.2,   threshmax = 0.3,   control =     list(       threshold.stop = 0.03,       maxit = 200     ),   seed = 432 ) ## It: 1, obj value (lsEnd): 0.4445658383 indTrace: 1 ## It: 4, obj value (lsEnd): 0.3926716567 indTrace: 4 ## It: 23, obj value (lsEnd): 0.1205177306 indTrace: 23 ## Emini is: 0.1205177306 ## xmini are: ## 1.149417785 1.182441052 1.97337573 0.3758820995 0.3619198625  ## Totally it used 19.88962 secs ## No. of function call is: 4807 ## Algorithm reached max number of iterations. matplot(   x = coarseGrid,   y = minInfModel$required,   type = \"b\", pch = 19, col = \"blue\", lty = 1,   xlab = \"dose\",   ylab = \"prior probability of DLT\" ) matlines(   x = coarseGrid,   y = minInfModel$quantiles,   type = \"b\", pch = 19, col = \"red\", lty = 1 ) legend(\"right\",   legend = c(\"quantiles\", \"approximation\"),   col = c(\"blue\", \"red\"),   lty = 1,   bty = \"n\" ) minInfModel$distance ## [1] 0.1205177 str(minInfModel$model) ## Formal class 'LogisticNormal' [package \"crmPack\"] with 9 slots ##   ..@ params         :Formal class 'ModelParamsNormal' [package \"crmPack\"] with 3 slots ##   .. .. ..@ mean: Named num [1:2] 1.15 1.18 ##   .. .. .. ..- attr(*, \"names\")= chr [1:2] \"meanAlpha.(Intercept)\" \"meanBeta.I(log(dosegrid/refDose))\" ##   .. .. ..@ cov : num [1:2, 1:2] 3.894 0.268 0.268 0.141 ##   .. .. ..@ prec: num [1:2, 1:2] 0.295 -0.561 -0.561 8.145 ##   ..@ ref_dose       :Formal class 'positive_number' [package \"crmPack\"] with 1 slot ##   .. .. ..@ .Data: num 50 ##   ..@ datamodel      :function ()   ##   ..@ priormodel     :function ()   ##   ..@ modelspecs     :function (from_prior)   ##   ..@ init           :function ()   ##   ..@ datanames      : chr [1:3] \"nObs\" \"y\" \"x\" ##   ..@ datanames_prior: chr(0)  ##   ..@ sample         : chr [1:2] \"alpha0\" \"alpha1\" myModel <- minInfModel$model"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"obtaining-the-posterior","dir":"Articles","previous_headings":"","what":"Obtaining the posterior","title":"crmPack: Object-oriented implementation of CRM designs","text":"said , models inheriting GeneralModel class rely MCMC sampling obtaining posterior distribution model parameters, given data. models, except EffFlexi class model (please refer Dual-endpoint dose escalation designs details), inheriting ModelPseudo class necessarily require MCMC sampling obtain posterior estimates. MCMC sampling involved, prior posterior modal estimates model estimates used. can still obtain full posterior distribution model parameters via MCMC models specified ModelPseudo class. MCMC sampling can controlled object class mcmcOptions, created example follows: Now object options specifies like 2000 parameter samples obtained Markov chain starts burn-phase 100 iterations discarded, save sample every 2 iterations. Note numbers low actual production use used illustrating purposes ; normally specify least default parameters initialization function mcmcOptions: 10000 burn-iterations 10000 samples saved every 2nd iteration. can look help browser link McmcOptions. set options, can proceed MCMC sampling calling mcmc function: mcmc function takes data object, model MCMC options. default, JAGS used obtaining samples. Use option verbose = TRUE show progress bar detailed JAGS messages. Finally, good practice check graphically Markov chain really converged posterior distribution. end, crmPack provides interface convenient R-package ggmcmc. function get can extract individual parameters object class Samples. example, extract α0\\alpha_{0} samples: (please look help page LogisticLogNormal model class interpretation parameters) alpha0samples now contains α0\\alpha_{0} samples format understood ggmcmc can produce plots , e.g. trace plot autocorrelation plot:   see autocorrelation samples, might consider using higher thinning parameter order decrease . can find useful plotting functions package information: Similarly, using models ModelPseudo class, can also obtain prior posterior samples model parameters via MCMC. example, using DLTmodel, data1, empty data set options specified earlier examples. prior samples model parameters now saved variable DLTsamples. Similarly, DLTpostsamples now contains posterior samples model parameters. %Since output message seen example display MCMC sampling observed data involved, suppressMessages function used now throughout document avoid showing message document mcmc function also takes data object, model MCMC options. using JAGS just R computations. DLTmodel, obtain samples φ1 φ2. Using described earlier section , can also look structure using function str, extracting model parameters samples get produce plots ggs_traceplot ggs_autocorrelation model parameters. MCMC sampling involved, posterior modal estimates model parameters can obtained models (except EffFlexi class object) inheriting ModelPseudo class object. First need put together currently available observations form Data object (DLT responses modelled) texttt{DataDual} object (DLT efficacy responses modelled) class object. using update function update model, posterior modal estimates model parameters display output model. example, new observations specified data set data3 update DLT model: example, update function used obtain posterior modal estimates model parameters, φ1 φ2, can extracted using operator updated result newDLTmodel.","code":"options <- McmcOptions(   burnin = 100,   step = 2,   samples = 2000 ) set.seed(94) samples <- mcmc(data, model, options) ## look at the structure of the samples object: str(samples) ## Formal class 'Samples' [package \"crmPack\"] with 2 slots ##   ..@ data   :List of 2 ##   .. ..$ alpha0: num [1:2000] 1.304 0.677 0.677 0.677 0.677 ... ##   .. ..$ alpha1: num [1:2000] 1.06 1.12 1.12 1.12 1.12 ... ##   ..@ options:Formal class 'McmcOptions' [package \"crmPack\"] with 5 slots ##   .. .. ..@ iterations: int 4100 ##   .. .. ..@ burnin    : int 100 ##   .. .. ..@ step      : int 2 ##   .. .. ..@ rng_kind  : chr NA ##   .. .. ..@ rng_seed  : int NA ## now extract the alpha0 samples (intercept of the regression model) alpha0samples <- get(samples, \"alpha0\") library(ggmcmc) ## Loading required package: dplyr ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union ## Loading required package: tidyr print(ggs_traceplot(alpha0samples)) print(ggs_autocorrelation(alpha0samples)) help(package = \"ggmcmc\", help_type = \"html\") DLTsamples <- mcmc(data = data1, model = DLTmodel, options = options) data3 <- Data(   x = c(25, 50, 50, 75, 100, 100, 225, 300),   y = c(0, 0, 0, 0, 1, 1, 1, 1),   ID = as.integer(1:8),   cohort = c(1, 2, 2, 3, 4, 4, 5, 6),   doseGrid = seq(from = 25, to = 300, by = 25) ) DLTpostsamples <- mcmc(data = data3, model = DLTmodel, options = options) newDLTmodel <- update(object = DLTmodel, data = data3) newDLTmodel@phi1 ## [1] -5.070681 newDLTmodel@phi2 ## [1] 1.125107"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"plotting-the-model-fit","dir":"Articles","previous_headings":"","what":"Plotting the model fit","title":"crmPack: Object-oriented implementation of CRM designs","text":"obtained parameter samples, can plot model fit, supplying samples, model data generic plot function:  plot shows posterior mean curve 95% equi-tailed credible intervals point dose grid Data object. Note can also produce plot prior mean curve credible intervals, .e. model without data. works principle way data, just use empty data object:  plot function can also apply DLTmodel samples parameters generated:  addition, can also plot fitted dose-response curve using prior posterior modal estimates model parameters MCMC sampling used. example, DLTmodel specified earlier ModelTox class data set data1 specified earlier:  Since samples involved, curve using prior posterior modal estimates parameters produced, without 95% credibility intervals.","code":"print(plot(samples, model, data)) ## provide only the dose grid: emptydata <- Data(doseGrid = data@doseGrid) ## obtain prior samples with this Data object priorsamples <- mcmc(emptydata, model, options) ## then produce the plot print(plot(priorsamples, model, emptydata)) print(plot(DLTsamples, DLTmodel, data1)) print(plot(data1, DLTmodel))"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"escalation-rules","dir":"Articles","previous_headings":"","what":"Escalation Rules","title":"crmPack: Object-oriented implementation of CRM designs","text":"dose escalation, four kinds rules: Increments: specifying maximum allowable increments doses NextBest: derive next best dose CohortSize: specifying cohort size Stopping: Stopping rules finishing dose escalation listed classes rules, multiple subclasses , can find links help pages Increments-class, NextBest-class, CohortSize-class Stopping-class.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"increments-rules","dir":"Articles","previous_headings":"Escalation Rules","what":"Increments rules","title":"crmPack: Object-oriented implementation of CRM designs","text":"Figure @ref(fig:increments) shows structure Increments classes: Increments classes structure Increments class basis maximum increments rule classes within package. three subclasses, IncrementsRelative, IncrementsRelativeParts IncrementsRelativeDLTs classes. Let us start looking detail increments rules. Currently two specific rules implemented: Maximum relative increments based current dose (IncrementsRelative IncrementsRelativeParts, works DataParts objects), maximum relative increments based current cumulative number DLTs happened (IncrementsRelativeDLT). example, order specify maximum increase 100% doses 20 mg, maximum 33% doses 20 mg, can setup following increments rule: intervals slot specifies left bounds intervals, maximum relative Increments (note: decimal values , percentages!) valid. increments rule used maxDose function obtain maximum allowable dose given current data: case, next dose larger 20 mg. following example dose escalation restricted 3-fold (= 200%) increase: doses (since dose grid starts 25 mg) maximum increase 200% . IncrementsRelativeDLT class works similarly, taking number DLTs whole trial far basis maximum increments instead last dose.","code":"myIncrements <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) ) nextMaxDose <- maxDose(myIncrements,   data = data ) nextMaxDose ## [1] 20 myIncrements1 <- IncrementsRelative(   intervals = c(25),   increments = c(2) )"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"rules-for-next-best-dose-recommendation","dir":"Articles","previous_headings":"Escalation Rules","what":"Rules for next best dose recommendation","title":"crmPack: Object-oriented implementation of CRM designs","text":"Figure @ref(fig:rules) show structure next best dose recommendation rules currently implemented crmPack. Escalation classes structure classes escalation rules contained nextBest class. two main types escalation rules: either binary DLT responses incorporated escalation process, binary DLT continuous efficacy/biomarker response jointly incorporated escalation process. two implemented rules toxicity endpoint CRMs inheriting GeneralModel class: NextBestMTD uses posterior distribution MTD estimate (given target toxicity probability defining MTD), nextBestCRM implements N-CRM, using posterior probabilities target-dosing overdosing dose grid points recommend next best dose. example, order use N-CRM target toxicity interval 20% 35%, maximum overdosing probability 25%, specify: Alternatively, use MTD driven recommendation rule. example, target toxicity rate 33%, recommending 25% posterior quantile MTD, specify Note NextBestMTD class quite flexible, can specify function derive derives next best dose posterior MTD samples. also two next best dose recommendation rules model inheriting ModelTox class. One rule specified samples model parameters involved one samples model parameters generated incorporated dose-escalation procedure. details rules follows. First, two probabilities occurrence DLT fixed. first one called targetDuringTrial target probability occurrence DLT used trial. second probability called targetEndOfTrial target probability occurrence DLT used end trial. two targets always specified. cases samples involved, additional argument used, function advise recommend using samples . elaborated details example . example, fixed target probability occurrence DLT used trial 0.35. means allow subjects dose levels probability DLT closest less equal 0.35 trial. end trial, therefore recommend dose level closest probability DLT less equal 0.3. NextBestTD rule class can used samples involved escalation procedure. Next show example NextBestTDsamples rule class samples involved escalation process. slot targetDuringTrial targetEndOfTrial specified way last example given value 0.35 0.3, respectively. derive slot always specified function. example, using function specified derive slot says recommend 30% posterior quantiles samples estimates doses corresponding targetDuringTrial targetEndOfTrial doses. study, order derive next best dose, supply generic nextBest function rule, maximum dose, posterior samples, model data: result list two elements: value contains numeric value recommended next best dose, plot contains plot illustrates next best dose computed. case used N-CRM rule, therefore plot gives target-dosing overdosing probabilities together safety bar 25%, maximum dose final recommendation (red triangle):  Similarly, can use generic nextBest function theNextBestTD NextBestTDsamples rules. example use data set data3 DLT observations. can compute next best dose given next cohort using posterior modal estimates DLT model (.e., MCMC sampling involved ): list numerical values plot showing next best dose computed given. list results provide numerical values next dose level, next_dose_drt; target probability DLT used trial, prob_target_drt; estimated dose level probability DLT equals target probability used trial, dose_target_drt; target probability DLT used end trial, prob_target_eot; estimated dose level probability DLT equals target probability DLT used end trial dose_target_eot; dose level dose grid closest less dose_target_eot, next_dose_eot. can use $ operator obtain values plot list. example,  can see next dose suggested given next cohort subjects 50 mg. target probability DLT trial 0.35 TD35 (tolerated dose probability DLT equal 0.35) estimated 52.28 mg. using 12 dose levels dose grids 25 mg 300 mg increments 25 mg data set, data3, can see suggested next dose 50 mg also dose level closest 52.28 mg, estimated dose_target_drt. Similarly, end trial also obtain “End Trial” estimates using $ operator. addition, also plot show next dose allocation. red curve shows estimated DLT curve obtained using posterior modal estimates model parameters. also assumed maximum allowable dose 300 mg specified doselimit parameter nextBest function call red vertical line denoted “Max” shows maximum dose level (x-axis) allowed case. vertical purple line denoted “Next” marks dose level allocated next cohort subjects. example, target probability DLT used trial end trial 0.35 0.3, respectively. circle square DLT curve show probability DLT estimated equal 0.3 0.35, respectively. Hence, value estimated TD30 TD35 can checked x-axis vertically symbols. MCMC sampling involved, use samples model parameters choose next best dose. example, following code chunk use data set, data3, DLT observations posterior samples model parameters, DLTpostsamples compute next best dose: list results produced example : values next_dose_drt, prob_target_drt, dose_target_drt, prob_target_eot, dose_target_eot next_dose_eot can obtained using $ operator. difference plot example look slightly different previous example:  graph incorrect plot, vertical lines given show value next dose, TD30 estimate, TD35 estimate maximum allowable dose level. Since samples model parameters utilized, density curves TD30 (pink) TD35 (grey) plotted.","code":"myNextBest <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 ) mtdNextBest <- NextBestMTD(   target = 0.33,   derive =     function(mtd_samples) {       quantile(mtd_samples, probs = 0.25)     } ) TDNextBest <- NextBestTD(   prob_target_drt = 0.35,   prob_target_eot = 0.3 ) TDsamplesNextBest <- NextBestTDsamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, probs = 0.3))   } ) doseRecommendation <- nextBest(myNextBest,   doselimit = nextMaxDose,   samples = samples, model = model, data = data ) doseRecommendation$value ## [1] 20 print(doseRecommendation$plot) doseRecDLT <- nextBest(TDNextBest, doselimit = 300, model = newDLTmodel, data = data3) doseRecDLT$next_dose_drt ## [1] 50 doseRecDLT$prob_target_drt ## [1] 0.35 doseRecDLT$dose_target_drt ## [1] 52.28128 print(doseRecDLT$plot) doseRecDLTSamples <- nextBest(TDsamplesNextBest,   doselimit = 300,   samples = DLTpostsamples, model = newDLTmodel,   data = data3 ) print(doseRecDLTSamples$plot) ## Warning: Some data points are outside of `bounds`. Removing them. ## Some data points are outside of `bounds`. Removing them."},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"cohort-size-rules","dir":"Articles","previous_headings":"Escalation Rules","what":"Cohort size rules","title":"crmPack: Object-oriented implementation of CRM designs","text":"CohortSize classes structure % classes related cohort size package contains within CohortSize class. Similarly increments rules, can define intervals dose space /DLT space define size cohorts. example, let’s assume want one patient cohorts reach 30 mg first DLT encountered, proceed three patients per cohort. start creating two separate rules, first dose range: DLT range: Finally combine two rules taking maximum number patients rules: CohortSize rule used size}` function, together next dose current data, order determine size next cohort: , one DLT already, go 3 patients next cohort. Moreover, like constant cohort size, can use following CohortSizeConst class, use (three patients) simplicity remainder vignette:","code":"df <- data.frame(   pathString = c(     \"CohortSize/CohortSizeRange\",     \"CohortSize/CohortSizeDLT\",     \"CohortSize/CohortSizeConst\",     \"CohortSize/CohortSizeParts\",     \"CohortSize/CohortSizeMax\",     \"CohortSize/CohortSizeMin\"   ) )  tree <- as.Node(df) SetNodeStyle(tree, shape = \"box\", fig.alt = \"A dendrogram showing the inheritance stricture of the CohortSize classes.  CohortSie is the parent class.  All other classes are children of CohortSize.\") plot(tree) mySize1 <- CohortSizeRange(intervals = c(0, 30), cohort_size = c(1, 3)) mySize2 <- CohortSizeDLT(intervals = c(0, 1), cohort_size = c(1, 3)) mySize <- maxSize(mySize1, mySize2) size(mySize,   dose = doseRecommendation$value,   data = data ) ## [1] 3 mySize <- CohortSizeConst(size = 3)"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"stopping-rules","dir":"Articles","previous_headings":"Escalation Rules","what":"Stopping rules","title":"crmPack: Object-oriented implementation of CRM designs","text":"stopping rules classes inherit directly Stopping class. total 9 stopping rules, listed follows: StoppingCohortNearDose StoppingPatientsNearDose StoppingMinCohorts StoppingMinPatients StoppingTargetProb StoppingMTDdistribution StoppingTargetBiomarker StoppingTDCIRatio StoppingMaxGainCIRatio names stopping rules, can idea criteria used stopping decisions explain briefly criteria. details please refer examples presented later vignette examples given help pages. can find link implemented stopping rule parts help page Stopping-class. example, StoppingCohortNearDose class objects can used stop dose escalation based numbers cohorts treated near next best dose (required proximity given percentage relative deviation next best dose). Similarly, StoppingPatientsNearDose, stopping based number patients treated near next best dose. StoppingMinCohorts StoppingMinPatients rules can used stop dose escalation minimum overall number patients cohorts enrolled. also stopping rules trial stopped either based MTD distribution (StoppingMTDdistribution), reached pre-specified probability next dose target toxicity interval (StoppingTargetProb) target biomarker interval (StoppingTargetBiomarker) current estimate quantity interest ‘accurate’ enough (StoppingTDCIRatio StoppingMaxGainCIRatio) Stopping rules often quite complex, built “/” combinations multiple parts. Therefore crmPack implementation mirrors , multiple atomic stopping rules can combined easily. example, let’s assume like stop trial least 3 cohorts least 50% probability target toxicity interval (20(20%, 35%), maximum sample size 20 patients reached. start creating three pieces rule composed : Finally combine operator & operator |: can also stop trial current estimate quantity interest, TD30 given earlier examples, ‘accurate’ enough. accuracy current estimate TD30 quantified width associated 95% credibility interval. wider interval, less accurate estimate . particular, ratio upper lower limit 95% credibility interval used. smaller ratio, accurate estimate. example, stop trial obtain ratio less 5 95% credibility interval TD30 estimate case, deciding obtained estimate ‘accurate’ enough. StoppingTDCIRatio function can used cases DLT samples DLT samples involved: two examples, targetRatio targetEndOfTrial specified. dose escalation study, (atomic combined) stopping rule can used function stopTrial determine rule already fulfilled. example case: receive FALSE, means stopping rule criteria met. attribute message contains textual results atomic parts stopping rule. can read probability target toxicity just 30% recommended dose 20 mg therefore low, also maximum sample size reached, therefore trial shall continue. way stopping rule myStopping4 (samples samples) can evaluated: DLT samples DLT samples involved. Note moment operator & operator | used together StoppingTDCIRatio class objects. still development.","code":"myStopping1 <- StoppingMinCohorts(nCohorts = 3) myStopping2 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) myStopping3 <- StoppingMinPatients(nPatients = 20) myStopping <- (myStopping1 & myStopping2) | myStopping3 myStopping4 <- StoppingTDCIRatio(target_ratio = 5, prob_target = 0.3) stopTrial(   stopping = myStopping, dose = doseRecommendation$value,   samples = samples, model = model, data = data ) ## [1] FALSE ## attr(,\"message\") ## attr(,\"message\")[[1]] ## attr(,\"message\")[[1]][[1]] ## [1] \"Number of cohorts is 6 and thus reached the prespecified minimum number 3\" ##  ## attr(,\"message\")[[1]][[2]] ## [1] \"Probability for target toxicity is 36 % for dose 20 and thus below the required 50 %\" ##  ##  ## attr(,\"message\")[[2]] ## [1] \"Number of patients is 8 and thus below the prespecified minimum number 20\" ##  ## attr(,\"individual\") ## attr(,\"individual\")[[1]] ## [1] FALSE ## attr(,\"message\") ## attr(,\"message\")[[1]] ## [1] \"Number of cohorts is 6 and thus reached the prespecified minimum number 3\" ##  ## attr(,\"message\")[[2]] ## [1] \"Probability for target toxicity is 36 % for dose 20 and thus below the required 50 %\" ##  ## attr(,\"individual\") ## attr(,\"individual\")[[1]] ## [1] TRUE ## attr(,\"message\") ## [1] \"Number of cohorts is 6 and thus reached the prespecified minimum number 3\" ## attr(,\"report_label\") ## [1] \"≥ 3 cohorts dosed\" ##  ## attr(,\"individual\")[[2]] ## [1] FALSE ## attr(,\"message\") ## [1] \"Probability for target toxicity is 36 % for dose 20 and thus below the required 50 %\" ## attr(,\"report_label\") ## [1] \"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5\" ##  ## attr(,\"report_label\") ## [1] NA ##  ## attr(,\"individual\")[[2]] ## [1] FALSE ## attr(,\"message\") ## [1] \"Number of patients is 8 and thus below the prespecified minimum number 20\" ## attr(,\"report_label\") ## [1] \"≥ 20 patients dosed\" ##  ## attr(,\"report_label\") ## [1] NA stopTrial(   stopping = myStopping4, dose = doseRecDLTSamples$next_dose_drt,   samples = DLTpostsamples, model = newDLTmodel, data = data3 ) ## [1] FALSE ## attr(,\"message\") ## [1] \"95% CI is (0.000611274483577912, 10459.134513363), Ratio = 17110373.1537 is greater than target_ratio = 5\" ## attr(,\"report_label\") ## [1] \"TD 5 for 0.3 target prob\" stopTrial(   stopping = myStopping4, dose = doseRecDLT$next_dose_drt,   model = newDLTmodel, data = data3 ) ## [1] FALSE ## attr(,\"message\") ## [1] \"95% CI is ( 11.0662 , 164.618 ), Ratio = 14.8758 is  greater than target_ratio = 5\" ## attr(,\"report_label\") ## [1] \"TD 5 for 0.3 target prob\""},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"simulations","dir":"Articles","previous_headings":"","what":"Simulations","title":"crmPack: Object-oriented implementation of CRM designs","text":"order run simulations, first build specific design, comprises model, escalation rules, starting data, cohort size starting dose. Design classes structure might seem strange first sight supply starting data design, show makes sense. First, use emptydata object contains dose grid, cohorts 3 patients, starting 0.1 mg: Another example given TDDesign class used. empty data set, data1 used, starting dose 25 mg. code design defined MCMC sampling involved. nextBest slot TDDesign class function defined TDNextBest class object ensure pick next best dose using rules defined MCMC sampling involved. addition, define myStopping4 trial stop ratio 95% credibility interval limits current estimate TD30 (TDtargetEndOfTrial) less equal 5. addition, also use myIncrements1, mySize data1 defined earlier examples increments, cohort_size data slots defining TDDesign object: MCMC samples involved, also specify design ensure package run simulations using MCMC samples model parameters models specified ModelPseudo class object. example, TDsamplesDesign class object used TDsamplesNextBest class object nextBest slot ensure MCMC sampling involved design. also apply stopping rule myStopping4 myStopping3 trial stop either ratio 95% credibility interval limits current estimate TD30 (TDtargetEndOfTrial) less equal 5 (myStopping4) maximum 30 patients enrolled trial (myStopping3):","code":"design <- Design(   model = model,   nextBest = myNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   data = emptydata,   startingDose = 3 ) DLTdesign <- TDDesign(   model = DLTmodel,   nextBest = TDNextBest,   stopping = myStopping4,   increments = myIncrements1,   cohort_size = mySize,   data = data1,   startingDose = 25 ) DLTsamplesDesign <- TDsamplesDesign(   model = DLTmodel,   nextBest = TDsamplesNextBest,   stopping = (myStopping4 | myStopping3),   increments = myIncrements1,   cohort_size = mySize,   data = data1,   startingDose = 25 )"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"examining-single-trial-behavior","dir":"Articles","previous_headings":"Simulations","what":"Examining single trial behavior","title":"crmPack: Object-oriented implementation of CRM designs","text":"looking “many trials” operating characteristics, important look “single trial” operating characteristics dose escalation design. , crmPack provides function examine, generates data.frame showing beginning several hypothetical trial courses design. Assuming DLTs seen certain dose, consequences different number DLTs observed dose shown. current example Note important set seed, since minor changes might occur due sampling variations. However, mcmcOptions parameter chosen order minimize variation. default setting, used implicitly call, normally sufficient, checking (running function twice different seeds comparing results) important. resulting data frame gives dose cohort DLTs observed, number DLTs, resulting next dose recommendation, whether design stop, relative increment next dose compared current dose percentage. Note cohort size rules taken account examine. NA entries mean design stop without valid dose, since doses considered toxic observing number DLTs dose.","code":"set.seed(23) examine(design) ##    dose DLTs nextDose  stop increment ## 1     3    0      6.0 FALSE       100 ## 2     3    1      6.0 FALSE       100 ## 3     3    2      0.1 FALSE       -97 ## 4     3    3       NA FALSE        NA ## 5     6    0     12.0 FALSE       100 ## 6     6    1     12.0 FALSE       100 ## 7     6    2      3.0 FALSE       -50 ## 8     6    3      0.5 FALSE       -92 ## 9    12    0     24.0 FALSE       100 ## 10   12    1     24.0 FALSE       100 ## 11   12    2     14.0 FALSE        17 ## 12   12    3      6.0 FALSE       -50 ## 13   24    0     30.0 FALSE        25 ## 14   24    1     30.0 FALSE        25 ## 15   24    2     26.0 FALSE         8 ## 16   24    3     18.0 FALSE       -25 ## 17   30    0     38.0 FALSE        27 ## 18   30    1     38.0 FALSE        27 ## 19   30    2     34.0 FALSE        13 ## 20   30    3     26.0 FALSE       -13 ## 21   38    0     50.0 FALSE        32 ## 22   38    1     50.0 FALSE        32 ## 23   38    2     42.0 FALSE        11 ## 24   38    3     36.0 FALSE        -5 ## 25   50    0     58.0  TRUE        16 ## 26   50    1     54.0  TRUE         8 ## 27   50    2     50.0  TRUE         0 ## 28   50    3     44.0  TRUE       -12"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"simulating-from-a-true-scenario","dir":"Articles","previous_headings":"Simulations","what":"Simulating from a true scenario","title":"crmPack: Object-oriented implementation of CRM designs","text":"“many trials” operating characteristics, define true scenario, data arise. case, requires function computes probability DLT given dose. use specific case function contained model space:  similar way, can also simulate trials based true DLT scenario using TDDesign TDsamplesDesign. First, specified true DLT scenario  true DLT scenario used TDDesign TDsamplesDesign Now can proceed simulations. generate 100 trial outcomes illustration, actual study increased course least 500: wrapped call simulate system.time obtain required time simulations (93 seconds case). argument args contain additional arguments truth function, require therefore let default NULL. specify number simulations nsim random number generator seed seed. Note also pass MCMC options object, trial simulations MCMC routines used. Finally, argument parallel can used enable use processors computer running simulations parallel. can yield meaningful speedup, especially larger number simulations. (almost) always, result call object class, case Simulations: help page see class subclass GeneralSimulations class. looking help pages Simulations parent class GeneralSimulations, can find description slots mySims. particular, Data slot contains list produced Data objects simulated trials. Therefore, can plot course e.g. third simulated trial follows:  final dose trial stopping reason Furthermore, object, can apply two methods. First, can plot , .e. can apply plot method:  resulting plot shows top panel summary trial trajectories. bottom, proportions doses tried, averaged simulated trials, shown. Note can select plots changing type argument plot, default type =   c(\"trajectory\", \"dosesTried\"). Second, can summarize simulation results. supply true dose-toxicity function. take (myTruth) : Note sometimes observed toxicity rate dose often selected (20 mg) available, can happen patients actually treated dose simulations. (available.) illustrates MTD can selected based evidence data dose levels – advantage model-based dose-escalation designs. Now can also produce plot summary results, gives bit detail textual summary just seen:  top left panel shows distribution sample size across simulated trials. case trials 15 21 patients. top right panel shows distribution final MTD estimate / recommended dose across simulated trials. middle left panel shows distribution across simulations DLT proportions observed patients dosed. trials 20 30% patients DLTs. middle right panel shows distribution across simulations number patients treated target toxicity window (used default 20% 35%). Finally, bottom panel see comparison true dose-toxicity curve (black) estimated dose-toxicity curves, averaged (continuous red line) across trials 95% credible interval across trials. see steep true dose-toxicity curve recovered model fit. find e.g. top right plot distribution final selected doses small shows right x-axis window, can plot one add x-axis customization top: (see ggplot2 documentation information customizing plots)  examples given simulations using TDDesign TDsamplesDesign classes. illustration purpose, generate 10 trial outcomes. example MCMC sampling involved another example simulation MCMC sampling involved: meaning arguments defined explained simulate example Design class. % slots args specify additional arguments truth function, truth real DLT scenario simulate responses , nsim number simulations, seed, random generator seed parallel specify whether parallel computing used running simulations. Similarly, results individual simulations can obtained graphically using plot function. dose level recommendation dose levels closest final estimated TD30 (final estimates dose level probability DLT equals target end trial) overall results 100 trials two simulations can also plotted   show trial trajectories proportion doses level tried. simulation results can also summarized using summary function given truth: can also plot summary two simulations using plot function:  ","code":"## define the true function myTruth <- probFunction(model, alpha0 = 7, alpha1 = 8)  ## plot it in the range of the dose grid curve(myTruth(x), from = 0, to = 80, ylim = c(0, 1)) ## define the true function TrueDLT <- probFunction(DLTmodel, phi1 = -53.66584, phi2 = 10.50499)  ## plot it in the range of the dose grid curve(TrueDLT, from = 25, to = 300, ylim = c(0, 1)) time <- system.time(mySims <- simulate(design,   args = NULL,   truth = myTruth,   nsim = 100,   seed = 819,   mcmcOptions = options,   parallel = FALSE ))[3] time ## elapsed  ##  92.969 class(mySims) ## [1] \"Simulations\" ## attr(,\"package\") ## [1] \"crmPack\" help(\"Simulations-class\", help = \"html\") ## starting httpd help server ... done print(plot(mySims@data[[3]])) mySims@doses[3] ## [1] 22 mySims@stop_reasons[[3]] ## [[1]] ## [[1]][[1]] ## [1] \"Number of cohorts is 7 and thus reached the prespecified minimum number 3\" ##  ## [[1]][[2]] ## [1] \"Probability for target toxicity is 55 % for dose 22 and thus above the required 50 %\" ##  ##  ## [[2]] ## [1] \"Number of patients is 21 and thus reached the prespecified minimum number 20\" print(plot(mySims)) summary(mySims,   truth = myTruth ) ## Summary of 100 simulations ##  ## Target toxicity interval was 20, 35 % ## Target dose interval corresponding to this was 19.6, 21.6  ## Intervals are corresponding to 10 and 90 % quantiles ##  ## Number of patients overall : mean 19 (15, 21)  ## Number of patients treated above target tox interval : mean 7 (6, 9)  ## Proportions of DLTs in the trials : mean 27 % (22 %, 29 %)  ## Mean toxicity risks for the patients on active : mean 25 % (17 %, 35 %)  ## Doses selected as MTD : mean 20.4 (18, 24)  ## True toxicity at doses selected : mean 28 % (11 %, 56 %)  ## Proportion of trials selecting target MTD: 29 % ## Dose most often selected as MTD: 20  ## Observed toxicity rate at dose most often selected: 22 % ## Fitted toxicity rate at dose most often selected : mean 27 % (22 %, 30 %)  ## Stop reason triggered: ##  ≥ 3 cohorts dosed :  100 % ##  P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5 :  97 % ##  ≥ 20 patients dosed :  48 % simSum <- summary(mySims,   truth = myTruth ) print(plot(simSum)) dosePlot <- plot(simSum, type = \"doseSelected\") +   scale_x_continuous(breaks = 10:30, limits = c(10, 30)) ## Scale for x is already present. ## Adding another scale for x, which will replace the existing scale. print(dosePlot) DLTSim <- simulate(DLTdesign,   args = NULL,   truth = TrueDLT,   nsim = 10,   seed = 819,   parallel = FALSE ) DLTsampSim <- simulate(DLTsamplesDesign,   args = NULL,   truth = TrueDLT,   nsim = 10,   seed = 819,   mcmcOptions = options,   parallel = FALSE ) DLTSim@doses[3] ## [1] 100 DLTsampSim@doses[3] ## [1] 100 print(plot(DLTSim)) print(plot(DLTsampSim)) summary(DLTSim,   truth = TrueDLT ) ## Summary of 10 simulations ##  ## Target probability of DLE p(DLE) used at the end of a trial was 30 % ## The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  ## TDEOT at dose Grid was 150  ## Target p(DLE) used during a trial was 35 % ## The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  ## TDDT at dose Grid was 150  ## Number of patients overall : mean 16 (15, 18)  ## Number of patients treated above the target p(DLE) used at the end of a trial : mean 3 (3, 3)  ## Number of patients treated above the target p(DLE) used during a trial : mean 3 (3, 3)  ## Proportions of observed DLT in the trials : mean 21 % (20 %, 22 %)  ## Mean toxicity risks for the patients : mean 20 % (17 %, 21 %)  ## Doses selected as TDEOT : mean 100 (100, 100)  ## True toxicity at TDEOT : mean 1 % (1 %, 1 %)  ## Proportion of trials selecting the TDEOT: 0 % ## Proportion of trials selecting the TDDT: 0 % ## Dose most often selected as TDEOT: 100  ## Observed toxicity rate at dose most often selected: 6 % ## Fitted probabilities of DLE at dose most often selected : mean 24 % (24 %, 25 %)  ## The summary table of the final TDEOT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    117.3   120.1   123.8   122.0   123.8   123.8   ## The summary table of the final ratios of the TDEOT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    4.054   4.157   4.447   4.330   4.447   4.447   ## The summary table of the final TDDT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    137.5   140.7   144.4   142.5   144.4   144.4   ## The summary table of dose levels, the optimal dose ##  to recommend for subsequent study across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    117.3   120.1   123.8   122.0   123.8   123.8   ## The summary table of the final ratios of the optimal dose for stopping across ##                   all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    4.054   4.157   4.447   4.330   4.447   4.447   ##  ## Stop reason triggered: ##  TD 5 for 0.3 target prob :  100 % summary(DLTsampSim,   truth = TrueDLT ) ## Summary of 10 simulations ##  ## Target probability of DLE p(DLE) used at the end of a trial was 30 % ## The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  ## TDEOT at dose Grid was 150  ## Target p(DLE) used during a trial was 35 % ## The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  ## TDDT at dose Grid was 150  ## Number of patients overall : mean 21 (21, 21)  ## Number of patients treated above the target p(DLE) used at the end of a trial : mean 1 (0, 3)  ## Number of patients treated above the target p(DLE) used during a trial : mean 1 (0, 3)  ## Proportions of observed DLT in the trials : mean 10 % (5 %, 14 %)  ## Mean toxicity risks for the patients : mean 6 % (1 %, 10 %)  ## Doses selected as TDEOT : mean 100 (75, 125)  ## True toxicity at TDEOT : mean 2 % (0 %, 5 %)  ## Proportion of trials selecting the TDEOT: 0 % ## Proportion of trials selecting the TDDT: 0 % ## Dose most often selected as TDEOT: 100  ## Observed toxicity rate at dose most often selected: 6 % ## Fitted probabilities of DLE at dose most often selected : mean 22 % (18 %, 26 %)  ## The summary table of the final TDEOT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    97.28  100.35  115.37  114.40  125.23  135.76   ## The summary table of the final ratios of the TDEOT across all simulations ##       Min.   1st Qu.    Median      Mean   3rd Qu.      Max.   ##  1.000e+01 6.800e+01 4.079e+06 5.241e+11 1.917e+11 3.806e+12   ## The summary table of the final TDDT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    118.8   122.2   144.9   143.3   161.5   170.3   ## The summary table of dose levels, the optimal dose ##  to recommend for subsequent study across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    97.28  100.35  115.37  114.40  125.23  135.76   ## The summary table of the final ratios of the optimal dose for stopping across ##                   all simulations ##       Min.   1st Qu.    Median      Mean   3rd Qu.      Max.   ##  1.000e+01 6.800e+01 4.079e+06 5.241e+11 1.917e+11 3.806e+12   ##  ## Stop reason triggered: ##  TD 5 for 0.3 target prob :  0 % ##  ≥ 20 patients dosed :  100 % DLTsimSum <- summary(DLTSim,   truth = TrueDLT ) print(plot(DLTsimSum)) DLTsimsampSum <- summary(DLTsampSim,   truth = TrueDLT ) print(plot(DLTsimsampSum))"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"predicting-the-future-course-of-the-trial","dir":"Articles","previous_headings":"Simulations","what":"Predicting the future course of the trial","title":"crmPack: Object-oriented implementation of CRM designs","text":"simulating parameters current posterior distribution instead assumed true scenario, possible generate trial simulations posterior predictive distribution time point trial. means can predict future course trial, given current data. illustrating example, work follows. rationale simulate call now specify truth argument prob function assumed model. simulations, arguments internally given values contained data frame given simulate args argument. case, want supply posterior samples alpha0 alpha1 data frame. take 50 2000 posterior samples order reduce runtime example: Therefore, simulated trial come posterior sample estimated model, given data far. Furthermore make new Design object contains current data start , current recommended dose starting dose: Finally can execute simulations: now, exactly way operating characteristics simulations, can summarize resulting predictive simulations, example show predicted trajectories doses:  summary, need look characteristics involving true dose-toxicity function, case intending compare performance CRM relative truth: see e.g. estimated number patients overall 19, 11 current 8 patients expected needed finishing trial.","code":"postSamples <- as.data.frame(samples@data)[(1:20) * 50, ] postSamples ##          alpha0    alpha1 ## 50   -0.5893319 1.5148803 ## 100  -0.5894062 1.7080173 ## 150   0.4836103 0.5591337 ## 200  -0.7264578 1.6467568 ## 250  -0.5123825 0.3571798 ## 300  -0.8151136 0.4036031 ## 350  -0.7587212 0.8572049 ## 400  -0.1866261 0.9985219 ## 450  -0.3581816 1.0376375 ## 500   0.1989746 0.4024856 ## 550   0.9952213 1.7119799 ## 600   0.7149638 0.9554538 ## 650   0.9468779 0.9644271 ## 700  -0.7171210 0.6287595 ## 750   0.1418283 0.6868888 ## 800  -0.8325442 1.6002461 ## 850  -0.3413962 1.8867564 ## 900   0.3378514 0.8757160 ## 950  -0.6065664 0.9202608 ## 1000 -1.3313004 2.2566999 nowDesign <- Design(   model = model,   nextBest = myNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   ## use the current data:   data = data,   ## and the recommended dose as the starting dose:   startingDose = doseRecommendation$value ) time <- system.time(futureSims <- simulate(   ## supply the new design here   nowDesign,   ## the truth is the assumed prob function   truth = function(dose, alpha0, alpha1) {     samples <- Samples(       data = list(alpha0 = alpha0, alpha1 = alpha1),       options = McmcOptions(samples = 1)     )     prob(dose, model, samples)   },   ## further arguments are the   ## posterior samples   args = postSamples,   ## do exactly so many simulations as   ## we have samples   nsim = nrow(postSamples),   seed = 918,   ## this remains the same:   mcmcOptions = options,   parallel = FALSE ))[3] time ## elapsed  ##   9.915 print(plot(futureSims)) summary(futureSims,   truth = myTruth ) ## Summary of 20 simulations ##  ## Target toxicity interval was 20, 35 % ## Target dose interval corresponding to this was 19.6, 21.6  ## Intervals are corresponding to 10 and 90 % quantiles ##  ## Number of patients overall : mean 18 (17, 20)  ## Number of patients treated above target tox interval : mean 3 (0, 6)  ## Proportions of DLTs in the trials : mean 21 % (10 %, 35 %)  ## Mean toxicity risks for the patients on active : mean 19 % (4 %, 34 %)  ## Doses selected as MTD : mean 23.9 (6, 38.8)  ## True toxicity at doses selected : mean 45 % (0 %, 98 %)  ## Proportion of trials selecting target MTD: 5 % ## Dose most often selected as MTD: 6  ## Observed toxicity rate at dose most often selected: 7 % ## Fitted toxicity rate at dose most often selected : mean 12 % (4 %, 24 %)  ## Stop reason triggered: ##  ≥ 3 cohorts dosed :  100 % ##  P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5 :  80 % ##  ≥ 20 patients dosed :  45 %"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"simulating-33-design-outcomes","dir":"Articles","previous_headings":"","what":"Simulating 3+3 design outcomes","title":"crmPack: Object-oriented implementation of CRM designs","text":"crmPack focuses model-based dose-escalation designs, also includes 3+3 design order allow convenient comparisons. Note actually simulations required 3+3 design, possible outcomes can enumerated, however still rely simulations consistency overall crmPack design. easiest way setup 3+3 design function ThreePlusThreeDesign: used much coarser dose grid model-based design , 3+3 design jump doses. starting dose automatically chosen first dose grid. outcome RuleDesign object, setup options directly use RuleDesign() initialization function. can simulate trials, assuming myTruth function gives true dose-toxicity relationship: model-based design, can summarize simulations: see mg dose often selected MTD, actually low comparing narrow target dose interval going mg. inherent problem dose-escalation designs dose grid coarse: might know starting trial range need refined dose grid. case obtain doses low, one can see average true toxicity ~% doses selected. Graphical summaries obtained calling plot summary object:","code":"threeDesign <- ThreePlusThreeDesign(doseGrid = c(5, 10, 15, 25, 35, 50, 80)) class(threeDesign) ## [1] \"RuleDesign\" ## attr(,\"package\") ## [1] \"crmPack\" threeSims <- simulate(threeDesign,   nsim = 1000,   seed = 35,   truth = myTruth,   parallel = FALSE ) threeSimsSum <- summary(threeSims,   truth = myTruth ) threeSimsSum ## Summary of 1000 simulations ##  ## Target toxicity interval was 20, 35 % ## Target dose interval corresponding to this was 19.6, 21.6  ## Intervals are corresponding to 10 and 90 % quantiles ##  ## Number of patients overall : mean 16 (15, 18)  ## Number of patients treated above target tox interval : mean 4 (3, 6)  ## Proportions of DLTs in the trials : mean 17 % (13 %, 22 %)  ## Mean toxicity risks for the patients on active : mean 17 % (14 %, 22 %)  ## Doses selected as MTD : mean 15.2 (15, 15)  ## True toxicity at doses selected : mean 4 % (3 %, 3 %)  ## Proportion of trials selecting target MTD: 0 % ## Dose most often selected as MTD: 15  ## Observed toxicity rate at dose most often selected: 3 % print(plot(threeSimsSum))"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"dual-endpoint-dose-escalation-designs","dir":"Articles","previous_headings":"","what":"Dual-endpoint dose escalation designs","title":"crmPack: Object-oriented implementation of CRM designs","text":"section, look dose-escalation procedures included package two end points incorporated study. first endpoint binary DLT response discussed already last sections. second endpoint continuous biomarker/efficacy response. package, can either model two responses jointly (using single model class, assuming correlation) separately (using two separate model classes, assuming correlation). Now first describe model two responses jointly.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"dual-endpoint-designs-with-a-joint-model","dir":"Articles","previous_headings":"Dual-endpoint dose escalation designs","what":"Dual-endpoint designs with a joint model","title":"crmPack: Object-oriented implementation of CRM designs","text":"disclaimer, please note designs section still development, far yet published. Therefore please consider experimental. help page DualEndpoint-class general joint model structure described. Basically idea (single) biomarker variable second endpoint dose-escalation design, aim maximize biomarker response controlling toxicity safe range. useful can assumed just increasing dose always lead better efficacy. Let’s look data structure. example: corresponding plot can obtained :  see seems maximum biomarker response around 10 mg already. order model data, consider dual-endpoint model first-order random-walk (RW1) structure dose-biomarker relationship: use smoothing parameter σβW2=0.01\\sigma^{2}_{\\beta_{W}} = 0.01, inverse-gamma prior IG(0.1,0.1)\\mathrm{IG}(0.1, 0.1) biomarker variance σW2\\sigma^{2}_{W} uniform prior (Beta(1,1)\\mathrm{Beta}(1, 1) prior) correlation ρ\\rho latent DLT biomarker variable. dual-endpoint models complex, advisable use sufficiently long Markov chain fitting . just use illustration purposes quite small Markov chain – , real application, need least 25 times longer! can obtain MCMC samples: check convergence picking fitted biomarker means plotting traceplots:  4 βW,j\\beta_{W,j} (j=1,5,10,25j=1, 5, 10, 25) means, biomarker means first, 5th, 10th 25th gridpoint, respectively, seem converged, traceplots show. (Remember data@nGrid gives number grid points.) can plot model fit:  specify extrapolate = FALSE focus biomarker plot right panel observed dose range, don’t want extrapolate biomarker fit higher dose levels. can also look estimated biomarker precision 1/σW21 / \\sigma^{2}_{W}. extract precision precW use another ggmcmc function create histogram:  selection next best dose, special class NextBestDualEndpoint implemented. tries maximize biomarker response, NCRM-type safety constraint. want least 90% maximum biomarker response, 25% maximum overdose probability next dose, specify: example, assuming dose limit 50 mg given maximum allowable increments, next dose can found follows: corresponding plot can produced printing plot element returned list:  bottom panel shows (NCRM) overdose probability, see doses 14 mg toxic. top panel, see probability dose reach least 90% maximum biomarker response dose grid — target probability. numbers low, clearly see local maximum 6 mg target probability, confirming seen previous data model fit plots. corresponding stopping rule exists. certain probability relative biomarker target, StoppingTargetBiomarker rule gives back TRUE queried fulfilled stopTrial function. example, require least 50% probability 90% biomarker response, specify: case, rule fulfilled yet, see : , dual-endpoint specific rule can combined required stopping rule. example, combine maximum sample size 40~patients: one stopping rules fulfilled, trial stopped. Let’s try build corresponding dual-endpoint design. start empty data set, use relative increments rule defined previous section use constant cohort size 3 patients: order study operating characteristics, need determine true biomarker DLT probability functions. going use biomarker function beta family. Note corresponding DualEndpointBeta model class, allows dual-endpoint designs beta biomarker response function. look corresponding help page information . let’s come back scenario definition: can draw corresponding curves:  biomarker response peaks 50 mg, toxicity still low. deciding true correlation ρ=0\\rho=0 true biomarker variance σW2=0.01\\sigma^{2}_{W} = 0.01 (giving high signal--noise ratio), can start simulating trials (starting 6 mg): Note “small” MCMC option set , order reduce simulation time — real application, “larger”. Plotting result gives overview final dose recommendations trial trajectories, also summary biomarker variance correlation estimates simulations:  Finally, summary simulations can obtained corresponding function: see trials proceeded maximum sample size 40 patients (reaching 42 cohort size 3). doses selected lower toxicity target range, aiming biomarker target instead, true biomarker response peaked 50 mg. corresponding plot looks follows:  see average biomarker fit bad range 50 mg, toxicity curve fit bad — probably result low frequency DLTs. warning : dual-endpoint designs still experimental! % Next talk dose escalation designs two endpoints modelled separately.","code":"data <- DataDual(   x =     c(       0.1, 0.5, 1.5, 3, 6, 10, 10, 10,       20, 20, 20, 40, 40, 40, 50, 50, 50     ),   y =     c(       0, 0, 0, 0, 0, 0, 1, 0,       0, 1, 1, 0, 0, 1, 0, 1, 1     ),   ID = as.integer(1:17),   cohort = as.integer(c(1:5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9)),   w =     c(       0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.55, 0.6,       0.52, 0.54, 0.56, 0.43, 0.41, 0.39, 0.34, 0.38, 0.21     ),   doseGrid =     c(       0.1, 0.5, 1.5, 3, 6,       seq(from = 10, to = 80, by = 2)     ) ) print(plot(data)) model <- DualEndpointRW(   mean = c(0, 1),   cov = matrix(c(1, 0, 0, 1), nrow = 2),   sigma2betaW =     0.01,   sigma2W =     c(a = 0.1, b = 0.1),   rho =     c(a = 1, b = 1),   rw1 = TRUE ) options <- McmcOptions(   burnin = 100,   step = 2,   samples = 2000 ) samples <- mcmc(data, model, options) data@nGrid ## [1] 41 betaWpicks <- get(samples, \"betaW\", c(1L, 5L, 10L, 25L)) ggs_traceplot(betaWpicks) print(plot(samples, model, data, extrapolate = FALSE)) ggs_histogram(get(samples, \"precW\")) myNextBest <- NextBestDualEndpoint(   target = c(0.9, 1),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 ) nextDose <- nextBest(myNextBest,   doselimit = 50,   samples = samples,   model = model,   data = data ) nextDose$value ## [1] 10 print(nextDose$plot) myStopping6 <- StoppingTargetBiomarker(   target = c(0.9, 1),   prob = 0.5 ) stopTrial(myStopping6,   dose = nextDose$value,   samples, model, data ) ## [1] FALSE ## attr(,\"message\") ## [1] \"Probability for target biomarker is 10 % for dose 10 and thus below the required 50 %\" ## attr(,\"report_label\") ## [1] \"P(0.9 ≤ Biomarker ≤ 1) ≥ 0.5 (relative)\" myStopping <- myStopping6 | StoppingMinPatients(40) emptydata <- DataDual(doseGrid = data@doseGrid) design <- DualDesign(   model = model,   data = emptydata,   nextBest = myNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = CohortSizeConst(3),   startingDose = 6 ) betaMod <- function(dose, e0, eMax, delta1, delta2, scal) {   maxDens <- (delta1^delta1) * (delta2^delta2) / ((delta1 + delta2)^(delta1 + delta2))   dose <- dose / scal   e0 + eMax / maxDens * (dose^delta1) * (1 - dose)^delta2 } trueBiomarker <- function(dose) {   betaMod(dose, e0 = 0.2, eMax = 0.6, delta1 = 5, delta2 = 5 * 0.5 / 0.5, scal = 100) } trueTox <- function(dose) {   pnorm((dose - 60) / 10) } par(mfrow = c(1, 2)) curve(trueTox(x), from = 0, to = 80) curve(trueBiomarker(x), from = 0, to = 80) mySims <- simulate(design,   trueTox = trueTox,   trueBiomarker = trueBiomarker,   sigma2W = 0.01,   rho = 0,   nsim = 10,   parallel = FALSE,   seed = 3,   startingDose = 6,   mcmcOptions =     McmcOptions(       burnin = 1000,       step = 1,       samples = 3000     ) ) print(plot(mySims)) ## Note: method with signature 'Simulations#missing' chosen for function 'plot', ##  target signature 'DualSimulations#missing'. ##  \"GeneralSimulations#missing\" would also be valid sumOut <- summary(mySims,   trueTox = trueTox,   trueBiomarker = trueBiomarker ) sumOut ## Summary of 10 simulations ##  ## Target toxicity interval was 20, 35 % ## Target dose interval corresponding to this was 51.6, 56.1  ## Intervals are corresponding to 10 and 90 % quantiles ##  ## Number of patients overall : mean 42 (42, 42)  ## Number of patients treated above target tox interval : mean 0 (0, 0)  ## Proportions of DLTs in the trials : mean 0 % (0 %, 0 %)  ## Mean toxicity risks for the patients on active : mean 0 % (0 %, 0 %)  ## Doses selected as MTD : mean 0.1 (0.1, 0.1)  ## True toxicity at doses selected : mean 0 % (0 %, 0 %)  ## Proportion of trials selecting target MTD: 0 % ## Dose most often selected as MTD: 0.1  ## Observed toxicity rate at dose most often selected: 0 % ## Fitted toxicity rate at dose most often selected : mean 2 % (1 %, 2 %)  ## Stop reason triggered: ##  P(0.9 ≤ Biomarker ≤ 1) ≥ 0.5 (relative) :  0 % ##  ≥ 40 patients dosed :  100 % ## Fitted biomarker level at dose most often selected : mean 0.2 (0.2, 0.2) print(plot(sumOut))"},{"path":"https://openpharma.github.io/crmPack/articles/example.html","id":"dual-endpoint-designs-with-separate-models","dir":"Articles","previous_headings":"Dual-endpoint dose escalation designs","what":"Dual-endpoint designs with separate models","title":"crmPack: Object-oriented implementation of CRM designs","text":"subsection, look dose-escalation designs model binary DLT responses continuous biomarker/efficacy responses separately. hence assume correlation binary DLT continuous efficacy responses. First, define data sets dual responses using DataDual function just like example given last subsection. example, data2 empty data set 12 dose levels, 25 300 mg increments 25 mg used. variable data4 contains data set binary DLT continuous efficacy responses observations. elements slot x dose levels 8 subjects treated. elements slot y represent corresponding binary DLT responses observed 8 subjects elements slot w represent continuous efficacy responses obtained 8 subjects. Similarly, can also obtain plot data sets using plot function described last subsection. described, model two responses separately. order , use models inheriting ModelPseudo class. binary DLT responses, can use models inheriting ModelTox class. example use models inheriting LogisticIndepBeta class variable DLTmodel (newDLTmodel observations) given previous examples. continuous efficacy responses, can use models inheriting ModelEff class. current version package, two model classes, Effloglog EffFlexi model, inheriting ModelEff class. Since ModelEff also inheriting ModelPseudo class, prior efficacy model also needs specified form pseudo data. (Please refer @ref(fig:model-classes) structure model classes defined package.) following commands show set Effloglog model. efficacy model describe relationship efficacy responses corresponding dose levels double logarithmic (“log-log”) scale. refers linear model three unknown parameters: intercept θ1, slope θ2 precision ν\\nu (inverse variance) efficacy responses. Similarly pseudo models, data set specified setting model: specification prior pseudo data, two dose levels 25 300 mg fixed specified eff_dose slot. eliciting prior expected efficacy values two dose levels (e.g. asking experts’), specified eff slot. example, 1.223 expected efficacy value subjects treated dose 25 mg 2.513 expected efficacy value subjects treated 300 mg. slot nu represents prior precision efficacy responses. example, two positive scalars aa bb specified suggesting prior distribution precision gamma shape parameter =1a=1 rate parameter b=0.025b=0.025. Note , since gamma distribution used prior distribution ν\\nu, posterior distribution gamma distribution, gamma prior precision conjugate normal likelihood. fixed value precision preferred, single positive scalar can also specified nu slot. Finally Data slot specified either empty data set data set currently available observations. Similarly, can also look structure Effmodel applying str function: 15 slots, can accessed @ operator. efficacy model, can obtain prior (using empty data set) posterior modal estimates model parameters θ1 (intercept) θ2 (slope). addition, gamma prior distribution used ν\\nu observations (data) available, can obtain updated values shape aa rate bb parameters gamma distribution, via model. joint prior posterior density functions θ1 θ2 described details (Yeung et al. 2015). Next, describe example flexible semi-parametric function used describe relationship efficacy values corresponding dose levels. differences mean efficacy responses neighboring dose levels modeled either first second order random walk models. flexible model aims capture different shapes dose-efficacy curve. estimate mean efficacy responses obtained dose levels MCMC sampling. % involved obtain prior posterior distribution mean efficacy responses. flexible form can specified using EffFlexi class object. EffFlexi class inheriting ModelEff class prior also specified pseudo data: , similarly , also fixed two dose levels 25 300 mg supplied prior expected efficacy responses 1.223 2.513. variance efficacy responses σ2\\sigma^2 model can specified single positive scalar value two positive scalar values shape aa scale bb parameters inverse gamma distribution slot sigma2. , specified variance efficacy responses inverse gamma distribution shape parameter =0.1a=0.1 scale parameter b=0.1b=0.1. , variance random walk model σβW2\\sigma^2_{\\beta_W} can also specified either single positive scalar two positive scalar parameters inverse gamma distribution slot sigma2betaW. , specified variance random walk model inverse gamma distribution shape parameter =20a=20 scale parameter b=50b=50. addition, can also specify like smooth mean efficacy response function. Either first order (RW1) second order (RW2) random walk model can used describe relationship neighbouring mean efficacy responses specified slot smooth. seen example, RW2, second order random walk model used. Finally, also specify data set Data used model data2 example. structure EffFlexi model object follows: slot names shown can accessed @ operator. value ‘FALSE’ slot useFixed shows variance efficacy response sigma2 variance random walk model `sigma2betaWare fixed, estimated assigned inverse gamma prior distribution model. slotuseRW1also gives 'FALSE' value means second order random walk model used model smooth dose-response function. addition, (internally required) random walk difference matrix rank matrix also shown slotRWmatandRWmatRank`, respectively. discussed, posterior estimates model parameters specified ModelPseudo class (except EffFlexi model class) can obtained modal estimates via MCMC sampling. , first show obtain estimates parameters via MCMC sampling. (Similarly, can also use mcmc function obtain prior posterior samples Effloglog EffFlexi models.) % using Effmodel Effmodel2, respectively data2 options specified earlier Effloglog (Effmodel) model, samples intercept θ1, slope θ2 efficacy linear log-log model precision ν\\nu efficacy responses can obtained. EffFlexi (Effmodel2) model, samples mean efficacy responses dose levels, variance σ2\\sigma^2 (sigma2) efficacy responses variance σβW2\\sigma^2_{\\beta_W} (sigma2betaW) random walk model obtained. also possible look structure (str) extract (get) obtain plots (ggs_traceplot ggs_autocorrelation) samples parameters. MCMC sampling involved, prior posterior modal estimates can obtained output models. observations responses available, can put DataDual data set, given Data slot model. can also updating current model new observations using update function. prior posterior modal estimates model parameters can obtained using @ operator model. example, Effloglog class model: posterior modal estimates θ1 θ2 updated values parameters gamma distribution ν\\nu can read now output . Similarly can update new data EffFlexi class model: plot function can also applied Effloglog model class EffFlexi model class objects, samples parameters generated models:   addition, can also plot fitted dose-efficacy curve using prior posterior modal estimates model parameters MCMC sampling used. example, using Effmodel data set data2 specified earlier:  Since samples involved, curves using prior posterior modal estimates parameters produced, 95% credibility intervals provided. Furthermore, can also plot estimated DLT probability efficacy curve side side using plotDualResponses function. example, using DLTmodel, Effmodel data2 specified earlier examples:  MCMC samples used, :  Next talk dose escalation rules two separate models used dual responses. Increments, CohortSize Stopping rules classes described earlier can applied . now look additional nextBest Stopping classes rules can use situation. , decision choosing next best dose administration based gain function defined (Yeung et al. 2015). gain function represents trade-DLT efficacy responses allocate dose gives best trade-responses. words, dose gives maximum gain value dose allocated next cohort subjects. basic ideas rules follows. % old text: Assume DLT observed subject, gain value observed particular dose level obtained multiplying probability DLT observed dose levels expected efficacy responses DLT observed particular dose level. %new: gain value particular dose level obtained multiplying probability DLT dose level expected efficacy response dose level. data accumulates trial, estimate gain function improve. gain function consists two components, one part DLT responses efficacy response. depends values obtained components affect values gain. example, ideal case probability DLT expected value efficacy response high. gain value obtained high. reason dose gives maximum gain value allocated next cohort subjects. can plot gain function given DLT model specified ModelTox class efficacy model specified ModelEff class using plotGain function. example, using variables newDLTmodel, newEffmodel data set observations, data4, specified earlier examples, :  case MCMC sampling involved prior posterior modal estimates model parameters used. two implemented nextBest rules dual responses using gain function: NextBestMaxGain NextBestMaxGainSamples class object. NextBestMaxGain used MCMC sampling involved use prior posterior modal estimates model parameters obtain gain values dose levels, NextBestMaxGainSamples used MCMC sampling involved obtain posterior estimates. example, MCMC sampling involved: use NextBestMaxGain, specify target probability occurrence DLT used trial end trial. example, target probability DLT used trial end trial 0.35 0.3, respectively. Therefore, rule suggest dose level gives maximum gain value probability DLT less equal 0.35 administer next cohort subjects. end trial, recommend dose maximum gain value probability DLT less equal 0.3. order derive next best dose administration, use nextBest function NextBestMaxGain object given doselimit, DLT efficacy models data set, includes currently available observations: results list numerical values plot illustrating next best dose computed. list numerical values include next best dose suggested, values target probabilities DLT used end trial. Furthermore, estimated doses two targets, well “Gstar” estimated dose (dose gives maximum gain value) provided along corresponding dose level dose grid three estimates. can also get see plot next best dose recommendation using $ operator.  usual, solid red, blue green lines curves represent relationship probability DLT, mean efficacy response gain values, respectively, corresponding dose levels. vertical line purple shows next best dose suggested administration vertical brown line shows maximum allowable dose level administered next cohort subjects. Furthermore, circle square DLT curve also show current estimate estimated TD30 TD35. Next look NextBestMaxGainSamples class object MCMC sampling involved. following code, specify target probabilities DLT used end trial 0.35 0.3 , specify 30% posterior quantile used estimate TD35 TD30, specify 50% posterior quantile Gstar estimate: Note two functions, derive mg_derive specified derive corresponding estimates posterior samples. , generic function nextBest used together rule object derive next best dose: list numerical results given output given using NextBestMaxGain class object includes next dose suggested, current estimates TD30, TD35 Gstar corresponding dose levels dose Grid. can also see plot:  plot, posterior distribution Gstar shown histogram. vertical lines plot show current estimates TD30, TD35 Gstar. addition, next dose maximum allowable dose also given blue red lines, respectively. Next, introduce Stopping rules can applied two classes escalation rules. escalation based two responses two separate pseudo DLT efficacy models, select one dose, minimum estimate TD30 (TDtargetEndOfTrial) optimal gain dose (Gstar) recommended dose potential clinical trials. main feature stopping rules trial stopped current estimates selected quantity ‘accurate’ enough. particular, also consider ratio 95% credibility interval bounds current estimate. smaller ratio, accurate estimate. example, like stop trial ratio less equal 5. functions StoppingMaxGainCIRatio used purpose: note , moment class stoppingMaxGainCIRatio used together stopping class rules “” operator & operator | (still development). Similarly, stopTrial function can used order determine rule fulfilled: % cases either DLT efficacy samples involved. Next, now look construct design objects. also start empty data set, object data3 DataDual class introduced earlier examples. two functions can used. DualResponsesDesign can used without MCMC samples, DualResponsesSamplesDesign can used MCMC samples involved. example, use object Effmodel Effloglog class specified earlier efficacy model following code: can use function DualResponsesSamplesDesign specify design efficacy model specified EffFlexi class object. example, use object Effmodel2 EffFlexi class specified earlier examples : specified three designs using previous rules nextBest (escalation rule), stopping, increments cohort size. Next, specify scenarios simulations. example, simulations using DLT model efficacy model LogisticIndepBeta Effloglog objects, respectively, can specify scenario : true DLT, efficacy gain curves can obtained. can see corresponding curves  Using commands, can obtained DLT (red), efficacy(blue) gain (green) curves also corresponding true values TD30 (TDtargetEndOfTrial), TD35 (TDtargetDuringTrial) Gstar. addition, scenario DLT efficacy can used cases (modal estimates MCMC samples). EffFlexi class object used simulations. Using DLT scenario new efficacy scenario specified corresponding curves can also plotted :  Similarly, also get DLT, efficacy gain values corresponding real values TD30, TD35 Gstar. establishing real scenarios, can simulate trials. First, look two examples Effloglog class object used efficacy model. show first example MCMC samples involved: simulate function used cases simulate trials specified scenarios. , specified true precision (trueNu) efficacy responses 1/0.025. words, used value 0.025 true variance efficacy responses simulation. arguments args,nsim, seed parallel, please refer earlier examples details specification description details. MCMC samples used, can also specify simulations similar way additional argument mcmcOptions EffFlexi class object used efficacy model, generate simulations follows: specification arguments object, args, trueDLE, trueEff, mcmcOptions,nsim,seed,parallel please refer earlier examples details. addition, two arguments used EffFlexi class efficacy model used simulations: First, trueSigma2 specified true variance efficacy responses trueSigma2betaW true variance random walk model used simulation. Furthermore, can also plot, summarize plot summary simulated results using plot summary function:    plots give overview final dose recommendations trial trajectories. addition, also give summary efficacy variance also random walk model variance EffFlexi class object used efficacy model. , summary plot summary simulations can obtained :    first simulation, Sim1 trial stop ratio 95% credibility interval bounds current estimate minimum TD30(TDtargetEndOfTrial) Gstar less equal 5. last two simulations, Sim2 Sim3, use trials stop either maximum 72 patients treated ratio 95% credibility interval less equal 5. can see simulations trials require total around 60 patients study. reminder, dual endpoint dose escalation design uses two separate models describe dose-responses relationship, gain function used determine next best dose final recommended dose end trial. specifically end trial, recommend dose level closest minimum final estimate TD30 (TDtargetEndOfTrial) Gstar. DLT efficacy scenario used first, Sim1 second simulations, Sim2 . real TD30 (TDtargetEndOfTrial) given summary 152.6125 mg dose level doseGrid closest real TD30 150 mg. real Gstar 130.0097 mg dose level dose grid closest Gstar 125 mg. case, real Gstar less real TD30 expect recommendations made dose level close real Gstar. words, scenario, expect recommendations made 125 mg. can see simulated results agrees expecting. summaries plots summaries, 125 mg dose level selected often simulations. scenario last simulation, Sim3, real TD30 real Gstar 125 mg. Since real TD30 greater real Gstar, also expect recommendations made close real Gstar scenario. can see simulated results summary plot summary, procedure also recommends 125 mg often simulations, agrees real scenario. Now, also look fitted dose-DLT dose-efficacy curves obtained three simulations. plots summaries, can see cases, fitted dose-DLT curves (solid-red curve) approximate well real dose-DLT curve (solid-black curve). 95% credibility interval DLT curve (broken-red curves) also given MCMC samples involved simulation. contrast, can see fitted efficacy curve (solid-blue curve) gives good fit real efficacy curve (solid-black) cases. approximation real efficacy curve better linear linear log-log model, Effloglog used, compared flexible form , EffFlexi used. addition, can also see 95% credibility interval efficacy curve (broken-blue line) MCMC sampling efficacy responses involved.","code":"data2 <- DataDual(doseGrid = seq(25, 300, 25))  data4 <- DataDual(   x = c(25, 50, 50, 75, 100, 100, 225, 300),   y = c(0, 0, 0, 0, 1, 1, 1, 1),   ID = as.integer(1:8),   cohort = as.integer(c(1, 2, 2, 3, 4, 4, 5, 6)),   w = c(0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.6, 0.52),   doseGrid = seq(25, 300, 25) ) Effmodel <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = data2 ) str(Effmodel) ## Formal class 'Effloglog' [package \"crmPack\"] with 13 slots ##   ..@ eff      : num [1:2] 1.22 2.51 ##   ..@ eff_dose : num [1:2] 25 300 ##   ..@ nu       : Named num [1:2] 1 0.025 ##   .. ..- attr(*, \"names\")= chr [1:2] \"a\" \"b\" ##   ..@ use_fixed: logi FALSE ##   ..@ theta1   : num -1.41 ##   ..@ theta2   : num 2.25 ##   ..@ Pcov     : num [1:2, 1:2] NaN NaN NaN NaN ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : chr [1:2] \"(Intercept)\" \"log(log(x))\" ##   .. .. ..$ : chr [1:2] \"(Intercept)\" \"log(log(x))\" ##   ..@ X        : num [1:2, 1:2] 1 1 1.17 1.74 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : chr [1:2] \"1\" \"2\" ##   .. .. ..$ : chr [1:2] \"(Intercept)\" \"log(log(x))\" ##   .. ..- attr(*, \"assign\")= int [1:2] 0 1 ##   ..@ Y        : num [1:2] 1.22 2.51 ##   ..@ mu       : num [1:2] -1.41 2.25 ##   ..@ Q        : num [1:2, 1:2] 2 2.91 2.91 4.4 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : chr [1:2] \"(Intercept)\" \"log(log(x))\" ##   .. .. ..$ : chr [1:2] \"(Intercept)\" \"log(log(x))\" ##   ..@ const    : num 0 ##   ..@ data     :Formal class 'DataDual' [package \"crmPack\"] with 10 slots ##   .. .. ..@ w       : num(0)  ##   .. .. ..@ x       : num(0)  ##   .. .. ..@ y       : int(0)  ##   .. .. ..@ doseGrid: num [1:12] 25 50 75 100 125 150 175 200 225 250 ... ##   .. .. ..@ nGrid   : int 12 ##   .. .. ..@ xLevel  : int(0)  ##   .. .. ..@ placebo : logi FALSE ##   .. .. ..@ ID      : int(0)  ##   .. .. ..@ cohort  : int(0)  ##   .. .. ..@ nObs    : int 0 Effmodel2 <- EffFlexi(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   sigma2W = c(a = 0.1, b = 0.1),   sigma2betaW = c(a = 20, b = 50),   rw1 = FALSE,   data = data2 ) str(Effmodel2) ## Formal class 'EffFlexi' [package \"crmPack\"] with 10 slots ##   ..@ eff        : num [1:2] 1.22 2.51 ##   ..@ eff_dose   : num [1:2] 25 300 ##   ..@ sigma2W    : Named num [1:2] 0.1 0.1 ##   .. ..- attr(*, \"names\")= chr [1:2] \"a\" \"b\" ##   ..@ sigma2betaW: Named num [1:2] 20 50 ##   .. ..- attr(*, \"names\")= chr [1:2] \"a\" \"b\" ##   ..@ use_fixed  : Named logi [1:2] FALSE FALSE ##   .. ..- attr(*, \"names\")= chr [1:2] \"sigma2W\" \"sigma2betaW\" ##   ..@ rw1        : logi FALSE ##   ..@ X          : int [1:2, 1:12] 1 0 0 0 0 0 0 0 0 0 ... ##   ..@ RW         : num [1:12, 1:12] 1 -2 1 0 0 0 0 0 0 0 ... ##   ..@ RW_rank    : int 10 ##   ..@ data       :Formal class 'DataDual' [package \"crmPack\"] with 10 slots ##   .. .. ..@ w       : num(0)  ##   .. .. ..@ x       : num(0)  ##   .. .. ..@ y       : int(0)  ##   .. .. ..@ doseGrid: num [1:12] 25 50 75 100 125 150 175 200 225 250 ... ##   .. .. ..@ nGrid   : int 12 ##   .. .. ..@ xLevel  : int(0)  ##   .. .. ..@ placebo : logi FALSE ##   .. .. ..@ ID      : int(0)  ##   .. .. ..@ cohort  : int(0)  ##   .. .. ..@ nObs    : int 0 Effsamples <- mcmc(data = data2, model = Effmodel, options) Effsamples2 <- mcmc(data = data2, model = Effmodel2, options) Effpostsamples <- mcmc(data = data2, model = Effmodel, options) Effpostsamples2 <- mcmc(data = data2, model = Effmodel2, options) newEffmodel <- update(object = Effmodel, data = data4) newEffmodel@theta1 ## [1] -2.81695 newEffmodel@theta2 ## [1] 2.709524 newEffmodel@nu ##         a         b  ## 3.0000000 0.9832955 newEffmodel2 <- update(object = Effmodel2, data = data4) newEffmodel2@RW ##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] ##  [1,]    1   -2    1    0    0    0    0    0    0     0     0     0 ##  [2,]   -2    5   -4    1    0    0    0    0    0     0     0     0 ##  [3,]    1   -4    6   -4    1    0    0    0    0     0     0     0 ##  [4,]    0    1   -4    6   -4    1    0    0    0     0     0     0 ##  [5,]    0    0    1   -4    6   -4    1    0    0     0     0     0 ##  [6,]    0    0    0    1   -4    6   -4    1    0     0     0     0 ##  [7,]    0    0    0    0    1   -4    6   -4    1     0     0     0 ##  [8,]    0    0    0    0    0    1   -4    6   -4     1     0     0 ##  [9,]    0    0    0    0    0    0    1   -4    6    -4     1     0 ## [10,]    0    0    0    0    0    0    0    1   -4     6    -4     1 ## [11,]    0    0    0    0    0    0    0    0    1    -4     5    -2 ## [12,]    0    0    0    0    0    0    0    0    0     1    -2     1 print(plot(Effpostsamples, newEffmodel, data4)) print(plot(Effpostsamples2, newEffmodel2, data4)) print(plot(data2, Effmodel)) plotDualResponses(   DLEmodel = DLTmodel,   Effmodel = Effmodel, data = data2 ) plotDualResponses(   DLEmodel = DLTmodel, DLEsamples = DLTsamples,   Effmodel = Effmodel, Effsamples = Effsamples, data = data2 ) plotGain(DLEmodel = newDLTmodel, Effmodel = newEffmodel, data = data4) GainNextBest <- NextBestMaxGain(   prob_target_drt = 0.35,   prob_target_eot = 0.3 ) doseRecGain <- nextBest(GainNextBest,   doselimit = max(data4@doseGrid),   model = newDLTmodel,   model_eff = newEffmodel,   data = data4 ) doseRecGain$plot GainsamplesNextBest <- NextBestMaxGainSamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(TDsamples) {     as.numeric(quantile(TDsamples, prob = 0.3))   },   mg_derive = function(Gstarsamples) {     as.numeric(quantile(Gstarsamples, prob = 0.5))   } ) doseRecGainSamples <- nextBest(GainsamplesNextBest,   doselimit = max(data4@doseGrid),   model = newDLTmodel,   samples = DLTpostsamples,   model_eff = newEffmodel,   samples_eff = Effpostsamples,   data = data4 ) ## [1] \"Estimated TD 30 = 18.6611868271308 not within dose grid\" doseRecGainSamples$plot myStopping7 <- StoppingMaxGainCIRatio(target_ratio = 5, prob_target = 0.3) myStopping8 <- myStopping7 | StoppingMinPatients(72) stopTrial(   stopping = myStopping7, dose = doseRecGain$next_dose, model = newDLTmodel,   data = data4, Effmodel = newEffmodel ) ## [1] FALSE ## attr(,\"message\") ## [1] \"Gstar estimate is 79.7805 with 95% CI ( 21.5588 , 295.2361 ) and its ratio = 13.6945\"                ## [2] \"TDtargetEndOfTrial estimate is  42.6813 with 95% CI ( 11.0662 , 164.618 ) and its ratio= 14.8758\"    ## [3] \"TDatrgetEndOfTrial estimate is smaller with ratio = 14.8758 which is  greater than target_ratio = 5\" ## attr(,\"report_label\") ## [1] \"GStar 5 for 0.3 target prob\" stopTrial(   stopping = myStopping7,   dose = doseRecGainSamples$next_dose,   samples = DLTpostsamples,   model = newDLTmodel,   data = data4,   TDderive = function(TDsamples) {     quantile(TDsamples, prob = 0.3)   },   Effmodel = newEffmodel,   Effsamples = Effpostsamples,   Gstarderive = function(Gstarsamples) {     quantile(Gstarsamples, prob = 0.5)   } ) ## [1] FALSE ## attr(,\"message\") ## [1] \"Gstar estimate is 50 with 95% CI ( 25 , 300 ) and its ratio = 12\"                                           ## [2] \"TDtargetEndOfTrial estimate is  18.6612 with 95% CI ( 6e-04 , 10459.1345 ) and its ratio= 17110373.1537\"    ## [3] \"TDtargetEndOfTrial estimate is smaller with ratio = 17110373.1537  which is  greater than target_ratio = 5\" ## attr(,\"report_label\") ## [1] \"GStar 5 for 0.3 target prob\" design1 <- DualResponsesDesign(   nextBest = GainNextBest,   model = DLTmodel,   eff_model = Effmodel,   data = data2,   stopping = myStopping7,   increments = myIncrements1,   cohort_size = mySize,   startingDose = 25 )  design2 <- DualResponsesSamplesDesign(   nextBest = GainsamplesNextBest,   model = DLTmodel,   eff_model = Effmodel,   data = data2,   stopping = myStopping8,   increments = myIncrements1,   cohort_size = mySize,   startingDose = 25 ) design3 <- DualResponsesSamplesDesign(   nextBest = GainsamplesNextBest,   model = DLTmodel,   eff_model = Effmodel2,   data = data2,   stopping = myStopping8,   increments = myIncrements1,   cohort_size = mySize,   startingDose = 25 ) myTruthDLT <- probFunction(DLTmodel, phi1 = -53.66584, phi2 = 10.50499) myTruthEff <- efficacyFunction(Effmodel, theta1 = -4.818429, theta2 = 3.653058)  myTruthGain <- function(dose) {   return(myTruthEff(dose) * (1 - myTruthDLT(dose))) } TruthTD <- doseFunction(DLTmodel, phi1 = -53.66584, phi2 = 10.50499)  GAIN <- function(xi) {   -(-4.8218429 + 3.653058 * log(xi)) / (1 + exp(-53.66584 + 10.50499 * xi)) } Txi <- (optim(1, GAIN, method = \"BFGS\")$par) maxg <- (optim(1, GAIN, method = \"BFGS\")$value) gstar <- exp(Txi) td30 <- TruthTD(0.3) td35 <- TruthTD(0.35) DoseLevels <- seq(2, 300, 1) plot(DoseLevels, myTruthDLT(DoseLevels),   col = \"red\", type = \"l\", lwd = 3, ylab = \"Values\",   ylim = c(0, max(1, max(myTruthEff(DoseLevels)))) ) points(td30, 0.3, col = \"violet\", pch = 15, cex = 2) points(td35, 0.35, col = \"violet\", pch = 16, cex = 2) lines(DoseLevels, myTruthEff(DoseLevels), col = \"blue\", type = \"l\", lwd = 3) lines(DoseLevels, myTruthGain(DoseLevels), col = \"green3\", type = \"l\", lwd = 3) points(gstar, -maxg, col = \"green3\", pch = 17, cex = 2) legend(\"topright\",   bty = \"n\", cex = 1.2, c(     \"p(DLT)=0.3\", \"p(DLT)=0.35\", \"Max gain\", \"p(DLTs)\",     \"efficacy\", \"gain\"   ), text.col = c(\"violet\", \"violet\", \"green3\", \"red\", \"blue\", \"green3\"),   pch = c(15, 16, 17, NA, NA, NA), lty = c(NA, NA, NA, 1, 1, 1), col = c(\"violet\", \"violet\", \"green3\", \"red\", \"blue\", \"green3\") ) myTruthEff1 <- c(   -0.5478867, 0.1645417, 0.5248031, 0.7604467,   0.9333009, 1.0687031, 1.1793942, 1.2726408,   1.3529598, 1.4233411, 1.4858613, 1.5420182 )  d1 <- data2@doseGrid myTruthGain1 <- myTruthEff1 * (1 - myTruthDLT(d1)) maxg1 <- max(myTruthGain1) gstar1 <- data2@doseGrid[which.max(myTruthGain1)] DoseLevels1 <- seq(1, 300, 1) TruthTD <- doseFunction(DLTmodel, phi1 = -53.66584, phi2 = 10.50499) td30 <- TruthTD(0.3) td35 <- TruthTD(0.35) plot(DoseLevels1, myTruthDLT(DoseLevels1),   col = \"red\", type = \"l\",   lwd = 3, ylab = \"Values\", ylim = c(0, max(1, max(myTruthEff1))) ) points(td30, 0.3, col = \"violet\", pch = 15, cex = 2) points(td35, 0.35, col = \"violet\", pch = 16, cex = 2) lines(d1, myTruthEff1, col = \"blue\", type = \"l\", lwd = 3) lines(d1, myTruthGain1, col = \"green3\", type = \"l\", lwd = 3) points(gstar1, maxg1, col = \"green3\", pch = 17, cex = 2) legend(\"topright\",   bty = \"n\", cex = 1.2, c(     \"p(DLT)=0.3\", \"p(DLT)=0.35\",     \"Max gain\", \"p(DLTs)\", \"efficacy\", \"gain\"   ), text.col = c(     \"violet\", \"violet\",     \"green3\", \"red\", \"blue\", \"green3\"   ), pch = c(15, 16, 17, NA, NA, NA),   lty = c(NA, NA, NA, 1, 1, 1), col = c(\"violet\", \"violet\", \"green3\", \"red\", \"blue\", \"green3\") ) Sim1 <- simulate(   object = design1,   args = NULL,   trueDLE = myTruthDLT,   trueEff = myTruthEff,   trueNu = 1 / 0.025,   nsim = 10,   seed = 819,   parallel = FALSE ) Sim2 <- simulate(   object = design2,   args = NULL,   trueDLE = myTruthDLT,   trueEff = myTruthEff,   trueNu = 1 / 0.025,   nsim = 10,   seed = 819,   mcmcOptions = options,   parallel = FALSE ) Sim3 <- simulate(   object = design3,   args = NULL,   trueDLE = myTruthDLT,   trueEff = myTruthEff1,   trueSigma2 = 0.025,   trueSigma2betaW = 1,   mcmcOptions = options,   nsim = 10,   seed = 819,   parallel = FALSE ) plot(Sim1) ## Note: method with signature 'PseudoSimulations#missing' chosen for function 'plot', ##  target signature 'PseudoDualSimulations#missing'. ##  \"GeneralSimulations#missing\" would also be valid plot(Sim2) plot(Sim3) Sum1 <- summary(Sim1,   trueDLE = myTruthDLT,   trueEff = myTruthEff ) Sum1 ## Summary of 10 simulations ##  ## Target probability of DLE p(DLE) used at the end of a trial was 30 % ## The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  ## TDEOT at dose Grid was 150  ## Target p(DLE) used during a trial was 35 % ## The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  ## TDDT at dose Grid was 150  ## Number of patients overall : mean 16 (15, 19)  ## Number of patients treated above the target p(DLE) used at the end of a trial : mean 3 (3, 3)  ## Number of patients treated above the target p(DLE) used during a trial : mean 3 (3, 3)  ## Proportions of observed DLT in the trials : mean 21 % (20 %, 23 %)  ## Mean toxicity risks for the patients : mean 21 % (20 %, 21 %)  ## Doses selected as TDEOT : mean 100 (97.5, 102.5)  ## True toxicity at TDEOT : mean 1 % (0 %, 1 %)  ## Proportion of trials selecting the TDEOT: 0 % ## Proportion of trials selecting the TDDT: 0 % ## Dose most often selected as TDEOT: 100  ## Observed toxicity rate at dose most often selected: 0 % ## Fitted probabilities of DLE at dose most often selected : mean 24 % (24 %, 24 %)  ## The summary table of the final TDEOT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    98.18  123.81  123.81  122.23  123.81  133.63   ## The summary table of the final ratios of the TDEOT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    3.849   4.447   4.447   4.442   4.447   4.993   ## The summary table of the final TDDT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    118.2   144.4   144.4   143.5   144.4   161.5   ## The summary table of dose levels, the optimal dose ##  to recommend for subsequent study across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    98.18  123.81  123.81  122.23  123.81  133.63   ## The summary table of the final ratios of the optimal dose for stopping across ##                   all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    3.849   4.447   4.447   4.442   4.447   4.993   ##  ## Stop reason triggered: ##  GStar 5 for 0.3 target prob :  100 % ## Target Gstar, the dose which gives the maximum gain value was 130.0097  ## Target Gstar at dose Grid was 125  ## The summary table of the final Gstar across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    142.9   146.7   152.1   152.6   153.1   178.6   ## The summary table of the final ratios of the Gstar across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    6.807   6.985   7.188   7.691   7.472  10.729   ## The summary table of dose levels, the optimal dose ##  to recommend for subsequent study across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    98.18  123.81  123.81  122.23  123.81  133.63   ## The summary table of the final ratios of the optimal dose for stopping across ##         all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    3.849   4.447   4.447   4.442   4.447   4.993   ## Fitted expected efficacy level at dose most often selected : mean 0.9 (0.9, 1)  ## Stop reason triggered: ##  GStar 5 for 0.3 target prob :  100 % print(plot(Sum1)) Sum2 <- summary(Sim2,   trueDLE = myTruthDLT,   trueEff = myTruthEff ) Sum2 ## Summary of 10 simulations ##  ## Target probability of DLE p(DLE) used at the end of a trial was 30 % ## The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  ## TDEOT at dose Grid was 150  ## Target p(DLE) used during a trial was 35 % ## The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  ## TDDT at dose Grid was 150  ## Number of patients overall : mean 45 (36, 51)  ## Number of patients treated above the target p(DLE) used at the end of a trial : mean 8 (3, 12)  ## Number of patients treated above the target p(DLE) used during a trial : mean 8 (3, 12)  ## Proportions of observed DLT in the trials : mean 19 % (17 %, 20 %)  ## Mean toxicity risks for the patients : mean 19 % (15 %, 25 %)  ## Doses selected as TDEOT : mean 120 (100, 125)  ## True toxicity at TDEOT : mean 4 % (1 %, 5 %)  ## Proportion of trials selecting the TDEOT: 0 % ## Proportion of trials selecting the TDDT: 0 % ## Dose most often selected as TDEOT: 125  ## Observed toxicity rate at dose most often selected: 6 % ## Fitted probabilities of DLE at dose most often selected : mean 25 % (23 %, 27 %)  ## The summary table of the final TDEOT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    115.0   127.6   135.9   132.4   138.6   143.8   ## The summary table of the final ratios of the TDEOT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##        1       1       1       1       1       1   ## The summary table of the final TDDT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    133.2   151.0   155.9   154.2   159.3   168.8   ## The summary table of dose levels, the optimal dose ##  to recommend for subsequent study across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    115.0   127.6   135.9   132.4   138.6   143.8   ## The summary table of the final ratios of the optimal dose for stopping across ##                   all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##        1       1       1       1       1       1   ##  ## Stop reason triggered: ##  GStar 5 for 0.3 target prob :  100 % ##  ≥ 72 patients dosed :  0 % ## Target Gstar, the dose which gives the maximum gain value was 130.0097  ## Target Gstar at dose Grid was 125  ## The summary table of the final Gstar across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    150.0   175.0   187.5   182.5   200.0   200.0   ## The summary table of the final ratios of the Gstar across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##      2.4     2.4     2.4     2.4     2.4     2.4   ## The summary table of dose levels, the optimal dose ##  to recommend for subsequent study across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    115.0   127.6   135.9   132.4   138.6   143.8   ## The summary table of the final ratios of the optimal dose for stopping across ##         all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##        1       1       1       1       1       1   ## Fitted expected efficacy level at dose most often selected : mean 1 (1, 1)  ## Stop reason triggered: ##  GStar 5 for 0.3 target prob :  100 % ##  ≥ 72 patients dosed :  0 % print(plot(Sum2)) Sum3 <- summary(Sim3,   trueDLE = myTruthDLT,   trueEff = myTruthEff1 ) Sum3 ## Summary of 10 simulations ##  ## Target probability of DLE p(DLE) used at the end of a trial was 30 % ## The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  ## TDEOT at dose Grid was 150  ## Target p(DLE) used during a trial was 35 % ## The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  ## TDDT at dose Grid was 150  ## Number of patients overall : mean 50 (39, 58)  ## Number of patients treated above the target p(DLE) used at the end of a trial : mean 8 (6, 12)  ## Number of patients treated above the target p(DLE) used during a trial : mean 8 (6, 12)  ## Proportions of observed DLT in the trials : mean 21 % (18 %, 24 %)  ## Mean toxicity risks for the patients : mean 20 % (15 %, 24 %)  ## Doses selected as TDEOT : mean 115 (100, 125)  ## True toxicity at TDEOT : mean 3 % (1 %, 5 %)  ## Proportion of trials selecting the TDEOT: 0 % ## Proportion of trials selecting the TDDT: 0 % ## Dose most often selected as TDEOT: 125  ## Observed toxicity rate at dose most often selected: 4 % ## Fitted probabilities of DLE at dose most often selected : mean 27 % (25 %, 28 %)  ## The summary table of the final TDEOT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    113.1   123.7   127.0   127.0   130.0   137.2   ## The summary table of the final ratios of the TDEOT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##        1       1       1       1       1       1   ## The summary table of the final TDDT across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    128.9   143.6   149.2   149.0   154.4   169.5   ## The summary table of dose levels, the optimal dose ##  to recommend for subsequent study across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    113.1   123.7   127.0   127.0   130.0   137.2   ## The summary table of the final ratios of the optimal dose for stopping across ##                   all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##        1       1       1       1       1       1   ##  ## Stop reason triggered: ##  GStar 5 for 0.3 target prob :  100 % ##  ≥ 72 patients dosed :  0 % ## Target Gstar, the dose which gives the maximum gain value was 125  ## Target Gstar at dose Grid was 125  ## The summary table of the final Gstar across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    250.0   250.0   250.0   262.5   275.0   300.0   ## The summary table of the final ratios of the Gstar across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    1.333   1.500   1.857   1.938   2.000   3.000   ## The summary table of dose levels, the optimal dose ##  to recommend for subsequent study across all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##    113.1   123.7   127.0   127.0   130.0   137.2   ## The summary table of the final ratios of the optimal dose for stopping across ##         all simulations ##     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   ##        1       1       1       1       1       1   ## Fitted expected efficacy level at dose most often selected : mean 0.9 (0.9, 1)  ## Stop reason triggered: ##  GStar 5 for 0.3 target prob :  100 % ##  ≥ 72 patients dosed :  0 % print(plot(Sum3)) # nolint end"},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Describing `crmPack` Objects","text":"Objects created crmPack almost always S4 objects. Like S4 objects, default render particularly user-friendly way. Fortunately, little known feature knitr can put right little cost end user: simplest case, demonstrated , needs done reference object markdown Quarto chunk. Defined number toxicities far observed knit_printmethods provided crmPack intended fully customisable comprehensive. believe, however, cover vast majority use-cases easily extended using techniques described later vignette. Formatting objects currently works HMTL output. another format - PDF Microsoft Word - required, suggested workaround create HTML output print save document required format.","code":"cs <- CohortSizeDLT(intervals = 0:2, cohort_size = c(1, 3, 5)) cs ## An object of class \"CohortSizeDLT\" ## Slot \"intervals\": ## [1] 0 1 2 ##  ## Slot \"cohort_size\": ## [1] 1 3 5 cs"},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"how-is-this-done","dir":"Articles","previous_headings":"","what":"How is this done?","title":"Describing `crmPack` Objects","text":"running code console, result R function statement assigned object printed. (Unless, course, returned invisiblely.) process appears happen chunks markdown Quarto document evaluated. quite case. Instead, result passed S3 function called knit_print (Xie 2024). results running knit_print returned expression appear rendered document. simple demonstration concept, consider: actions knit_print entirely arbitrary, mechanism provides developers easy way provide nicely-rendered versions objects rendered knitr. provided methods (almost) crmPack classes.","code":"knit_print.DustySpringfield <- function(x, ...) {   \"I just don't know what to do with myself\" }  lyric <- 10  lyric ## [1] 10 class(lyric) <- \"DustySpringfield\"  lyric ## I just don't know what to do with myself"},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"using-knit_print-in-crmpack","dir":"Articles","previous_headings":"","what":"Using knit_print in crmPack","title":"Describing `crmPack` Objects","text":"default, needs done reference object printed markdown quarto chunk. equivalent knit_print(object). However, knit_print methods crmPack classes optional arguments can used customise way object rendered. change default value parameter knit_print function must called explicitly: knit_print(cs, tox_label = \"DLAE\").","code":""},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"common-customisations","dir":"Articles","previous_headings":"Using knit_print in crmPack","what":"Common customisations","title":"Describing `crmPack` Objects","text":"commonly needed customisations alter way participants toxicities described. handled label tox_label arguments knit_print. arguments can provided either scalar vector length 2. vector, first element taken describe single instance second number instances. scalar, converted vector, whose first element scalar value provided second scalar \"s\" appended1. , example: constant size 3 participants. constant size 3 subjects. Dose units defined units parameter. default, units printed. participants yet evaluable. dose grid 0.1, 0.3, 0.9, 2.5, 5, 10 15. participants yet evaluable. dose grid 0.1 mg/dL, 0.3 mg/dL, 0.9 mg/dL, 2.5 mg/dL, 5 mg/dL, 10 mg/dL 15 mg/dL. format used display dose levels (information classes) can changed fmt parameter: participants yet evaluable. dose grid 0.10 mg/dL, 0.30 mg/dL, 0.90 mg/dL, 2.50 mg/dL, 5.00 mg/dL, 10.00 mg/dL 15.00 mg/dL. biomarker_label biomarker_units allow representation biomarker customised. relationships dose toxicity dose PD biomarker modelled simultaneously. probit log normal model describe relationship dose toxicity: Φ−1(Tox|d)=f(X=1|θ,d)=α+β⋅log(d/d*) \\Phi^{-1}(Tox | d) = f(X = 1 | \\theta, d) = \\alpha + \\beta \\cdot log(d/d^*) d* denotes reference dose. prior θ given by𝛉=[αβ]∼N([0.001.00],[1.000.000.001.00]) \\boldsymbol\\theta = \\begin{bmatrix}\\alpha \\\\ \\beta\\end{bmatrix}\\sim N \\left(\\begin{bmatrix} 0.00 \\\\  1.00\\end{bmatrix} , \\begin{bmatrix} 1.00 &  0.00 \\\\ 0.00 &  1.00\\end{bmatrix} \\right) reference dose 1.00. PD biomarker response w dose d modelled w(d)∼N(f(d),σw2) w(d) \\sim N(f(d), \\sigma_w^2) f(d) first order random walk f(d)=βWi−βWi−1∼N(0,0.01×(di−di−1)) f(d) = \\beta_{W_i} - \\beta_{W_{- 1}}\\sim N(0, 0.01 \\times (d_i - d_{- 1})) relationships dose toxicity dose PD biomarker modelled simultaneously. probit log normal model describe relationship dose toxicity: Φ−1(Tox|d)=f(X=1|θ,d)=α+β⋅log(d/d*) \\Phi^{-1}(Tox | d) = f(X = 1 | \\theta, d) = \\alpha + \\beta \\cdot log(d/d^*) d* denotes reference dose. prior θ given by𝛉=[αβ]∼N([0.001.00],[1.000.000.001.00]) \\boldsymbol\\theta = \\begin{bmatrix}\\alpha \\\\ \\beta\\end{bmatrix}\\sim N \\left(\\begin{bmatrix} 0.00 \\\\  1.00\\end{bmatrix} , \\begin{bmatrix} 1.00 &  0.00 \\\\ 0.00 &  1.00\\end{bmatrix} \\right) reference dose 1.00. PD biomarker response w dose d modelled w(d)∼N(f(d),σw2) w(d) \\sim N(f(d), \\sigma_w^2) f(d) first order random walk f(d)=βWi−βWi−1∼N(0,0.01×(di−di−1)) f(d) = \\beta_{W_i} - \\beta_{W_{- 1}}\\sim N(0, 0.01 \\times (d_i - d_{- 1}))","code":"CohortSizeConst(3) knit_print(CohortSizeConst(3), label = \"subject\") d <- Data(doseGrid = c(0.1, 0.3, 0.9, 2.5, 5, 10, 15)) d knit_print(d, units = \"mg/dL\") knit_print(d, units = \"mg/dL\", fmt = \"%.2f\") x <- .DefaultDualEndpointRW() x knit_print(x, biomarker_name = \"CRP\", biomarker_units = \"mg/dL\")"},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"rendering-complex-classes","dir":"Articles","previous_headings":"","what":"Rendering complex classes","title":"Describing `crmPack` Objects","text":"crmPack classes slots whose values crmPack classes. CohortSizeMax simple example. cases, slot values passed knit_print turn. Defined dose used next cohort Defined number toxicities far observed knit_print methods sub-classes RuleDesign (related classes) offer slightly control. , overall header rendition object provided title parameter (whose value defaults “Design” slot values separated sub-headers. styling overall header sub-headers controlled level parameter. default value level 2L, level slots defined recursively one level parent slot2. Class-specific parameters passed slot-specific knit_print methods using ....","code":".DefaultCohortSizeMax() knit_print(.DefaultDesign())"},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"dose-toxicity-model","dir":"Articles","previous_headings":"Design","what":"Dose toxicity model","title":"Describing `crmPack` Objects","text":"logistic log normal model describe relationship dose toxicity: p(Tox|d)=f(X=1|θ,d)=eα+β⋅log(d/dref)1+eα+β⋅log(d/dref) p(Tox | d) = f(X = 1 | \\theta, d) = \\frac{e^{\\alpha + \\beta \\cdot log(d/d_{ref})}}{1 + e^{\\alpha + \\beta \\cdot log(d/d_{ref})}} dref denotes reference dose. prior θ given by𝛉=[αlog(β)]∼N([−0.851.00],[1.00−0.50−0.501.00]) \\boldsymbol\\theta = \\begin{bmatrix}\\alpha \\\\ log(\\beta)\\end{bmatrix}\\sim N \\left(\\begin{bmatrix}-0.85 \\\\  1.00\\end{bmatrix} , \\begin{bmatrix} 1.00 & -0.50 \\\\ -0.50 &  1.00\\end{bmatrix} \\right) reference dose 56.00.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"stopping-rule","dir":"Articles","previous_headings":"Design","what":"Stopping rule","title":"Describing `crmPack` Objects","text":"either following rules TRUE: following rules TRUE: ≥ 3 cohorts dosed: 3 cohorts treated. P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5: probability toxicity next best dose range [0.20, 0.35] least 0.50. ≥ 20 patients dosed: 20 participants treated.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"escalation-rule","dir":"Articles","previous_headings":"Design","what":"Escalation rule","title":"Describing `crmPack` Objects","text":"Defined highest dose administered far","code":""},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"use-of-placebo","dir":"Articles","previous_headings":"Design","what":"Use of placebo","title":"Describing `crmPack` Objects","text":"Placebo administered trial.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"dose-recommendation","dir":"Articles","previous_headings":"Design","what":"Dose recommendation","title":"Describing `crmPack` Objects","text":"dose recommended next cohort chosen following way. First, doses ineligible according increments rule discarded. Next, dose mean posterior probability toxicity overdose range - (0.35, 1] - 0.25 also discarded. Finally, dose amongst remaining highest chance mean posterior probability toxicity target toxicity range 0.2 0.35 (inclusive) selected.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"cohort-size","dir":"Articles","previous_headings":"Design","what":"Cohort size","title":"Describing `crmPack` Objects","text":"Defined dose used next cohort Defined number toxicities far observed","code":""},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"observed-data","dir":"Articles","previous_headings":"Design","what":"Observed data","title":"Describing `crmPack` Objects","text":"participants yet evaluable. dose grid 1, 3, 5, 10, 15, 20, 25, 40, 50, 80 100.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"starting-dose","dir":"Articles","previous_headings":"Design","what":"Starting dose","title":"Describing `crmPack` Objects","text":"starting dose 3. Slot headers can customised using sections parameter. sections named vector. Names valid slot names object rendered values requested slot headers. Outputnotshown.Output shown. possible omit slots rendition crmPack object. need , can either render required slots individually, override definition knit_print super class demonstrated .","code":"knit_print(   .DefaultDesign(),   level = 4,   sections = c(     \"nextBest\" = \"Selection of the dose for the following cohort\",     \"startingDose\" = \"Initial dose\"   ) )"},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"restoring-console-like-behaviour","dir":"Articles","previous_headings":"","what":"Restoring console-like behaviour","title":"Describing `crmPack` Objects","text":"restore default behaviour crmPack objects, simply wrap object call normal_print().","code":"normal_print(cs) ## An object of class \"CohortSizeDLT\" ## Slot \"intervals\": ## [1] 0 1 2 ##  ## Slot \"cohort_size\": ## [1] 1 3 5"},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"accessing-the-output-of-knit_print","dir":"Articles","previous_headings":"","what":"Accessing the output of knit_print","title":"Describing `crmPack` Objects","text":"One parameters knitr::knit_print asis, default value TRUE. asis effect setting chunk option output asis. achieved returning object class knit-asis. Setting asis FALSE display raw HTML code generated knit_print displayed. Alternatively, may allow easier manipulation return value. Defined number toxicities far observed chunk option output set asis…","code":"csOutput1 <- knit_print(CohortSizeDLT(intervals = 0:2, cohort_size = c(1, 3, 5))) class(csOutput1) ## [1] \"knit_asis\" csOutput1 csOutput2 <- knit_print(CohortSizeDLT(intervals = 0:2, cohort_size = c(1, 3, 5)), asis = FALSE) class(csOutput2) ## [1] \"character\" csOutput2 ## [1] \"<table>\\n<caption>Defined by the number of toxicities so far observed<\/caption>\\n <thead>\\n<tr>\\n<th style=\\\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \\\" colspan=\\\"2\\\"><div style=\\\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \\\">No of toxicities<\/div><\/th>\\n<th style=\\\"empty-cells: hide;border-bottom:hidden;\\\" colspan=\\\"1\\\"><\/th>\\n<\/tr>\\n  <tr>\\n   <th style=\\\"text-align:right;\\\"> Lower <\/th>\\n   <th style=\\\"text-align:right;\\\"> Upper <\/th>\\n   <th style=\\\"text-align:right;\\\"> Cohort size <\/th>\\n  <\/tr>\\n <\/thead>\\n<tbody>\\n  <tr>\\n   <td style=\\\"text-align:right;\\\"> 0 <\/td>\\n   <td style=\\\"text-align:right;\\\"> 1 <\/td>\\n   <td style=\\\"text-align:right;\\\"> 1 <\/td>\\n  <\/tr>\\n  <tr>\\n   <td style=\\\"text-align:right;\\\"> 1 <\/td>\\n   <td style=\\\"text-align:right;\\\"> 2 <\/td>\\n   <td style=\\\"text-align:right;\\\"> 3 <\/td>\\n  <\/tr>\\n  <tr>\\n   <td style=\\\"text-align:right;\\\"> 2 <\/td>\\n   <td style=\\\"text-align:right;\\\"> Inf <\/td>\\n   <td style=\\\"text-align:right;\\\"> 5 <\/td>\\n  <\/tr>\\n<\/tbody>\\n<\/table>\\n\\n\" cat(csOutput2) ## <table> ## <caption>Defined by the number of toxicities so far observed<\/caption> ##  <thead> ## <tr> ## <th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">No of toxicities<\/div><\/th> ## <th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"><\/th> ## <\/tr> ##   <tr> ##    <th style=\"text-align:right;\"> Lower <\/th> ##    <th style=\"text-align:right;\"> Upper <\/th> ##    <th style=\"text-align:right;\"> Cohort size <\/th> ##   <\/tr> ##  <\/thead> ## <tbody> ##   <tr> ##    <td style=\"text-align:right;\"> 0 <\/td> ##    <td style=\"text-align:right;\"> 1 <\/td> ##    <td style=\"text-align:right;\"> 1 <\/td> ##   <\/tr> ##   <tr> ##    <td style=\"text-align:right;\"> 1 <\/td> ##    <td style=\"text-align:right;\"> 2 <\/td> ##    <td style=\"text-align:right;\"> 3 <\/td> ##   <\/tr> ##   <tr> ##    <td style=\"text-align:right;\"> 2 <\/td> ##    <td style=\"text-align:right;\"> Inf <\/td> ##    <td style=\"text-align:right;\"> 5 <\/td> ##   <\/tr> ## <\/tbody> ## <\/table>"},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"sec-override","dir":"Articles","previous_headings":"","what":"Providing your own knit_print method","title":"Describing `crmPack` Objects","text":"methods provided crmPack don’t want, ’s easy roll , using standard S3 techniques. formal arguments knitr::knit_print x .... Additional arguments can added .... example, consider knit_print.NextBestNCRM, currently returns paragraph text: dose recommended next cohort chosen following way. First, doses ineligible according increments rule discarded. Next, dose mean posterior probability toxicity overdose range - (0.35, 1] - 0.25 also discarded. Finally, dose amongst remaining highest chance mean posterior probability toxicity target toxicity range 0.2 0.35 (inclusive) selected. might feel better presented bulleted list. can achieve follows3: dose recommended next cohort chosen following way. First, doses ineligible according increments rule discarded. Next, dose mean posterior probability toxicity overdose range - (0.35, 1] - 0.25 also discarded. Finally, dose amongst remaining highest chance mean posterior probability toxicity target toxicity range 0.2 0.35 (inclusive) selected.","code":".DefaultNextBestNCRM() knit_print.NextBestNCRM <- function(x, ...) {   knitr::asis_output(     paste0(       \"The dose recommended for the next cohort will be chosen in the following \",       \"way.\\n\\n-  First, doses that are ineligible according to the increments rule \",       \"will be discarded.\\n-  Next, any dose for which the mean posterior probability of \",       \" toxicity being in the overdose range - (\",       x@overdose[1], \", \", x@overdose[2],       \"] - is \",       x@max_overdose_prob,       \" or more will also be discarded.\\n-  Finally, the dose amongst those remaining \",       \"which has the highest chance that the mean posterior probability of toxicity \",       \"is in the target toxicity range of \",       x@target[1],       \" to \",       x@target[2],       \" (inclusive) will be selected.\\n\\n\"     )   ) } registerS3method(\"knit_print\", \"NextBestNCRM\", knit_print.NextBestNCRM)  .DefaultNextBestNCRM()"},{"path":"https://openpharma.github.io/crmPack/articles/knit_print.html","id":"class-coverage","dir":"Articles","previous_headings":"","what":"Class coverage","title":"Describing `crmPack` Objects","text":"crmPack defines 124 classes. Custom knit_print methods exist 91 . remaining 33 classes, 23 virtual classes never directly instantiated end users. leaves 10 classes knit_print methods may useful. classes listed . majority classes relate simulation operating characteristics CRM trials. Reporting information likely need customisation beyond scope simple function4.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/migration_from_the_old_crmPack.html","id":"naming-convention-motivation","dir":"Articles","previous_headings":"Class and slot changes","what":"Naming convention motivation","title":"Migrating from crmPack version 1.0.3","text":"close common R style guidelines (Wickham 2019) use consistent naming conventions within crmPack package, CamelCase notation used class names, method names constructor function names, snake_case notation used slot names throughout package.","code":""},{"path":[]},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/migration_from_the_old_crmPack.html","id":"renamed-slots","dir":"Articles","previous_headings":"Class and slot changes","what":"Renamed slots","title":"Migrating from crmPack version 1.0.3","text":"Strikeout indicates class/slot removed.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/migration_from_the_old_crmPack.html","id":"moved-dose-and-prob-functions-from-slots-to-methods","dir":"Articles","previous_headings":"","what":"Moved dose and prob Functions from Slots to Methods","title":"Migrating from crmPack version 1.0.3","text":"Moved dose prob functions model class slots model class methods. Example usage: dose/prob function true dose-DLT/DLT-dose relationship.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/migration_from_the_old_crmPack.html","id":"generate-data-define-a-model-and-get-samples","dir":"Articles","previous_headings":"Moved dose and prob Functions from Slots to Methods","what":"Generate data, define a model and get samples","title":"Migrating from crmPack version 1.0.3","text":"","code":"library(crmPack) ## Loading required package: ggplot2 ## Registered S3 method overwritten by 'crmPack': ##   method       from   ##   print.gtable gtable ## Type crmPackHelp() to open help browser ## Type crmPackExample() to open example empty_data <- Data(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100)) my_model <- LogisticNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2) ) my_options <- McmcOptions(burnin = 2, step = 2, samples = 20) my_samples <- mcmc(empty_data, my_model, my_options)"},{"path":"https://openpharma.github.io/crmPack/articles/migration_from_the_old_crmPack.html","id":"dose","dir":"Articles","previous_headings":"Moved dose and prob Functions from Slots to Methods","what":"Dose","title":"Migrating from crmPack version 1.0.3","text":"example dose function can used case different inputs, .e. model’s parameters samples case fixed model’s parameters values.","code":"# Doses reaching a specific target probability of the occurrence of a DLT (equal to 0.3), # given a particular models and samples. # Every single dose corresponds to one particular sample in `my_samples`. dose(0.3, my_model, my_samples) ##  [1] 1.336359e-01 2.596757e+00 1.291015e+00 1.811871e+00 7.373561e-01 ##  [6] 8.606761e-01 3.841855e-01 1.795560e-01 2.381680e-01 1.434319e+11 ## [11] 2.840839e-02 4.446388e-01 2.661411e-01 7.006051e-01 7.189795e-01 ## [16] 5.263492e-01 9.603919e-01 1.205256e-01 1.541242e+00 2.915607e+00 # True dose-DLT relationship. # Say that -0.8 and 1 are the true values for models parameters alpha0 and alpha1 respectively. # The `true_dose_fun` takes one argument (target probability of the occurrence of a DLT) # and computes the corresponding dose, according to the model chosen and given a fixed values # of the model's parameters. true_dose_fun <- doseFunction(my_model, alpha0 = -0.8, alpha1 = 1) true_dose_fun(0.3) ## [1] 0.9538033"},{"path":"https://openpharma.github.io/crmPack/articles/migration_from_the_old_crmPack.html","id":"prob","dir":"Articles","previous_headings":"Moved dose and prob Functions from Slots to Methods","what":"Prob","title":"Migrating from crmPack version 1.0.3","text":"","code":"# Toxicity probabilities for a given dose (equal to 10), model and samples. # Every single probability value corresponds to one particular sample in `my_samples`. prob(10, my_model, my_samples) ##  [1] 0.81840757 0.18946904 0.99477307 0.89074773 0.93361985 0.99652979 ##  [7] 0.99455876 0.09395531 0.70576377 0.59738665 0.79822631 0.58442050 ## [13] 0.73497927 0.92499623 0.95791955 0.99789476 0.92099062 0.76018622 ## [19] 0.86292504 0.68134322 # True DLT-dose relationship. # Say that -0.8 and 1 are the true values for models parameters alpha0 and alpha1 respectively. # The `true_prob_fun` takes one argument (the dose) and computes the corresponding # toxicity probability, according to the model chosen and given a fixed values # of the model's parameters. true_prob_fun <- probFunction(my_model, alpha0 = -0.8, alpha1 = 1) true_prob_fun(10) ## [1] 0.8179597"},{"path":"https://openpharma.github.io/crmPack/articles/migration_from_the_old_crmPack.html","id":"new-random-number-generator-settings-for-the-mcmc","dir":"Articles","previous_headings":"","what":"New Random Number Generator settings for the MCMC","title":"Migrating from crmPack version 1.0.3","text":"Random Number Generator (RNG) settings used JAGS MCMC now configured solely McmcOptions class. RNG settings : RNG type RNG seed corresponds given RNG type. Find details help page McmcOptions class. RNG-related user settings R session level (us set.seed()) ignored MCMC sampler.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/migration_from_the_old_crmPack.html","id":"new-no-argument-constructors","dir":"Articles","previous_headings":"","what":"New no-argument constructors","title":"Migrating from crmPack version 1.0.3","text":"aid software development, new -argument constructs sub-classes GeneralModel, Increments, NextBest Stopping introduced. names constructors take form .Default<classname>, <classname> name class created. constructors return valid, necessarily contextually sensible, objects required class. One reason objects returned may contextually sensible constructors take account associated doseGrid. examples use: following rules TRUE: ≥ 3 cohorts dosed: 3 cohorts treated. P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5: probability toxicity next best dose range [0.20, 0.35] least 0.50. ≥ 20 patients dosed: 20 participants treated. logistic log normal model describe relationship dose toxicity: p(Tox|d)=f(X=1|θ,d)=eα+β⋅d/d*1+eα+β⋅d/d* p(Tox | d) = f(X = 1 | \\theta, d) = \\frac{e^{\\alpha + \\beta \\cdot d/d^*}}{1 + e^{\\alpha + \\beta \\cdot d/d^*}} d* denotes reference dose. prior θ given by𝛉=[αβ]∼N([−0.851.00],[1.00−0.50−0.501.00]) \\boldsymbol\\theta = \\begin{bmatrix}\\alpha \\\\ \\beta\\end{bmatrix}\\sim N \\left(\\begin{bmatrix}-0.85 \\\\  1.00\\end{bmatrix} , \\begin{bmatrix} 1.00 & -0.50 \\\\ -0.50 &  1.00\\end{bmatrix} \\right) reference dose 1.00.","code":".DefaultStoppingAll() class_name <- \"LogisticNormal\" eval(parse(text = paste0(\".Default\", class_name, \"()\")))"},{"path":"https://openpharma.github.io/crmPack/articles/migration_from_the_old_crmPack.html","id":"handling-of-na-or-placebo-returned-as-next-dose","dir":"Articles","previous_headings":"","what":"Handling of NA or placebo returned as next dose","title":"Migrating from crmPack version 1.0.3","text":"consistent handling study stopped facilitate analysis stop reasons operation characteristics, handling NA placebo returned nextBest methods changed. previous version crmPack stopping placebo NA returned nextBest method handled automatically generic Stopping method. now moved new stopping rule StoppingMissingDose. consequence, stopping rule StoppingMissingDose must specified nextBest methods can return NA, placebo used. Otherwise simulation may run error study stopped NA returned next dose. nextBest methods can return NA NextBestNCRM, NextBestNCRMLoss NextBestDualEndpoint.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/migration_from_the_old_crmPack.html","id":"evaluation-of-stopping-rules-at-a-specific-dose","dir":"Articles","previous_headings":"","what":"Evaluation of stopping rules at a specific dose","title":"Migrating from crmPack version 1.0.3","text":"Without specification, stopping rules evaluated dose returned used nextBest method. new stopping rule StoppingSpecificDose possible evaluate stopping rules dose. usage see documentation StoppingSpecificDose.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/migration_from_the_old_crmPack.html","id":"classes","dir":"Articles","previous_headings":"Further details in class and methods name changes","what":"Classes","title":"Migrating from crmPack version 1.0.3","text":"Strikeout indicates class/slot removed.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/migration_from_the_old_crmPack.html","id":"methods","dir":"Articles","previous_headings":"Further details in class and methods name changes","what":"Methods","title":"Migrating from crmPack version 1.0.3","text":"Strikeout indicates method/argument removed.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/ordinal-crm.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Ordinal CRM","text":"original CRM model introduced (O’Quigley, Pepe, Fisher 1990) dichotomises toxicity events either “toxic” “DLT”. ordinal CRM generalises model classifying toxicities ordinal scale arbitrary number categories (though use three four unusual). approach particularly useful non-oncology settings, greater interest adverse events dose limiting nonetheless undesirable.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/ordinal-crm.html","id":"ordinal-data","dir":"Articles","previous_headings":"Implementation","what":"Ordinal data","title":"Ordinal CRM","text":"crmPack uses DataOrdinal class record data observed ordinal CRM trial. OrdinalData class differs Data class contains extra slot, yCategories, defines number toxicity grades labels.example: defines DataOrdinal object three toxicity grades, labelled “tox`”, “Sub-tox AE” “DLT”. Note yCategories slot must integer vector values ordered 0 length(yCategories) - 1. labels must unique. first entry, must value 0, always regarded “event” category. See [LogisticLogNormalOrdinal class] . update, plot dose_grid_range methods work exactly Data objects:","code":"empty_ordinal_data <- DataOrdinal(   doseGrid = c(seq(from = 10, to = 100, by = 10)),   yCategories = c(\"No tox\" = 0L, \"Sub-tox AE\" = 1L, \"DLT\" = 2L),   placebo = FALSE ) dose_grid_range(empty_ordinal_data) #> [1]  10 100  ordinal_data <- update(empty_ordinal_data, x = 10, y = 0) ordinal_data <- update(ordinal_data, x = 20, y = 0) ordinal_data <- update(ordinal_data, x = 30, y = 0) ordinal_data <- update(ordinal_data, x = 40, y = 0) ordinal_data <- update(ordinal_data, x = 50, y = c(0, 1, 0)) ordinal_data <- update(ordinal_data, x = 60, y = c(0, 1, 2))  plot(ordinal_data)"},{"path":"https://openpharma.github.io/crmPack/articles/ordinal-crm.html","id":"the-logisticlognormalordinal-class","dir":"Articles","previous_headings":"Implementation","what":"The LogisticLogNormalOrdinal class","title":"Ordinal CRM","text":"crmPack fits constrained logistic log normal model ordinal data. logit probability toxicity grade given dose modelled log odds space linear regression common slope different intercept toxicity grade. Note, unlike model classes, LogisticLogNormalOrdinal requires diagonal covariance matrix. constraints $alpha;s - intercept parameters - imposes correlation model’s parameters. Thus, covariance structure requested end user honoured model. Let pk(d) probability response patient treated dose d category k higher, k=0, …, K; d=1, …, D. log⁡(p1−p)=αk+β⋅log⁡(ddref) \\log \\left( \\frac{p}{1-p}\\right) = \\alpha_k + \\beta \\cdot \\log \\left( \\frac{d}{d_{ref}} \\right)   k=1, …, K [p0(d) = 1 definition] dref reference dose. αs constrained α1 > α2 > … > αK. priors model’s parameters : αk∼N(μαk,σαk2) \\alpha_k \\sim N(\\mu_{\\alpha_k}, \\sigma_{\\alpha_k}^2) log⁡(β)∼N(μβ,σβ2) \\log(\\beta) \\sim N(\\mu_\\beta, \\sigma_\\beta^2) LogisticLogOrdinal initialised exactly way LogisticLogNormal object: entries mean cov parameters define hyper priors α1 αK-1 β order.","code":"ordinal_model <- LogisticLogNormalOrdinal(   mean = c(3, 4, 0),   cov = diag(c(4, 3, 1)),   ref_dose = 55 )"},{"path":"https://openpharma.github.io/crmPack/articles/ordinal-crm.html","id":"model-fitting","dir":"Articles","previous_headings":"Implementation","what":"Model fitting","title":"Ordinal CRM","text":"mcmc works expected ordinal models: warning message expected can ignored. suppressed future version crmPack. See issue 748. Samples object returned mcmc standard Samples object. names entries data slot can passed fit method, using grade parameter specify toxicity grade cumulative probabilities toxicity required: cumulative flag can used request grade-specific probabilities. Note , grade == K - 1, cumulative grade-specific probabilities toxicities identical. plot method also takes grade cumulative parameters.","code":"opts <- .DefaultMcmcOptions()  samples <- mcmc(ordinal_data, ordinal_model, opts) #> Warning in rjags::jags.model(file = model_file, data = model_data, inits = #> c(model_inits, : Unused variable \"y\" in data names(samples@data) #> [1] \"alpha1\" \"alpha2\" \"beta\" fit(samples, ordinal_model, ordinal_data, grade = 1L) #>    dose     middle        lower     upper #> 1    10 0.03581128 1.169287e-10 0.2490178 #> 2    20 0.07365699 1.320120e-06 0.3508981 #> 3    30 0.13040224 2.541868e-04 0.4309546 #> 4    40 0.21855487 1.418304e-02 0.5230966 #> 5    50 0.35470281 1.266244e-01 0.6500449 #> 6    60 0.51278106 1.779200e-01 0.8686838 #> 7    70 0.62213738 2.162729e-01 0.9773895 #> 8    80 0.69090517 2.332181e-01 0.9963605 #> 9    90 0.73675917 2.481269e-01 0.9992454 #> 10  100 0.76934272 2.676154e-01 0.9998150 fit(samples, ordinal_model, ordinal_data, grade = 2L) #>    dose     middle        lower     upper #> 1    10 0.01809018 3.773230e-11 0.1165238 #> 2    20 0.03793384 5.560546e-07 0.1787334 #> 3    30 0.06838381 1.388671e-04 0.2486989 #> 4    40 0.11792577 4.835820e-03 0.3226780 #> 5    50 0.20314348 4.631091e-02 0.4271328 #> 6    60 0.33571637 9.557268e-02 0.7187344 #> 7    70 0.45884533 1.181626e-01 0.9481453 #> 8    80 0.54678564 1.334744e-01 0.9912581 #> 9    90 0.60833025 1.432970e-01 0.9982478 #> 10  100 0.65307508 1.555098e-01 0.9995663 fit(samples, ordinal_model, ordinal_data, grade = 1L, cumulative = FALSE) #>    dose     middle        lower     upper #> 1    10 0.01772110 8.995184e-11 0.1443848 #> 2    20 0.03572315 5.754771e-07 0.2238874 #> 3    30 0.06201843 9.773473e-05 0.2719871 #> 4    40 0.10062910 1.689778e-03 0.3430568 #> 5    50 0.15155933 4.267655e-03 0.4290488 #> 6    60 0.17706469 5.438387e-03 0.4937465 #> 7    70 0.16329205 4.825669e-03 0.4655405 #> 8    80 0.14411953 2.658784e-03 0.4426366 #> 9    90 0.12842892 6.923918e-04 0.4397524 #> 10  100 0.11626764 1.912305e-04 0.4312023 fit(samples, ordinal_model, ordinal_data, grade = 2L, cumulative = FALSE) #>    dose     middle        lower     upper #> 1    10 0.01809018 3.773230e-11 0.1165238 #> 2    20 0.03793384 5.560546e-07 0.1787334 #> 3    30 0.06838381 1.388671e-04 0.2486989 #> 4    40 0.11792577 4.835820e-03 0.3226780 #> 5    50 0.20314348 4.631091e-02 0.4271328 #> 6    60 0.33571637 9.557268e-02 0.7187344 #> 7    70 0.45884533 1.181626e-01 0.9481453 #> 8    80 0.54678564 1.334744e-01 0.9912581 #> 9    90 0.60833025 1.432970e-01 0.9982478 #> 10  100 0.65307508 1.555098e-01 0.9995663 plot(samples, ordinal_model, ordinal_data, grade = 2L) plot(samples, ordinal_model, ordinal_data, grade = 1L) plot(samples, ordinal_model, ordinal_data, grade = 1L, cumulative = FALSE)"},{"path":"https://openpharma.github.io/crmPack/articles/ordinal-crm.html","id":"rules-classes-for-ordinal-models","dir":"Articles","previous_headings":"Implementation","what":"Rules classes for ordinal models","title":"Ordinal CRM","text":"class Rule (, CohortSize, Increments, NextBest Stopping), crmPack provides single wrapper class allows Rule applied trials using ordinal CRM models. wrapper class name <Rule>Ordinal takes two parameters, rule grade. rule defines standard crmPck Rule grade toxicity grade rule applied. example Rules based different toxicity grades can combined produce complex rules. define two Increments rules, one based toxicity grade 1, toxicity grade 2. Recall two sub toxic AEs one DLT reported example data set. Thus, rule based sub-toxic AEs allows maximum increment 0.67 three events reported, giving maximum permitted dose 100.2. one DLT reported, second rule allows increment 0.5, giving maximum permitted dose 90. two grade-specific rules can combined single rule using IncrementsMin:","code":"dlt_rule <- CohortSizeDLT(intervals = 0:2, cohort_size = c(1, 3, 5)) ordinal_rule_1 <- CohortSizeOrdinal(grade = 1L, rule = dlt_rule) ordinal_rule_2 <- CohortSizeOrdinal(grade = 2L, rule = dlt_rule)  size(ordinal_rule_1, 50, empty_ordinal_data) #> [1] 1 size(ordinal_rule_2, 50, empty_ordinal_data) #> [1] 1 size(ordinal_rule_1, 50, ordinal_data) #> [1] 5 size(ordinal_rule_2, 50, ordinal_data) #> [1] 3 ordinal_rule_1 <- IncrementsOrdinal(   grade = 1L,   rule = IncrementsRelativeDLT(intervals = 0:2, increments = c(3, 1.5, 0.67)) ) maxDose(ordinal_rule_1, ordinal_data) #> [1] 100.2 ordinal_rule_2 <- IncrementsOrdinal(   grade = 2L,   rule = IncrementsRelativeDLT(intervals = 0:1, increments = c(3, 0.5)) ) maxDose(ordinal_rule_2, ordinal_data) #> [1] 90 trial_rule <- IncrementsMin(list(ordinal_rule_1, ordinal_rule_2)) maxDose(trial_rule, ordinal_data) #> [1] 90"},{"path":"https://openpharma.github.io/crmPack/articles/ordinal-crm.html","id":"on-the-need-for-a-diagonal-covariance-matrix","dir":"Articles","previous_headings":"","what":"On the need for a diagonal covariance matrix","title":"Ordinal CRM","text":"Consider standard logistic log Normal CRM model: can estimate prior using empty Data object… obtain correlation model’s parameters [recalling prior defined terms log(alpha1)]… requested covariance -0.5 got -0.5416755.2. Pretty good! Now look ordinal CRM model non-zero correlation parameters. begin, take copy current LogisticLogNormalOrdinal model give non-diagonal covariance matrix accessing params@cov slot directly, deliberately avoiding object validation. NB poor practice recommended. done purely illustration. Fit revised model obtain prior. Finally, look covariance matrix, remembering use log(beta) rather beta… correlations nothing like requested. due constraints imposed intercepts model. situation likely worsen number toxicity categories increases. open issue - #755 -examine options allowing end users specify correlation structures ordinal CRM models. like contribute, please .","code":"model <- LogisticLogNormal(   mean = c(-3, 1),   cov = matrix(c(4, -0.5, -0.5, 3), ncol = 2),   ref_dose = 45 )  model@params@cov #>      [,1] [,2] #> [1,]  4.0 -0.5 #> [2,] -0.5  3.0 data <- Data(doseGrid = seq(10, 100, 10)) options <- McmcOptions(   samples = 30000,   rng_kind = \"Mersenne-Twister\",   rng_seed = 8191316 ) samples <- mcmc(data, model, options) d <- as.matrix(cbind(samples@data$alpha0, log(samples@data$alpha1))) sigmaHat <- cov(d) sigmaHat #>            [,1]       [,2] #> [1,]  4.0094331 -0.5416752 #> [2,] -0.5416752  3.0363958 ordinal_model_temp <- ordinal_model ordinal_model_temp@params@cov <- matrix(c(4, -0.5, -0.5, -0.5, 3, -0.5, -0.5, -0.5, 1), ncol = 3)  ordinal_model_temp@params@cov #>      [,1] [,2] [,3] #> [1,]  4.0 -0.5 -0.5 #> [2,] -0.5  3.0 -0.5 #> [3,] -0.5 -0.5  1.0 ordinal_data <- DataOrdinal(doseGrid = seq(10, 100, 10)) ordinal_samples <- mcmc(ordinal_data, ordinal_model_temp, options) #> Warning in rjags::jags.model(file = model_file, data = model_data, inits = #> c(model_inits, : Unused variable \"tox\" in data ordinalD <- as.matrix(   cbind(     ordinal_samples@data$alpha1,     ordinal_samples@data$alpha2,     log(ordinal_samples@data$beta)   ) ) sigmaHat <- cov(ordinalD) sigmaHat #>             [,1]        [,2]         [,3] #> [1,]  4.00158899 2.768345336 -0.001112980 #> [2,]  2.76834534 2.924696828  0.008697924 #> [3,] -0.00111298 0.008697924  1.012033823"},{"path":"https://openpharma.github.io/crmPack/articles/ordinal-crm.html","id":"some-observations","dir":"Articles","previous_headings":"","what":"Some observations","title":"Ordinal CRM","text":"currently considering need making grade-specific functionality available across crmPack methods. specific use case currently supported, please contact us. need ordinal CRM dual endpoint models, please let us know. crmPack supported ordinal CRM outset, classes support standard, binary, CRM models sub-classes general ordinal implementations. consider taking approach adding support ordinal CRM models existing code. decided purely defensive conservative reasons. introduced ordinal classes parents existing classes, changes code base much substantial concerned might miss implicit assumptions dimensionality existing models. therefore chose implement ordinal classes siblings, rather parents, existing classes. approach minimises risk breaking existing end-user code risk slightly greater complexity using new classes.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/ordinal-crm.html","id":"environment","dir":"Articles","previous_headings":"","what":"Environment","title":"Ordinal CRM","text":"","code":"#> R version 4.5.0 (2025-04-11) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] crmPack_2.0.0.9002 ggplot2_3.5.2      #>  #> loaded via a namespace (and not attached): #>  [1] sass_0.4.10          generics_0.1.4       futile.options_1.0.1 #>  [4] xml2_1.4.0           lattice_0.22-7       stringi_1.8.7        #>  [7] digest_0.6.37        magrittr_2.0.3       evaluate_1.0.5       #> [10] grid_4.5.0           RColorBrewer_1.1-3   mvtnorm_1.3-3        #> [13] fastmap_1.2.0        jsonlite_2.0.0       backports_1.5.0      #> [16] formatR_1.14         gridExtra_2.3        viridisLite_0.4.2    #> [19] scales_1.4.0         textshaping_1.0.3    jquerylib_0.1.4      #> [22] cli_3.6.5            rlang_1.1.6          futile.logger_1.4.3  #> [25] parallelly_1.45.1    withr_3.0.2          cachem_1.1.0         #> [28] yaml_2.3.10          parallel_4.5.0       tools_4.5.0          #> [31] coda_0.19-4.1        checkmate_2.3.3      dplyr_1.1.4          #> [34] lambda.r_1.2.4       kableExtra_1.4.0     vctrs_0.6.5          #> [37] R6_2.6.1             lifecycle_1.0.4      stringr_1.5.1        #> [40] GenSA_1.1.14.1       fs_1.6.6             htmlwidgets_1.6.4    #> [43] ragg_1.5.0           rjags_4-17           pkgconfig_2.0.3      #> [46] desc_1.4.3           pkgdown_2.1.3        pillar_1.11.0        #> [49] bslib_0.9.0          gtable_0.3.6         glue_1.8.0           #> [52] systemfonts_1.2.3    xfun_0.53            tibble_3.3.0         #> [55] tidyselect_1.2.1     rstudioapi_0.17.1    knitr_1.50           #> [58] dichromat_2.0-0.1    farver_2.1.2         htmltools_0.5.8.1    #> [61] labeling_0.4.3       rmarkdown_2.29       svglite_2.2.1        #> [64] compiler_4.5.0"},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/parallel_computing_with_extensions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Parallel computing with extensions","text":"One big advantages crmPack existing R implementations flexible framework based S4 classes methods system (Chambers 2008). Users can extend existing functionality easily specific needs study (Sabanes Bove et al. 2019). User defined extensions classes methods can easily created used together existing crmPack classes methods setting study performing analysis observed data. long parallel computing used, special care needs taken utilizing native user defined classes methods. trial simulations need performed derive operational characteristics study setup, run times may become long single core processing. run time depends mainly number study replications MCMC samples. cases long run times, utilizing parallel computing, .e., using multiple CPU cores, can overcome challenge decrease run times significantly. Parallel computing supported crmPack design, .e., whenever simulation call invoked parameters parallel = TRUE nCores = one CPU, core initialized crmPack package global environment. Due nature S4 object system, user defined classes method defined global environment just made available core initializing core global environment. User defined classes method needs executed core initialized warrant full functionality S4 objects. following paragraphs provide example user defined extensions can used utilizing parallel computing within crmPack.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/parallel_computing_with_extensions.html","id":"high-level-usage","dir":"Articles","previous_headings":"","what":"High level usage","title":"Parallel computing with extensions","text":"use user written extension parallel computing crmPack, user written code needs embedded function. function stored value global option fixed name crmpack_extensions. existence global option evaluated parallel computing requested. case option crmpack_extensions exists, content submitted node cluster, user written S4 classes methods available along crmPack package. following code show high level, option utilized.","code":"options(   crmpack_extensions = function() {     # ..... user code .....   } )"},{"path":"https://openpharma.github.io/crmPack/articles/parallel_computing_with_extensions.html","id":"important-information-for-usage","dir":"Articles","previous_headings":"","what":"Important information for usage","title":"Parallel computing with extensions","text":"operation characteristics design needs derived utilizing parallel computing, simulation function must executed parameter parallel = TRUE nCores = number greater one. case, evaluated global option name crmpack_extensions exists. true, value global option crmpack_extensions executed core time initialization, .e., character string equal global option crmpack_extensions executed core cluster, code available use parallel computing. Please note wrapper function holds user extensions convenient way hand class method definitions user constructor function crmpack_extensions option. However, constructor function must available environment called. extensions directly coded within wrapper function, <<- operator must used new user defined constructor function defined within wrapper function. <<- operator force function become visible within global environment. Another possibility store user extensions file sourced within wrapper function. case user defined constructor function can assigned regular <- operator, source parse content file environment. avoid errors important understand packages attached current environment available workers environment. .e., even though code may work without problems used single core processing, may fail parallel execution functions attached workers environment. Therefore necessary make sure called functions available workers environment. can achieved including library statement within wrapper function using double colon operator ::. described usage options detailed example.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/parallel_computing_with_extensions.html","id":"information-for-debugging","dir":"Articles","previous_headings":"","what":"Information for debugging","title":"Parallel computing with extensions","text":"expected good practice, new written extension first tested validated one CPU core, utilizing global option crmpack_extensions. important understand character string value global option crmpack_extensions executed directly core checked validity correctness. case code run errors, returned error message using parallel computing may misleading may help identify root cause problem. Debugging newly written code much easier without using parallel computing.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/parallel_computing_with_extensions.html","id":"worked-out-example","dir":"Articles","previous_headings":"","what":"Worked out example","title":"Parallel computing with extensions","text":"Let us assume want utilize two-parameter logistic regression model, slope parameter positive values, normal prior truncated slope parameter, slope can positive values. case want set prior distribution slope parameter truncated normal distribution bounded zero lower end. model representation part crmPack package can easily added shown . Please note example extra code directly inserted option crmpack_extensions function. mentioned , user write test code first without embedding function set equal option crmpack_extensions, assure errors occur whole execution results expected. new code defined embedded function, can store function value global option, name crmpack_extensions. Please note <<-operator used assign LogisticNormalTruncPrior function global environment. assertion functions package checkmate referenced double colon operator example. case package checkmate attached within function, .e., statement library(checkmate) used code , direct reference checkmate:: can removed. Either way works parallel computing makes sure functions can used current environment workers parallel study simulations performed. Now able use newly created model LogisticNormalTruncPrior set study. First, get value global option crmpack_extensions, function defined . execute function within global environment, constructor function corresponding classes methods prob dose become available. Next can set study new model desired design features. setting model design features, useful check model decisions case DLT observed certain dose level study simulations performed. check can also serve additional test new written code. examine runs expected, study simulations can performed. demonstrate difference single core processing multiple core processing, two scenarios processed single core processing, followed 5 scenarios utilizing parallel computing. regard run times example, please see note end vignette. simulations single core processing running successful, full operation characteristics utilizing parallel computing can derived.","code":"library(crmPack)  my_own_extension <- function() {   # Attach the package checkmate with library(checkmate) here, to avoid usage of   # the :: operator in the code below.    # LogisticNormalTruncPrior ----    ## class ----    #' `LogisticNormalTruncPrior`   #'   #' @description `r lifecycle::badge(\"experimental\")`   #'   #' [`LogisticNormalTruncPrior`] is the class for the usual logistic regression   #'  model with bivariate normal prior on the intercept and slope.   #'   #' @aliases LogisticNormalTruncPrior   #' @export   #'   #' @slot mean1 the mean of the intercept   #' @slot mean2 the mean of the slope   #' @slot var1 the variance of the intercept   #' @slot var2 the variance of the slope   #'   .LogisticNormalTruncPrior <- setClass(     Class = \"LogisticNormalTruncPrior\",     contains = \"GeneralModel\",     slots = c(       mean1 = \"numeric\",       mean2 = \"numeric\",       var1 = \"numeric\",       var2 = \"numeric\"     )   )    ## constructor ----    #' @rdname LogisticNormalTruncPrior-class    #' Initialization function for the `LogisticNormalTruncPrior` class   #'   #' @param mean1 the mean of the intercept   #' @param mean2 the mean of the slope   #' @param var1 the variance of the intercept   #' @param var2 the variance of the slope   #' @return the \\code{\\linkS4class{LogisticNormalTruncPrior}} object   #'   #' @export   #' @keywords methods   LogisticNormalTruncPrior <<- function(mean1, mean2, var1, var2) {     .LogisticNormalTruncPrior(       mean1 = mean1,       mean2 = mean2,       var1 = var1,       var2 = var2,       datamodel = function() {         for (i in 1:nObs) {           y[i] ~ dbern(mean[i])           logit(mean[i]) <- alpha0 + alpha1 * x[i]         }       },       priormodel = function() {         alpha0 ~ dnorm(mean1, 1 / var1)         alpha1 ~ dnorm(mean2, 1 / var2) %_% I(0, )       },       datanames = c(\"nObs\", \"y\", \"x\"),       modelspecs = function() {         list(           mean1 = mean1,           mean2 = mean2,           var1 = var1,           var2 = var2         )       },       init = function() {         list(alpha0 = mean1, alpha1 = mean2)       },       sample = c(\"alpha0\", \"alpha1\")     )   }    ## dose ----    #' @describeIn dose compute the dose level reaching a specific toxicity   #'   probability.   #'   #' @aliases dose-LogisticNormalTruncPrior   #' @export   #'   setMethod(     f = \"dose\",     signature = signature(       x = \"numeric\",       model = \"LogisticNormalTruncPrior\",       samples = \"Samples\"     ),     definition = function(x, model, samples) {       checkmate::assert_probabilities(x)       checkmate::assert_subset(c(\"alpha0\", \"alpha1\"), names(samples))       assert_length(x, len = size(samples))        alpha0 <- samples@data$alpha0       alpha1 <- samples@data$alpha1       (logit(x) - alpha0) / alpha1     }   )    ## prob ----    #' @describeIn prob compute the toxicity probability of a specific dose.   #'   #' @aliases prob-LogisticNormalTruncPrior   #' @export   #'   setMethod(     f = \"prob\",     signature = signature(       dose = \"numeric\",       model = \"LogisticNormalTruncPrior\",       samples = \"Samples\"     ),     definition = function(dose, model, samples) {       checkmate::assert_numeric(         dose,         lower = 0L, any.missing = FALSE, min.len = 1       )       checkmate::assert_subset(c(\"alpha0\", \"alpha1\"), names(samples))       assert_length(dose, len = size(samples))        alpha0 <- samples@data$alpha0       alpha1 <- samples@data$alpha1       1 / (1 + exp(-alpha0 - alpha1 * dose))     }   ) } # Store the function into the global option crmpack_extensions. options(crmpack_extensions = my_own_extension) # Execute the user written extensions. getOption(\"crmpack_extensions\")() # Create the dose grid. emptydata <- Data(   doseGrid = c(     10, 15, 20, 30, 40, 60, 80, 120, 160, 240, 320,     480, 640, 960, 1280, 1920, 2400, 3000, 4000   ),   placebo = FALSE )  # Create data for basic testing of the setup. my_data <- Data(   x = c(10, 20, 40, 80, 80, 160, 160),   y = c(0, 0, 0, 0, 0, 1, 1),   cohort = c(1, 2, 3, 4, 4, 5, 5),   ID = 1:7,   doseGrid = emptydata@doseGrid )  # Setup the model. my_model <- LogisticNormalTruncPrior(   mean1 = -3,   mean2 = 0.00075,   var1 = 1,   var2 = 0.000009 )  # Options used for simulations. my_options <- McmcOptions(   burnin = 100,   step = 2,   samples = 100,   rng_kind = \"Mersenne-Twister\",   rng_seed = 94 )  # Create mcmc samples. my_samples <- mcmc(my_data, my_model, my_options)  # Plot the dose toxicity curve. plot(my_samples, my_model, my_data)  # Specify increments. my_increments <- IncrementsRelativeDLT(   intervals = c(0, 1),   increments = c(1, 0.5) )  # Maximum dose. this_max_dose <- maxDose(my_increments, my_data)  # Next best dose. my_next_best <- NextBestMinDist(target = 0.3) this_next_dose <- nextBest(   my_next_best, this_max_dose, my_samples, my_model, my_data )$value  # Stopping rule. my_stopping <- StoppingPatientsNearDose(nPatients = 9, percentage = 0)  # Stop trial based on criteria and observed data. stopTrial(my_stopping, this_next_dose, my_samples, my_model, my_data)  # Cohorts size. my_size <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) )  # Design. my_design <- Design(   model = my_model,   nextBest = my_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = emptydata,   startingDose = 10 ) # Examine the design. examine(my_design, my_options) # Set up scenarios scenario_setup <- function(intercept, mtd_prob, mtd_dose) {   probFunction(     my_model,     alpha0 = logit(intercept),     alpha1 = (logit(mtd_prob) - logit(intercept)) / mtd_dose   ) }  safe_scenario <- scenario_setup(0.05, 0.3, 20000) late_scenario <- scenario_setup(0.05, 0.3, 2000) early_scenario <- scenario_setup(0.05, 0.3, 700) toxic_scenario <- scenario_setup(0.6, 0.3, -300) peak_scenario <- function(     dose,     scenario = cbind(emptydata@doseGrid, c(rep(0.05, 11), rep(0.80, 8)))) {   scenario[match(dose, scenario[, 1]), 2] }  # Helper function that outputs the elapsed time. report_time <- function(report_text) {   cat(     format(Sys.time(), usetz = TRUE),     report_text,     \"done - elapsed time from start:\",     round(difftime(Sys.time(), start_time, units = \"mins\"), digits = 1),     \"\\n\"   ) }  # Helper function that simulates a specific truth. get_oc <- function(truth) {   simulate(     my_design,     args = NULL,     truth = truth,     nsim = my_nsim,     mcmcOptions = my_options,     parallel = do_parallel,     nCores = parallelly::availableCores()   ) }  # get operation characteristics without utilizing parallel computing for # selected truth (to reduce the run time). time_no_parallel <- system.time({   start_time <- Sys.time()   cat(format(Sys.time(), usetz = TRUE), \"start\", \"\\n\")    my_nsim <- 10   do_parallel <- FALSE    safe <- get_oc(safe_scenario)    report_time(\"safe (single core processing)\")    late <- get_oc(late_scenario)    report_time(\"late (single core processing)\") }) # Get full operation characteristics utilizing parallel computing. time <- system.time({   start_time <- Sys.time()   cat(format(Sys.time(), usetz = TRUE), \"start\", \"\\n\")    my_nsim <- 10   do_parallel <- TRUE    safe <- get_oc(safe_scenario)    report_time(\"safe\")    late <- get_oc(late_scenario)    report_time(\"late\")    early <- get_oc(early_scenario)    report_time(\"early\")    toxic <- get_oc(toxic_scenario)    report_time(\"toxic\")    peak <- get_oc(peak_scenario)    report_time(\"peak\") })"},{"path":"https://openpharma.github.io/crmPack/articles/parallel_computing_with_extensions.html","id":"alternative-read-user-code-from-external-file","dir":"Articles","previous_headings":"","what":"Alternative: read user code from external file","title":"Parallel computing with extensions","text":"alternative may convenient store user extensions external file source file wrapper function. advantage, <<- operator necessary user constructor functions can replaced usual assignment <-.","code":"if (FALSE) {   # Store code example form above in external file and   # remove the wrapper function structure.   dump(\"my_own_extension\", file = \"user_extension.R\")   file_con <- file(\"user_extension.R\")   tmp <- readLines(file_con)[-c(1:3, 135)]   tmp <- gsub(\"<<-\", \"<-\", tmp)   writeLines(tmp, file_con)    # Source the stored file in the wrapper function.   my_own_extension2 <- function() {     source(\"user_extension.R\")   }    options(crmpack_extensions = my_own_extension2)   getOption(\"crmpack_extensions\")()    # Run the rest of the code from above example }"},{"path":"https://openpharma.github.io/crmPack/articles/parallel_computing_with_extensions.html","id":"note","dir":"Articles","previous_headings":"","what":"Note","title":"Parallel computing with extensions","text":"analyses presented vignette used chains short length well limited number trial simulations. purely convenience. Study simulations real trials use considerably longer chains much higher number trial simulations. example apparent small number study simulations, overhead initializing cluster parallel computing, leads longer run time simulations comparison single core processing. However, relevant number study simulations, substantial run time benefit utilizing parallel computation can easily seen.","code":""},{"path":[]},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/rolling-crm.html","id":"setting-up-the-data","dir":"Articles","previous_headings":"Example 1: Recommend a dose for the next cohort","what":"Setting up the data","title":"Rolling CRM Example","text":"","code":"library(crmPack) ## Loading required package: ggplot2 ## Registered S3 method overwritten by 'crmPack': ##   method       from   ##   print.gtable gtable ## Type crmPackHelp() to open help browser ## Type crmPackExample() to open example data <- DataDA(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 1, 1, 0, 0, 1, 0),   ID = as.integer(1:8),   cohort = as.integer(c(1, 2, 3, 4, 5, 6, 6, 6)),   doseGrid =     c(       0.1, 0.5, 1.5, 3, 6,       seq(from = 10, to = 80, by = 2)     ),   u = c(42, 30, 15, 5, 20, 25, 30, 60),   t0 = rep(0, 8),   Tmax = 60 )  emptydata <- DataDA(   doseGrid = c(     0.1, 0.5, 1, 1.5, 3, 6,     seq(from = 10, to = 80, by = 2)   ),   Tmax = 60 )"},{"path":"https://openpharma.github.io/crmPack/articles/rolling-crm.html","id":"structure-of-the-model-class","dir":"Articles","previous_headings":"Example 1: Recommend a dose for the next cohort","what":"Structure of the model class","title":"Rolling CRM Example","text":"","code":"npiece_ <- 10 Tmax_ <- 60  lambda_prior <- function(k) {   npiece_ / (Tmax_ * (npiece_ - k + 0.5)) }  model <- DALogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56,   npiece = npiece_,   l = as.numeric(t(apply(as.matrix(c(1:npiece_), 1, npiece_), 2, lambda_prior))),   c_par = 2 )"},{"path":"https://openpharma.github.io/crmPack/articles/rolling-crm.html","id":"obtain-the-posterior","dir":"Articles","previous_headings":"Example 1: Recommend a dose for the next cohort","what":"Obtain the posterior","title":"Rolling CRM Example","text":"","code":"options <- McmcOptions(   burnin = 10,   step = 2,   samples = 1e2 )  set.seed(94) samples <- mcmc(data, model, options)"},{"path":"https://openpharma.github.io/crmPack/articles/rolling-crm.html","id":"use-ggmcmc-to-diagnose","dir":"Articles","previous_headings":"Example 1: Recommend a dose for the next cohort","what":"Use ggmcmc to diagnose","title":"Rolling CRM Example","text":"","code":"library(ggmcmc) ## Loading required package: dplyr ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union ## Loading required package: tidyr alpha0samples <- get(samples, \"alpha0\")  print(ggs_traceplot(alpha0samples)) print(ggs_autocorrelation(alpha0samples))"},{"path":"https://openpharma.github.io/crmPack/articles/rolling-crm.html","id":"plot-the-model-fit","dir":"Articles","previous_headings":"Example 1: Recommend a dose for the next cohort","what":"Plot the model fit","title":"Rolling CRM Example","text":"","code":"plot(samples, model, data, hazard = TRUE) plot(samples, model, data, hazard = FALSE)"},{"path":"https://openpharma.github.io/crmPack/articles/rolling-crm.html","id":"prior-mean-curve","dir":"Articles","previous_headings":"Example 1: Recommend a dose for the next cohort","what":"prior mean curve","title":"Rolling CRM Example","text":"","code":"emptydata <- DataDA(doseGrid = c(   0.1, 0.5, 1.5, 3, 6,   seq(from = 10, to = 80, by = 2) ), Tmax = 60)  Priorsamples <- mcmc(emptydata, model, options)  plot(Priorsamples, model, emptydata, hazard = FALSE)"},{"path":"https://openpharma.github.io/crmPack/articles/rolling-crm.html","id":"escalation-rules","dir":"Articles","previous_headings":"Example 1: Recommend a dose for the next cohort","what":"Escalation rules","title":"Rolling CRM Example","text":"Need fill (use rule section 8 “using package crmPack: introductory examples”)","code":"myIncrements <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  nextMaxDose <- maxDose(myIncrements, data = data)  myNextBest <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  mySize1 <- CohortSizeRange(intervals = c(0, 30), cohort_size = c(1, 3)) mySize2 <- CohortSizeDLT(intervals = c(0, 1), cohort_size = c(1, 3)) mySize <- maxSize(mySize1, mySize2)  myStopping1 <- StoppingTargetProb(target = c(0.2, 0.35), prob = 0.5) myStopping2 <- StoppingMinPatients(nPatients = 50) myStopping <- (myStopping1 | myStopping2)"},{"path":"https://openpharma.github.io/crmPack/articles/rolling-crm.html","id":"recommended-dose-for-the-next-cohort","dir":"Articles","previous_headings":"Example 1: Recommend a dose for the next cohort","what":"Recommended dose for the next cohort","title":"Rolling CRM Example","text":"","code":"doseRecommendation <- nextBest(myNextBest,   doselimit = nextMaxDose,   samples = samples,   model = model,   data = data )  doseRecommendation$plot doseRecommendation$value ## [1] 0.5"},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/rolling-crm.html","id":"set-up-safety-window-and-dadesign-to-be-completed","dir":"Articles","previous_headings":"Example 2: Run a simulation to evaluate operating characteristics","what":"Set up safety window and DADesign to be completed","title":"Rolling CRM Example","text":"","code":"mysafetywindow <- SafetyWindowConst(c(6, 2), 7, 7)  design <- DADesign(   model = model,   increments = myIncrements,   nextBest = myNextBest,   stopping = myStopping,   cohort_size = mySize,   data = emptydata,   safetyWindow = mysafetywindow,   startingDose = 3 )"},{"path":"https://openpharma.github.io/crmPack/articles/rolling-crm.html","id":"set-up-true-curves","dir":"Articles","previous_headings":"Example 2: Run a simulation to evaluate operating characteristics","what":"Set up true curves","title":"Rolling CRM Example","text":"","code":"myTruth <- probFunction(model, alpha0 = 2, alpha1 = 3) curve(myTruth(x), from = 0, to = 100, ylim = c(0, 1)) onset <- 15 exp_cond.cdf <- function(x) {   1 - (pexp(x, 1 / onset, lower.tail = FALSE) - pexp(28, 1 / onset, lower.tail = FALSE)) / pexp(28, 1 / onset) }"},{"path":"https://openpharma.github.io/crmPack/articles/rolling-crm.html","id":"perform-the-simulations","dir":"Articles","previous_headings":"Example 2: Run a simulation to evaluate operating characteristics","what":"Perform the simulations","title":"Rolling CRM Example","text":"","code":"mySims <- simulate(design,   args = NULL,   truthTox = myTruth,   truthSurv = exp_cond.cdf, # piece_exp_cond.cdf,   trueTmax = 80,   nsim = 2,   seed = 819,   mcmcOptions = options,   firstSeparate = TRUE,   deescalate = FALSE,   parallel = FALSE )"},{"path":"https://openpharma.github.io/crmPack/articles/rolling-crm.html","id":"interpret-the-simulation-results","dir":"Articles","previous_headings":"Example 2: Run a simulation to evaluate operating characteristics","what":"Interpret the simulation results","title":"Rolling CRM Example","text":"Use similar way section 9.2 “using package crmPack: introductory examples” document","code":"a <- summary(mySims, truth = myTruth) b <- mySims@data[[1]]  plot(mySims) plot(b) mySims@stop_reasons[[2]] ## [[1]] ## [1] \"Probability for target toxicity is 60 % for dose 26 and thus above the required 50 %\" ##  ## [[2]] ## [1] \"Number of patients is 17 and thus below the prespecified minimum number 50\" # nolint end"},{"path":"https://openpharma.github.io/crmPack/articles/simulations.html","id":"simulation-setting","dir":"Articles","previous_headings":"","what":"Simulation setting","title":"Simulation study example","text":"simulation study setting defined.","code":"id <- 1 onset <- 3 a0 <- 2 a1 <- 3 refDose <- 56  # True dose-DLT relationship myTruth <- function(dose) {   StandLogDose <- log(dose / refDose)   plogis(a0 + a1 * StandLogDose) }  # The conditional CDF of the PEM if (onset == 30) {   onset <- 15   exp_cond.cdf <- function(x) {     (pexp(42 - x, 1 / onset, lower.tail = FALSE) - pexp(Tmax_, 1 / onset, lower.tail = FALSE)) / pexp(Tmax_, 1 / onset)   } } else {   exp_cond.cdf <- function(x) {     1 - (pexp(x, 1 / onset, lower.tail = FALSE) - pexp(Tmax_, 1 / onset, lower.tail = FALSE)) / pexp(Tmax_, 1 / onset)   } }"},{"path":"https://openpharma.github.io/crmPack/articles/simulations.html","id":"design-definition","dir":"Articles","previous_headings":"","what":"Design definition","title":"Simulation study example","text":"dose escalation designs defined: example TITE-CRM used. Similarly code can adapted rolling-CRM.","code":"library(crmPack) ## Loading required package: ggplot2 ## Registered S3 method overwritten by 'crmPack': ##   method       from   ##   print.gtable gtable ## Type crmPackHelp() to open help browser ## Type crmPackExample() to open example Tmax_ <- 42  model <- TITELogisticLogNormal(   mean = c(1.33, 1.49),   cov = matrix(c(1.826, 0.0209, 0.0209, 0.0245), nrow = 2),   ref_dose = refDose )  myIncrements <- IncrementsRelative(   intervals = c(0, 20),   increments = c(10, 3) )  myNextBest <- NextBestMTD(   target = 0.3,   derive =     function(mtd_samples) {       mean(mtd_samples)     } )  myStopping <- StoppingMinPatients(nPatients = 48)  mySize <- CohortSizeConst(size = 3)  emptydata <- DataDA(doseGrid = seq(from = 2, to = 50, by = 2), Tmax = Tmax_)  mysafetywindow <- SafetyWindowConst(c(7, 7), 7, 7)  design <- DADesign(   model = model,   increments = myIncrements,   nextBest = myNextBest,   stopping = myStopping,   cohort_size = mySize,   data = emptydata,   safetyWindow = mysafetywindow,   startingDose = 8 )"},{"path":"https://openpharma.github.io/crmPack/articles/simulations.html","id":"simulation-run","dir":"Articles","previous_headings":"","what":"Simulation run","title":"Simulation study example","text":"order obtain stable results, increase simulation parameters appropriately (step, samples, nsim).","code":"options <- McmcOptions(   burnin = 20,   step = 1,   samples = 50 ) mySims <- simulate(design,   args = NULL,   truthTox = myTruth,   truthSurv = exp_cond.cdf,   trueTmax = 42,   nsim = 10,   seed = 819,   mcmcOptions = options,   parallel = FALSE )  # nolint end"},{"path":"https://openpharma.github.io/crmPack/articles/tidy_method.html","id":"introducing-tidy-methods-to-crmpack","dir":"Articles","previous_headings":"","what":"Introducing tidy methods to crmPack","title":"Using tidy","text":"latest release crmPack introduces broom-like tidy methods crmPack classes. methods convert underlying S4 classes (lists ) tibbles. facilitate reporting aspects CRM trials well making easier integrate crmPack packages ggplot2.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/tidy_method.html","id":"basic-approach","dir":"Articles","previous_headings":"Introducing tidy methods to crmPack","what":"Basic approach","title":"Using tidy","text":"following general approach take tidying crmPack classes: slots functions converted tibbles list tibbles. slot’s value list, rules applied element list turn. slot’s value scalar, slot converted 1x1 tibble. ease downstream operations row_binding. object tidied contains multiple slots (potentially) different lengths, result list tibbles. list may nested multiple levels. (See, example, LogisticLogNormal.) Exception: slot name plural contains vector list, column name singular. See, example, CohortSizeParts . value slot set, zero-row tibble returned. value slot scalar attributes, attributes added columns tibble, whose name name attribute whose value value attribute every row tibble. Vector attributes can added, default, nested tibble. nested tibble 1 row x n column, column names defined name attribute values given value corresponding attribute. tbl_<className> prepended class (list ) tidy tibble(s).","code":""},{"path":"https://openpharma.github.io/crmPack/articles/tidy_method.html","id":"exceptions","dir":"Articles","previous_headings":"Introducing tidy methods to crmPack","what":"Exceptions","title":"Using tidy","text":"vector slot (series vector slots) define range ()example, intervals slot various CohortSize Increments classes, naming convention described followed. Instead, columns named min max define extent range.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/tidy_method.html","id":"examples","dir":"Articles","previous_headings":"Introducing tidy methods to crmPack","what":"Examples","title":"Using tidy","text":"CohortSizeConst trivial example illustrates default approach classes. IncrementsRelative illustrate ranges handled. CohortSizeMax contains slot whose value list. Samples class likely useful making presentations yet supported crmPack directly.","code":"CohortSizeConst(size = 3) %>% tidy() #> # A tibble: 1 × 1 #>    size #>   <int> #> 1     3 IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) ) %>%   tidy() #> # A tibble: 2 × 3 #>     min   max increment #>   <dbl> <dbl>     <dbl> #> 1     0    20      1    #> 2    20   Inf      0.33 cs_max <- maxSize(   CohortSizeConst(3),   CohortSizeDLT(intervals = 0:1, cohort_size = c(1, 3)) ) cs_max %>% tidy() #> [[1]] #> # A tibble: 1 × 1 #>    size #>   <int> #> 1     3 #>  #> [[2]] #> # A tibble: 2 × 3 #>     min   max cohort_size #>   <dbl> <dbl>       <int> #> 1     0     1           1 #> 2     1   Inf           3 #>  #> attr(,\"class\") #> [1] \"tbl_CohortSizeMax\" \"tbl_CohortSizeMax\" \"list\" options <- McmcOptions(   burnin = 100,   step = 1,   samples = 2000 )  emptydata <- Data(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))  model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov =     matrix(c(1, -0.5, -0.5, 1),       nrow = 2     ),   ref_dose = 56 ) samples <- mcmc(emptydata, model, options) tidySamples <- samples %>% tidy() tidySamples %>% head() #> $data #> # A tibble: 2,000 × 10 #>    Iteration Chain alpha0 alpha1 nChains nParameters nIterations nBurnin nThin #>        <int> <int>  <dbl>  <dbl>   <int>       <int>       <int>   <int> <int> #>  1         1     1 -1.56   1.62        1           1        2100     100     1 #>  2         2     1 -0.124  1.28        1           1        2100     100     1 #>  3         3     1  0.235  0.460       1           1        2100     100     1 #>  4         4     1  1.65   0.466       1           1        2100     100     1 #>  5         5     1  0.235  0.423       1           1        2100     100     1 #>  6         6     1 -0.808  8.80        1           1        2100     100     1 #>  7         7     1 -1.34   2.33        1           1        2100     100     1 #>  8         8     1 -2.83  17.2         1           1        2100     100     1 #>  9         9     1 -1.57   2.03        1           1        2100     100     1 #> 10        10     1 -0.141  2.12        1           1        2100     100     1 #> # ℹ 1,990 more rows #> # ℹ 1 more variable: parallel <lgl> #>  #> $options #> # A tibble: 1 × 5 #>   iterations burnin  step rng_kind rng_seed #>        <int>  <int> <int> <chr>       <int> #> 1       2100    100     1 NA             NA"},{"path":"https://openpharma.github.io/crmPack/articles/tidy_method.html","id":"using-tidy-crmpack-data","dir":"Articles","previous_headings":"Introducing tidy methods to crmPack","what":"Using tidy crmPack data","title":"Using tidy","text":"Tidy crmPack data can easily reported using knitr similar packages obvious way.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/tidy_method.html","id":"cohort-size","dir":"Articles","previous_headings":"Introducing tidy methods to crmPack > Using tidy crmPack data","what":"Cohort size","title":"Using tidy","text":"cohort size trial determined dose used current cohort according rules described table : Rules selecting cohort size presentations directly supported crmPack can easily produced. , create plots dose-specific PDFs prior probabilities toxicity first DLT observed fictional trial.","code":"CohortSizeRange(   intervals = c(0, 50, 300),   cohort_size = c(1, 3, 5) ) %>%   tidy() %>%   kable(     col.names = c(\"Min\", \"Max\", \"Cohort size\"),     caption = \"Rules for selecting the cohort size\"   ) %>%   add_header_above(c(\"Dose\" = 2, \" \" = 1)) options <- McmcOptions(   burnin = 5000,   step = 1,   samples = 40000 )  data <- Data(   doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100),   x = c(1, 3, 5, 10, 15, 15, 15),   y = c(0, 0, 0, 0, 0, 1, 0),   ID = 1L:7L,   cohort = as.integer(c(1:4, 5, 5, 5)) )  model <- LogisticLogNormal(   mean = c(-1, 0),   cov =     matrix(c(3, -0.1, -0.1, 4),       nrow = 2     ),   ref_dose = 56 ) samples <- mcmc(data, model, options) tidySamples <- samples %>% tidy()  # The magrittr pipe is necessary here tidySamples$data %>%   expand(     nesting(!!!.[1:10]),     Dose = data@doseGrid[2:11]   ) %>%   mutate(Prob = probFunction(model, alpha0 = alpha0, alpha1 = alpha1)(Dose)) %>%   ggplot() +   geom_density(aes(x = Prob, colour = as.factor(Dose)), adjust = 1.5) +   labs(     title = \"Posterior dose-specific PDFs for p(Tox)\",     caption = \"Dose 1 omitted as p(Tox) is essentially 0\",     x = \"p(Tox)\"   ) +   scale_colour_discrete(\"Dose\") +   theme_light() +   theme(     axis.ticks.y = element_blank(),     axis.text.y = element_blank(),     axis.title.y = element_blank()   )"},{"path":"https://openpharma.github.io/crmPack/articles/tidy_method.html","id":"environment","dir":"Articles","previous_headings":"","what":"Environment","title":"Using tidy","text":"","code":"sessionInfo() #> R version 4.5.0 (2025-04-11) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4        magrittr_2.0.3     tidyr_1.3.1        kableExtra_1.4.0   #> [5] knitr_1.50         crmPack_2.0.0.9002 ggplot2_3.5.2      #>  #> loaded via a namespace (and not attached): #>  [1] utf8_1.2.6           sass_0.4.10          generics_0.1.4       #>  [4] futile.options_1.0.1 xml2_1.4.0           lattice_0.22-7       #>  [7] stringi_1.8.7        digest_0.6.37        evaluate_1.0.5       #> [10] grid_4.5.0           RColorBrewer_1.1-3   mvtnorm_1.3-3        #> [13] fastmap_1.2.0        jsonlite_2.0.0       backports_1.5.0      #> [16] formatR_1.14         gridExtra_2.3        purrr_1.1.0          #> [19] viridisLite_0.4.2    scales_1.4.0         textshaping_1.0.3    #> [22] jquerylib_0.1.4      cli_3.6.5            rlang_1.1.6          #> [25] futile.logger_1.4.3  parallelly_1.45.1    withr_3.0.2          #> [28] cachem_1.1.0         yaml_2.3.10          parallel_4.5.0       #> [31] tools_4.5.0          coda_0.19-4.1        checkmate_2.3.3      #> [34] lambda.r_1.2.4       vctrs_0.6.5          R6_2.6.1             #> [37] lifecycle_1.0.4      stringr_1.5.1        GenSA_1.1.14.1       #> [40] fs_1.6.6             htmlwidgets_1.6.4    ragg_1.5.0           #> [43] rjags_4-17           pkgconfig_2.0.3      desc_1.4.3           #> [46] pkgdown_2.1.3        pillar_1.11.0        bslib_0.9.0          #> [49] gtable_0.3.6         glue_1.8.0           systemfonts_1.2.3    #> [52] xfun_0.53            tibble_3.3.0         tidyselect_1.2.1     #> [55] rstudioapi_0.17.1    dichromat_2.0-0.1    farver_2.1.2         #> [58] htmltools_0.5.8.1    labeling_0.4.3       rmarkdown_2.29       #> [61] svglite_2.2.1        compiler_4.5.0"},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Trial Analysis","text":"vignette picks previous one (Trial Definition), ends. recap, trial defines six fundamental elements CRM trial ","code":""},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"the-dose-grid","dir":"Articles","previous_headings":"Introduction","what":"The dose grid","title":"Trial Analysis","text":"trial use dose grid consisting following doses: 1, 3, 9, 20, 30, 45, 60, 80 100. units doses defined irrelevant operation CRM.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"the-dose-toxicity-model","dir":"Articles","previous_headings":"Introduction","what":"The dose-toxicity model","title":"Trial Analysis","text":"trial uses logistic log Normal dose toxicity model log(pi1−pi)=α+βlog(di/d*) log(\\frac{p_i}{1 - p_i}) = \\alpha + \\beta log(d_i / d^*) prior joint distribution α\\alpha β\\beta [αlog(β)]∼N([−0.850],[1−0.5−0.51]).  \\begin{bmatrix} \\alpha \\\\ log(\\beta) \\end{bmatrix}   \\sim N\\begin{pmatrix} \\begin{bmatrix} -0.85\\\\0 \\end{bmatrix}   , \\begin{bmatrix} 1 & -0.5 \\\\ -0.5 & 1 \\end{bmatrix}    \\end{pmatrix}.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"the-increment-rule","dir":"Articles","previous_headings":"Introduction","what":"The increment rule","title":"Trial Analysis","text":"maximum increment doses greater 0 less 20 100 x (1 + 1)%, 200% highest dose used far, whereas 20 , maximum increment 100 x (1 + 0.5)%, 150% highest dose used far. Note 2-fold increment corresponds 3-fold escalation.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"the-dose-selection-rule","dir":"Articles","previous_headings":"Introduction","what":"The dose selection rule","title":"Trial Analysis","text":", choose use Neuenschwander’s rule (Neuenschwander, Branson, Gsponer 2008), dose next cohort dose (amongst doses eligible selection according escalation rule) highest posterior chance probability toxicity target range - [0.2, 0.35) - provided dose’s chance probability overdose range - [0.35, 1.0] - less 0.25.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"the-cohort-size","dir":"Articles","previous_headings":"Introduction","what":"The cohort size","title":"Trial Analysis","text":"Whilst dose next cohort 20 less DLTs observed, minimum cohort size 1. Otherwise, 3.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"the-stopping-rule","dir":"Articles","previous_headings":"Introduction","what":"The stopping rule","title":"Trial Analysis","text":"trial stop either Twenty patients recruited, . least three cohorts must treated probability current estimate MTD target toxicity range must least 0.5.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"trial-definition","dir":"Articles","previous_headings":"Introduction","what":"Trial definition","title":"Trial Analysis","text":"code define elements trial design given Trial Definition vignette.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"analysing-a-trial","dir":"Articles","previous_headings":"","what":"Analysing a trial","title":"Trial Analysis","text":"Given trial design constructed , process analysing real life instance trial simply matter providing model actual toxicity status participants treated far. escalation rules defined earlier allow use single patient run-either first DLT observed dose 20 administered.","code":""},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"the-single-patient-run-in","dir":"Articles","previous_headings":"Analysing a trial","what":"The single patient run-in","title":"Trial Analysis","text":"Assume first three patients - dosed 1, 3 5 - completed trial without incident, fourth patient - treated 10 - experienced DLT. provide information crmPack via Data object: Within Data object, doses patient treated given x slot toxicity status (Boolean toxicity represented truthy value) y slot. observed data easily visualised  , since plot method returns ggplot object, easily customised.  Now, update model obtain posterior estimate dose-toxicity curve: posterior estimate dose toxicity curve easily visualised:  visual representation model’s state obtained :  lower panel plot shows posterior probability dose overdose range. dashed horizontal black line shows acceptable risk overdose: Doses red lines go line considered toxic. upper panel shows probability dose target toxicity range. Clearly, doses 30 45 highest probability target toxicity range. However, risk overdose range unacceptable. Therefore, 20 dose recommended next cohort. can produce tabulation model state presentations, can see : highest dose far administered 20, escalation rule permits doses including 40 considered dose next cohort. However… Doses 30 considered unsafe remaining doses, 20 highest posterior probability target toxicity range DLT reported Items 1 4 list tell us size next cohort three. Items 2 3 together imply highest dose can used next cohort 20. Thus, model’s recommendation next cohort consist three patients, treated 20. can confirmed programmatically: However, given probability 20 overdose range just less threshold 0.25 (participant far treated 20 experienced DLT) perfectly reasonable clinical decision treat next cohort 10 - , indeed, dose 20. absolutely obligation follow CRM dose recommendation without consideration factors might affect choice appropriate dose next cohort. However, purpose exposition, treat next cohort 20, recommended model. can confirm trial’s stopping rules satisfied:","code":"firstFour <- Data(   x = c(1, 3, 9, 20),   y = c(0, 0, 0, 1),   ID = 1:4,   cohort = 1:4,   doseGrid = doseGrid ) plot(firstFour) plot(firstFour) + theme_light() vignetteMcmcOptions <- McmcOptions(burnin = 100, step = 2, samples = 1000) postSamples <- mcmc(   data = firstFour,   model = model,   options = vignetteMcmcOptions ) plot(postSamples, model, firstFour) nextBest(   my_next_best,   doselimit = 100,   samples = postSamples,   model = model,   data = empty_data )$plot tabulatePosterior <- function(mcmcSamples, observedData) {   as_tibble(     nextBest(       my_next_best,       doselimit = 100,       samples = mcmcSamples,       model = model,       data = observedData     )$probs   ) %>%     left_join(       tibble(         dose = observedData@x,         WithDLT = observedData@y       ) %>%         group_by(dose) %>%         summarise(           Treated = n(),           WithDLT = sum(WithDLT),           .groups = \"drop\"         ),       by = \"dose\"     ) %>%     replace_na(list(Treated = 0, WithDLT = 0)) %>%     select(dose, Treated, WithDLT, target, overdose) %>%     kableExtra::kable(       col.names = c(\"Dose\", \"Treated\", \"With DLT\", \"Target range\", \"Overdose range\"),       digits = c(0, 0, 0, 3, 3)     ) %>%     kableExtra::add_header_above(c(\" \" = 1, \"Participants\" = 2, \"Probability that dose is in \" = 2)) }  tabulatePosterior(postSamples, firstFour) nextMaxDose <- maxDose(my_increments, firstFour) nextMaxDose #> [1] 40  doseRecommendation <- nextBest(   my_next_best,   doselimit = nextMaxDose,   samples = postSamples,   model = model,   data = firstFour ) doseRecommendation$value #> [1] 20 stopTrial(   my_stopping,   dose = doseRecommendation$value,   postSamples,   model,   firstFour ) #> [1] FALSE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> attr(,\"message\")[[1]][[1]] #> [1] \"Number of cohorts is 4 and thus reached the prespecified minimum number 3\" #>  #> attr(,\"message\")[[1]][[2]] #> [1] \"Probability for target toxicity is 30 % for dose 20 and thus below the required 50 %\" #>  #>  #> attr(,\"message\")[[2]] #> [1] \"Number of patients is 4 and thus below the prespecified minimum number 20\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] FALSE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> [1] \"Number of cohorts is 4 and thus reached the prespecified minimum number 3\" #>  #> attr(,\"message\")[[2]] #> [1] \"Probability for target toxicity is 30 % for dose 20 and thus below the required 50 %\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] TRUE #> attr(,\"message\") #> [1] \"Number of cohorts is 4 and thus reached the prespecified minimum number 3\" #> attr(,\"report_label\") #> [1] \"≥ 3 cohorts dosed\" #>  #> attr(,\"individual\")[[2]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Probability for target toxicity is 30 % for dose 20 and thus below the required 50 %\" #> attr(,\"report_label\") #> [1] \"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5\" #>  #> attr(,\"report_label\") #> [1] NA #>  #> attr(,\"individual\")[[2]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Number of patients is 4 and thus below the prespecified minimum number 20\" #> attr(,\"report_label\") #> [1] \"≥ 20 patients dosed\" #>  #> attr(,\"report_label\") #> [1] NA"},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"the-first-full-cohort","dir":"Articles","previous_headings":"Analysing a trial","what":"The first full cohort","title":"Trial Analysis","text":"Assume none three patients first full cohort report DLT: Update model: Tabulate posterior: trial stop? , dose used next cohort? trial continue, treating three patients next cohort 30.","code":"firstFullCohort <- Data(   x = c(1, 3, 9, 20, 20, 20, 20),   y = c(0, 0, 0, 1, 0, 0, 0),   ID = 1:7,   cohort = c(1:4, rep(5, 3)),   doseGrid = doseGrid ) postSamples1 <- mcmc(   data = firstFullCohort,   model = model,   options = vignetteMcmcOptions ) tabulatePosterior(postSamples1, firstFullCohort) nextMaxDose <- maxDose(my_increments, firstFullCohort) nextMaxDose #> [1] 40  doseRecommendation <- nextBest(   my_next_best,   doselimit = nextMaxDose,   samples = postSamples1,   model = model,   data = firstFullCohort ) doseRecommendation$value #> [1] 30  x <- stopTrial(   my_stopping,   dose = doseRecommendation$value,   postSamples1,   model,   firstFullCohort ) attributes(x) <- NULL x #> [1] FALSE"},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"the-second-full-cohort","dir":"Articles","previous_headings":"Analysing a trial","what":"The second full cohort","title":"Trial Analysis","text":"Assume none three patients next cohort report DLT: Update model: Tabulate posterior: dose highest posterior probability target toxicity range now 45, dose also unacceptably high probability overdose range. Therefore, trial continue next cohort treated 30:","code":"secondFullCohort <- Data(   x = c(1, 3, 9, 20, 20, 20, 20, 30, 30, 30),   y = c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0),   ID = 1:10,   cohort = c(1:4, rep(5, 3), rep(6, 3)),   doseGrid = doseGrid ) postSamples2 <- mcmc(   data = secondFullCohort,   model = model,   options = vignetteMcmcOptions ) tabulatePosterior(postSamples2, secondFullCohort) nextMaxDose <- maxDose(my_increments, secondFullCohort) nextMaxDose #> [1] 45  doseRecommendation <- nextBest(   my_next_best,   doselimit = nextMaxDose,   samples = postSamples2,   model = model,   data = secondFullCohort ) doseRecommendation$value #> [1] 30  x <- stopTrial(   my_stopping,   dose = doseRecommendation$value,   postSamples2,   model,   secondFullCohort ) attributes(x) <- NULL x #> [1] FALSE"},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"the-third-full-cohort","dir":"Articles","previous_headings":"Analysing a trial","what":"The third full cohort","title":"Trial Analysis","text":"Assume none three patients third cohort report DLT: Update model: Tabulate posterior: 45 still dose highest posterior probability target toxicity range, probability overdose range now acceptable. Therefore, trial continue next cohort treated 45:","code":"thirdFullCohort <- Data(   x = c(1, 3, 9, rep(20, 4), rep(30, 6)),   y = c(0, 0, 0, 1, rep(0, 9)),   ID = 1:13,   cohort = c(1:4, rep(5, 3), rep(6, 3), rep(7, 3)),   doseGrid = doseGrid ) postSamples3 <- mcmc(   data = thirdFullCohort,   model = model,   options = vignetteMcmcOptions ) tabulatePosterior(postSamples3, thirdFullCohort) nextMaxDose <- maxDose(my_increments, thirdFullCohort) nextMaxDose #> [1] 45  doseRecommendation <- nextBest(   my_next_best,   doselimit = nextMaxDose,   samples = postSamples3,   model = model,   data = thirdFullCohort ) doseRecommendation$value #> [1] 45  x <- stopTrial(   my_stopping,   dose = doseRecommendation$value,   postSamples3,   model,   thirdFullCohort ) attributes(x) <- NULL x #> [1] FALSE"},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"the-fourth-full-cohort","dir":"Articles","previous_headings":"Analysing a trial","what":"The fourth full cohort","title":"Trial Analysis","text":"Assume none three patients fourth cohort report DLT: Update model: Tabulate posterior: 60 now dose highest posterior probability target toxicity range, probability overdose range unacceptable. Therefore, trial continue next cohort treated 45:","code":"fourthFullCohort <- Data(   x = c(1, 3, 9, rep(20, 4), rep(30, 6), rep(45, 3)),   y = c(0, 0, 0, 1, rep(0, 12)),   ID = 1:16,   cohort = c(1:4, rep(5:8, each = 3)),   doseGrid = doseGrid ) postSamples4 <- mcmc(   data = fourthFullCohort,   model = model,   options = vignetteMcmcOptions ) tabulatePosterior(postSamples4, fourthFullCohort) nextMaxDose <- maxDose(my_increments, fourthFullCohort) nextMaxDose #> [1] 67.5  doseRecommendation <- nextBest(   my_next_best,   doselimit = nextMaxDose,   samples = postSamples4,   model = model,   data = fourthFullCohort ) doseRecommendation$value #> [1] 45  x <- stopTrial(   my_stopping,   dose = doseRecommendation$value,   postSamples4,   model,   fourthFullCohort ) attributes(x) <- NULL x #> [1] FALSE"},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"the-fifth-full-cohort","dir":"Articles","previous_headings":"Analysing a trial","what":"The fifth full cohort","title":"Trial Analysis","text":"Assume two three patients fourth cohort report DLT: Update model: Tabulate posterior: 45 remains dose highest posterior probability target toxicity range, probability overdose range acceptable. Moreover, probability 45 target toxicity range 0.5 three cohorts treated total. Therefore, trial stop conclude 45 MTD:","code":"fifthFullCohort <- Data(   x = c(1, 3, 9, rep(20, 4), rep(30, 6), rep(45, 6)),   y = c(0, 0, 0, 1, rep(0, 13), 1, 1),   ID = 1:19,   cohort = c(1:4, rep(5:9, each = 3)),   doseGrid = doseGrid ) postSamples5 <- mcmc(   data = fifthFullCohort,   model = model,   options = vignetteMcmcOptions ) tabulatePosterior(postSamples5, fifthFullCohort) nextMaxDose <- maxDose(my_increments, fifthFullCohort) nextMaxDose #> [1] 67.5  doseRecommendation <- nextBest(   my_next_best,   doselimit = nextMaxDose,   samples = postSamples5,   model = model,   data = fifthFullCohort ) doseRecommendation$value #> [1] 45  x <- stopTrial(   my_stopping,   dose = doseRecommendation$value,   postSamples5,   model,   fifthFullCohort ) x #> [1] FALSE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> attr(,\"message\")[[1]][[1]] #> [1] \"Number of cohorts is 9 and thus reached the prespecified minimum number 3\" #>  #> attr(,\"message\")[[1]][[2]] #> [1] \"Probability for target toxicity is 48 % for dose 45 and thus below the required 50 %\" #>  #>  #> attr(,\"message\")[[2]] #> [1] \"Number of patients is 19 and thus below the prespecified minimum number 20\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] FALSE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> [1] \"Number of cohorts is 9 and thus reached the prespecified minimum number 3\" #>  #> attr(,\"message\")[[2]] #> [1] \"Probability for target toxicity is 48 % for dose 45 and thus below the required 50 %\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] TRUE #> attr(,\"message\") #> [1] \"Number of cohorts is 9 and thus reached the prespecified minimum number 3\" #> attr(,\"report_label\") #> [1] \"≥ 3 cohorts dosed\" #>  #> attr(,\"individual\")[[2]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Probability for target toxicity is 48 % for dose 45 and thus below the required 50 %\" #> attr(,\"report_label\") #> [1] \"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5\" #>  #> attr(,\"report_label\") #> [1] NA #>  #> attr(,\"individual\")[[2]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Number of patients is 19 and thus below the prespecified minimum number 20\" #> attr(,\"report_label\") #> [1] \"≥ 20 patients dosed\" #>  #> attr(,\"report_label\") #> [1] NA"},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"summarising-the-trial-results","dir":"Articles","previous_headings":"","what":"Summarising the trial results","title":"Trial Analysis","text":"crmPack provides wealth information trial’s results. following code snippets illustrate many possibilities trial might summarised.  {rfig.alt = \"plot posterior nineteen participants treated.  mean probability toxicity increases smoothly zero percent dose zero 55% dose 100.  confidence interval extends 0% 6% dose zero 22%  90% dose 100.\"} plot(postSamples5, model, fifthFullCohort) {rfig.alt = \"Two graphs arranged single column.  upper graph shoes green lines various heights show probability dose target toxicity range.  big arrow pointing bar dose 45, indicating dose highest probability target toxicity range.  lower graph similar series red lines, indicating probability dose overdose range.  horizontal black dashed line 25%, indicating highest acceptable probability overdose range.  red bars doses 60 extend 25%, indicating toxicity unacceptable.  toxicity doses 45 lie 25%.\"} doseRecommendation$plot little bit work, can obtain detailed summary plot posterior probabilities toxicity dose:","code":"plot(fifthFullCohort) slotNames(model) #> [1] \"params\"          \"ref_dose\"        \"datamodel\"       \"priormodel\"      #> [5] \"modelspecs\"      \"init\"            \"datanames\"       \"datanames_prior\" #> [9] \"sample\"  fullSamples <- tibble(   Alpha = postSamples5@data$alpha0,   Beta = postSamples5@data$alpha1 ) %>%   expand(nesting(Alpha, Beta), Dose = doseGrid) %>%   rowwise() %>%   mutate(P = probFunction(model, alpha0 = Alpha, alpha1 = Beta)(dose = Dose)) %>%   ungroup()  fullSummary <- fullSamples %>%   group_by(Dose) %>%   summarise(     Mean = mean(P),     Median = median(P),     Q = list(quantile(P, probs = c(0.05, 0.1, 0.25, 0.75, 0.9, 0.95), na.rm = TRUE))   ) %>%   unnest_wider(     col = Q,     names_repair = function(.x) {       ifelse(         str_detect(.x, \"\\\\d+%\"),         sprintf(\"Q%02.0f\", as.numeric(str_remove_all(.x, \"%\"))),         .x       )     }   ) #> Warning in sprintf(\"Q%02.0f\", as.numeric(str_remove_all(.x, \"%\"))): NAs #> introduced by coercion  fullSummary %>%   kableExtra::kable(     col.names = c(\"Dose\", \"Mean\", \"Median\", \"5th\", \"10th\", \"25th\", \"75th\", \"90th\", \"95th\"),     digits = c(0, rep(3, 8))   ) %>%   add_header_above(c(\" \" = 3, \"Quantiles\" = 6)) %>%   add_header_above(c(\" \" = 1, \"P(Toxicity)\" = 8)) fullSamples %>%   filter(Dose > 9) %>%   ggplot() +   geom_density(aes(x = P, color = as.factor(Dose))) +   theme_light() +   theme(     axis.text.y = element_blank(),     axis.title.y = element_blank(),     axis.ticks.y = element_blank()   ) +   labs(     title = \"Posterior PDFs for doses > 9\",     colour = \"Dose\"   ) fullSummary %>%   ggplot(aes(x = Dose)) +   geom_ribbon(aes(ymin = Q05, ymax = Q95), fill = \"steelblue\", alpha = 0.25) +   geom_ribbon(aes(ymin = Q10, ymax = Q90), fill = \"steelblue\", alpha = 0.25) +   geom_ribbon(aes(ymin = Q25, ymax = Q75), fill = \"steelblue\", alpha = 0.25) +   geom_line(aes(y = Mean), colour = \"black\") +   geom_line(aes(y = Median), colour = \"blue\") +   theme_light() +   labs(     title = \"Posterior Dose toxicity curve\",     colour = \"Dose\",     y = \"P(Toxicity)\"   )"},{"path":"https://openpharma.github.io/crmPack/articles/trial_analysis.html","id":"note","dir":"Articles","previous_headings":"","what":"Note","title":"Trial Analysis","text":"analyses presented vignette used chains short length. purely convenience. Analyses real trials use considerably longer chains. example, effective sample size approximately 40,000 required estimate percentage within ±1%.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/trial_definition.html","id":"defining-the-design","dir":"Articles","previous_headings":"","what":"Defining the design","title":"Trial Definition","text":"CRM study consists six basic elements: dose grid dose-toxicity model increment rule_1 dose recommendation rule1 cohort size1 stopping rule 1: Note crmPack, increment, dose selection cohort size rules collectively known escalation rules. many, many possible choices element. introduction, make simple choices value element. start loading crmPack package … … defining element turn.","code":"library(crmPack) #> Loading required package: ggplot2 #> Registered S3 method overwritten by 'crmPack': #>   method       from   #>   print.gtable gtable #> Type crmPackHelp() to open help browser #> Type crmPackExample() to open example"},{"path":"https://openpharma.github.io/crmPack/articles/trial_definition.html","id":"the-dose-grid","dir":"Articles","previous_headings":"Defining the design","what":"The dose grid","title":"Trial Definition","text":"First, list doses might used trial. commitment use every dose grid. define grid 9 doses ranging 1 100. crmPack agnostic respect units used measure doses. requirements dose grid ordered one dimensional. Additional doses can added whilst trial running. affect validity results trial prior addition, probably affect trial’s operating characteristics.","code":"# Define the dose grid. empty_data <- Data(doseGrid = c(1, 3, 9, 20, 30, 45, 60, 80, 100))"},{"path":"https://openpharma.github.io/crmPack/articles/trial_definition.html","id":"the-dose-toxicity-model","dir":"Articles","previous_headings":"Defining the design","what":"The dose toxicity model","title":"Trial Definition","text":"Next, define dose toxicity model. crmPack, LogisticLogNormal class fits model following form: log(pi1−pi)=α+βlog(di/d*)log(\\frac{p_i}{1 - p_i}) = \\alpha + \\beta log(d_i / d^*) d*d^* reference dose (specified ref_dose argument LogisticLogNormal function ) prior joint distribution α\\alpha β\\beta [αlog(β)]∼N([μαμβ],[σαασαβσβασββ]).\\begin{bmatrix} \\alpha \\\\ log(\\beta) \\end{bmatrix}   \\sim N\\begin{pmatrix} \\begin{bmatrix} \\mu_{\\alpha}\\\\ \\mu_{\\beta} \\end{bmatrix}   , \\begin{bmatrix} \\sigma_{\\alpha\\alpha} & \\sigma_{\\alpha\\beta} \\\\ \\sigma_{{\\beta\\alpha}} & \\sigma_{\\beta\\beta} \\end{bmatrix}    \\end{pmatrix}. mean covariance matrices defined mean cov parameters LogisticLogNormal call. code defines prior joint distribution α\\alpha log(β)log(\\beta) N([−0.850],[1−0.5−0.51]).  N\\begin{pmatrix} \\begin{bmatrix} -0.85\\\\0 \\end{bmatrix}   , \\begin{bmatrix} 1 & -0.5 \\\\ -0.5 & 1 \\end{bmatrix}    \\end{pmatrix}. easy obtain visual representation prior:","code":"# Initialize the CRM model. model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 ) vignetteMcmcOptions <- McmcOptions(burnin = 100, step = 2, samples = 1000) prior_samples <- mcmc(   data = empty_data,   model = model,   options = vignetteMcmcOptions ) plot(prior_samples, model, empty_data)"},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/trial_definition.html","id":"the-maximum-increment","dir":"Articles","previous_headings":"Defining the design > The escalation rules","what":"The maximum increment","title":"Trial Definition","text":"Now, define maximum possible increment dose used current cohort dose used next, regardless likely toxicity. rule chosen defines maximum possible increment terms multiples highest dose far administered: doses greater 0 less 20, maximum increment 100% x 2, 200% highest dose used far (escalation 100% x (1 + 2) = 300% highest dose used far). doses 20 , maximum increment 100% x 0.5, 50% highest dose used far, dose 100% x (1 + 0.5) = 150% highest dose used far. Note 2-fold increment corresponds 3-fold escalation. tabular form, based dose grid defined , maximum permitted escalation , highest dose used far 9, highest dose dose grid can used next cohort 20, even 30 higher doses deemed safe NextBest rule. Next, define rule choosing best dose next cohort","code":"# Choose the rule for dose increments. my_increments <- IncrementsRelative(   intervals = c(0, 30),   increments = c(2, 0.5) )"},{"path":"https://openpharma.github.io/crmPack/articles/trial_definition.html","id":"the-nextbest-rule-for-recommending-the-best-dose-for-the-next-cohort","dir":"Articles","previous_headings":"Defining the design > The escalation rules","what":"The NextBest rule for recommending the best dose for the next cohort","title":"Trial Definition","text":", choose use Neuenschwander’s rule (Neuenschwander, Branson, Gsponer 2008), dose next cohort dose (amongst doses eligible selection according escalation rule) highest posterior chance probability toxicity target range - [0.2, 0.35) - provided dose’s chance probability toxicity overdose range - [0.35, 1.0] - less 0.25.","code":"# Choose the rule for selecting the next dose. my_next_best <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )"},{"path":"https://openpharma.github.io/crmPack/articles/trial_definition.html","id":"the-cohort-size","dir":"Articles","previous_headings":"Defining the design > The escalation rules","what":"The cohort size","title":"Trial Definition","text":"Now, define rule choosing size next cohort. Note, term “cohort size” somewhat anachronistic. hangover days 3+3 design. context CRM trials, best interpreted “largest permitted interval CRM model updates”. CRM trial, model can updated time mathematical need halt recruitment allow model updated. elect define cohort size using compound rule. dose used number DLTs far observed contribute decision. first part compound rule (my_size_1), based dose used, permits use single patient run-including dose 20. doses 20, minimum cohort size 3. second part compound rule (my_size_2) also permits single patient run-, long DLTs far observed. soon first DLT reported, minimum cohort size 3. determine actual size next cohort, larger number required two parts compound rule used. words, provided dose 20 DLTs observed, single patient cohort permitted. cases, required cohort size 3.","code":"# Choose the rule for the cohort size. my_size_1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) my_size_2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) my_size <- maxSize(my_size_1, my_size_2)"},{"path":"https://openpharma.github.io/crmPack/articles/trial_definition.html","id":"the-stopping-rules","dir":"Articles","previous_headings":"Defining the design","what":"The stopping rules","title":"Trial Definition","text":"Now create rules define trial’s objectives met (stopped futility). futility rule easiest explain: twenty patients recruited, study stop (my_stopping_3). success rule requires following conditions met: least three cohorts must treated probability current estimate MTD target toxicity range must least 0.5. trial stop either futility rule components success rule satisfied.","code":"# Choose the rule for stopping. my_stopping_1 <- StoppingMinCohorts(nCohorts = 3) my_stopping_2 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) my_stopping_3 <- StoppingMinPatients(nPatients = 20) my_stopping <- (my_stopping_1 & my_stopping_2) | my_stopping_3"},{"path":"https://openpharma.github.io/crmPack/articles/trial_definition.html","id":"the-overall-trial-design","dir":"Articles","previous_headings":"Defining the design","what":"The overall trial design","title":"Trial Definition","text":"Finally, combine six elements design, together starting dose, define trial. now ready use trial definition, either analyse real trial simulate long term operating characteristics design. processes described vignettes .","code":"# Initialize the design. design <- Design(   model = model,   nextBest = my_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = empty_data,   startingDose = 3 )"},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/trial_sanity_checks.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Trial Design: basic sanity checks","text":"vignette contains example basic superficial examination operating characteristics basic CRM trial. design uses 2-parameter logistic regression model log normal prior distribution, custom rules choosing cohort size, deciding whether stop continue trial, defining maximum permitted increment selecting dose nest study. first step define trial design crmPack…","code":""},{"path":"https://openpharma.github.io/crmPack/articles/trial_sanity_checks.html","id":"study-definition","dir":"Articles","previous_headings":"","what":"Study definition","title":"Trial Design: basic sanity checks","text":"","code":"library(crmPack)   # Define the dose grid and an empty data object dose_grid <- c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100) empty_data <- Data(doseGrid = dose_grid)  # Initialize the CRM model. initial_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Choose the rule for selecting the next dose. next_best <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort size. cohort_size1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) cohort_size2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) cohort_size <- maxSize(cohort_size1, cohort_size2)  # Choose the rule for stopping. stopping_success1 <- StoppingMinCohorts(nCohorts = 3) stopping_success2 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) stopping_futility <- StoppingMinPatients(nPatients = 20) stopping_trial <- (stopping_success1 & stopping_success2) | stopping_futility  # Choose the rule for dose increments. increment_rule <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design. design <- Design(   model = initial_model,   nextBest = next_best,   stopping = stopping_trial,   increments = increment_rule,   cohort_size = cohort_size,   data = empty_data,   startingDose = 3 )"},{"path":"https://openpharma.github.io/crmPack/articles/trial_sanity_checks.html","id":"incoherence-and-rigidity","dir":"Articles","previous_headings":"","what":"Incoherence and rigidity","title":"Trial Design: basic sanity checks","text":"examine function lists dose recommendations made CRM design first DLT reported. output shows, dose number DLTs reported, dose recommendation (nextBest dose) made model assumption earlier DLTs reported lower doses. Cheung (Cheung 2013) (p146) describes CRM trial* rigid exists dose escalation possible regardless number participants experience treated dose. (p164) defines CRM trial incoherent , among criteria, recommends dose escalation immediately following first report DLT. *: Strictly, Cheung defines incoherence rigidity terms trial’s dose-toxicity model. extend terms include trial’s design features, including escalation, dose selection, increments stopping rules. output examine shows initial design incoherent (recommendation increase dose used next cohort following first report DLT), rigid. rigid , even toxicities reported 25 mg, model unable recommend escalation trial’s futility stopping rule (defined stopping_futility ) satisfied. clearly unsatisfactory. problem lies increments rule, allows maximum escalation 33% one dose next doses 20 mg. dose grid used 1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100. ratio 20 25 1.25, 25 40 1.6. can confirm checking behaviour maxDose artificial data: Thus, initial dose rule permanently prevents escalation 25 mg highest permitted dose 25 mg 33.25 lowest dose dose grid 40. problem can solved least two ways: can either relax increments rule can introduce one intermediate doses. (, course, .) choose relax increments rule check , ceteris paribus, permits escalation every dose: Yes, . update design:","code":"examine(design) %>% kable() no_tox_below_25_data <- Data(   doseGrid = dose_grid,   x = c(1, 3, 5, 10, 15, 20, 25),   y = rep(0, 7),   ID = 1L:7L,   cohort = 1L:7L )  next_dose <- maxDose(increment_rule, no_tox_below_25_data) next_dose #> [1] 33.25 revised_increment_rule <- IncrementsRelative(   intervals = c(0, 20, 80),   increments = c(1, 0.67, 0.33) ) tibble(   HighestDoseUsed = dose_grid,   MaxPermittedDose = c(     NA,     sapply(       seq_along(dose_grid[-1]),       function(n) {         tmp <- dose_grid[-1]         d <- Data(           doseGrid = dose_grid,           x = tmp[1:n],           y = rep(0, n),           ID = as.integer(1:n),           cohort = as.integer(1:n)         )         maxDose(revised_increment_rule, d)       }     )   ) ) %>%   mutate(EscalationPermitted = lead(HighestDoseUsed < MaxPermittedDose)) %>%   kable() revised_design <- Design(   model = initial_model,   nextBest = next_best,   stopping = stopping_trial,   increments = revised_increment_rule,   cohort_size = cohort_size,   data = empty_data,   startingDose = 3 )"},{"path":"https://openpharma.github.io/crmPack/articles/trial_sanity_checks.html","id":"does-the-prior-make-sense","dir":"Articles","previous_headings":"","what":"Does the prior make sense?","title":"Trial Design: basic sanity checks","text":"Hmmm. now appear stuck 50 mg. ? Let’s examine state model escalation 50 mg without toxicity… Whilst increments rule allows escalation 83.5 mg, toxicity estimates provided model : current estimate toxicity 80 mg 0.827, well limit 0.25 defined dose recommendation rule (next_best). , several options. can introduce intermediate doses, thus slowing escalation allowing prior model time adapt (probably requiring larger trial), can modify prior allows faster, still reasonable, escalation. Let’s try creating minimally informative prior consistent first attempt. prior θ given by𝛉=[αβ]∼N([0.981.35],[1.920.050.050.00]) \\boldsymbol\\theta = \\begin{bmatrix}\\alpha \\\\ \\beta\\end{bmatrix}\\sim N \\left(\\begin{bmatrix} 0.98 \\\\  1.35\\end{bmatrix} , \\begin{bmatrix} 1.92 &  0.05 \\\\ 0.05 &  0.00\\end{bmatrix} \\right) minimally informative model prior distribution (αlog(β))∼N([0.9791.348],[1.9230.0450.0450.002])\\binom{\\alpha}{log(\\beta)} \\sim N \\left( \\left[\\begin{array}{rr} 0.979 \\\\  1.348 \\end{array}\\right], \\left[\\begin{array}{rr}  1.923 &  0.045 \\\\  0.045 &  0.002\\end{array}\\right]\\right) fix rigidity problem? Yes, . can now escalate dose 80, plateaux . First, two toxicity-free participants, rather just one, needed escalate 20 mg 25 mg. Similarly, four toxicity-free participants required escalate 25 mg 40 mg. fine tuning prior probably allow numbers reduced, purposes vignette, explore possibility. Now create data represent trial escalates without reports toxicity, fit revised model … importantly, results illustrate something obvious outset: expecting trial identify MTD definitively fewer 20 participants unrealistic (unless MTD much towards left hand - lower - end dose grid) takes almost 20 participants travel lower end dose grid upper. Ignoring plateauing mentioned previous paragraph, increments rule defined means need least one participant doses 1, 3, 5, 10, 15 20 mg, three 25, 40, 50, 80 100 mg. ’s total 6 x 1 + 5 x 3 = 21 participants. hit futility limit finish escalation dose grid, even DLTs reported. ’s simply realistic. final alteration increase futility rule 20 participants 40. new design allows us escalate full extent dose grid futility stopping rule kicks . refinement prior model may remove need additional cohorts escalation 20, 25 50 mg. leave exercise reader. now design worthy detailed investigation operating characteristics. next vignette series, yet written.","code":"examine(revised_design) %>% kable() no_tox_below_50_data <- Data(   doseGrid = dose_grid,   x = c(1, 3, 5, 10, 15, 20, 25, 40, 40, 40, 50, 50, 50),   y = rep(0, 13),   ID = 1L:13L,   cohort = c(1L:7L, rep(8L:9L, each = 3)) )  default_mcmc_options <- McmcOptions(burnin = 1000, step = 2, samples = 1000) no_tox_50_samples <- mcmc(no_tox_below_50_data, initial_model, default_mcmc_options) recommended_dose <- nextBest(   next_best,   doselimit = Inf,   samples = no_tox_50_samples,   model = initial_model,   data = no_tox_below_50_data ) recommended_dose$value #> [1] 50 recommended_dose$probs #>       dose target overdose #>  [1,]    1  0.000    0.000 #>  [2,]    3  0.000    0.000 #>  [3,]    5  0.000    0.000 #>  [4,]   10  0.000    0.000 #>  [5,]   15  0.000    0.000 #>  [6,]   20  0.002    0.000 #>  [7,]   25  0.005    0.000 #>  [8,]   40  0.036    0.002 #>  [9,]   50  0.153    0.016 #> [10,]   80  0.127    0.827 #> [11,]  100  0.048    0.926  maxDose(revised_increment_rule, no_tox_below_50_data) #> [1] 83.5 # Fitting the min_inf_model is slow. if (file.exists(\"minInfModel.Rds\")) {   min_inf_model <- readRDS(\"minInfModel.Rds\") } else {   min_inf_model <- MinimalInformative(     dose_grid,     56,     threshmin = 0.1,     threshmax = 0.4,     probmin = 0.05,     probmax = 0.05   )    as_tibble(min_inf_model$required) %>%     add_column(Dose = dose_grid) %>%     add_column(Type = \"Required\") %>%     bind_rows(       as_tibble(min_inf_model$quantiles) %>%         add_column(Dose = dose_grid) %>%         add_column(Type = \"Fitted\")     ) %>%     ggplot() +     geom_line(aes(x = Dose, y = median, colour = Type), linetype = \"solid\") +     geom_line(aes(x = Dose, y = lower, colour = Type), linetype = \"dotted\") +     geom_line(aes(x = Dose, y = upper, colour = Type), linetype = \"dotted\")    saveRDS(min_inf_model, \"minInfModel.Rds\") }  min_inf_model$model@params revised_model <- min_inf_model$model  revised_design1 <- Design(   model = revised_model,   nextBest = next_best,   stopping = stopping_trial,   increments = revised_increment_rule,   cohort_size = cohort_size,   data = empty_data,   startingDose = 3 )  examine(revised_design1) %>% kable() no_tox_data <- Data(   doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100),   x = c(c(1, 3, 5, 10, 15, 20), rep(c(25, 40, 50, 80, 100), each = 3)),   y = rep(0, 21),   cohort = as.integer(c(1:6, rep(7:11, each = 3))),   ID = as.integer(1:21) )  no_tox_samples <- mcmc(no_tox_data, revised_model, default_mcmc_options)  recommended_dose <- nextBest(   next_best,   doselimit = Inf,   samples = no_tox_samples,   model = initial_model,   data = no_tox_data ) recommended_dose$probs #>       dose target overdose #>  [1,]    1  0.000    0.000 #>  [2,]    3  0.000    0.000 #>  [3,]    5  0.000    0.000 #>  [4,]   10  0.000    0.000 #>  [5,]   15  0.000    0.000 #>  [6,]   20  0.000    0.000 #>  [7,]   25  0.000    0.000 #>  [8,]   40  0.030    0.000 #>  [9,]   50  0.106    0.000 #> [10,]   80  0.324    0.053 #> [11,]  100  0.462    0.144  stopTrial(stopping_trial, recommended_dose$value, no_tox_samples, initial_model, no_tox_data) #> [1] TRUE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> attr(,\"message\")[[1]][[1]] #> [1] \"Number of cohorts is 11 and thus reached the prespecified minimum number 3\" #>  #> attr(,\"message\")[[1]][[2]] #> [1] \"Probability for target toxicity is 46 % for dose 100 and thus below the required 50 %\" #>  #>  #> attr(,\"message\")[[2]] #> [1] \"Number of patients is 21 and thus reached the prespecified minimum number 20\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] FALSE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> [1] \"Number of cohorts is 11 and thus reached the prespecified minimum number 3\" #>  #> attr(,\"message\")[[2]] #> [1] \"Probability for target toxicity is 46 % for dose 100 and thus below the required 50 %\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] TRUE #> attr(,\"message\") #> [1] \"Number of cohorts is 11 and thus reached the prespecified minimum number 3\" #> attr(,\"report_label\") #> [1] \"≥ 3 cohorts dosed\" #>  #> attr(,\"individual\")[[2]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Probability for target toxicity is 46 % for dose 100 and thus below the required 50 %\" #> attr(,\"report_label\") #> [1] \"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5\" #>  #> attr(,\"report_label\") #> [1] NA #>  #> attr(,\"individual\")[[2]] #> [1] TRUE #> attr(,\"message\") #> [1] \"Number of patients is 21 and thus reached the prespecified minimum number 20\" #> attr(,\"report_label\") #> [1] \"≥ 20 patients dosed\" #>  #> attr(,\"report_label\") #> [1] NA revised_stopping_futility <- StoppingMinPatients(nPatients = 40) revised_stopping_trial <- (stopping_success1 & stopping_success2) | revised_stopping_futility  revised_design2 <- Design(   model = revised_model,   nextBest = next_best,   stopping = revised_stopping_trial,   increments = revised_increment_rule,   cohort_size = cohort_size,   data = empty_data,   startingDose = 3 )"},{"path":"https://openpharma.github.io/crmPack/articles/trial_sanity_checks.html","id":"final-observation","dir":"Articles","previous_headings":"","what":"Final observation","title":"Trial Design: basic sanity checks","text":"simulations used vignette used relatively short chains 1000 samples, purely interests speed. investigating properties real trial, much longer chain lengths used. example, estimate binomial probability accuracy ±1%, effective sample size (ESS) around 40,000 required.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/articles/trial_simulation.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Trial Simulation","text":"basic example shows run simulations CRM 2-parameter logistic regression model, using log normal prior distribution, custom cohort size, stopping maximum increments rules:","code":"library(crmPack)  # Define the dose grid. empty_data <- Data(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))  # Initialize the CRM model. model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Choose the rule for selecting the next dose. my_next_best <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort size. my_size_1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) my_size_2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) my_size <- maxSize(my_size_1, my_size_2)  # Choose the rule for stopping. my_stopping_1 <- StoppingMinCohorts(nCohorts = 3) my_stopping_2 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) my_stopping_3 <- StoppingMinPatients(nPatients = 20) my_stopping <- (my_stopping_1 & my_stopping_2) | my_stopping_3  # Choose the rule for dose increments. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design. design <- Design(   model = model,   nextBest = my_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = empty_data,   startingDose = 3 )  # Define the true function. my_truth <- function(dose) {   alpha0 <- 7   alpha1 <- 8   ref_dose <- 56   stand_log_dose <- log(dose / ref_dose)   plogis(alpha0 + alpha1 * stand_log_dose) }  # Run the simulation on the desired design. # We only generate 1 trial outcome here for illustration, for the actual study # this should be increased of course. options <- McmcOptions(   burnin = 100,   step = 1,   samples = 2000 ) time <- system.time(my_sims <- simulate(design,   args = NULL,   truth = my_truth,   nsim = 1,   seed = 819,   mcmcOptions = options,   parallel = FALSE ))[3]"},{"path":"https://openpharma.github.io/crmPack/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Sabanes Bove. Author, maintainer. Wai Yin Yeung. Author. Burak Kuersad Guenhan. Author. Giuseppe Palermo. Author. Thomas Jaki. Author. Jiawen Zhu. Author. Ziwei Liao. Author. Dimitris Kontos. Author. Marlene Schulte-Goebel. Author. Doug Kelkhoff. Author. Oliver Boix. Author. Robert Adams. Author. Clara Beck. Author. John Kirkpatrick. Author. F. Hoffmann-La Roche AG. Copyright holder, funder. Merck Healthcare KGaA. Copyright holder, funder. Bayer AG. Copyright holder, funder.","code":""},{"path":"https://openpharma.github.io/crmPack/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sabanés Bové D, Yeung WY, Palermo G, Jaki T (2019). “Model-Based Dose Escalation Designs R crmPack.” Journal Statistical Software, 89(10), 1–22. doi:10.18637/jss.v089.i10.","code":"@Article{,   title = {Model-Based Dose Escalation Designs in {R} with {crmPack}},   author = {Daniel {Saban\\'es Bov\\'e} and Wai Yin Yeung and Giuseppe Palermo and Thomas Jaki},   journal = {Journal of Statistical Software},   year = {2019},   volume = {89},   number = {10},   pages = {1--22},   doi = {10.18637/jss.v089.i10}, }"},{"path":"https://openpharma.github.io/crmPack/index.html","id":"crmpack","dir":"","previous_headings":"","what":"Object-Oriented Implementation of CRM Designs","title":"Object-Oriented Implementation of CRM Designs","text":"goal crmPack implement wide range model-based dose escalation designs, ranging classical modern continual reassessment methods (CRMs) based dose-limiting toxicity endpoints dual-endpoint designs taking account biomarker/efficacy outcome. focus Bayesian inference, making easy setup new design JAGS code. However, also possible implement 3+3 designs comparison models non-Bayesian estimation. whole package written modular form S4 class system, making flexible adaptation new models, escalation stopping rules.","code":""},{"path":"https://openpharma.github.io/crmPack/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Object-Oriented Implementation of CRM Designs","text":"can install development version crmPack GitHub : can install stable release version crmPack CRAN :","code":"devtools::install_github(\"openpharma/crmPack\") install.packages(\"crmPack\")"},{"path":"https://openpharma.github.io/crmPack/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Object-Oriented Implementation of CRM Designs","text":"package vignettes provide information various aspects CRM trial design, implementation, simulation analysis: Trial definition Trial analysis Sanity checking Simulation operating characteristics Ordinal CRM models Extending crmPack Tidy crmPack data Describing crmPack objects Markdown Quarto documents Migration old crmPack Sabanes Bove et al (2019) Model-based Dose Escalation Designs R crmPack. JSS 89:10 DOI 10.18637/jss.v089.i10","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSize-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CohortSize — .DefaultCohortSize","title":"CohortSize — .DefaultCohortSize","text":"CohortSize class cohort sizes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSize-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CohortSize — .DefaultCohortSize","text":"","code":".DefaultCohortSize()  .DefaultCohortSize()"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSize-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"CohortSize — .DefaultCohortSize","text":"Typically, end users use DefaultCohortSize() function. Typically, end users use DefaultCohortSize() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeConst-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CohortSizeConst — CohortSizeConst-class","title":"CohortSizeConst — CohortSizeConst-class","text":"CohortSizeConst class fixed constant size cohort.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeConst-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CohortSizeConst — CohortSizeConst-class","text":"","code":"CohortSizeConst(size)  .DefaultCohortSizeConst()"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeConst-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CohortSizeConst — CohortSizeConst-class","text":"size (number) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeConst-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CohortSizeConst — CohortSizeConst-class","text":"size (integer) cohort size.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeConst-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"CohortSizeConst — CohortSizeConst-class","text":"Typically, end users use .DefaultCohortSizeConst() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeConst-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CohortSizeConst — CohortSizeConst-class","text":"","code":"# Cohort of size 3, constant along the study. my_size <- CohortSizeConst(size = 3)"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeDLT-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CohortSizeDLT — CohortSizeDLT-class","title":"CohortSizeDLT — CohortSizeDLT-class","text":"CohortSizeDLT class cohort size based number DLTs.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeDLT-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CohortSizeDLT — CohortSizeDLT-class","text":"","code":"CohortSizeDLT(intervals, cohort_size)  .DefaultCohortSizeDLT()"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeDLT-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CohortSizeDLT — CohortSizeDLT-class","text":"intervals (numeric) see slot definition. cohort_size (numeric) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeDLT-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CohortSizeDLT — CohortSizeDLT-class","text":"intervals (integer) vector left bounds relevant DLT intervals. cohort_size (integer) vector cohort sizes corresponding elements intervals.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeDLT-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"CohortSizeDLT — CohortSizeDLT-class","text":"Typically, end users use .DefaultCohortSizeDLT() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeDLT-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CohortSizeDLT — CohortSizeDLT-class","text":"","code":"# Rule for having cohort of size 1 until no DLT is observed and having cohort # of size 3 as soon as 1 DLT is observed. my_size <- CohortSizeDLT(intervals = c(0, 1), cohort_size = c(1, 3))"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeMax-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CohortSizeMax — CohortSizeMax-class","title":"CohortSizeMax — CohortSizeMax-class","text":"CohortSizeMax class cohort size based maximum multiple cohort size rules. cohort_sizes slot stores set cohort size rules, objects class CohortSize. maximum individual cohort sizes taken give final cohort size.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeMax-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CohortSizeMax — CohortSizeMax-class","text":"","code":".DefaultCohortSizeMax()  CohortSizeMax(cohort_sizes)"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeMax-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CohortSizeMax — CohortSizeMax-class","text":"cohort_sizes (list) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeMax-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CohortSizeMax — CohortSizeMax-class","text":"cohort_sizes (list) list cohort size rules, .e. objects class CohortSize.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeMax-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"CohortSizeMax — CohortSizeMax-class","text":"Typically, end users use .DefaultCohortSizeMax() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeMax-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CohortSizeMax — CohortSizeMax-class","text":"","code":"# Rule for cohort of size 1 for doses <30 and cohort of size 3 for doses >=30. my_size1 <- CohortSizeRange(intervals = c(0, 10), cohort_size = c(1, 3))  # Rule for cohort of size 1 until no DLT were observed and cohort of size 3 # as soon as 1 DLT is observed. my_size2 <- CohortSizeDLT(intervals = c(0, 1), cohort_size = c(1, 3))  # Cohort size rules of class 'CohortSizeMax' which will then be combined with # the 'max' operation. mySize <- CohortSizeMax(cohort_sizes = list(my_size1, my_size2))"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeMin-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CohortSizeMin — CohortSizeMin-class","title":"CohortSizeMin — CohortSizeMin-class","text":"CohortSizeMin class cohort size based minimum multiple cohort size rules. cohort_sizes slot stores set cohort size rules, objects class CohortSize. minimum individual cohort sizes taken give final cohort size.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeMin-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CohortSizeMin — CohortSizeMin-class","text":"","code":"CohortSizeMin(cohort_sizes)  .DefaultCohortSizeMin()"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeMin-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CohortSizeMin — CohortSizeMin-class","text":"cohort_sizes (list) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeMin-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CohortSizeMin — CohortSizeMin-class","text":"cohort_sizes (list) list cohort size rules, .e. objects class CohortSize.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeMin-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"CohortSizeMin — CohortSizeMin-class","text":"Typically, end users use .DefaultCohortSizeMin() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeMin-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CohortSizeMin — CohortSizeMin-class","text":"","code":"# Rule for cohort of size 1 for doses <30 and cohort of size 3 for doses >=30. my_size1 <- CohortSizeRange(intervals = c(0, 10), cohort_size = c(1, 3))  # Rule for cohort of size 1 until no DLT were observed and cohort of size 3 # as soon as 1 DLT is observed. my_size2 <- CohortSizeDLT(intervals = c(0, 1), cohort_size = c(1, 3))  # Cohort size rules of class 'CohortSizeMin' which will then be combined with # the 'min' operation. my_size <- CohortSizeMin(cohort_sizes = list(my_size1, my_size2))"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeOrdinal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CohortSizeOrdinal — CohortSizeOrdinal-class","title":"CohortSizeOrdinal — CohortSizeOrdinal-class","text":"CohortSizeOrdinal class cohort size ordinal CRM trial.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeOrdinal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CohortSizeOrdinal — CohortSizeOrdinal-class","text":"","code":"CohortSizeOrdinal(grade, rule)  .DefaultCohortSizeOrdinal()"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeOrdinal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CohortSizeOrdinal — CohortSizeOrdinal-class","text":"grade (integer) see slot definition. rule (CohortSize) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeOrdinal-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CohortSizeOrdinal — CohortSizeOrdinal-class","text":"grade (integer) grade rule applied rule (CohortSize) CohortSize rule apply.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeOrdinal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"CohortSizeOrdinal — CohortSizeOrdinal-class","text":"Typically, end users use .DefaultCohortSizeOrdinal() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeOrdinal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CohortSizeOrdinal — CohortSizeOrdinal-class","text":"","code":"CohortSizeOrdinal(   grade = 1L,   rule = CohortSizeRange(intervals = c(0, 30), cohort_size = c(1L, 3L)) ) #> An object of class \"CohortSizeOrdinal\" #> Slot \"grade\": #> [1] 1 #>  #> Slot \"rule\": #> An object of class \"CohortSizeRange\" #> Slot \"intervals\": #> [1]  0 30 #>  #> Slot \"cohort_size\": #> [1] 1 3 #>  #>"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeParts-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CohortSizeParts — CohortSizeParts-class","title":"CohortSizeParts — CohortSizeParts-class","text":"CohortSizeParts class cohort size changes second part dose escalation. works conjunction DataParts objects.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeParts-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CohortSizeParts — CohortSizeParts-class","text":"","code":"CohortSizeParts(cohort_sizes)  .DefaultCohortSizeParts()"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeParts-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CohortSizeParts — CohortSizeParts-class","text":"cohort_sizes (numeric) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeParts-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CohortSizeParts — CohortSizeParts-class","text":"cohort_sizes (integer) vector length two two sizes, one part 1, one part 2 respectively.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeParts-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"CohortSizeParts — CohortSizeParts-class","text":"Typically, end users use .DefaultCohortSizeParts() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeParts-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CohortSizeParts — CohortSizeParts-class","text":"","code":"# Part 1 cohort size = 1, Part 2 cohort size = 3. my_size <- CohortSizeParts(cohort_sizes = c(1, 3))"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeRange-class.html","id":null,"dir":"Reference","previous_headings":"","what":"CohortSizeRange — CohortSizeRange-class","title":"CohortSizeRange — CohortSizeRange-class","text":"CohortSizeRange class cohort size based dose range.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeRange-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CohortSizeRange — CohortSizeRange-class","text":"","code":"CohortSizeRange(intervals, cohort_size)  .DefaultCohortSizeRange()"},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeRange-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CohortSizeRange — CohortSizeRange-class","text":"intervals (numeric) see slot definition. cohort_size (numeric) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeRange-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CohortSizeRange — CohortSizeRange-class","text":"intervals (numeric) vector left bounds relevant dose intervals. cohort_size (integer) integer vector cohort sizes corresponding elements intervals.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeRange-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"CohortSizeRange — CohortSizeRange-class","text":"Typically, end users use .DefaultCohortSizeRange() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/CohortSizeRange-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CohortSizeRange — CohortSizeRange-class","text":"","code":"# Example for the rule having cohort of size 1 for doses <30 # and having cohort of size 3 for doses >=30.  my_size <- CohortSizeRange(intervals = c(0, 30), cohort_size = c(1, 3))"},{"path":"https://openpharma.github.io/crmPack/reference/CrmPackClass.html","id":null,"dir":"Reference","previous_headings":"","what":"CrmPackClass — CrmPackClass-class","title":"CrmPackClass — CrmPackClass-class","text":"CrmPackClass virtual class, crmPack classes inherit.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DADesign-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DADesign — DADesign-class","title":"DADesign — DADesign-class","text":"class special requirements model data slots comparison parent class Design:","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DADesign-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DADesign — DADesign-class","text":"","code":"DADesign(model, data, safetyWindow, ...)  .DefaultDADesign()"},{"path":"https://openpharma.github.io/crmPack/reference/DADesign-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DADesign — DADesign-class","text":"model (GeneralModel) see slot definition. data (DataDA) see slot definition. safetyWindow (SafetyWindow) see slot definition. ... Arguments passed Design stopping (Stopping) see slot definition. increments (Increments) see slot definition. pl_cohort_size (CohortSize) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DADesign-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DADesign — DADesign-class","text":"safetyWindow slot instance SafetyWindow class. can customized specify duration safety window trial. safety window represents time period required observe toxicity data ongoing cohort opening next cohort. Note even opening next cohort, toxicity data collected analyzed make dose escalation decisions. specify constant safety window, use SafetyWindowConst constructor. example: mysafetywindow <- SafetyWindowConst(c(6, 2), 10, 20)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DADesign-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DADesign — DADesign-class","text":"model (GeneralModel) model use, see particular DALogisticLogNormal TITELogisticLogNormal make use time--DLT data. data (DataDA) dose grid, previous data, etc. safetyWindow (SafetyWindow) safety window apply cohorts.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DADesign-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DADesign — DADesign-class","text":"Typically, end users use .DefaultDADesign() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/DADesign-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DADesign — DADesign-class","text":"","code":"empty_data <- DataDA(doseGrid = c(   0.1, 0.5, 1, 1.5, 3, 6,   seq(from = 10, to = 80, by = 2) ), Tmax = 60)  npiece <- 10 t_max <- 60  lambda_prior <- function(k) {   npiece / (t_max * (npiece - k + 0.5)) }  model <- DALogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56,   npiece = npiece,   l = as.numeric(t(apply(as.matrix(c(1:npiece), 1, npiece), 2, lambda_prior))),   c_par = 2 )  my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  my_next_best <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  my_size1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) )  my_size2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) )  my_size <- maxSize(my_size1, my_size2)  my_stopping1 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 )  my_stopping2 <- StoppingMinPatients(nPatients = 50)  my_stopping <- (my_stopping1 | my_stopping2)  my_safety_window <- SafetyWindowConst(c(6, 2), 7, 7)  design <- DADesign(   model = model,   increments = my_increments,   nextBest = my_next_best,   stopping = my_stopping,   cohort_size = my_size,   data = empty_data,   safetyWindow = my_safety_window,   startingDose = 3 )"},{"path":"https://openpharma.github.io/crmPack/reference/DALogisticLogNormal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DALogisticLogNormal — DALogisticLogNormal-class","title":"DALogisticLogNormal — DALogisticLogNormal-class","text":"DALogisticLogNormal class logistic model bivariate (log) normal prior data augmentation. class inherits LogisticLogNormal class.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DALogisticLogNormal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DALogisticLogNormal — DALogisticLogNormal-class","text":"","code":"DALogisticLogNormal(npiece = 3, l, c_par = 2, cond_pem = TRUE, ...)  .DefaultDALogisticLogNormal()"},{"path":"https://openpharma.github.io/crmPack/reference/DALogisticLogNormal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DALogisticLogNormal — DALogisticLogNormal-class","text":"npiece (number) number pieces PEM. l (numeric) vector used lambda prior. c_par (numeric) parameter used lambda prior; according Liu's paper, c_par = 2 recommended. cond_pem (flag) conditional piecewise-exponential model used? (default). Otherwise unconditional model used. ... Arguments passed LogisticLogNormal mean (numeric) prior mean vector. cov (matrix) prior covariance matrix. precision matrix prec internally calculated inverse cov. ref_dose (number) reference dose \\(x*\\) (strictly positive number).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DALogisticLogNormal-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DALogisticLogNormal — DALogisticLogNormal-class","text":"npiece (number) number pieces PEM. l (numeric) vector used lambda prior. c_par (numeric) parameter used lambda prior; according Liu's paper, c_par = 2 recommended. cond_pem (flag) conditional piecewise-exponential model used? (default). Otherwise unconditional model used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DALogisticLogNormal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DALogisticLogNormal — DALogisticLogNormal-class","text":"still need include formula lambda prior. Typically, end users use .DefaultDALogisticLogNormal() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/DALogisticLogNormal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DALogisticLogNormal — DALogisticLogNormal-class","text":"","code":"npiece <- 10 Tmax <- 60 # nolintr  lambda_prior <- function(k) {   npiece / (Tmax * (npiece - k + 0.5)) }  model <- DALogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56,   npiece = npiece,   l = as.numeric(t(apply(as.matrix(c(1:npiece), 1, npiece), 2, lambda_prior))),   c_par = 2 )"},{"path":"https://openpharma.github.io/crmPack/reference/DASimulations-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for the simulations output from DA based designs — DASimulations-class","title":"Class for the simulations output from DA based designs — DASimulations-class","text":"class captures trial simulations DA based designs. comparison parent class Simulations, contains additional slots capture time DLT fits, additional parameters trial duration.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DASimulations-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for the simulations output from DA based designs — DASimulations-class","text":"","code":".DefaultDASimulations()"},{"path":"https://openpharma.github.io/crmPack/reference/DASimulations-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for the simulations output from DA based designs — DASimulations-class","text":"trialduration vector trial duration values simulations.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DASimulations-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class for the simulations output from DA based designs — DASimulations-class","text":"Typically, end users use .DASimulations() function.  function noticeable execution time.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DASimulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization function for DASimulations — DASimulations","title":"Initialization function for DASimulations — DASimulations","text":"Initialization function DASimulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DASimulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialization function for DASimulations — DASimulations","text":"","code":"DASimulations(trialduration, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/DASimulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization function for DASimulations — DASimulations","text":"trialduration see DASimulations ... additional parameters Simulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DASimulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization function for DASimulations — DASimulations","text":"DASimulations object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DLTLikelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood of DLTs in each interval — DLTLikelihood","title":"Likelihood of DLTs in each interval — DLTLikelihood","text":"helper function fitPEM methods .","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DLTLikelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood of DLTs in each interval — DLTLikelihood","text":"","code":"DLTLikelihood(lambda, Tmax)"},{"path":"https://openpharma.github.io/crmPack/reference/DLTLikelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood of DLTs in each interval — DLTLikelihood","text":"lambda vector piecewise hazards Tmax end time interval DLTs","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DLTLikelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likelihood of DLTs in each interval — DLTLikelihood","text":"vector probabilities DLTs within intervals.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Data-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Data — Data-class","title":"Data — Data-class","text":"Data class data input. inherits GeneralData.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Data-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data — Data-class","text":"","code":"Data(   x = numeric(),   y = integer(),   ID = integer(),   cohort = integer(),   doseGrid = numeric(),   placebo = FALSE,   ... )  .DefaultData()"},{"path":"https://openpharma.github.io/crmPack/reference/Data-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data — Data-class","text":"x (numeric) doses patients. y (integer) vector toxicity events (0 1). can also supply numeric vectors, converted integer internally. ID (integer) unique patient IDs. can also supply numeric vectors, converted integer internally. cohort (integer) cohort (non-negative sorted) indices. can also supply numeric vectors, converted integer internally. doseGrid (numeric) possible doses. placebo (flag) TRUE first dose level doseGrid considered placebo. ... used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Data-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data — Data-class","text":"cohort can missing placebo equal FALSE.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Data-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Data — Data-class","text":"x (numeric) doses patients. y (integer) vector toxicity events (0 1 integers). doseGrid (numeric) vector possible doses (sorted), .e. dose grid. nGrid (integer) number gridpoints. xLevel (integer) levels doses patients given, w.r.t doseGrid. placebo (logical) TRUE first dose level doseGridis considered PLACEBO.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Data-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Data — Data-class","text":"ID cohort can missing. message issued variables filled default IDs best guesses cohort, .e. sorted (ascending order) sequence values {1, 2, ...}. Typically, end users use .DefaultData() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Data-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data — Data-class","text":"","code":"my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   ID = as.integer(1:8),   cohort = as.integer(c(1, 2, 3, 4, 5, 6, 6, 6)),   doseGrid = c(     0.1, 0.5, 1.5, 3, 6,     seq(from = 10, to = 80, by = 2)   ) ) my_data #> An object of class \"Data\" #> Slot \"x\": #> [1]  0.1  0.5  1.5  3.0  6.0 10.0 10.0 10.0 #>  #> Slot \"y\": #> [1] 0 0 0 0 0 0 1 0 #>  #> Slot \"doseGrid\": #>  [1]  0.1  0.5  1.5  3.0  6.0 10.0 12.0 14.0 16.0 18.0 20.0 22.0 24.0 26.0 28.0 #> [16] 30.0 32.0 34.0 36.0 38.0 40.0 42.0 44.0 46.0 48.0 50.0 52.0 54.0 56.0 58.0 #> [31] 60.0 62.0 64.0 66.0 68.0 70.0 72.0 74.0 76.0 78.0 80.0 #>  #> Slot \"nGrid\": #> [1] 41 #>  #> Slot \"xLevel\": #> [1] 1 2 3 4 5 6 6 6 #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #> [1] 1 2 3 4 5 6 7 8 #>  #> Slot \"cohort\": #> [1] 1 2 3 4 5 6 6 6 #>  #> Slot \"nObs\": #> [1] 8 #>"},{"path":"https://openpharma.github.io/crmPack/reference/DataDA-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DataDA — DataDA-class","title":"DataDA — DataDA-class","text":"DataDA class time--DLT augmented data. inherits Data contains additional DLT free survival times.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataDA-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataDA — DataDA-class","text":"","code":"DataDA(   u = numeric(),   t0 = numeric(length(u)),   Tmax = 0 + .Machine$double.xmin,   ... )  .DefaultDataDA()"},{"path":"https://openpharma.github.io/crmPack/reference/DataDA-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataDA — DataDA-class","text":"u (numeric) continuous vector DLT free survival times. t0 (numeric) time initial dosing patient. Non-negative values sorted ascending order. Default vector 0s length equal length u. Tmax (number) DLT observation period. ... parameters passed Data().","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataDA-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DataDA — DataDA-class","text":"u (numeric) continuous vector DLT free survival times. t0 (numeric) time initial dosing patient. Non-negative values sorted ascending order. Tmax (number) DLT observation period.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataDA-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DataDA — DataDA-class","text":"survival time refers time period subject experience DLT, referring deaths. Typically, end users use .DefaultDataDA() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataDA-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DataDA — DataDA-class","text":"","code":"my_data <- DataDA(   u = c(42, 30, 15, 5, 20, 25, 30, 60),   t0 = c(0, 15, 30, 40, 55, 70, 75, 85),   Tmax = 60,   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 1, 1, 0, 0, 1, 0),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Set up an empty data set. empty_data <- DataDA(   doseGrid = c(0.1, 0.5, 1, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)),   Tmax = 60 ) empty_data #> An object of class \"DataDA\" #> Slot \"u\": #> numeric(0) #>  #> Slot \"t0\": #> numeric(0) #>  #> Slot \"Tmax\": #> [1] 60 #>  #> Slot \"x\": #> numeric(0) #>  #> Slot \"y\": #> integer(0) #>  #> Slot \"doseGrid\": #>  [1]  0.1  0.5  1.0  1.5  3.0  6.0 10.0 12.0 14.0 16.0 18.0 20.0 22.0 24.0 26.0 #> [16] 28.0 30.0 32.0 34.0 36.0 38.0 40.0 42.0 44.0 46.0 48.0 50.0 52.0 54.0 56.0 #> [31] 58.0 60.0 62.0 64.0 66.0 68.0 70.0 72.0 74.0 76.0 78.0 80.0 #>  #> Slot \"nGrid\": #> [1] 42 #>  #> Slot \"xLevel\": #> integer(0) #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #> integer(0) #>  #> Slot \"cohort\": #> integer(0) #>  #> Slot \"nObs\": #> [1] 0 #>"},{"path":"https://openpharma.github.io/crmPack/reference/DataDual-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DataDual — DataDual-class","title":"DataDual — DataDual-class","text":"DataDual class dual endpoint data. inherits Data contains additional biomarker information.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataDual-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataDual — DataDual-class","text":"","code":"DataDual(w = numeric(), ...)  .DefaultDataDual()"},{"path":"https://openpharma.github.io/crmPack/reference/DataDual-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataDual — DataDual-class","text":"w (numeric) continuous vector biomarker values. ... parameters passed Data().","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataDual-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DataDual — DataDual-class","text":"w (numeric) continuous vector biomarker values.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataDual-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DataDual — DataDual-class","text":"Typically, end users use .DefaultDataDual() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataDual-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DataDual — DataDual-class","text":"","code":"my_data <- DataDual(   w = rnorm(8),   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   doseGrid = c(     0.1, 0.5, 1.5, 3, 6,     seq(from = 10, to = 80, by = 2)   ) ) #> Used default patient IDs! #> Used best guess cohort indices! my_data #> An object of class \"DataDual\" #> Slot \"w\": #> [1]  2.06502490 -1.63098940  0.51242695 -1.86301149 -0.52201251 -0.05260191 #> [7]  0.54299634 -0.91407483 #>  #> Slot \"x\": #> [1]  0.1  0.5  1.5  3.0  6.0 10.0 10.0 10.0 #>  #> Slot \"y\": #> [1] 0 0 0 0 0 0 1 0 #>  #> Slot \"doseGrid\": #>  [1]  0.1  0.5  1.5  3.0  6.0 10.0 12.0 14.0 16.0 18.0 20.0 22.0 24.0 26.0 28.0 #> [16] 30.0 32.0 34.0 36.0 38.0 40.0 42.0 44.0 46.0 48.0 50.0 52.0 54.0 56.0 58.0 #> [31] 60.0 62.0 64.0 66.0 68.0 70.0 72.0 74.0 76.0 78.0 80.0 #>  #> Slot \"nGrid\": #> [1] 41 #>  #> Slot \"xLevel\": #> [1] 1 2 3 4 5 6 6 6 #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #> [1] 1 2 3 4 5 6 7 8 #>  #> Slot \"cohort\": #> [1] 1 2 3 4 5 6 6 6 #>  #> Slot \"nObs\": #> [1] 8 #>"},{"path":"https://openpharma.github.io/crmPack/reference/DataGrouped-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DataGrouped — DataGrouped-class","title":"DataGrouped — DataGrouped-class","text":"DataGrouped class two groups dose escalation data set, comprised monotherapy (mono) combination therapy (combo) arm. inherits Data contains additional group information.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataGrouped-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataGrouped — DataGrouped-class","text":"","code":"DataGrouped(group = character(), ...)  .DefaultDataGrouped()"},{"path":"https://openpharma.github.io/crmPack/reference/DataGrouped-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataGrouped — DataGrouped-class","text":"group (factor character) whether mono combo used. character coerced factor correct levels internally. ... parameters passed Data().","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataGrouped-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DataGrouped — DataGrouped-class","text":"group (factor) whether mono combo used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataGrouped-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DataGrouped — DataGrouped-class","text":"Typically, end users use .DefaultDataGrouped() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataGrouped-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DataGrouped — DataGrouped-class","text":"","code":"my_data <- DataGrouped(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 1, 1, 0, 0, 1, 0),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)),   group = c(\"mono\", \"mono\", \"mono\", \"mono\", \"mono\", \"mono\", \"combo\", \"combo\") ) #> Used default patient IDs! #> Used best guess cohort indices!  # Set up an empty data set. empty_data <- DataGrouped(   doseGrid = c(0.1, 0.5, 1, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) ) empty_data #> An object of class \"DataGrouped\" #> Slot \"group\": #> factor() #> Levels: mono combo #>  #> Slot \"x\": #> numeric(0) #>  #> Slot \"y\": #> integer(0) #>  #> Slot \"doseGrid\": #>  [1]  0.1  0.5  1.0  1.5  3.0  6.0 10.0 12.0 14.0 16.0 18.0 20.0 22.0 24.0 26.0 #> [16] 28.0 30.0 32.0 34.0 36.0 38.0 40.0 42.0 44.0 46.0 48.0 50.0 52.0 54.0 56.0 #> [31] 58.0 60.0 62.0 64.0 66.0 68.0 70.0 72.0 74.0 76.0 78.0 80.0 #>  #> Slot \"nGrid\": #> [1] 42 #>  #> Slot \"xLevel\": #> integer(0) #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #> integer(0) #>  #> Slot \"cohort\": #> integer(0) #>  #> Slot \"nObs\": #> [1] 0 #>"},{"path":"https://openpharma.github.io/crmPack/reference/DataMixture-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DataMixture — DataMixture-class","title":"DataMixture — DataMixture-class","text":"DataMixture class data mixture sharing. inherits Data contains additional information mixture sharing.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataMixture-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataMixture — DataMixture-class","text":"","code":"DataMixture(xshare = numeric(), yshare = integer(), ...)  .DefaultDataMixture()"},{"path":"https://openpharma.github.io/crmPack/reference/DataMixture-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataMixture — DataMixture-class","text":"xshare (numeric) doses share patients. yshare (integer) vector toxicity events (0 1) share patients. can also supply numeric vectors, converted integer internally. ... parameters passed Data().","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataMixture-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DataMixture — DataMixture-class","text":"xshare (numeric) doses share patients. yshare (integer) vector toxicity events (0 1) share patients. nObsshare (count) number share patients.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataMixture-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DataMixture — DataMixture-class","text":"Typically, end users use .DefaultDataMixture() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataMixture-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DataMixture — DataMixture-class","text":"","code":"my_data <- DataMixture(   xshare = c(12, 14, 16, 18.0),   yshare = c(0L, 1L, 1L, 1L),   nObsshare = 4L,   x = c(0.1, 0.5, 1.5),   y = c(0, 0, 0),   ID = 1:3,   cohort = 1:3,   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) ) my_data #> An object of class \"DataMixture\" #> Slot \"xshare\": #> [1] 12 14 16 18 #>  #> Slot \"yshare\": #> [1] 0 1 1 1 #>  #> Slot \"nObsshare\": #> [1] 4 #>  #> Slot \"x\": #> [1] 0.1 0.5 1.5 #>  #> Slot \"y\": #> [1] 0 0 0 #>  #> Slot \"doseGrid\": #>  [1]  0.1  0.5  1.5  3.0  6.0 10.0 12.0 14.0 16.0 18.0 20.0 22.0 24.0 26.0 28.0 #> [16] 30.0 32.0 34.0 36.0 38.0 40.0 42.0 44.0 46.0 48.0 50.0 52.0 54.0 56.0 58.0 #> [31] 60.0 62.0 64.0 66.0 68.0 70.0 72.0 74.0 76.0 78.0 80.0 #>  #> Slot \"nGrid\": #> [1] 41 #>  #> Slot \"xLevel\": #> [1] 1 2 3 #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #> [1] 1 2 3 #>  #> Slot \"cohort\": #> [1] 1 2 3 #>  #> Slot \"nObs\": #> [1] 3 #>"},{"path":"https://openpharma.github.io/crmPack/reference/DataOrdinal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DataOrdinal — DataOrdinal-class","title":"DataOrdinal — DataOrdinal-class","text":"DataOrdinal class ordinal toxicity data. inherits GeneralData describes toxicity responses ordinal rather binary scale.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataOrdinal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataOrdinal — DataOrdinal-class","text":"","code":"DataOrdinal(   x = numeric(),   y = integer(),   ID = integer(),   cohort = integer(),   doseGrid = numeric(),   placebo = FALSE,   yCategories = c(`No DLT` = 0L, DLT = 1L),   ... )  .DefaultDataOrdinal()"},{"path":"https://openpharma.github.io/crmPack/reference/DataOrdinal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataOrdinal — DataOrdinal-class","text":"x (numeric) doses patients. y (integer) vector toxicity events (0 1). can also supply numeric vectors, converted integer internally. ID (integer) unique patient IDs. can also supply numeric vectors, converted integer internally. cohort (integer) cohort (non-negative sorted) indices. can also supply numeric vectors, converted integer internally. doseGrid (numeric) possible doses. placebo (flag) TRUE first dose level doseGrid considered placebo. yCategories (named integer) names codes toxicity categories used data.  Category labels taken names vector.  names vector must unique values must sorted take values 0, 1, 2, ... ... used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataOrdinal-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DataOrdinal — DataOrdinal-class","text":"cohort can missing placebo equal FALSE.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataOrdinal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DataOrdinal — DataOrdinal-class","text":"class implemented sibling existing Data class (rather parent child) minimise risk unintended side effects existing classes methods. default setting yCategories slot replicates behaviour existing Data class. Typically, end users use .DefaultDataOrdinal() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataOrdinal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DataOrdinal — DataOrdinal-class","text":"","code":"DataOrdinal(   x = c(10, 20, 30, 40, 50, 50, 50, 60, 60, 60),   y = as.integer(c(0, 0, 0, 0, 0, 1, 0, 0, 1, 2)),   ID = 1L:10L,   cohort = as.integer(c(1:4, 5, 5, 5, 6, 6, 6)),   doseGrid = c(seq(from = 10, to = 100, by = 10)),   yCategories = c(\"No tox\" = 0L, \"Sub-tox AE\" = 1L, \"DLT\" = 2L),   placebo = FALSE ) #> An object of class \"DataOrdinal\" #> Slot \"x\": #>  [1] 10 20 30 40 50 50 50 60 60 60 #>  #> Slot \"y\": #>  [1] 0 0 0 0 0 1 0 0 1 2 #>  #> Slot \"doseGrid\": #>  [1]  10  20  30  40  50  60  70  80  90 100 #>  #> Slot \"nGrid\": #> [1] 10 #>  #> Slot \"xLevel\": #>  [1] 1 2 3 4 5 5 5 6 6 6 #>  #> Slot \"yCategories\": #>     No tox Sub-tox AE        DLT  #>          0          1          2  #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> Slot \"cohort\": #>  [1] 1 2 3 4 5 5 5 6 6 6 #>  #> Slot \"nObs\": #> [1] 10 #>"},{"path":"https://openpharma.github.io/crmPack/reference/DataParts-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DataParts — DataParts-class","title":"DataParts — DataParts-class","text":"DataParts class data two study parts. inherits Data contains additional information two study parts.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataParts-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataParts — DataParts-class","text":"","code":"DataParts(part = integer(), nextPart = 1L, part1Ladder = numeric(), ...)  .DefaultDataParts()"},{"path":"https://openpharma.github.io/crmPack/reference/DataParts-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataParts — DataParts-class","text":"part (integer) part patients belong ? nextPart (count) part next cohort (1 2)? part1Ladder (numeric) escalation ladder part 1? shall ordered subset doseGrid. ... parameters passed Data().","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataParts-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DataParts — DataParts-class","text":"part (integer) part patients belong ? nextPart (count) part next cohort (1 2)? part1Ladder (numeric) escalation ladder part 1? shall ordered subset doseGrid.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataParts-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DataParts — DataParts-class","text":"Typically, end users use .DefaultDataParts() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DataParts-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DataParts — DataParts-class","text":"","code":"my_data <- DataParts(   x = c(0.1, 0.5, 1.5),   y = c(0, 0, 0),   ID = 1:3,   cohort = 1:3,   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)),   part = c(1L, 1L, 1L),   nextPart = 1L,   part1Ladder = c(0.1, 0.5, 1.5, 3, 6, 10) ) my_data #> An object of class \"DataParts\" #> Slot \"part\": #> [1] 1 1 1 #>  #> Slot \"nextPart\": #> [1] 1 #>  #> Slot \"part1Ladder\": #> [1]  0.1  0.5  1.5  3.0  6.0 10.0 #>  #> Slot \"x\": #> [1] 0.1 0.5 1.5 #>  #> Slot \"y\": #> [1] 0 0 0 #>  #> Slot \"doseGrid\": #>  [1]  0.1  0.5  1.5  3.0  6.0 10.0 12.0 14.0 16.0 18.0 20.0 22.0 24.0 26.0 28.0 #> [16] 30.0 32.0 34.0 36.0 38.0 40.0 42.0 44.0 46.0 48.0 50.0 52.0 54.0 56.0 58.0 #> [31] 60.0 62.0 64.0 66.0 68.0 70.0 72.0 74.0 76.0 78.0 80.0 #>  #> Slot \"nGrid\": #> [1] 41 #>  #> Slot \"xLevel\": #> [1] 1 2 3 #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #> [1] 1 2 3 #>  #> Slot \"cohort\": #> [1] 1 2 3 #>  #> Slot \"nObs\": #> [1] 3 #>"},{"path":"https://openpharma.github.io/crmPack/reference/Design-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Design — Design-class","title":"Design — Design-class","text":"Design class rule-based designs. difference class parent RuleDesign class Design class contains additional model, stopping increments slots.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Design-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Design — Design-class","text":"","code":"Design(model, stopping, increments, pl_cohort_size = CohortSizeConst(0L), ...)  .DefaultDesign()"},{"path":"https://openpharma.github.io/crmPack/reference/Design-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design — Design-class","text":"model (GeneralModel) see slot definition. stopping (Stopping) see slot definition. increments (Increments) see slot definition. pl_cohort_size (CohortSize) see slot definition. ... Arguments passed RuleDesign nextBest (NextBest) see slot definition. cohort_size (CohortSize) see slot definition. data (Data) see slot definition. startingDose (number) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Design-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Design — Design-class","text":"model (GeneralModel) model used. stopping (Stopping) stopping rule(s) trial. increments (Increments) control increments dose levels. pl_cohort_size (CohortSize) rules cohort sizes placebo, planned (defaults constant 0 placebo patients).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Design-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Design — Design-class","text":"Typically, end users use .DefaultDesign() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Design-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Design — Design-class","text":"","code":"empty_data <- Data(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))  # Initialize the CRM model. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Choose the rule for selecting the next dose. my_next_best <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort-size. my_size1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) my_size2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) my_size <- maxSize(my_size1, my_size2)  # Choose the rule for stopping. my_stopping1 <- StoppingMinCohorts(nCohorts = 3) my_stopping2 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) my_stopping3 <- StoppingMinPatients(nPatients = 20) my_stopping <- (my_stopping1 & my_stopping2) | my_stopping3  # Choose the rule for dose increments. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design. design <- Design(   model = my_model,   nextBest = my_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = empty_data,   startingDose = 3 )"},{"path":"https://openpharma.github.io/crmPack/reference/DesignGrouped-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DesignGrouped — DesignGrouped-class","title":"DesignGrouped — DesignGrouped-class","text":"DesignGrouped combines two Design objects: one mono one combo arm joint dose escalation design.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DesignGrouped-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DesignGrouped — DesignGrouped-class","text":"","code":"DesignGrouped(   model,   mono,   combo = mono,   first_cohort_mono_only = TRUE,   same_dose_for_all = !same_dose_for_start,   same_dose_for_start = FALSE,   stop_mono_with_combo = FALSE,   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/DesignGrouped-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DesignGrouped — DesignGrouped-class","text":"model (LogisticLogNormalGrouped) see slot definition. mono (Design) see slot definition. combo (Design) see slot definition. first_cohort_mono_only (flag) see slot definition. same_dose_for_all (flag) see slot definition. same_dose_for_start (flag) see slot definition. stop_mono_with_combo (flag) whether mono arm stopped combo arm stopped (makes sense real trial objective recommended combo dose). ... used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DesignGrouped-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DesignGrouped — DesignGrouped-class","text":"Note model slots inside mono combo parameters ignored (fit separate regression models mono combo arms). Instead, model parameter used fit joint regression model mono combo arms together. same_dose_for_start = TRUE useful option want use same_dose_for_all = FALSE combined first_cohort_mono_only = TRUE. allow randomize patients mono combo arms dose long selected dose cohorts stay . can therefore mitigate bias long possible mono combo arms.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DesignGrouped-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DesignGrouped — DesignGrouped-class","text":"model (LogisticLogNormalGrouped) model used, currently one class allowed. mono (Design) defines dose escalation rules mono arm, see details. combo (Design) defines dose escalation rules combo arm, see details. first_cohort_mono_only (flag) whether first test one mono agent cohort, DLT data collected, proceed second cohort onwards concurrent mono combo cohorts. same_dose_for_all (flag) whether lower dose separately determined mono combo doses used next dose mono combo cohorts. same_dose_for_start (flag) indicates whether, mono combo used cohort first time, dose used . Note different same_dose_for_all always force . same_dose_for_all = TRUE, therefore ignored. See Details.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DesignGrouped-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DesignGrouped — DesignGrouped-class","text":"Typically, end-users use .DefaultDesignGrouped() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DesignGrouped-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DesignGrouped — DesignGrouped-class","text":"","code":"empty_data <- Data(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))  # Initialize the joint model. my_model <- LogisticLogNormalGrouped(   mean = c(-0.85, 0, 1, 0),   cov = diag(1, 4),   ref_dose = 56 )  # Choose the rule for selecting the next dose. my_next_best <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort-size. my_size1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) my_size2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) my_size <- maxSize(my_size1, my_size2)  # Choose the rule for stopping. my_stopping1 <- StoppingMinCohorts(nCohorts = 3) my_stopping2 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) my_stopping3 <- StoppingMinPatients(nPatients = 20) my_stopping <- (my_stopping1 & my_stopping2) | my_stopping3  # Choose the rule for dose increments. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Rules to be used for both arms. one_arm <- Design(   model = .DefaultModelLogNormal(), # Ignored.   nextBest = my_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = empty_data,   startingDose = 3 )  # Initialize the design. design <- DesignGrouped(   model = my_model,   mono = one_arm )  # Alternative options: Here e.g. # - use both mono in first cohort and afterwards have mono and combo in parallel, # - in general allow different dose levels for the cohorts, # - but for the start (i.e. second cohort) have the same dose for mono and combo. # - Stop mono arm too, when combo arm is stopped.  design2 <- DesignGrouped(   model = my_model,   mono = one_arm,   first_cohort_mono_only = TRUE,   same_dose_for_all = FALSE,   same_dose_for_start = TRUE,   stop_mono_with_combo = TRUE )"},{"path":"https://openpharma.github.io/crmPack/reference/DesignOrdinal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DesignOrdinal — DesignOrdinal-class","title":"DesignOrdinal — DesignOrdinal-class","text":"DesignOrdinal class rule-based ordinal designs. difference class parent RuleDesignOrdinal class DesignOrdinal class contains additional model, stopping, increments pl_cohort_size slots.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DesignOrdinal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DesignOrdinal — DesignOrdinal-class","text":"","code":"DesignOrdinal(   model,   stopping,   increments,   pl_cohort_size = CohortSizeOrdinal(1L, CohortSizeConst(0L)),   ... )  .DefaultDesignOrdinal()"},{"path":"https://openpharma.github.io/crmPack/reference/DesignOrdinal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DesignOrdinal — DesignOrdinal-class","text":"model (LogisticLogNormalOrdinal) see slot definition. stopping (StoppingOrdinal) see slot definition. increments (IncrementsOrdinal) see slot definition. pl_cohort_size (CohortSizeOrdinal) see slot definition. ... Arguments passed RuleDesignOrdinal next_best (NextBestOrdinal) see slot definition. cohort_size (CohortSizeOrdinal) see slot definition. data (DataOrdinal) see slot definition. starting_dose (number) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DesignOrdinal-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DesignOrdinal — DesignOrdinal-class","text":"model (LogisticLogNormalOrdinal) model used. stopping (StoppingOrdinal) stopping rule(s) trial. increments (IncrementsOrdinal) control increments dose levels. pl_cohort_size (CohortSizeOrdinal) rules cohort sizes placebo, planned (defaults constant 0 placebo patients).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DesignOrdinal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DesignOrdinal — DesignOrdinal-class","text":"Typically, end users use .DefaultDesignOrdinal() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DesignOrdinal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DesignOrdinal — DesignOrdinal-class","text":"","code":"my_size1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) my_size2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) my_size <- CohortSizeOrdinal(1L, maxSize(my_size1, my_size2))  my_stopping1 <- StoppingMinCohorts(nCohorts = 3) my_stopping2 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) my_stopping3 <- StoppingMinPatients(nPatients = 20) my_stopping <- StoppingOrdinal(1L, (my_stopping1 & my_stopping2) | my_stopping3)  # Initialize the design. design <- DesignOrdinal(   model = LogisticLogNormalOrdinal(     mean = c(-3, -4, 1),     cov = diag(c(3, 4, 1)),     ref_dose = 50   ),   next_best = NextBestOrdinal(     1L,     NextBestNCRM(       target = c(0.2, 0.35),       overdose = c(0.35, 1),       max_overdose_prob = 0.25     )   ),   stopping = my_stopping,   increments = IncrementsOrdinal(     1L,     IncrementsRelative(       intervals = c(0, 20),       increments = c(1, 0.33)     )   ),   cohort_size = my_size,   data = DataOrdinal(     doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100),     yCategories = c(\"No tox\" = 0L, \"Sub-tox AE\" = 1L, \"DLT\" = 2L)   ),   starting_dose = 3 )"},{"path":"https://openpharma.github.io/crmPack/reference/DualDesign-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DualDesign — DualDesign-class","title":"DualDesign — DualDesign-class","text":"DualDesign class dual-endpoint CRM design. class special requirements model data slots comparison parent class Design.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualDesign-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DualDesign — DualDesign-class","text":"","code":"DualDesign(model, data, ...)  .DefaultDualDesign()"},{"path":"https://openpharma.github.io/crmPack/reference/DualDesign-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DualDesign — DualDesign-class","text":"model (DualEndpoint) see slot definition. data (DataDual) see slot definition. ... Arguments passed Design stopping (Stopping) see slot definition. increments (Increments) see slot definition. pl_cohort_size (CohortSize) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualDesign-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DualDesign — DualDesign-class","text":"model (DualEndpoint) model used. data (DataDual) specifies dose grid, previous data, etc.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualDesign-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DualDesign — DualDesign-class","text":"nextBest slot can class, allows easy comparison recommendation methods use biomarker information. Typically, end users use .DefaultDualDesign() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualDesign-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DualDesign — DualDesign-class","text":"","code":"empty_data <- DataDual(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))  # Initialize the CRM model. my_model <- DualEndpointRW(   mean = c(0, 1),   cov = matrix(c(1, 0, 0, 1), nrow = 2),   sigma2betaW = 0.01,   sigma2W = c(a = 0.1, b = 0.1),   rho = c(a = 1, b = 1),   rw1 = TRUE )  # Choose the rule for selecting the next dose. my_next_best <- NextBestDualEndpoint(   target = c(0.9, 1),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort-size. my_size1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) my_size2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) my_size <- maxSize(my_size1, my_size2)  # Choose the rule for stopping. my_stopping1 <- StoppingTargetBiomarker(   target = c(0.9, 1),   prob = 0.5 ) my_stopping <- my_stopping1 | StoppingMinPatients(40)  # Choose the rule for dose increments. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design. design <- DualDesign(   model = my_model,   data = empty_data,   nextBest = my_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   startingDose = 3 )"},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpoint-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DualEndpoint — DualEndpoint-class","title":"DualEndpoint — DualEndpoint-class","text":"DualEndpoint general class dual endpoint model.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpoint-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DualEndpoint — DualEndpoint-class","text":"","code":"DualEndpoint(mean, cov, ref_dose = 1, use_log_dose = FALSE, sigma2W, rho)  .DefaultDualEndpoint()"},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpoint-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DualEndpoint — DualEndpoint-class","text":"mean (numeric) probit toxicity model, prior mean vector. cov (matrix) probit toxicity model, prior covariance matrix. precision matrix internally calculated inverse cov. ref_dose (number) probit toxicity model, reference dose \\(x*\\) (strictly positive number). use_log_dose (flag) probit toxicity model, whether log transformation (standardized) dose used? sigma2W (numeric) biomarker variance. Either fixed value Inverse-Gamma distribution parameters, .e. vector two elements named b. rho (numeric) either fixed value correlation (-1 1), named vector two elements named b Beta prior transformation kappa = (rho + 1) / 2, (0, 1). example, = 1, b = 1 leads uniform prior rho.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpoint-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DualEndpoint — DualEndpoint-class","text":"idea dual-endpoint models model dose-toxicity relationship, also model, time, relationship PD biomarker dose. sub-classes class define dose-biomarker relationship parametrized. class shall contain common features reduce duplicate code. (class however, must virtual need create objects construction subclass objects.) dose-toxicity relationship modeled probit regression model $$probit[p(x)] = betaZ1 + betaZ2 * x/x*,$$ $$probit[p(x)] = betaZ1 + betaZ2 * log(x/x*),$$ case option use_log_dose TRUE. , \\(p(x)\\) probability observing DLT given dose \\(x\\) \\(x*\\) reference dose. prior $$(betaZ1, log(betaZ2)) ~ Normal(mean, cov).$$ biomarker response \\(w\\) dose \\(x\\), assume $$w(x) ~ Normal(f(x), sigma2W),$$ \\(f(x)\\) function dose \\(x\\), specified sub-classes. biomarker variance \\(sigma2W\\) can fixed assigned Inverse-Gamma prior distribution; see details slot sigma2W. Finally, two endpoints \\(y\\) (binary DLT variable) \\(w\\) (biomarker) can correlated, assuming correlation level \\(rho\\) underlying continuous latent toxicity variable \\(z\\) biomarker \\(w\\). , correlation can fixed assigned prior distribution scaled Beta family; see details slot rho. Please see example vignette typing crmPackExample() full example.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpoint-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DualEndpoint — DualEndpoint-class","text":"betaZ_params (ModelParamsNormal) probit toxicity model, contains prior mean, covariance matrix precision matrix internally calculated inverse covariance matrix. ref_dose (positive_number) probit toxicity model, reference dose. use_log_dose (flag) probit toxicity model, whether log transformation (standardized) dose used? sigma2W (numeric) biomarker variance. Either fixed value Inverse-Gamma distribution parameters, .e. vector two elements named b. rho (numeric) either fixed value correlation (-1 1), named vector two elements named b Beta prior transformation kappa = (rho + 1) / 2, (0, 1). example, = 1, b = 1 leads uniform prior rho. use_fixed (logical) indicates whether fixed value sigma2W rho (parameter separately) used . slot needed internal purposes must touched user.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpoint-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DualEndpoint — DualEndpoint-class","text":"Typically, end users use .DefaultDualEndpoint() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointBeta-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DualEndpointBeta — DualEndpointBeta-class","title":"DualEndpointBeta — DualEndpointBeta-class","text":"DualEndpointBeta class dual endpoint model beta function dose-biomarker relationship.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointBeta-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DualEndpointBeta — DualEndpointBeta-class","text":"","code":"DualEndpointBeta(E0, Emax, delta1, mode, ref_dose_beta = 1, ...)  .DefaultDualEndpointBeta()"},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointBeta-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DualEndpointBeta — DualEndpointBeta-class","text":"E0 (numeric) either fixed number two uniform distribution parameters. Emax (numeric) either fixed number two uniform distribution parameters. delta1 (numeric) either fixed positive number two parameters uniform distribution, can take positive values. mode (numeric) either fixed positive number two parameters uniform distribution, can take positive values. ref_dose_beta (number) reference dose \\(x*\\) (strictly positive number). Note different ref_dose inherited DualEndpoint model). ... parameters passed DualEndpoint().","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointBeta-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DualEndpointBeta — DualEndpointBeta-class","text":"class extends DualEndpoint class dose-biomarker relationship \\(f(x)\\) modelled parametric, rescaled beta density function: $$f(x) = E0 + (Emax - E0) * Beta(delta1, delta2) * (x/x*)^{delta1} * (1 - x/x*)^{delta2},$$ \\(x*\\) maximum dose (end dose range considered), \\(delta1\\) \\(delta2\\) two beta function parameters, \\(E0\\), \\(Emax\\) minimum maximum levels, respectively. ease interpretation, use parametrization based \\(delta1\\) mode, $$mode = delta1 / (delta1 + delta2),$$ multiplying \\(x*\\) gives mode dose grid. parameters can currently assigned uniform distributions fixed advance. Note E0 Emax can negative values uniform distributions reaching negative range, delta1 mode must positive uniform distributions positive range.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointBeta-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DualEndpointBeta — DualEndpointBeta-class","text":"E0 (numeric) either fixed number two uniform distribution parameters. Emax (numeric) either fixed number two uniform distribution parameters. delta1 (numeric) either fixed positive number two parameters uniform distribution, can take positive values. mode (numeric) either fixed positive number two parameters uniform distribution, can take positive values. ref_dose_beta (positive_number) reference dose \\(x*\\) (note different ref_dose inherited DualEndpoint model).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointBeta-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DualEndpointBeta — DualEndpointBeta-class","text":"Typically, end users use .DefaultDualEndpointBeta() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointBeta-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DualEndpointBeta — DualEndpointBeta-class","text":"","code":"my_model <- DualEndpointBeta(   mean = c(0, 1),   cov = matrix(c(1, 0, 0, 1), nrow = 2),   ref_dose = 10,   use_log_dose = TRUE,   sigma2W = c(a = 0.1, b = 0.1),   rho = c(a = 1, b = 1),   E0 = c(0, 100),   Emax = c(0, 500),   delta1 = c(0, 5),   mode = c(1, 15),   ref_dose_beta = 1000 )"},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointEmax-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DualEndpointEmax — DualEndpointEmax-class","title":"DualEndpointEmax — DualEndpointEmax-class","text":"DualEndpointEmax class dual endpoint model Emax function dose-biomarker relationship.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointEmax-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DualEndpointEmax — DualEndpointEmax-class","text":"","code":"DualEndpointEmax(E0, Emax, ED50, ref_dose_emax = 1, ...)  .DefaultDualEndpointEmax()"},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointEmax-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DualEndpointEmax — DualEndpointEmax-class","text":"E0 (numeric) either fixed number two uniform distribution parameters. Emax (numeric) either fixed number two uniform distribution parameters. ED50 (numeric) either fixed number two uniform distribution parameters. ref_dose_emax (number) reference dose \\(x*\\) (strictly positive number). Note different ref_dose inherited DualEndpoint model). ... parameters passed DualEndpoint().","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointEmax-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DualEndpointEmax — DualEndpointEmax-class","text":"class extends DualEndpoint class dose-biomarker relationship \\(f(x)\\) modelled parametric Emax function: $$f(x) = E0 + [(Emax - E0) * (x/x*)]/[ED50 + (x/x*)],$$ \\(x*\\) reference dose, \\(E0\\) \\(Emax\\) minimum maximum levels biomarker, \\(ED50\\) dose achieving half maximum effect \\(0.5 * Emax\\). parameters can currently assigned uniform distributions fixed.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointEmax-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DualEndpointEmax — DualEndpointEmax-class","text":"E0 (numeric) either fixed number two uniform distribution parameters. Emax (numeric) either fixed number two uniform distribution parameters. ED50 (numeric) either fixed number two uniform distribution parameters. ref_dose_emax (positive_number) reference dose \\(x*\\) (note different ref_dose inherited DualEndpoint model).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointEmax-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DualEndpointEmax — DualEndpointEmax-class","text":"Typically, end users use .DefaultDualEndpointEmax() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointEmax-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DualEndpointEmax — DualEndpointEmax-class","text":"","code":"my_model <- DualEndpointEmax(   mean = c(0, 1),   cov = matrix(c(1, 0, 0, 1), nrow = 2),   sigma2W = c(a = 0.1, b = 0.1),   rho = c(a = 1, b = 1),   E0 = c(0, 100),   Emax = c(0, 500),   ED50 = c(10, 200),   ref_dose_emax = 1000 )"},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointRW-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DualEndpointRW — DualEndpointRW-class","title":"DualEndpointRW — DualEndpointRW-class","text":"DualEndpointRW class dual endpoint model random walk prior biomarker.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointRW-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DualEndpointRW — DualEndpointRW-class","text":"","code":"DualEndpointRW(sigma2betaW, rw1 = TRUE, ...)  .DefaultDualEndpointRW()"},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointRW-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DualEndpointRW — DualEndpointRW-class","text":"sigma2betaW (numeric) prior variance factor random walk prior biomarker model. Either fixed value Inverse-Gamma distribution parameters, .e. vector two elements named b. rw1 (flag) specifying random walk prior biomarker level. TRUE, random walk first order used. Otherwise, random walk second order used. ... parameters passed DualEndpoint().","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointRW-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DualEndpointRW — DualEndpointRW-class","text":"class extends DualEndpoint class dose-biomarker relationship \\(f(x)\\) modelled non-parametric random walk first second order. means, first order random walk assume $$betaW_i - betaW_i-1 ~ Normal(0, (x_i - x_i-1) * sigma2betaW),$$ \\(betaW_i = f(x_i)\\) biomarker mean \\(\\)-th dose gridpoint \\(x_i\\). second order random walk, second-order differences instead first-order differences biomarker means follow normal distribution \\(0\\) mean \\(2 * (x_i - x_i-2) * sigma2betaW\\) variance. variance parameter \\(sigma2betaW\\) important steers smoothness function \\(f(x)\\), .e.: large, \\(f(x)\\) wiggly; small, \\(f(x)\\) smooth. parameter can either fixed value assigned inverse gamma prior distribution.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointRW-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DualEndpointRW — DualEndpointRW-class","text":"sigma2betaW (numeric) prior variance factor random walk prior biomarker model. Either fixed value Inverse-Gamma distribution parameters, .e. vector two elements named b. rw1 (flag) specifying random walk prior biomarker level. TRUE, random walk first order used. Otherwise, random walk second order used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointRW-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DualEndpointRW — DualEndpointRW-class","text":"Non-equidistant dose grids can used now, difference \\(x_i - x_i-1\\) included modelling assumption . Please note due impropriety random walk prior distributions, possible produce MCMC samples empty data objects (.e., sample prior). bug, theoretical feature model. Typically, end users use .DefaultDualEndpointRW() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/DualEndpointRW-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DualEndpointRW — DualEndpointRW-class","text":"","code":"my_model <- DualEndpointRW(   mean = c(0, 1),   cov = matrix(c(1, 0, 0, 1), nrow = 2),   sigma2W = c(a = 0.1, b = 0.1),   rho = c(a = 1, b = 1),   sigma2betaW = 0.01,   rw1 = TRUE )"},{"path":"https://openpharma.github.io/crmPack/reference/DualResponsesDesign-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DualResponsesDesign.R — DualResponsesDesign-class","title":"DualResponsesDesign.R — DualResponsesDesign-class","text":"class design based DLE responses using LogisticIndepBeta model without DLE efficacy samples. contains slots RuleDesign TDsamplesDesign classes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualResponsesDesign-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DualResponsesDesign.R — DualResponsesDesign-class","text":"","code":"DualResponsesDesign(eff_model, data, ...)  .DefaultDualResponsesDesign()"},{"path":"https://openpharma.github.io/crmPack/reference/DualResponsesDesign-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DualResponsesDesign.R — DualResponsesDesign-class","text":"eff_model (ModelEff) see slot definition. data (DataDual) see slot definition. ... Arguments passed TDDesign model (ModelTox) see slot definition. stopping (Stopping) see slot definition. increments (Increments) see slot definition. pl_cohort_size (CohortSize) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualResponsesDesign-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DualResponsesDesign.R — DualResponsesDesign-class","text":"data (DataDual) data set. eff_model (ModelEff) pseudo efficacy model used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualResponsesDesign-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DualResponsesDesign.R — DualResponsesDesign-class","text":"Typically, end users use .DefaultDualResponsesDesign() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualResponsesDesign-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DualResponsesDesign.R — DualResponsesDesign-class","text":"","code":"empty_data <- DataDual(doseGrid = seq(25, 300, 25))  tox_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = empty_data )  eff_model <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = empty_data )  my_next_best <- NextBestMaxGain(   prob_target_drt = 0.35,   prob_target_eot = 0.3 )  my_increments <- IncrementsRelative(   intervals = c(25, 300),   increments = c(2, 2) )  my_size <- CohortSizeConst(size = 3) my_stopping <- StoppingMinPatients(nPatients = 36)  design <- DualResponsesDesign(   nextBest = my_next_best,   cohort_size = my_size,   startingDose = 25,   model = tox_model,   eff_model = eff_model,   data = empty_data,   stopping = my_stopping,   increments = my_increments )"},{"path":"https://openpharma.github.io/crmPack/reference/DualResponsesSamplesDesign-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DualResponsesSamplesDesign — DualResponsesSamplesDesign-class","title":"DualResponsesSamplesDesign — DualResponsesSamplesDesign-class","text":"class design based DLE responses using LogisticIndepBeta model DLE efficacy samples. contain slots RuleDesign TDsamplesDesign class objects.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualResponsesSamplesDesign-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DualResponsesSamplesDesign — DualResponsesSamplesDesign-class","text":"","code":"DualResponsesSamplesDesign(eff_model, data, ...)  .DefaultDualResponsesSamplesDesign()"},{"path":"https://openpharma.github.io/crmPack/reference/DualResponsesSamplesDesign-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DualResponsesSamplesDesign — DualResponsesSamplesDesign-class","text":"eff_model (ModelEff) see slot definition. data (DataDual) see slot definition. ... Arguments passed TDsamplesDesign model (ModelTox) see slot definition. stopping (Stopping) see slot definition. increments (Increments) see slot definition. pl_cohort_size (CohortSize) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualResponsesSamplesDesign-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DualResponsesSamplesDesign — DualResponsesSamplesDesign-class","text":"data (DataDual) data set. eff_model (ModelEff) pseudo efficacy model used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualResponsesSamplesDesign-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DualResponsesSamplesDesign — DualResponsesSamplesDesign-class","text":"Typically, end users use .DefaultDualResponsesSamplesDesign() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualResponsesSamplesDesign-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DualResponsesSamplesDesign — DualResponsesSamplesDesign-class","text":"","code":"empty_data <- DataDual(doseGrid = seq(25, 300, 25))  tox_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = empty_data ) options <- McmcOptions(burnin = 100, step = 2, samples = 200) tox_samples <- mcmc(empty_data, tox_model, options)  eff_model <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = empty_data ) eff_samples <- mcmc(empty_data, eff_model, options)  my_next_best <- NextBestMaxGainSamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, prob = 0.3))   },   mg_derive = function(mg_samples) {     as.numeric(quantile(mg_samples, prob = 0.5))   } )  my_increments <- IncrementsRelative(   intervals = c(25, 300),   increments = c(2, 2) ) my_size <- CohortSizeConst(size = 3) my_stopping <- StoppingMinPatients(nPatients = 36)  design <- DualResponsesSamplesDesign(   nextBest = my_next_best,   cohort_size = my_size,   startingDose = 25,   model = tox_model,   eff_model = eff_model,   data = empty_data,   stopping = my_stopping,   increments = my_increments )"},{"path":"https://openpharma.github.io/crmPack/reference/DualSimulations-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DualSimulations — DualSimulations-class","title":"DualSimulations — DualSimulations-class","text":"class captures trial simulations dual-endpoint model based designs. comparison parent class Simulations, contains additional slots capture dose-biomarker fits, sigma2W rho estimates.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualSimulations-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DualSimulations — DualSimulations-class","text":"","code":"DualSimulations(rho_est, sigma2w_est, fit_biomarker, ...)  .DefaultDualSimulations()"},{"path":"https://openpharma.github.io/crmPack/reference/DualSimulations-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DualSimulations — DualSimulations-class","text":"rho_est (numeric) see DualSimulations sigma2w_est (numeric)DualSimulations fit_biomarker (list) see DualSimulations ... additional parameters Simulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualSimulations-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DualSimulations — DualSimulations-class","text":"rho_est (numeric) vector final posterior median rho estimates sigma2w_est (numeric) vector final posterior median sigma2W estimates fit_biomarker (list) final dose-biomarker curve fits","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualSimulations-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DualSimulations — DualSimulations-class","text":"Typically, end users use .DefaultDualSimulations() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualSimulations-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DualSimulations — DualSimulations-class","text":"","code":"data_list <- list(   Data(     x = 1:2,     y = 0:1,     doseGrid = 1:2,     ID = 1L:2L,     cohort = 1L:2L   ),   Data(     x = 3:4,     y = 0:1,     doseGrid = 3:4,     ID = 1L:2L,     cohort = 1L:2L   ) )  doses <- c(1, 2) seed <- as.integer(123)  fit <- list(   c(0.1, 0.2),   c(0.3, 0.4) )  stop_report <- matrix(c(TRUE, FALSE), nrow = 2)  stop_reasons <- list(\"A\", \"B\")  additional_stats <- list(a = 1, b = 1)  dual_simulations_obj <- DualSimulations(   rho_est = c(0.25, 0.35),   sigma2w_est = c(0.15, 0.25),   fit_biomarker = list(c(0.3, 0.4), c(0.4, 0.5)),   fit = fit,   stop_report = stop_report,   stop_reasons = stop_reasons,   additional_stats = additional_stats,   data = data_list,   doses = doses,   seed = seed )"},{"path":"https://openpharma.github.io/crmPack/reference/DualSimulationsSummary-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DualSimulationsSummary — DualSimulationsSummary-class","title":"DualSimulationsSummary — DualSimulationsSummary-class","text":"class captures summary dual-endpoint simulations output. comparison parent class SimulationsSummary, additional slots.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualSimulationsSummary-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DualSimulationsSummary — DualSimulationsSummary-class","text":"","code":".DefaultDualSimulationsSummary()"},{"path":"https://openpharma.github.io/crmPack/reference/DualSimulationsSummary-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"DualSimulationsSummary — DualSimulationsSummary-class","text":"biomarker_fit_at_dose_most_selected (numeric) fitted biomarker level often selected dose. mean_biomarker_fit (list) list average, lower (2.5%) upper (97.5%) quantiles mean fitted biomarker level dose","code":""},{"path":"https://openpharma.github.io/crmPack/reference/DualSimulationsSummary-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DualSimulationsSummary — DualSimulationsSummary-class","text":"Typically, end users use .DefaultDualSimulationsSummary() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/EffFlexi-class.html","id":null,"dir":"Reference","previous_headings":"","what":"EffFlexi — EffFlexi-class","title":"EffFlexi — EffFlexi-class","text":"EffFlexi class efficacy model flexible form prior expressed form pseudo data. class, flexible form used describe relationship efficacy responses dose levels specified $$(W | betaW, sigma2W) ~ Normal(X * betaW, sigma2W * ),$$ \\(W\\) vector efficacy responses, \\(betaW\\) column vector mean efficacy responses dose levels, \\(X\\) design matrix entries \\(I_i,j\\) equal 1 subject \\(\\) allocated dose \\(j\\), \\(0\\) otherwise. \\(sigma2W\\) variance efficacy responses can either fixed number number inverse gamma distribution. flexible form aims capture different shapes dose-efficacy curve. addition, first (RW1) second order (RW2) random walk model can used smoothing data. random walk model used model first second order differences mean efficacy responses neighboring dose levels mean efficacy responses. RW1 model given $$betaW_j - betaW_j-1) ~ Normal(0, sigma2betaW),$$ RW2 $$betaW_j-2 - 2 * betaW_j-1 + beta_j ~ Normal(0, sigma2betaW),$$ \\(betaW_j\\) vector mean efficacy responses dose j, \\(sigma2betaW\\) prior variance can either fixed number number inverse gamma distribution. eff eff_dose pseudo efficacy responses dose levels pseudo efficacy responses observed. , eff eff_dose must vectors length least 2. positions elements specified eff eff_dose must correspond vectors.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/EffFlexi-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EffFlexi — EffFlexi-class","text":"","code":"EffFlexi(eff, eff_dose, sigma2W, sigma2betaW, rw1 = TRUE, data)  .DefaultEffFlexi()"},{"path":"https://openpharma.github.io/crmPack/reference/EffFlexi-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EffFlexi — EffFlexi-class","text":"eff (numeric) pseudo efficacy responses. Elements eff must correspond elements eff_dose. eff_dose (numeric) dose levels correspond pseudo efficacy responses eff. sigma2W (numeric) prior variance efficacy responses. either fixed value named vector two positive numbers, shape (), rate (b) parameters inverse gamma distribution. sigma2betaW (numeric) prior variance random walk model used smoothing. either fixed value named vector two positive numbers, shape (), rate (b) parameters inverse gamma distribution. rw1 (flag) used smoothing data efficacy model. TRUE, first-order random walk model used mean efficacy responses. Otherwise, random walk second order used. data (DataDual) observed data update estimates model parameters.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/EffFlexi-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"EffFlexi — EffFlexi-class","text":"model output updated value updated values parameters inverse gamma distributions \\(sigma2W\\) \\(sigma2betaW\\). EffFlexi inherits slots ModelEff class.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/EffFlexi-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"EffFlexi — EffFlexi-class","text":"eff (numeric) pseudo efficacy responses. element must represent responses treated based one subject. must vector length least 2 order elements must correspond values specified eff_dose. eff_dose (numeric) pseudo efficacy dose levels pseudo efficacy responses observed. must vector length least 2 order elements must correspond values specified eff. sigma2W (numeric) prior variance flexible efficacy form. either fixed value named vector two positive numbers, shape (), rate (b) parameters gamma distribution. sigma2betaW (numeric) prior variance random walk model mean efficacy responses. either fixed value named vector two positive numbers, shape (), rate (b) parameters gamma distribution. use_fixed (logical) indicates whether fixed value sigma2W sigma2betaW (parameter separately) used . slot needed internal purposes must touched user. rw1 (flag) used smoothing data efficacy model. TRUE, first-order random walk model used mean efficacy responses. Otherwise, random walk second order used. X (matrix) design matrix efficacy responses. based pseudo observed efficacy responses. RW (matrix) difference matrix random walk model. slot needed internal purposes must used user. RW_rank (integer) rank difference matrix. slot needed internal purposes must used user.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/EffFlexi-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"EffFlexi — EffFlexi-class","text":"Typically, end users use .DefaultEffFlexi() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/EffFlexi-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EffFlexi — EffFlexi-class","text":"","code":"# Obtain prior estimates for the efficacy model in flexible form, given the pseudo data. # First define an empty data set by defining the dose levels used in the study. # There are 12 dose levels used in the study, ranging from 25 to 300 mg with # increments of 25. emptydata <- DataDual(doseGrid = seq(25, 300, 25))  # Define the pseudo data, i.e.: fixed 2 dose levels 25 and 300 mg (`eff_dose`) # and the efficacy responses 1.223 and 2.513 observed at these two dose levels (`eff`). # The prior variance of the pseudo efficacy responses can be either a fixed value # or two parameters for the inverse gamma distribution, the shape (a) and the # rate (b) (`sigma2W`). # The prior variance of the random walk model can be either a fixed value or two # parameters for the inverse gamma distribution, the shape (a) and the rate (b) # (`sigma2betaW`). my_model <- EffFlexi(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   sigma2W = c(a = 0.1, b = 0.1),   sigma2betaW = c(a = 20, b = 50),   rw1 = FALSE,   data = emptydata )  # Obtain estimates from the model given some observed data is available. data <- DataDual(   x = c(25, 50, 50, 75, 100, 100, 225, 300),   y = c(0, 0, 0, 0, 1, 1, 1, 1),   w = c(0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.6, 0.52),   doseGrid = emptydata@doseGrid ) #> Used default patient IDs! #> Used best guess cohort indices!  my_model1 <- EffFlexi(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   sigma2W = c(a = 0.1, b = 0.1),   sigma2betaW = c(a = 20, b = 50),   rw1 = FALSE,   data = data )"},{"path":"https://openpharma.github.io/crmPack/reference/Effloglog-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Effloglog — Effloglog-class","title":"Effloglog — Effloglog-class","text":"Effloglog class linear log-log efficacy model using pseudo data prior. describes relationship continuous efficacy responses corresponding dose levels log-log scale. efficacy log-log model given $$y_i = theta1 + theta2 * log(log(x_i)) + epsilon_i,$$ \\(y_i\\) efficacy response subject \\(\\), \\(x_i\\) dose level treated subject \\(\\) \\(epsilon_i\\) random error term efficacy model subject \\(\\). error term \\(epsilon_i\\) random variable follows normal distribution mean \\(0\\) variance \\(nu^{-1}\\), assumed subjects. three parameters model, intercept \\(theta1\\), slope \\(theta2\\) precision \\(nu\\) efficacy responses, also known inverse variance pseudo efficacy responses. can fixed constant gamma distribution. Therefore, single scalar value vector two positive numbers values must specified nu slot. observed efficacy responses available, output, nu display updated value precision updated values parameters gamma distribution. Effloglog inherits slots ModelEff class.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Effloglog-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Effloglog — Effloglog-class","text":"","code":"Effloglog(eff, eff_dose, nu, data, const = 0)  .DefaultEffloglog()"},{"path":"https://openpharma.github.io/crmPack/reference/Effloglog-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Effloglog — Effloglog-class","text":"eff (numeric) pseudo efficacy responses. Elements eff must correspond elements eff_dose. eff_dose (numeric) dose levels correspond pseudo efficacy responses eff. nu (numeric) precision (inverse variance) efficacy responses. either fixed value named vector two positive numbers, shape (), rate (b) parameters gamma distribution. data (DataDual) observed data update estimates model parameters. const (number) constant value added dose level dose level value less equal 1 special form linear log-log applied (Yeung et al. (2015).).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Effloglog-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Effloglog — Effloglog-class","text":"prior model specified form pseudo data. First, least two dose levels fixed. , using e.g. experts' opinion, efficacy values correspond dose levels can obtained, eff eff_dose arguments represent prior form pseudo data. eff represents pseudo efficacy values. eff_dose represents dose levels pseudo efficacy values observed. Hence, positions elements specified eff eff_dose must correspond vectors. Since least 2 pseudo efficacy values needed obtain modal estimates intercept slope parameters, eff eff_dose must vectors length least 2. joint prior distribution intercept \\(theta1\\) slope \\(theta2\\) model follows bivariate normal distribution mean \\(mu\\) covariance matrix \\((nu * Q)^{-1}\\). mean \\(mu\\) \\(2 x 1\\) column vector contains prior modal estimates intercept slope. Scalar \\(nu\\) precision pseudo efficacy responses \\(Q\\) prior posterior (given observed, DLT data available) precision matrix. specified \\(Q = X0^T * X0 + X^T * X\\), \\(X0\\) design matrix based pseudo dose levels , \\(X\\) design matrix based dose levels corresponding DLT efficacy responses observed (). Hence, \\(X0\\) (\\(X\\)) size \\(r x 2\\), \\(r >= 2\\) pseudo efficacy responses specified (\\(r\\) DLT efficacy responses observed data).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Effloglog-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Effloglog — Effloglog-class","text":"eff (numeric) pseudo efficacy responses. element must represent responses treated based one subject. must vector length least 2 order elements must correspond values specified eff_dose. eff_dose (numeric) pseudo efficacy dose levels pseudo efficacy responses observed. must vector length least 2 order elements must correspond values specified eff. nu (numeric) parameter prior precision pseudo efficacy responses. either fixed value named vector two positive numbers, shape (), rate (b) parameters gamma distribution. use_fixed (flag) indicates whether nu specified fixed value vector two parameters gamma distribution. slot internal purposes must used user. theta1 (number) intercept efficacy log-log model. slot used output display resulting prior posterior modal estimates obtained based pseudo observed () data. theta2 (number) slope efficacy log-log model. slot used output display resulting prior posterior modal estimates obtained based pseudo observed () data. Pcov (matrix) refers \\(2 x 2\\) covariance matrix estimators intercept \\(theta1\\) slope \\(theta2\\) parameters model. used output display resulting prior posterior covariance matrix \\(theta1\\) \\(theta2\\) obtained, based pseudo observed () data. slot needed internal purposes. X (matrix) design matrix based either pseudo dose levels observed dose levels (without DLT). used output display design matrix pseudo observed efficacy responses. Y (numeric) vector either contains pseudo efficacy responses observed efficacy responses (without DLT). mu (numeric) vector prior posterior modal estimates intercept (\\(theta1\\)) slope (\\(theta2\\)). slot used output display mean prior posterior bivariate normal distribution \\(theta1\\) \\(theta2\\). Q (matrix) prior posterior (given observed, DLT data available) precision matrix. specified \\(Q = X0^T * X0 + X^T * X\\), \\(X0\\) design matrix based pseudo dose levels , \\(X\\) design matrix based dose levels corresponding observed, DLT efficacy values (). const (number) non-negative number (default 0), leading model form described . general, model form \\(y_i = theta1 + theta2 * log(log(x_i + const)) + epsilon_i\\), dose levels greater \\(1 - const\\) can considered described Yeung et al. (2015).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Effloglog-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Effloglog — Effloglog-class","text":"Typically, end users use .DefaultEffloglog() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Effloglog-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Effloglog — Effloglog-class","text":"","code":"# Obtain prior modal estimates given the pseudo data. # First we use an empty data set such that only the dose levels under # investigations are given. In total, 12 dose levels are under investigation # ranging from 25 to 300 mg with increments of 25 (i.e 25, 50, 75, ..., 300). emptydata <- DataDual(doseGrid = seq(25, 300, 25), placebo = FALSE)  # Define the pseudo data as first by fixing two dose levels 25 and 300 mg (`eff_dose`). # Then, the efficacy responses observed at these two dose levels are 1.223 and 2.513 (`eff`). # We specify the prior precision of the pseudo efficacy responses (`nu`) as a vector # with the shape (a) and the rate (b) parameters for the gamma distribution. # Obtain modal estimates and other estimates from the model (no observations, # only pseudo data). my_model1 <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = emptydata )  # Observed data. my_data <- DataDual(   x = c(25, 50, 50, 75, 100, 100, 225, 300),   y = c(0, 0, 0, 0, 1, 1, 1, 1),   w = c(0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.6, 0.52),   doseGrid = emptydata@doseGrid ) #> Used default patient IDs! #> Used best guess cohort indices!  # Obtain posterior modal estimates and other estimates from the model given some # observed data. my_model2 <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = my_data )"},{"path":"https://openpharma.github.io/crmPack/reference/FractionalCRM-class.html","id":null,"dir":"Reference","previous_headings":"","what":"FractionalCRM — FractionalCRM-class","title":"FractionalCRM — FractionalCRM-class","text":"FractionalCRM class fractional CRM model based one parameter CRM (normal prior log-power parameter) well Kaplan-Meier based estimation conditional probability experience DLT non-complete observations. fractional CRM model follows paper code Guosheng Yin et al.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/FractionalCRM-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FractionalCRM — FractionalCRM-class","text":"","code":"FractionalCRM(...)  .DefaultFractionalCRM()"},{"path":"https://openpharma.github.io/crmPack/reference/FractionalCRM-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FractionalCRM — FractionalCRM-class","text":"... Arguments passed OneParLogNormalPrior skel_probs (numeric) skeleton prior probabilities. vector unique sorted probability values 0 1. dose_grid (numeric) dose grid. must must sorted vector length skel_probs. sigma2 (number) prior variance log power parameter alpha.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/FractionalCRM-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"FractionalCRM — FractionalCRM-class","text":"Typically, end users use .DefaultTITELogisticLogNormal() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/FractionalCRM-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FractionalCRM — FractionalCRM-class","text":"","code":"my_model <- FractionalCRM(   skel_probs = c(0.1, 0.2, 0.3, 0.4),   dose_grid = c(10, 30, 50, 100),   sigma2 = 2 )"},{"path":"https://openpharma.github.io/crmPack/reference/GeneralData-class.html","id":null,"dir":"Reference","previous_headings":"","what":"GeneralData — GeneralData-class","title":"GeneralData — GeneralData-class","text":"GeneralData class general data input.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/GeneralData-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeneralData — GeneralData-class","text":"","code":".DefaultDataGeneral()"},{"path":"https://openpharma.github.io/crmPack/reference/GeneralData-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"GeneralData — GeneralData-class","text":"ID (integer) unique patient IDs. cohort (integer) cohort (non-negative sorted) indices. nObs (integer) number observations, single value.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/GeneralData-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"GeneralData — GeneralData-class","text":"Typically, end users use .DefaultDataGeneral() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/GeneralModel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"GeneralModel — GeneralModel-class","title":"GeneralModel — GeneralModel-class","text":"GeneralModel general model class, specific model-like classes inherit.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/GeneralModel-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeneralModel — GeneralModel-class","text":"","code":".DefaultGeneralModel()"},{"path":"https://openpharma.github.io/crmPack/reference/GeneralModel-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"GeneralModel — GeneralModel-class","text":"datamodel (function) function representing JAGS data model specification. priormodel (function) function representing JAGS prior specification. modelspecs (function) function computing list data model prior model specifications required specified completely (e.g. prior parameters, reference dose, etc.), based data slots required arguments function. Apart data arguments, function can specified one additional (optional) argument from_prior type logical length one. from_prior flag can used differentiate output modelspecs, value taken directly from_prior argument mcmc method invokes modelspecs function. , from_prior TRUE, priormodel JAGS model used (datamodel used) mcmc, hence modelspecs function return parameters required priormodel . value from_prior FALSE, JAGS models datamodel priormodel used MCMC sampler, hence modelspecs function return parameters required datamodel priormodel. init (function) function computing list starting values parameters required initialized MCMC sampler, based data slots required arguments function. datanames (character) names data slots used datamodel JAGS function. names specified . datanames_prior (character) names data slots used priormodel JAGS function. names specified . sample (character) names parameters like save MCMC samples.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/GeneralModel-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"GeneralModel — GeneralModel-class","text":"datamodel must obey convention data input called exactly way corresponding data class. prior distributions parameters contained model function priormodel. background can used simulate prior distribution, obtaining data. Typically, end users use .DefaultGeneralModel() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/GeneralSimulations-class.html","id":null,"dir":"Reference","previous_headings":"","what":"GeneralSimulations @description  This class captures trial simulations. Here also the random generator state before starting the simulation is saved, in order to be able to reproduce the outcome. For this just use set.seed with the seed as argument before running simulate,Design-method. — GeneralSimulations-class","title":"GeneralSimulations @description  This class captures trial simulations. Here also the random generator state before starting the simulation is saved, in order to be able to reproduce the outcome. For this just use set.seed with the seed as argument before running simulate,Design-method. — GeneralSimulations-class","text":"GeneralSimulations @description  class captures trial simulations. also random generator state starting simulation saved, order able reproduce outcome. just use set.seed seed argument running simulate,Design-method.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/GeneralSimulations-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeneralSimulations @description  This class captures trial simulations. Here also the random generator state before starting the simulation is saved, in order to be able to reproduce the outcome. For this just use set.seed with the seed as argument before running simulate,Design-method. — GeneralSimulations-class","text":"","code":"GeneralSimulations(data, doses, seed)  .DefaultGeneralSimulations()"},{"path":"https://openpharma.github.io/crmPack/reference/GeneralSimulations-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GeneralSimulations @description  This class captures trial simulations. Here also the random generator state before starting the simulation is saved, in order to be able to reproduce the outcome. For this just use set.seed with the seed as argument before running simulate,Design-method. — GeneralSimulations-class","text":"data (list) see slot definition. doses (numeric) see slot definition. seed (integer) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/GeneralSimulations-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"GeneralSimulations @description  This class captures trial simulations. Here also the random generator state before starting the simulation is saved, in order to be able to reproduce the outcome. For this just use set.seed with the seed as argument before running simulate,Design-method. — GeneralSimulations-class","text":"data (list) produced Data objects. doses (numeric) final dose recommendations. seed (integer) random generator state starting simulation.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/GeneralSimulations-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"GeneralSimulations @description  This class captures trial simulations. Here also the random generator state before starting the simulation is saved, in order to be able to reproduce the outcome. For this just use set.seed with the seed as argument before running simulate,Design-method. — GeneralSimulations-class","text":"Typically, end users use .DefaultGeneralSimulations() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/GeneralSimulations-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GeneralSimulations @description  This class captures trial simulations. Here also the random generator state before starting the simulation is saved, in order to be able to reproduce the outcome. For this just use set.seed with the seed as argument before running simulate,Design-method. — GeneralSimulations-class","text":"","code":"data <- list(   Data(x = 1:3, y = c(0, 1, 0), doseGrid = 1:3, ID = 1L:3L, cohort = 1L:3L),   Data(x = 4:6, y = c(0, 1, 0), doseGrid = 4:6, ID = 1L:3L, cohort = 1L:3L) )  doses <- c(1, 2)  seed <- 123L  simulations <- GeneralSimulations(data, doses, seed)"},{"path":"https://openpharma.github.io/crmPack/reference/GeneralSimulationsSummary-class.html","id":null,"dir":"Reference","previous_headings":"","what":"GeneralSimulationsSummary — GeneralSimulationsSummary-class","title":"GeneralSimulationsSummary — GeneralSimulationsSummary-class","text":"class captures summary general simulations output. Note objects created users, therefore initialization function provided class.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/GeneralSimulationsSummary-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeneralSimulationsSummary — GeneralSimulationsSummary-class","text":"","code":".DefaultGeneralSimulationsSummary()  .DefaultPseudoSimulationsSummary()"},{"path":"https://openpharma.github.io/crmPack/reference/GeneralSimulationsSummary-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"GeneralSimulationsSummary — GeneralSimulationsSummary-class","text":"target (numeric) target toxicity interval target_dose_interval (numeric) corresponding target dose interval nsim (integer) number simulations prop_dlts () numeric array (multi-dimensional) list representing proportions DLTs trials mean_tox_risk (numeric) mean toxicity risks patients dose_selected (numeric) doses selected MTD tox_at_doses_selected (numeric) true toxicity doses selected prop_at_target (numeric) Proportion trials selecting target MTD dose_most_selected (numeric) dose often selected MTD obs_tox_rate_at_dose_most_selected (numeric) observed toxicity rate dose often selected n_obs () numeric array (multi-dimensional) list representing number patients overall. n_above_target (integer) number patients treated target tox interval dose_grid (numeric) dose grid used placebo (logical) set TRUE (default FALSE) design placebo","code":""},{"path":"https://openpharma.github.io/crmPack/reference/GeneralSimulationsSummary-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"GeneralSimulationsSummary — GeneralSimulationsSummary-class","text":"Typically, end users use .DefaultGeneralSimulationsSummary() function. Typically, end users use .DefaultPseudoSimulationsSummary() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Increments-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Increments — Increments-class","title":"Increments — Increments-class","text":"Increments virtual class controlling increments, specific increments classes inherit.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Increments-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Increments — Increments-class","text":"","code":".DefaultIncrements()"},{"path":"https://openpharma.github.io/crmPack/reference/Increments-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Increments — Increments-class","text":"Typically, end users use .DefaultIncrements() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsDoseLevels-class.html","id":null,"dir":"Reference","previous_headings":"","what":"IncrementsDoseLevels — IncrementsDoseLevels-class","title":"IncrementsDoseLevels — IncrementsDoseLevels-class","text":"IncrementsDoseLevels class increments control based number dose levels.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsDoseLevels-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IncrementsDoseLevels — IncrementsDoseLevels-class","text":"","code":"IncrementsDoseLevels(levels = 1L, basis_level = \"last\")  .DefaultIncrementsDoseLevels()"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsDoseLevels-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IncrementsDoseLevels — IncrementsDoseLevels-class","text":"levels (count) see slot definition. basis_level (string) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsDoseLevels-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"IncrementsDoseLevels — IncrementsDoseLevels-class","text":"levels (count) maximum number dose levels increment next dose. defaults 1, means dose skipping allowed, .e. next dose can maximum one level higher current base dose. current base dose level dose level used increment (see basis_level parameter). basis_level (string) defines current base dose level. can take one two possible values: last max. last specified (default), current base dose level set last dose given. max specified, current base dose level set maximum dose level given.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsDoseLevels-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IncrementsDoseLevels — IncrementsDoseLevels-class","text":"Typically, end users use .DefaultIncrementsDoseLevels() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsDoseLevels-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IncrementsDoseLevels — IncrementsDoseLevels-class","text":"","code":"# The rule for dose increments which allows for maximum skip one dose level, # that is 2 dose levels higher than the last dose given. my_increments <- IncrementsDoseLevels(levels = 2, basis_level = \"last\")"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsHSRBeta-class.html","id":null,"dir":"Reference","previous_headings":"","what":"IncrementsHSRBeta — IncrementsHSRBeta-class","title":"IncrementsHSRBeta — IncrementsHSRBeta-class","text":"IncrementsHSRBeta class limiting increments using Hard Safety Rule based Bin-Beta model. Increment control based number observed DLTs number subjects dose level. probability toxicity calculated using Bin-Beta model prior (,b). probability exceeds threshold given dose, dose doses excluded escalation. hard safety rule limits escalation based observed data per dose level, independent underlying model.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsHSRBeta-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IncrementsHSRBeta — IncrementsHSRBeta-class","text":"","code":"IncrementsHSRBeta(target = 0.3, prob = 0.95, a = 1, b = 1)  .DefaultIncrementsHSRBeta()"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsHSRBeta-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IncrementsHSRBeta — IncrementsHSRBeta-class","text":"target (proportion) see slot definition. prob (proportion) see slot definition. (number) see slot definition. b (number) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsHSRBeta-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"IncrementsHSRBeta — IncrementsHSRBeta-class","text":"target (proportion) target toxicity, except 0 1. prob (proportion) threshold probability (except 0 1) dose toxic. (number) shape parameter \\(> 0\\) probability distribution Beta (,b). b (number) shape parameter \\(b > 0\\) probability distribution Beta (,b).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsHSRBeta-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IncrementsHSRBeta — IncrementsHSRBeta-class","text":"Typically, end users use .DefaultIncrementsHSRBeta() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsHSRBeta-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IncrementsHSRBeta — IncrementsHSRBeta-class","text":"","code":"# Limit the escalation with a hard safety criteria to the doses that are below # the first dose that is toxic with a probability of 0.95. my_increments <- IncrementsHSRBeta(target = 0.3, prob = 0.95)"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsMaxToxProb-class.html","id":null,"dir":"Reference","previous_headings":"","what":"IncrementsMaxToxProb — IncrementsMaxToxProb-class","title":"IncrementsMaxToxProb — IncrementsMaxToxProb-class","text":"IncrementsMaxToxProb class increments control based probability toxicity","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsMaxToxProb-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IncrementsMaxToxProb — IncrementsMaxToxProb-class","text":"","code":"IncrementsMaxToxProb(prob)  .DefaultIncrementsMaxToxProb()"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsMaxToxProb-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IncrementsMaxToxProb — IncrementsMaxToxProb-class","text":"prob (numeric) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsMaxToxProb-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"IncrementsMaxToxProb — IncrementsMaxToxProb-class","text":"prob (numeric) See Usage Notes .","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsMaxToxProb-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IncrementsMaxToxProb — IncrementsMaxToxProb-class","text":"Typically, end users use .DefaultIncrementsMaxToxProb() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsMaxToxProb-class.html","id":"usage-notes","dir":"Reference","previous_headings":"","what":"Usage Notes","title":"IncrementsMaxToxProb — IncrementsMaxToxProb-class","text":"binary models, prob scalar probability. ordinal models, prob named vector containing maximum permissible probability toxicity grade.  names match names yCategories slot associated DataOrdinal object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsMaxToxProb-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IncrementsMaxToxProb — IncrementsMaxToxProb-class","text":"","code":"# For use with binary models and data IncrementsMaxToxProb(prob = 0.35) #> An object of class \"IncrementsMaxToxProb\" #> Slot \"prob\": #> [1] 0.35 #>   # For use with ordinal models and data IncrementsMaxToxProb(prob = c(\"DLAE\" = 0.2, \"DLT\" = 0.05)) #> An object of class \"IncrementsMaxToxProb\" #> Slot \"prob\": #> DLAE  DLT  #> 0.20 0.05  #>"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsMin-class.html","id":null,"dir":"Reference","previous_headings":"","what":"IncrementsMin — IncrementsMin-class","title":"IncrementsMin — IncrementsMin-class","text":"IncrementsMin class combines multiple increment rules minimum operation. Slot increments_list contains increment rules, objects class Increments. minimum individual increments taken give final maximum increment.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsMin-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IncrementsMin — IncrementsMin-class","text":"","code":"IncrementsMin(increments_list)  .DefaultIncrementsMin()"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsMin-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IncrementsMin — IncrementsMin-class","text":"increments_list (list) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsMin-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"IncrementsMin — IncrementsMin-class","text":"increments_list (list) list increment rules.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsMin-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IncrementsMin — IncrementsMin-class","text":"Typically, end users use .DefaultIncrementsMin() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsMin-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IncrementsMin — IncrementsMin-class","text":"","code":"# As example, here we are combining 2 different increment rules.  # The first rule is the following: # maximum doubling the dose if no DLTs were observed at the current dose # or maximum increasing the dose by 1.33 if 1 or 2 DLTs were observed at the current dose # or maximum increasing the dose by 1.22 if 3 or more DLTs were observed. my_increments_1 <- IncrementsRelativeDLT(   intervals = c(0, 1, 3),   increments = c(1, 0.33, 0.2) )  # The second rule is the following: # maximum doubling the dose if the current dose is <20 # or only maximum increasing the dose by 1.33 if the current dose is >=20. my_increments_2 <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Now we combine the 2 rules. comb_increments <- IncrementsMin(   increments_list = list(my_increments_1, my_increments_2) )"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsOrdinal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"IncrementsOrdinal — IncrementsOrdinal-class","title":"IncrementsOrdinal — IncrementsOrdinal-class","text":"IncrementsOrdinal class applying standard Increments rule results ordinal CRM trial.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsOrdinal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IncrementsOrdinal — IncrementsOrdinal-class","text":"","code":"IncrementsOrdinal(grade, rule)  .DefaultIncrementsOrdinal()"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsOrdinal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IncrementsOrdinal — IncrementsOrdinal-class","text":"grade (numeric) see slot definition. rule (Increments) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsOrdinal-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"IncrementsOrdinal — IncrementsOrdinal-class","text":"grade (integer) toxicity grade rule applied. rule (Increments) standard Increments rule applied","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsOrdinal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IncrementsOrdinal — IncrementsOrdinal-class","text":"Typically, end users use .DefaultIncrementsOrdinal() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsOrdinal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IncrementsOrdinal — IncrementsOrdinal-class","text":"","code":"IncrementsOrdinal(   grade = 1L,   rule = IncrementsRelative(     intervals = c(0, 20),     increments = c(1, 0.33)   ) ) #> An object of class \"IncrementsOrdinal\" #> Slot \"grade\": #> [1] 1 #>  #> Slot \"rule\": #> An object of class \"IncrementsRelative\" #> Slot \"intervals\": #> [1]  0 20 #>  #> Slot \"increments\": #> [1] 1.00 0.33 #>  #>"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelative-class.html","id":null,"dir":"Reference","previous_headings":"","what":"IncrementsRelative — IncrementsRelative-class","title":"IncrementsRelative — IncrementsRelative-class","text":"IncrementsRelative class increments control based relative differences intervals.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelative-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IncrementsRelative — IncrementsRelative-class","text":"","code":"IncrementsRelative(intervals, increments)  .DefaultIncrementsRelative()"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelative-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IncrementsRelative — IncrementsRelative-class","text":"intervals (numeric) see slot definition. increments (numeric) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelative-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"IncrementsRelative — IncrementsRelative-class","text":"intervals (numeric) vector left bounds relevant intervals. example, intervals  = c(0, 50, 100) specifies three intervals: \\((0, 50)\\), \\([50, 100)\\) \\([100, +Inf)\\). means, right bound intervals exclusive interval last interval goes last value infinity. increments (numeric) vector length maximum allowable relative increments intervals.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelative-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IncrementsRelative — IncrementsRelative-class","text":"Typically, end users use .DefaultIncrementsRelative() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelative-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IncrementsRelative — IncrementsRelative-class","text":"","code":"# This is the example of a rule for: # maximum doubling the dose if the current dose is <20 # or only maximum increasing the dose by 1.33 if the current dose is >=20. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeDLT-class.html","id":null,"dir":"Reference","previous_headings":"","what":"IncrementsRelativeDLT — IncrementsRelativeDLT-class","title":"IncrementsRelativeDLT — IncrementsRelativeDLT-class","text":"IncrementsRelativeDLT class increments control based relative differences terms DLTs.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeDLT-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IncrementsRelativeDLT — IncrementsRelativeDLT-class","text":"","code":"IncrementsRelativeDLT(intervals, increments)  .DefaultIncrementsRelativeDLT()"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeDLT-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IncrementsRelativeDLT — IncrementsRelativeDLT-class","text":"intervals (numeric) see slot definition. increments (numeric) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeDLT-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"IncrementsRelativeDLT — IncrementsRelativeDLT-class","text":"intervals (integer) vector left bounds relevant DLT intervals. example, intervals  = c(0, 1, 3) specifies three intervals (sets DLTs: first, 0 DLT; second 1 2 DLTs; third one, least 3 DLTs. means, right bound intervals exclusive interval last interval goes last value infinity. increments (numeric) vector maximum allowable relative increments corresponding intervals. must length length intervals.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeDLT-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IncrementsRelativeDLT — IncrementsRelativeDLT-class","text":"considers DLTs across cohorts observed far. Typically, end users use .DefaultIncrementsRelativeDLT() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeDLT-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IncrementsRelativeDLT — IncrementsRelativeDLT-class","text":"","code":"# This is the example of a rule for: # maximum doubling the dose if no DLTs were observed in the whole study so far # or maximum increasing the dose by 1.33 if 1 or 2 DLTs were observed so far # or maximum increasing the dose by 1.22 if 3 or more DLTs were observed so far. my_increments <- IncrementsRelativeDLT(   intervals = c(0, 1, 3),   increments = c(1, 0.33, 0.2) )"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeDLTCurrent-class.html","id":null,"dir":"Reference","previous_headings":"","what":"IncrementsRelativeDLTCurrent — IncrementsRelativeDLTCurrent-class","title":"IncrementsRelativeDLTCurrent — IncrementsRelativeDLTCurrent-class","text":"IncrementsRelativeDLTCurrent class increments control based relative differences current DLTs. class based number DLTs observed current cohort, cumulatively cohorts far.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeDLTCurrent-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IncrementsRelativeDLTCurrent — IncrementsRelativeDLTCurrent-class","text":"","code":"IncrementsRelativeDLTCurrent(intervals = c(0L, 1L), increments = c(2L, 1L))  .DefaultIncrementsRelativeDLTCurrent()"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeDLTCurrent-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IncrementsRelativeDLTCurrent — IncrementsRelativeDLTCurrent-class","text":"intervals (numeric) see slot definition. increments (numeric) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeDLTCurrent-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IncrementsRelativeDLTCurrent — IncrementsRelativeDLTCurrent-class","text":"Typically, end users use .DefaultIncrementsRelativeDLTCurrent() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeDLTCurrent-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IncrementsRelativeDLTCurrent — IncrementsRelativeDLTCurrent-class","text":"","code":"# As example, here is the rule for: # maximum doubling the dose if no DLTs were observed at the current dose # or maximum increasing the dose by 1.33 if 1 or 2 DLTs were observed at the current dose # or maximum increasing the dose by 1.22 if 3 or more DLTs were observed.  my_increments <- IncrementsRelativeDLTCurrent(   intervals = c(0, 1, 3),   increments = c(1, 0.33, 0.2) )"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeParts-class.html","id":null,"dir":"Reference","previous_headings":"","what":"IncrementsRelativeParts — IncrementsRelativeParts-class","title":"IncrementsRelativeParts — IncrementsRelativeParts-class","text":"IncrementsRelativeParts class increments control based relative differences intervals, special rules part 1 beginning part 2.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeParts-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IncrementsRelativeParts — IncrementsRelativeParts-class","text":"","code":"IncrementsRelativeParts(dlt_start, clean_start, ...)  .DefaultIncrementsRelativeParts()"},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeParts-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IncrementsRelativeParts — IncrementsRelativeParts-class","text":"dlt_start (count) see slot definition. clean_start (count) see slot definition. ... Arguments passed IncrementsRelative intervals (numeric) see slot definition. increments (numeric) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeParts-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IncrementsRelativeParts — IncrementsRelativeParts-class","text":"class works conjunction DataParts objects. part 2 just started next cohort, next maximum dose either dlt_start (e.g. -1) shift last part 1 dose case DLT part 1, clean_start shift (e.g. -1) case DLTs part 1, given clean_start <= 0 (see description clean_start slot details). part 1 still next cohort, next dose level next higher dose level part1Ladder slot data object. part 2 started , usual relative increment rules apply, see IncrementsRelative.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeParts-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"IncrementsRelativeParts — IncrementsRelativeParts-class","text":"dlt_start (integer) scalar, dose level increment starting part 2 case least one DLT event part 1. clean_start (integer) scalar, dose level increment starting part 2 case DLTs part 1. clean_start <= 0, part 1 ladder used find maximum next dose. Otherwise, relative increment rules applied find next maximum dose level.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeParts-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IncrementsRelativeParts — IncrementsRelativeParts-class","text":"require clean_start >= dlt_start. However, precondition prerequisite function (except class' validation function) works objects class. rather motivated semantics. , observe DLT part 1, aggressive case clean part 1 without DLT. Typically, end users use .DefaultIncrementsRelativeParts() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/IncrementsRelativeParts-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IncrementsRelativeParts — IncrementsRelativeParts-class","text":"","code":"my_increments <- IncrementsRelativeParts(dlt_start = 0, clean_start = 1)"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticIndepBeta-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LogisticIndepBeta — LogisticIndepBeta-class","title":"LogisticIndepBeta — LogisticIndepBeta-class","text":"LogisticIndepBeta class two-parameters logistic regression dose-limiting events (DLE) model prior expressed form pseudo data. model describes relationship binary DLE responses dose levels. specifically, represents relationship probabilities occurrence DLE corresponding dose levels log scale. model specified $$p(x) = exp(phi1 + phi2 * log(x)) / (1 + exp(phi1 + phi2 * log(x)))$$ \\(p(x)\\) probability occurrence DLE dose \\(x\\). two parameters model intercept \\(phi1\\) slope \\(phi2\\). LogisticIndepBeta inherits slots ModelTox class. context pseudo data, following three arguments used, binDLE, DLEdose DLEweights. DLEdose represents fixed dose levels pseudo DLE responses binDLE observed. DLEweights represents total number subjects treated per dose level DLEdose. binDLE represents number subjects observed DLE per dose level DLEdose. Hence, three vectors must length order elements vectors binDLE, DLEdose DLEweights must kept, element given vector corresponds elements remaining two vectors (see example insight). Finally, since least two DLE pseudo responses needed obtain prior modal estimates (maximum likelihood estimates) model parameters, binDLE, DLEdose DLEweights must vectors least length 2.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticIndepBeta-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogisticIndepBeta — LogisticIndepBeta-class","text":"","code":"LogisticIndepBeta(binDLE, DLEdose, DLEweights, data)  .DefaultLogisticIndepBeta()"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticIndepBeta-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogisticIndepBeta — LogisticIndepBeta-class","text":"binDLE (numeric) number subjects observed DLE, pseudo DLE responses, depending dose levels DLEdose. Elements binDLE must correspond elements DLEdose DLEweights. DLEdose (numeric) dose levels pseudo DLE responses. Elements DLEdose must correspond elements binDLE DLEweights. DLEweights (numeric) total number subjects treated dose levels DLEdose, pseudo weights. Elements DLEweights must correspond elements binDLE DLEdose. data (Data) input data update estimates model parameters.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticIndepBeta-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogisticIndepBeta — LogisticIndepBeta-class","text":"pseudo data can interpreted obtain observations trial starts. can used express prior, .e. initial beliefs model parameters. pseudo data expressed following way. First, fix least two dose levels, ask experts' opinion many subjects treated dose levels number subjects observed DLE. dose level, number subjects observed DLE, divided total number subjects treated, probability occurrence DLE particular dose level. probabilities occurrence DLE based pseudo data independent follow Beta distributions. Therefore, joint prior probability density function probabilities can obtained. Hence, change variable, joint prior probability density function two parameters model can also obtained. addition, conjugate joint prior density function two parameters model used. details form joint prior posterior probability density functions, please refer Whitehead Willamson (1998).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticIndepBeta-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"LogisticIndepBeta — LogisticIndepBeta-class","text":"binDLE (numeric) vector total numbers DLE responses. must least length 2 order elements must correspond values specified DLEdose DLEweights. DLEdose (numeric) vector dose levels corresponding must least length 2 order elements must correspond values specified binDLE DLEweights. DLEweights (integer) total number subjects treated pseudo dose level DLEdose. must least length 2 order elements must correspond values specified binDLE DLEdose. phi1 (number)  intercept model. slot used output display resulting prior posterior modal estimate intercept obtained based pseudo data () observed data/responses. phi2 (number)  slope model. slot used output display resulting prior posterior modal estimate slope obtained based pseudo data () observed data/responses. Pcov (matrix) refers 2x2 covariance matrix intercept (\\(phi1\\)) slope parameters (\\(phi2\\)) model. used output display resulting prior posterior covariance matrix \\(phi1\\) \\(phi2\\) obtained, based pseudo data () observed data responses. slot needed internal purposes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticIndepBeta-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"LogisticIndepBeta — LogisticIndepBeta-class","text":"Typically, end users use .DefaultLogisticIndepBeta() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticIndepBeta-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogisticIndepBeta — LogisticIndepBeta-class","text":"","code":"# Obtain prior modal estimates given the pseudo data. # First we used an empty data set such that only the dose levels under # investigations are given. In total, 12 dose levels are under investigation # ranging from 25 to 300 mg with increments of 25 (i.e 25, 50, 75, ..., 300). emptydata <- Data(doseGrid = seq(25, 300, 25))  # Fix two dose levels 25 and 300 mg (DLEdose). # Total number of subjects treated in each of these levels is 3, (DLEweights). # The number of subjects observed with a DLE is 1.05 at dose 25 mg and 1.8 at dose 300 mg (binDLE). my_model1 <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEdose = c(25, 300),   DLEweights = c(3, 3),   data = emptydata )  # Use observed DLE responses to obtain posterior modal estimates. my_data <- Data(   x = c(25, 50, 50, 75, 100, 100, 225, 300),   y = c(0, 0, 0, 0, 1, 1, 1, 1),   doseGrid = emptydata@doseGrid ) #> Used default patient IDs! #> Used best guess cohort indices!  my_model2 <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEdose = c(25, 300),   DLEweights = c(3, 3),   data = my_data )"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadane-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LogisticKadane — LogisticKadane-class","title":"LogisticKadane — LogisticKadane-class","text":"LogisticKadane class logistic model parametrization Kadane et al. (1980).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadane-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogisticKadane — LogisticKadane-class","text":"","code":"LogisticKadane(theta, xmin, xmax)  .DefaultLogisticKadane()"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadane-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogisticKadane — LogisticKadane-class","text":"theta (proportion) target toxicity probability. xmin (number) minimum dose range. xmax (number) maximum dose range.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadane-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogisticKadane — LogisticKadane-class","text":"Let rho0 = p(xmin) probability DLT minimum dose xmin, let gamma dose target toxicity probability theta, .e. \\(p(gamma) = theta\\). can easily shown logistic regression model intercept $$[gamma * logit(rho0) - xmin * logit(theta)] / [gamma - xmin]$$ slope $$[logit(theta) - logit(rho0)] / [gamma - xmin].$$ priors $$gamma ~ Unif(xmin, xmax).$$ $$rho0 ~ Unif(0, theta).$$","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadane-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"LogisticKadane — LogisticKadane-class","text":"theta (proportion) target toxicity probability. xmin (number) minimum dose range. xmax (number) maximum dose range.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadane-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"LogisticKadane — LogisticKadane-class","text":"slots class, required creating model, target toxicity, well minimum maximum dose range. Note can different minimum maximum dose grid data later . Typically, end-users use .DefaultLogisticKadane() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadane-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogisticKadane — LogisticKadane-class","text":"","code":"my_model <- LogisticKadane(theta = 0.33, xmin = 1, xmax = 200)"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadaneBetaGamma-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LogisticKadaneBetaGamma — LogisticKadaneBetaGamma-class","title":"LogisticKadaneBetaGamma — LogisticKadaneBetaGamma-class","text":"LogisticKadaneBetaGamma class logistic model parametrization Kadane et al. (1980), using beta gamma distribution model priors.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadaneBetaGamma-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogisticKadaneBetaGamma — LogisticKadaneBetaGamma-class","text":"","code":"LogisticKadaneBetaGamma(theta, xmin, xmax, alpha, beta, shape, rate)  .DefaultLogisticKadaneBetaGamma()"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadaneBetaGamma-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogisticKadaneBetaGamma — LogisticKadaneBetaGamma-class","text":"theta (proportion) target toxicity probability. xmin (number) minimum dose range. xmax (number) maximum dose range. alpha (number) first shape parameter Beta prior distribution rho0 = p(xmin) probability DLT minimum dose xmin. beta (number) second shape parameter Beta prior distribution rho0 = p(xmin) probability DLT minimum dose xmin. shape (number) shape parameter Gamma prior distribution gamma dose target toxicity probability theta. rate (number) rate parameter Gamma prior distribution gamma dose target toxicity probability theta.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadaneBetaGamma-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogisticKadaneBetaGamma — LogisticKadaneBetaGamma-class","text":"Let rho0 = p(xmin) probability DLT minimum dose xmin, let gamma dose target toxicity probability theta, .e. \\(p(gamma) = theta\\). can easily shown logistic regression model intercept $$[gamma * logit(rho0) - xmin * logit(theta)] / [gamma - xmin]$$ slope $$[logit(theta) - logit(rho0)] / [gamma - xmin].$$ prior gamma, $$gamma ~ Gamma(shape, rate).$$. prior rho0 = p(xmin), $$rho0 ~ Beta(alpha, beta).$$","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadaneBetaGamma-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"LogisticKadaneBetaGamma — LogisticKadaneBetaGamma-class","text":"theta (proportion) target toxicity probability. xmin (number) minimum dose range. xmax (number) maximum dose range. alpha (number) first shape parameter Beta prior distribution rho0 = p(xmin) probability DLT minimum dose xmin. beta (number) second shape parameter Beta prior distribution rho0 = p(xmin) probability DLT minimum dose xmin. shape (number) shape parameter Gamma prior distribution gamma dose target toxicity probability theta. rate (number) rate parameter Gamma prior distribution gamma dose target toxicity probability theta.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadaneBetaGamma-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"LogisticKadaneBetaGamma — LogisticKadaneBetaGamma-class","text":"slots class, required creating model, LogisticKadane class. addition, shape parameters Beta prior distribution rho0 shape rate parameters Gamma prior distribution gamma, required creating prior model. Typically, end users use .Default() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/LogisticKadaneBetaGamma-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogisticKadaneBetaGamma — LogisticKadaneBetaGamma-class","text":"","code":"my_model <- LogisticKadaneBetaGamma(   theta = 0.3,   xmin = 0,   xmax = 7,   alpha = 1,   beta = 19,   shape = 0.5625,   rate = 0.125 )"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LogisticLogNormal — LogisticLogNormal-class","title":"LogisticLogNormal — LogisticLogNormal-class","text":"LogisticLogNormal class usual logistic regression model bivariate normal prior intercept log slope.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogisticLogNormal — LogisticLogNormal-class","text":"","code":"LogisticLogNormal(mean, cov, ref_dose = 1)  .DefaultLogisticLogNormal()"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogisticLogNormal — LogisticLogNormal-class","text":"mean (numeric) prior mean vector. cov (matrix) prior covariance matrix. precision matrix prec internally calculated inverse cov. ref_dose (number) reference dose \\(x*\\) (strictly positive number).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormal-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogisticLogNormal — LogisticLogNormal-class","text":"covariate natural logarithm dose \\(x\\) divided reference dose \\(x*\\), .e.: $$logit[p(x)] = alpha0 + alpha1 * log(x/x*),$$ \\(p(x)\\) probability observing DLT given dose \\(x\\). prior $$(alpha0, log(alpha1)) ~ Normal(mean, cov).$$","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"LogisticLogNormal — LogisticLogNormal-class","text":"Typically, end users use .DefaultLogisticLogNormal() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogisticLogNormal — LogisticLogNormal-class","text":"","code":"my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 50 ) my_model #> An object of class \"LogisticLogNormal\" #> Slot \"params\": #> An object of class \"ModelParamsNormal\" #> Slot \"mean\": #> [1] -0.85  1.00 #>  #> Slot \"cov\": #>      [,1] [,2] #> [1,]  1.0 -0.5 #> [2,] -0.5  1.0 #>  #> Slot \"prec\": #>           [,1]      [,2] #> [1,] 1.3333333 0.6666667 #> [2,] 0.6666667 1.3333333 #>  #>  #> Slot \"ref_dose\": #> An object of class \"positive_number\" #> [1] 50 #>  #> Slot \"datamodel\": #> function() { #>       for (i in 1:nObs) { #>         logit(p[i]) <- alpha0 + alpha1 * log(x[i] / ref_dose) #>         y[i] ~ dbern(p[i]) #>       } #>     } #> <bytecode: 0x55fa9979fa58> #> <environment: 0x55faaa69bbe8> #>  #> Slot \"priormodel\": #> function() { #>       theta ~ dmnorm(mean, prec) #>       alpha0 <- theta[1] #>       alpha1 <- exp(theta[2]) #>     } #> <bytecode: 0x55fa96673598> #> <environment: 0x55faaa69b9b8> #>  #> Slot \"modelspecs\": #> function(from_prior) { #>       ms <- list(mean = params@mean, prec = params@prec) #>       if (!from_prior) { #>         ms$ref_dose <- ref_dose #>       } #>       ms #>     } #> <bytecode: 0x55fa95a460e0> #> <environment: 0x55faaa69b9b8> #>  #> Slot \"init\": #> function() { #>       list(theta = c(0, 1)) #>     } #> <bytecode: 0x55fa9e7ce608> #> <environment: 0x55faaa69b9b8> #>  #> Slot \"datanames\": #> [1] \"nObs\" \"y\"    \"x\"    #>  #> Slot \"datanames_prior\": #> character(0) #>  #> Slot \"sample\": #> [1] \"alpha0\" \"alpha1\" #>"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalGrouped-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LogisticLogNormalGrouped — LogisticLogNormalGrouped-class","title":"LogisticLogNormalGrouped — LogisticLogNormalGrouped-class","text":"LogisticLogNormalGrouped class logistic regression model mono combo arms simultaneous dose escalation design.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalGrouped-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogisticLogNormalGrouped — LogisticLogNormalGrouped-class","text":"","code":"LogisticLogNormalGrouped(mean, cov, ref_dose = 1)  .DefaultLogisticLogNormalGrouped()"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalGrouped-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogisticLogNormalGrouped — LogisticLogNormalGrouped-class","text":"mean (numeric) prior mean vector. cov (matrix) prior covariance matrix. precision matrix prec internally calculated inverse cov. ref_dose (number) reference dose \\(x*\\) (strictly positive number).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalGrouped-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogisticLogNormalGrouped — LogisticLogNormalGrouped-class","text":"continuous covariate natural logarithm dose \\(x\\) divided reference dose \\(x*\\) LogisticLogNormal. addition, \\(I_c\\) binary indicator covariate 1 combo arm 0 mono arm. model defined : $$logit[p(x)] = (alpha0 + I_c * delta0) + (alpha1 + I_c * delta1) * log(x / x*),$$ \\(p(x)\\) probability observing DLT given dose \\(x\\), delta0 delta1 differences combo arm compared mono intercept slope parameters alpha0 alpha1. prior defined $$(alpha0, log(delta0), log(alpha1), log(delta1)) ~ Normal(mean, cov).$$","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalGrouped-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"LogisticLogNormalGrouped — LogisticLogNormalGrouped-class","text":"Typically, end users use .DefaultLogisticLogNormalGrouped() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalGrouped-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogisticLogNormalGrouped — LogisticLogNormalGrouped-class","text":"","code":"my_model <- LogisticLogNormalGrouped(   mean = c(-0.85, 0, 1, 0),   cov = diag(1, 4),   ref_dose = 50 ) my_model #> An object of class \"LogisticLogNormalGrouped\" #> Slot \"params\": #> An object of class \"ModelParamsNormal\" #> Slot \"mean\": #> [1] -0.85  0.00  1.00  0.00 #>  #> Slot \"cov\": #>      [,1] [,2] [,3] [,4] #> [1,]    1    0    0    0 #> [2,]    0    1    0    0 #> [3,]    0    0    1    0 #> [4,]    0    0    0    1 #>  #> Slot \"prec\": #>      [,1] [,2] [,3] [,4] #> [1,]    1    0    0    0 #> [2,]    0    1    0    0 #> [3,]    0    0    1    0 #> [4,]    0    0    0    1 #>  #>  #> Slot \"ref_dose\": #> An object of class \"positive_number\" #> [1] 50 #>  #> Slot \"datamodel\": #> function() { #>       for (i in 1:nObs) { #>         logit(p[i]) <- (alpha0 + is_combo[i] * delta0) + #>           (alpha1 + is_combo[i] * delta1) * log(x[i] / ref_dose) #>         y[i] ~ dbern(p[i]) #>       } #>     } #> <bytecode: 0x55faa4670ff8> #> <environment: 0x55faa54c1bc8> #>  #> Slot \"priormodel\": #> function() { #>       theta ~ dmnorm(mean, prec) #>       alpha0 <- theta[1] #>       delta0 <- exp(theta[2]) #>       alpha1 <- exp(theta[3]) #>       delta1 <- exp(theta[4]) #>     } #> <bytecode: 0x55faa4155780> #> <environment: 0x55faa54c1bc8> #>  #> Slot \"modelspecs\": #> function(group, from_prior) { #>       ms <- list( #>         mean = params@mean, #>         prec = params@prec #>       ) #>       if (!from_prior) { #>         ms$ref_dose <- ref_dose #>         ms$is_combo <- as.integer(group == \"combo\") #>       } #>       ms #>     } #> <bytecode: 0x55faa481fbe0> #> <environment: 0x55faa54c1bc8> #>  #> Slot \"init\": #> function() { #>       list(theta = c(0, 1, 1, 1)) #>     } #> <bytecode: 0x55faa48adfb8> #> <environment: 0x55faa54c1bc8> #>  #> Slot \"datanames\": #> [1] \"nObs\" \"y\"    \"x\"    #>  #> Slot \"datanames_prior\": #> character(0) #>  #> Slot \"sample\": #> [1] \"alpha0\" \"delta0\" \"alpha1\" \"delta1\" #>"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalMixture-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LogisticLogNormalMixture — LogisticLogNormalMixture-class","title":"LogisticLogNormalMixture — LogisticLogNormalMixture-class","text":"LogisticLogNormalMixture class standard logistic model online mixture two bivariate log normal priors.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalMixture-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogisticLogNormalMixture — LogisticLogNormalMixture-class","text":"","code":"LogisticLogNormalMixture(mean, cov, ref_dose, share_weight)  .DefaultLogisticLogNormalMixture()"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalMixture-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogisticLogNormalMixture — LogisticLogNormalMixture-class","text":"mean (numeric) prior mean vector. cov (matrix) prior covariance matrix. precision matrix prec internally calculated inverse cov. ref_dose (number) reference dose \\(x*\\) (strictly positive number). share_weight (proportion) prior weight share component.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalMixture-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogisticLogNormalMixture — LogisticLogNormalMixture-class","text":"model can used data arising online informative component prior, time data trial main interest. Formally, achieved assuming probability DLT dose \\(x\\) given $$p(x) = \\pi * p1(x) + (1 - \\pi) * p2(x)$$ \\(\\pi\\) probability model \\(p(x)\\) model \\(p1(x)\\), informative component prior. model data arises parallel: doses xshare, DLT information yshare observed, total nObsshare data points (see DataMixture). hand, \\(1 - \\pi\\), probability separate model \\(p2(x)\\). components log normal prior distribution, can specified user, inherited LogisticLogNormal class.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalMixture-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"LogisticLogNormalMixture — LogisticLogNormalMixture-class","text":"share_weight (proportion) prior weight share component \\(p_{1}(x)\\).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalMixture-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"LogisticLogNormalMixture — LogisticLogNormalMixture-class","text":"Typically, end users use .DefaultLogNormalMixture() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalMixture-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogisticLogNormalMixture — LogisticLogNormalMixture-class","text":"","code":"# Decide on the dose grid and MCMC options. dose_grid <- 1:80 my_options <- McmcOptions()  # Classic model. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 50 )  empty_data <- Data(doseGrid = dose_grid) prior_samples <- mcmc(empty_data, my_model, my_options) plot(prior_samples, my_model, empty_data)   # Set up the mixture model and data share object. model_share <- LogisticLogNormalMixture(   share_weight = 0.1,   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 50 )  empty_data_share <- DataMixture(   doseGrid = dose_grid,   xshare = rep(c(10, 20, 40), each = 4),   yshare = rep(0L, 12), )  # Compare with the resulting prior model. prior_samples_share <- mcmc(empty_data_share, model_share, my_options) plot(prior_samples_share, model_share, empty_data_share)"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalOrdinal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LogisticLogNormalOrdinal — LogisticLogNormalOrdinal-class","title":"LogisticLogNormalOrdinal — LogisticLogNormalOrdinal-class","text":"LogisticLogNormalOrdinal class logistic lognormal CRM model using ordinal toxicity scale.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalOrdinal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogisticLogNormalOrdinal — LogisticLogNormalOrdinal-class","text":"","code":"LogisticLogNormalOrdinal(mean, cov, ref_dose)  .DefaultLogisticLogNormalOrdinal()"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalOrdinal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogisticLogNormalOrdinal — LogisticLogNormalOrdinal-class","text":"mean (numeric) prior mean vector. cov (matrix) prior covariance matrix. precision matrix prec internally calculated inverse cov. ref_dose (number) reference dose \\(x*\\) (strictly positive number).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalOrdinal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"LogisticLogNormalOrdinal — LogisticLogNormalOrdinal-class","text":"Typically, end users use .DefaultLogisticLogNormalOrdinal() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalOrdinal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogisticLogNormalOrdinal — LogisticLogNormalOrdinal-class","text":"","code":"LogisticLogNormalOrdinal(   mean = c(3, 4, 0),   cov = diag(c(4, 3, 1)),   ref_dose = 1 ) #> An object of class \"LogisticLogNormalOrdinal\" #> Slot \"params\": #> An object of class \"ModelParamsNormal\" #> Slot \"mean\": #> [1] 3 4 0 #>  #> Slot \"cov\": #>      [,1] [,2] [,3] #> [1,]    4    0    0 #> [2,]    0    3    0 #> [3,]    0    0    1 #>  #> Slot \"prec\": #>      [,1]      [,2] [,3] #> [1,] 0.25 0.0000000    0 #> [2,] 0.00 0.3333333    0 #> [3,] 0.00 0.0000000    1 #>  #>  #> Slot \"ref_dose\": #> An object of class \"positive_number\" #> [1] 1 #>  #> Slot \"datamodel\": #> function() { #>       for (i in 1:nObs) { #>         xhat[i] <- log(x[i] / ref_dose) #>         for (j in 1:(k - 1)) { #>           z[i, j] <- alpha[j] + beta * xhat[i] #>           p[i, j] <- exp(z[i, j]) / (1 + exp(z[i, j])) #>           tox[i, j] ~ dbern(p[i, j]) #>         } #>       } #>     } #> <bytecode: 0x55faad13c2c0> #> <environment: 0x55faab0a9118> #>  #> Slot \"priormodel\": #> function() { #>       alpha[1] ~ dnorm(mean[1], prec[1, 1]) #>       for (i in 2:(k - 1)) { #>         alpha[i] ~ dnorm(mean[i], prec[i, i]) %_% T(, alpha[i - 1]) #>       } #>       gamma ~ dnorm(mean[k], prec[k, k]) #>       beta <- exp(gamma) #>     } #> <bytecode: 0x55faa94adfe8> #> <environment: 0x55faab0a9118> #>  #> Slot \"modelspecs\": #> function(y, from_prior) { #>       ms <- list( #>         mean = params@mean, #>         prec = params@prec, #>         k = length(mean), #>         tox = array(dim = c(length(y), length(mean) - 1)) #>       ) #>       if (!from_prior) { #>         for (i in seq_along(y)) { #>           for (j in 1:(ms$k - 1)) { #>             ms$tox[i, j] <- y[i] >= j #>           } #>         } #>         ms$ref_dose <- ref_dose #>       } #>       ms #>     } #> <bytecode: 0x55faa88d9db0> #> <environment: 0x55faab0a9118> #>  #> Slot \"init\": #> function() { #>       list(alpha = sapply(1:(length(mean) - 1), function(x) -(x + 1)), gamma = 1) #>     } #> <bytecode: 0x55faa87b13f8> #> <environment: 0x55faab0a9118> #>  #> Slot \"datanames\": #> [1] \"nObs\" \"y\"    \"x\"    #>  #> Slot \"datanames_prior\": #> character(0) #>  #> Slot \"sample\": #> [1] \"alpha[1]\" \"alpha[2]\" \"beta\"     #>"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalSub-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LogisticLogNormalSub — LogisticLogNormalSub-class","title":"LogisticLogNormalSub — LogisticLogNormalSub-class","text":"LogisticLogNormalSub class standard logistic model bivariate (log) normal prior subtractive dose standardization.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalSub-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogisticLogNormalSub — LogisticLogNormalSub-class","text":"","code":"LogisticLogNormalSub(mean, cov, ref_dose = 0)  .DefaultLogisticLogNormalSub()"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalSub-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogisticLogNormalSub — LogisticLogNormalSub-class","text":"mean (numeric) prior mean vector. cov (matrix) prior covariance matrix. precision matrix prec internally calculated inverse cov. ref_dose (number) reference dose \\(x*\\).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalSub-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogisticLogNormalSub — LogisticLogNormalSub-class","text":"covariate dose \\(x\\) minus reference dose \\(x*\\), .e.: $$logit[p(x)] = alpha0 + alpha1 * (x - x*),$$ \\(p(x)\\) probability observing DLT given dose \\(x\\). prior $$(alpha0, log(alpha1)) ~ Normal(mean, cov).$$","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalSub-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"LogisticLogNormalSub — LogisticLogNormalSub-class","text":"params (ModelParamsNormal) bivariate normal prior parameters. ref_dose (number) reference dose \\(x*\\).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalSub-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"LogisticLogNormalSub — LogisticLogNormalSub-class","text":"Typically, end-users use .DefaultLogisticLogNormalSub() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/LogisticLogNormalSub-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogisticLogNormalSub — LogisticLogNormalSub-class","text":"","code":"my_model <- LogisticLogNormalSub(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 50 )"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LogisticNormal — LogisticNormal-class","title":"LogisticNormal — LogisticNormal-class","text":"LogisticNormal class usual logistic regression model bivariate normal prior intercept slope.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogisticNormal — LogisticNormal-class","text":"","code":"LogisticNormal(mean, cov, ref_dose = 1)  .DefaultLogisticNormal()"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogisticNormal — LogisticNormal-class","text":"mean (numeric) prior mean vector. cov (matrix) prior covariance matrix. precision matrix prec internally calculated inverse cov. ref_dose (number) reference dose \\(x*\\) (strictly positive number).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormal-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogisticNormal — LogisticNormal-class","text":"covariate natural logarithm dose \\(x\\) divided reference dose \\(x*\\), .e.: $$logit[p(x)] = alpha0 + alpha1 * log(x/x*),$$ \\(p(x)\\) probability observing DLT given dose \\(x\\). prior $$(alpha0, alpha1) ~ Normal(mean, cov).$$","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"LogisticNormal — LogisticNormal-class","text":"Typically, end users use .DefaultLogisticNormal() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogisticNormal — LogisticNormal-class","text":"","code":"# Define the dose-grid. empty_data <- Data(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))  my_model <- LogisticNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2) )  my_options <- McmcOptions(burnin = 10, step = 2, samples = 100)  samples <- mcmc(empty_data, my_model, my_options) samples #> An object of class \"Samples\" #> Slot \"data\": #> $alpha0 #>   [1] -1.715914313 -0.892407523 -1.211554383 -1.472195110 -2.416334318 #>   [6] -1.285820975  0.029215941 -0.805951724 -0.851451201 -1.157141040 #>  [11] -1.667618032 -0.435750854 -1.128010413 -0.974629359 -1.785880425 #>  [16] -2.037071478 -0.177330074 -1.315232986  0.323481480  0.291863654 #>  [21] -0.092051716 -0.545355606 -3.656471680 -1.459176153 -1.699453547 #>  [26]  0.057756130 -1.109025854 -0.653990724 -0.090374373 -0.206661562 #>  [31]  1.098653787 -2.008721402  1.413850238 -0.083735172 -0.949259113 #>  [36]  0.228217380 -0.286866842 -0.129192955  0.984583640  0.343442634 #>  [41] -1.792273470 -1.682788780 -1.557132708 -0.444779540 -0.066125576 #>  [46] -0.843110875 -2.159456376 -1.707039658 -2.240757378  0.252786224 #>  [51] -0.544297826  0.044112012 -0.618877380 -0.499418652  0.181942714 #>  [56] -1.533824378 -0.256489799 -1.658884867 -0.586447963  0.972529609 #>  [61] -0.769731752  1.207410150 -2.339665296 -3.211087977 -1.992103314 #>  [66] -1.218949614  0.655993460 -2.024337699  0.464818162  1.406754663 #>  [71]  1.111162187 -1.489619722 -0.043105676 -1.391147282 -0.765234593 #>  [76] -0.561548498 -1.397952924 -1.175992195 -2.109940501 -1.762867575 #>  [81] -2.043591123 -2.088858313 -2.004276431 -0.114613882 -0.002023762 #>  [86] -1.142283359 -0.477661958 -0.910768692 -0.788572021 -0.766769039 #>  [91] -2.020773901 -0.773668037 -0.459812718 -0.714949767 -2.347057679 #>  [96] -2.447579777 -2.181560506 -2.186046222 -1.372300380  0.375143168 #>  #> $alpha1 #>   [1]  1.69161463  1.37812335 -0.28218696  1.26511935  4.14440488  0.77184842 #>   [7]  1.31901166  1.54801935  1.08898658  0.05129432  1.81816213  0.86540128 #>  [13]  0.73040332  1.03040384  1.27141896  1.69161416  1.66447146  1.97042526 #>  [19]  1.10852947  0.70134320  1.15504189  2.86030767  1.64293765  2.33277804 #>  [25]  2.29349973  0.33887492  1.64374073  2.31227165 -0.41902390  1.22202835 #>  [31]  0.26992945  2.03525879 -0.29257830  1.95046385  0.89912683  1.18328966 #>  [37]  0.45978854  0.13445040 -0.42116278  0.24231104 -0.07121457  1.80323578 #>  [43]  1.56293974  1.33213639 -0.54988645  2.07194902  2.64525561  1.18107007 #>  [49]  1.53934208  1.76375732  1.40474118  1.34433222  0.54365846  1.58865055 #>  [55]  1.03288049  1.07552383 -0.06636877  2.43322584 -0.26569207 -0.27829099 #>  [61]  2.03174844  1.35042572  1.80136551  2.29118453  3.31198927  1.56121517 #>  [67]  1.15421741  2.27980671  0.26835172  0.32276595  0.98245087  1.30579902 #>  [73]  1.58764335  2.38225601  1.79072214  0.92731205  0.99747628  0.71197949 #>  [79]  2.28007915  0.81608596  2.92167936  2.04287751  1.83165390  1.41823932 #>  [85]  0.55346737  1.45414691  0.85499164  2.34460064  0.74472099  1.21609822 #>  [91]  1.38766367  0.29176112  1.18344779 -0.21277583  2.52776865  1.89507407 #>  [97]  2.99471324  0.96065808  0.93933300  0.49415237 #>  #>  #> Slot \"options\": #> An object of class \"McmcOptions\" #> Slot \"iterations\": #> [1] 210 #>  #> Slot \"burnin\": #> [1] 10 #>  #> Slot \"step\": #> [1] 2 #>  #> Slot \"rng_kind\": #> [1] NA #>  #> Slot \"rng_seed\": #> [1] NA #>  #>"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalFixedMixture-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LogisticNormalFixedMixture — LogisticNormalFixedMixture-class","title":"LogisticNormalFixedMixture — LogisticNormalFixedMixture-class","text":"LogisticNormalFixedMixture class standard logistic regression model fixed mixture multiple bivariate (log) normal priors intercept slope parameters. weights normal priors fixed, hence additional model parameters introduced. type prior often used better approximate given posterior distribution, information given terms mixture.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalFixedMixture-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogisticNormalFixedMixture — LogisticNormalFixedMixture-class","text":"","code":"LogisticNormalFixedMixture(components, weights, ref_dose, log_normal = FALSE)  .DefaultLogisticNormalFixedMixture()"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalFixedMixture-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogisticNormalFixedMixture — LogisticNormalFixedMixture-class","text":"components (list) specifications mixture components, list ModelParamsNormal objects bivariate (log) normal prior. weights (numeric) weights components; must positive normalized sum 1. ref_dose (number) reference dose \\(x*\\) (strictly positive number). log_normal (flag) log normal prior specified, mean vectors covariance matrices valid intercept log slope?","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalFixedMixture-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogisticNormalFixedMixture — LogisticNormalFixedMixture-class","text":"covariate natural logarithm dose \\(x\\) divided reference dose \\(x*\\), .e.: $$logit[p(x)] = alpha0 + alpha1 * log(x/x*),$$ \\(p(x)\\) probability observing DLT given dose \\(x\\). prior $$(alpha0, alpha1) ~ w1 * Normal(mean1, cov1) + ... + wK * Normal(meanK, covK),$$ normal prior used $$(alpha0, log(alpha1)) ~ w1 * Normal(mean1, cov1) + ... + wK * Normal(meanK, covK),$$ log normal prior used. weights \\(w1, ..., wK\\) components fixed sum 1. slots class comprise list components parameters. Every single component contains mean vector covariance matrix bivariate normal distributions. Remaining slots weights components well reference dose. Moreover, special indicator slot specifies whether log normal prior used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalFixedMixture-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"LogisticNormalFixedMixture — LogisticNormalFixedMixture-class","text":"components (list) specifications mixture components, list ModelParamsNormal objects bivariate (log) normal prior. weights (numeric) weights components; must positive must sum 1. ref_dose (positive_number) reference dose. log_normal (flag) log normal prior used, mean vectors covariance matrices valid intercept log slope?","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalFixedMixture-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"LogisticNormalFixedMixture — LogisticNormalFixedMixture-class","text":"Typically, end-users use .DefaultLogisticNormalFixedMixture() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalFixedMixture-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogisticNormalFixedMixture — LogisticNormalFixedMixture-class","text":"","code":"my_model <- LogisticNormalFixedMixture(   components = list(     comp1 = ModelParamsNormal(       mean = c(-0.85, 1),       cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2)     ),     comp2 = ModelParamsNormal(       mean = c(1, 1.5),       cov = matrix(c(1.2, -0.45, -0.45, 0.6), nrow = 2)     )   ),   weights = c(0.3, 0.7),   ref_dose = 50 )"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalMixture-class.html","id":null,"dir":"Reference","previous_headings":"","what":"LogisticNormalMixture — LogisticNormalMixture-class","title":"LogisticNormalMixture — LogisticNormalMixture-class","text":"LogisticNormalMixture class standard logistic regression model mixture two bivariate normal priors intercept slope parameters.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalMixture-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogisticNormalMixture — LogisticNormalMixture-class","text":"","code":"LogisticNormalMixture(comp1, comp2, weightpar, ref_dose)  .DefaultLogisticNormalMixture()"},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalMixture-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogisticNormalMixture — LogisticNormalMixture-class","text":"comp1 (ModelParamsNormal) bivariate normal prior specification first component. See ModelParamsNormal details. comp2 (ModelParamsNormal) bivariate normal prior specification second component. See ModelParamsNormal details. weightpar (numeric) beta parameters weight first component. must named vector length 2 names b strictly positive values. ref_dose (number) reference dose \\(x*\\) (strictly positive number).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalMixture-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogisticNormalMixture — LogisticNormalMixture-class","text":"covariate natural logarithm dose \\(x\\) divided reference dose \\(x*\\), .e.: $$logit[p(x)] = alpha0 + alpha1 * log(x/x*),$$ \\(p(x)\\) probability observing DLT given dose \\(x\\). prior $$(alpha0, alpha1) ~ w * Normal(mean1, cov1) + (1 - w) * Normal(mean2, cov2).$$ weight w first component assigned beta prior B(, b).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalMixture-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"LogisticNormalMixture — LogisticNormalMixture-class","text":"comp1 (ModelParamsNormal) bivariate normal prior specification first component. comp2 (ModelParamsNormal) bivariate normal prior specification second component. weightpar (numeric) beta parameters weight first component. must named vector length 2 names b strictly positive values. ref_dose (positive_number) reference dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalMixture-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"LogisticNormalMixture — LogisticNormalMixture-class","text":"weight two normal priors model parameter, hence flexible mixture. type prior often used mixture minimal informative informative component, order make CRM robust data deviations informative component. Typically, end-users use .DefaultLogisticNormalMixture() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/LogisticNormalMixture-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogisticNormalMixture — LogisticNormalMixture-class","text":"","code":"my_model <- LogisticNormalMixture(   comp1 = ModelParamsNormal(     mean = c(-0.85, 1),     cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2)   ),   comp2 = ModelParamsNormal(     mean = c(1, 1.5),     cov = matrix(c(1.2, -0.45, -0.45, 0.6), nrow = 2)   ),   weightpar = c(a = 1, b = 1),   ref_dose = 50 )"},{"path":"https://openpharma.github.io/crmPack/reference/McmcOptions-class.html","id":null,"dir":"Reference","previous_headings":"","what":"McmcOptions — McmcOptions-class","title":"McmcOptions — McmcOptions-class","text":"McmcOptions class three canonical MCMC options well Random Number Generator settings.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/McmcOptions-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"McmcOptions — McmcOptions-class","text":"","code":"McmcOptions(   burnin = 10000L,   step = 2L,   samples = 10000L,   rng_kind = NA_character_,   rng_seed = NA_integer_ )  .DefaultMcmcOptions()"},{"path":"https://openpharma.github.io/crmPack/reference/McmcOptions-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"McmcOptions — McmcOptions-class","text":"burnin (count) number burn-iterations saved. step (count) every step-th iteration saved burn-. samples (count) number resulting samples. rng_kind (string) name RNG type. Possible types : Wichmann-Hill, Marsaglia-Multicarry, Super-Duper, Mersenne-Twister. NA (default), RNG kind chosen [rjags]. rng_seed (number) RNG seed corresponding chosen rng_kind. must integer value NA (default), means seed chosen [rjags].","code":""},{"path":"https://openpharma.github.io/crmPack/reference/McmcOptions-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"McmcOptions — McmcOptions-class","text":"iterations (count) number MCMC iterations. burnin (count) number burn-iterations saved. step (count) every step-th iteration saved burnin. words, sample iteration = 1,...,iterations, saved (- burnin) mod step = 0. example, iterations = 6, burnin = 0 step = 2, samples iterations 2,4,6 saved. rng_kind (string) Random Number Generator (RNG) type used rjags. must one following four values: base::Wichmann-Hill, base::Marsaglia-Multicarry, base::Super-Duper, base::Mersenne-Twister, NA_character_. NA_character_ (default), RNG kind chosen rjags. rng_seed (number) Random Number Generator (RNG) seed used rjags chosen rng_kind. must integer scalar NA_integer_, means seed chosen rjags.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/McmcOptions-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"McmcOptions — McmcOptions-class","text":"Typically, end users use .DefaultMcmcOptions() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/McmcOptions-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"McmcOptions — McmcOptions-class","text":"","code":"# Set up MCMC option in order to have a burn-in of 10000 iterations and # then take every other iteration up to a collection of 10000 samples. McmcOptions(burnin = 10000, step = 2, samples = 10000) #> An object of class \"McmcOptions\" #> Slot \"iterations\": #> [1] 30000 #>  #> Slot \"burnin\": #> [1] 10000 #>  #> Slot \"step\": #> [1] 2 #>  #> Slot \"rng_kind\": #> [1] NA #>  #> Slot \"rng_seed\": #> [1] NA #>"},{"path":"https://openpharma.github.io/crmPack/reference/MinimalInformative.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a minimally informative prior — MinimalInformative","title":"Construct a minimally informative prior — MinimalInformative","text":"function constructs minimally informative prior, captured LogisticNormal (LogisticLogNormal) object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/MinimalInformative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a minimally informative prior — MinimalInformative","text":"","code":"MinimalInformative(   dosegrid,   refDose,   threshmin = 0.2,   threshmax = 0.3,   probmin = 0.05,   probmax = 0.05,   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/MinimalInformative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a minimally informative prior — MinimalInformative","text":"dosegrid dose grid refDose reference dose threshmin toxicity probability threshold unlikely (see probmin) minimum dose (default: 0.2) threshmax toxicity probability threshold unlikely (see probmax) maximum dose (default: 0.3) probmin prior probability exceeding threshmin minimum dose (default: 0.05) probmax prior probability threshmax maximum dose (default: 0.05) ... additional arguments computations, see Quantiles2LogisticNormal, e.g. refDose logNormal=TRUE obtain minimal informative log normal prior.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/MinimalInformative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a minimally informative prior — MinimalInformative","text":"see Quantiles2LogisticNormal","code":""},{"path":"https://openpharma.github.io/crmPack/reference/MinimalInformative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a minimally informative prior — MinimalInformative","text":"Based proposal Neuenschwander et al (2008, Statistics Medicine), minimally informative prior distribution constructed. required key input minimum (\\(d_{1}\\) notation Appendix .1 paper) maximum value (\\(d_{J}\\)) dose grid supplied function. threshmin probability threshold \\(q_{1}\\), probability DLT larger \\(q_{1}\\) 5% probability. Therefore \\(q_{1}\\) 95% quantile beta distribution hence \\(p_{1} = 0.95\\). Likewise, threshmax probability threshold \\(q_{J}\\), probability DLT smaller \\(q_{J}\\) 5% probability (\\(p_{J} = 0.05\\)). probabilities \\(1 - p_{1}\\) \\(p_{J}\\) can controlled arguments probmin probmax, respectively. Subsequently, doses supplied dosegrid argument, beta distributions set assumption prior medians linear log-dose logit scale, Quantiles2LogisticNormal used transform resulting quantiles approximating LogisticNormal (LogisticLogNormal) model. Note reference dose required computations.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/MinimalInformative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a minimally informative prior — MinimalInformative","text":"","code":"# Setting up a minimal informative prior  # max.time is quite small only for the purpose of showing the example. They  # should be increased for a real case. set.seed(132) coarseGrid <- c(0.1, 10, 30, 60, 100) minInfModel <- MinimalInformative(dosegrid = coarseGrid,                                   refDose=50,                                   threshmin=0.2,                                   threshmax=0.3,                                   control=## for real case: leave out control                                      list(max.time=0.1))  #> It: 1, obj value (lsEnd): 0.6732911061 indTrace: 1 #> timeSpan = 4.138809 maxTime = 0.1 #> Emini is: 0.6732911061 #> xmini are: #> 3.436837973 9.074768474 4.306636605 0.7253533934 -0.7572128108  #> Totally it used 4.13884 secs #> No. of function call is: 991  # Plotting the result matplot(x=coarseGrid,         y=minInfModel$required,         type=\"b\", pch=19, col=\"blue\", lty=1,         xlab=\"dose\",         ylab=\"prior probability of DLT\") matlines(x=coarseGrid,          y=minInfModel$quantiles,          type=\"b\", pch=19, col=\"red\", lty=1) legend(\"right\",        legend=c(\"quantiles\", \"approximation\"),        col=c(\"blue\", \"red\"),        lty=1,        bty=\"n\")"},{"path":"https://openpharma.github.io/crmPack/reference/ModelEff-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ModelEff — ModelEff-class","title":"ModelEff — ModelEff-class","text":"ModelEff parent class efficacy models using pseudo data prior. dedicated efficacy models prior specified form pseudo data (data trial starts). data must obey convention DataDual class. refers observed efficacy/biomarker responses (w DataDual), dose levels responses observed (x DataDual), dose levels considered study (doseGrid DataDual), finally specifications DataDual class can used generate prior posterior modal estimates samples estimates model parameter(s). responses observed, least doseGrid specified data prior modal estimates samples can obtained model parameters based specified pseudo data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ModelEff-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModelEff — ModelEff-class","text":"","code":".DefaultModelEff()"},{"path":"https://openpharma.github.io/crmPack/reference/ModelEff-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ModelEff — ModelEff-class","text":"data (DataDual) observed data used obtain model parameters estimates samples (see details ).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ModelEff-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"ModelEff — ModelEff-class","text":"Typically, end users use .DefaultModelEff() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/ModelLogNormal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ModelLogNormal — ModelLogNormal-class","title":"ModelLogNormal — ModelLogNormal-class","text":"ModelLogNormal class model reference dose bivariate normal prior model parameters alpha0 natural logarithm alpha1, .e.: $$(alpha0, log(alpha1)) ~ Normal(mean, cov),$$. Transformations log, e.g. identity, can specified priormodel slot. parameter alpha1 log-normal distribution default ensure positivity alpha1 guarantees exp(alpha1) > 1. slots class contain mean vector, covariance precision matrices bivariate normal distribution, well reference dose. Note precision matrix inverse covariance matrix JAGS. (\"normal\") model specific classes inherit class.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ModelLogNormal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModelLogNormal — ModelLogNormal-class","text":"","code":"ModelLogNormal(mean, cov, ref_dose = 1)  .DefaultModelLogNormal()"},{"path":"https://openpharma.github.io/crmPack/reference/ModelLogNormal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModelLogNormal — ModelLogNormal-class","text":"mean (numeric) prior mean vector. cov (matrix) prior covariance matrix. precision matrix prec internally calculated inverse cov. ref_dose (number) reference dose \\(x*\\) (strictly positive number).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ModelLogNormal-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ModelLogNormal — ModelLogNormal-class","text":"params (ModelParamsNormal) bivariate normal prior parameters. ref_dose (positive_number) reference dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ModelLogNormal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"ModelLogNormal — ModelLogNormal-class","text":"Typically, end users use .DefaultModelLogNormal() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/ModelParamsNormal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ModelParamsNormal — ModelParamsNormal-class","title":"ModelParamsNormal — ModelParamsNormal-class","text":"ModelParamsNormal class bivariate normal model parameters, .e. mean vector, covariance matrix precision matrix. precision matrix inverse covariance matrix JAGS computed internally object constructor function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ModelParamsNormal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModelParamsNormal — ModelParamsNormal-class","text":"","code":"ModelParamsNormal(mean, cov)  .DefaultModelParamsNormal()"},{"path":"https://openpharma.github.io/crmPack/reference/ModelParamsNormal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModelParamsNormal — ModelParamsNormal-class","text":"mean (numeric) prior mean vector. cov (matrix) prior covariance matrix. precision matrix prec internally calculated inverse cov.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ModelParamsNormal-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ModelParamsNormal — ModelParamsNormal-class","text":"mean (numeric) mean vector. cov (matrix) covariance matrix. prec (matrix) precision matrix, inverse matrix cov.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ModelParamsNormal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"ModelParamsNormal — ModelParamsNormal-class","text":"Typically, end users use .ModelPAramsNormal() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/ModelParamsNormal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ModelParamsNormal — ModelParamsNormal-class","text":"","code":"ModelParamsNormal(mean = c(1, 6), cov = diag(2)) #> An object of class \"ModelParamsNormal\" #> Slot \"mean\": #> [1] 1 6 #>  #> Slot \"cov\": #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1 #>  #> Slot \"prec\": #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1 #>"},{"path":"https://openpharma.github.io/crmPack/reference/ModelPseudo-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ModelPseudo — ModelPseudo-class","title":"ModelPseudo — ModelPseudo-class","text":"ModelPseudo parent class models express prior form pseudo data (data trial starts).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ModelPseudo-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModelPseudo — ModelPseudo-class","text":"","code":".DefaultModelPseudo()"},{"path":"https://openpharma.github.io/crmPack/reference/ModelPseudo-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"ModelPseudo — ModelPseudo-class","text":"Typically, end users use .DefaultModelPseudo() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/ModelTox-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ModelTox — ModelTox-class","title":"ModelTox — ModelTox-class","text":"ModelTox parent class DLE (dose-limiting events) models using pseudo data prior. dedicated DLE models toxicity models prior specified form pseudo data (data trial starts). data must obey convention Data class. refers observed DLE responses (y Data), dose levels (x Data) responses observed, dose levels considered study (doseGrid Data), finally specifications Data class can used generate prior posterior modal estimates samples estimates model parameter(s). responses observed, least doseGrid specified data prior modal estimates samples can obtained model parameters based specified pseudo data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ModelTox-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModelTox — ModelTox-class","text":"","code":".DefaultModelTox()"},{"path":"https://openpharma.github.io/crmPack/reference/ModelTox-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"ModelTox — ModelTox-class","text":"data (Data) observed data used obtain model parameters estimates samples (see details ).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ModelTox-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"ModelTox — ModelTox-class","text":"Typically, end users use .DefaultModelTox() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/NextBest-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBest — NextBest-class","title":"NextBest — NextBest-class","text":"NextBest virtual class finding next best dose, specific next best dose classes inherit.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBest-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBest — NextBest-class","text":"","code":".DefaultNextBest()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBest-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBest — NextBest-class","text":"Typically, end users use DefaultNextBest() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/NextBestDualEndpoint-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestDualEndpoint — NextBestDualEndpoint-class","title":"NextBestDualEndpoint — NextBestDualEndpoint-class","text":"NextBestDualEndpoint class next best dose based dual endpoint model.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestDualEndpoint-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestDualEndpoint — NextBestDualEndpoint-class","text":"","code":"NextBestDualEndpoint(   target,   overdose,   max_overdose_prob,   target_relative = TRUE,   target_thresh = 0.01 )  .DefaultNextBestDualEndpoint()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestDualEndpoint-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextBestDualEndpoint — NextBestDualEndpoint-class","text":"target (numeric) see slot definition. overdose (numeric) see slot definition. max_overdose_prob (proportion) see slot definition. target_relative (flag) see slot definition. target_thresh (proportion) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestDualEndpoint-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NextBestDualEndpoint — NextBestDualEndpoint-class","text":"rule, first admissible doses found, toxicity probability fall overdose category max_overdose_prob. Next, picks (remaining admissible doses) one maximizes probability target biomarker range. default (target_relative = TRUE) target specified relative maximum biomarker level across dose grid relative Emax parameter case parametric model selected (.e. DualEndpointBeta, DualEndpointEmax). However, target_relative = FALSE, absolute biomarker range can used target.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestDualEndpoint-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NextBestDualEndpoint — NextBestDualEndpoint-class","text":"target (numeric) biomarker target range needs reached. example, target range \\((0.8, 1.0)\\) target_relative = TRUE means target dose least \\(80\\%\\) maximum biomarker level. example, \\((0.5, 0.8)\\) mean target dose \\(50\\%\\) \\(80\\%\\) maximum biomarker level. overdose (numeric) overdose toxicity interval (lower limit excluded, upper limit included). max_overdose_prob (proportion) maximum overdose probability allowed. target_relative (flag) target specified relative? TRUE, target interpreted relative maximum, must probability range. Otherwise, target interpreted absolute biomarker range. target_thresh (proportion) target probability threshold needs fulfilled target probability used deriving next best dose (default 0.01).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestDualEndpoint-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestDualEndpoint — NextBestDualEndpoint-class","text":"Typically, end users use .DefaultNextBestDualEndpoint() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestDualEndpoint-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NextBestDualEndpoint — NextBestDualEndpoint-class","text":"","code":"# Target a dose achieving at least 0.9 of maximum biomarker level (efficacy) # and with a probability below 0.25 that prob(DLT) > 0.35 (safety). my_next_best <- NextBestDualEndpoint(   target = c(0.9, 1),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Now, using absolute target on the natural biomarker scale. my_next_best_absolute <- NextBestDualEndpoint(   target = c(200, 300),   overdose = c(0.35, 1),   max_overdose_prob = 0.25,   target_relative = FALSE )"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestInfTheory-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestInfTheory — NextBestInfTheory-class","title":"NextBestInfTheory — NextBestInfTheory-class","text":"NextBestInfTheory class next best dose based information theory proposed https://doi.org/10.1002/sim.8450.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestInfTheory-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestInfTheory — NextBestInfTheory-class","text":"","code":"NextBestInfTheory(target, asymmetry)  .DefaultNextBestInfTheory()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestInfTheory-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextBestInfTheory — NextBestInfTheory-class","text":"target (proportion) see slot definition. asymmetry (number) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestInfTheory-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NextBestInfTheory — NextBestInfTheory-class","text":"target (proportion) target toxicity probability, except 0 1. asymmetry (number) value asymmetry exponent divergence function describes rate penalization overly toxic . must value \\((0, 2)\\) interval.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestInfTheory-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestInfTheory — NextBestInfTheory-class","text":"Typically, end users use .DefaultNextBestInfTheory() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMTD-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestMTD — NextBestMTD-class","title":"NextBestMTD — NextBestMTD-class","text":"NextBestMTD class next best dose based MTD estimate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMTD-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestMTD — NextBestMTD-class","text":"","code":"NextBestMTD(target, derive)  .DefaultNextBestMTD()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMTD-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextBestMTD — NextBestMTD-class","text":"target (proportion) see slot definition. derive (function) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMTD-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NextBestMTD — NextBestMTD-class","text":"target (proportion) target toxicity probability, except 0 1. derive (function) function derives final next best MTD estimate, based vector posterior MTD samples. must therefore accept one one argument, numeric vector, return number.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMTD-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestMTD — NextBestMTD-class","text":"Typically, end users use .DefaultNextBestMTD() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMTD-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NextBestMTD — NextBestMTD-class","text":"","code":"# In the example below, the MTD is defined as the dose for which prob(DLE) = 0.33 # and we will use the 25th quantile of the posterior of MTD as our next best dose. next_best_mtd <- NextBestMTD(   target = 0.33,   derive = function(mtd_samples) {     quantile(mtd_samples, probs = 0.25)   } )"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMaxGain-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestMaxGain — NextBestMaxGain-class","title":"NextBestMaxGain — NextBestMaxGain-class","text":"NextBestMaxGain class find next best dose maximum gain value based pseudo DLT efficacy models without samples. based solely probabilities occurrence DLT values mean efficacy responses obtained using modal estimates DLT efficacy model parameters. two target probabilities occurrence DLT must specified: target probability used trial target probability used end trial. suitable use ModelTox model ModelEff classes (except EffFlexi).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMaxGain-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestMaxGain — NextBestMaxGain-class","text":"","code":"NextBestMaxGain(prob_target_drt, prob_target_eot)  .DefaultNextBestMaxGain()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMaxGain-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextBestMaxGain — NextBestMaxGain-class","text":"prob_target_drt (proportion) see slot definition. prob_target_eot (proportion) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMaxGain-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NextBestMaxGain — NextBestMaxGain-class","text":"prob_target_drt (proportion) target probability occurrence DLT used trial. prob_target_eot (proportion) target probability occurrence DLT used end trial.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMaxGain-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestMaxGain — NextBestMaxGain-class","text":"Typically, end users use .DefaultNextBestMaxGain() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMaxGain-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NextBestMaxGain — NextBestMaxGain-class","text":"","code":"my_next_best <- NextBestMaxGain(0.35, 0.3)"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMaxGainSamples-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestMaxGainSamples — NextBestMaxGainSamples-class","title":"NextBestMaxGainSamples — NextBestMaxGainSamples-class","text":"NextBestMaxGainSamples class find next best dose maximum gain value based pseudo DLT efficacy models DLT efficacy samples. two target probabilities occurrence DLT must specified: target probability used trial target probability used end trial. suitable use ModelTox model ModelEff classes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMaxGainSamples-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestMaxGainSamples — NextBestMaxGainSamples-class","text":"","code":"NextBestMaxGainSamples(prob_target_drt, prob_target_eot, derive, mg_derive)  .DefaultNextBestMaxGainSamples()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMaxGainSamples-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextBestMaxGainSamples — NextBestMaxGainSamples-class","text":"prob_target_drt (proportion) see slot definition NextBestMaxGain. prob_target_eot (proportion) see slot definition NextBestMaxGain. derive (function) see slot definition. mg_derive (function) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMaxGainSamples-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NextBestMaxGainSamples — NextBestMaxGainSamples-class","text":"derive (function) derives, based vector posterior dose samples, target dose probability occurrence DLT equals either prob_target_drt prob_target_eot. must therefore accept one one argument, numeric vector, return number. mg_derive (function) derives, based vector posterior dose samples give maximum gain value, final next best estimate dose gives maximum gain value. must therefore accept one one argument, numeric vector, return number.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMaxGainSamples-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestMaxGainSamples — NextBestMaxGainSamples-class","text":"Typically, end users use .DefaultNextBestMaxGainSamples() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMaxGainSamples-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NextBestMaxGainSamples — NextBestMaxGainSamples-class","text":"","code":"# Target probability of the occurrence of a DLT during the trial is set to 0.35. # Target probability of the occurrence of a DLT at the end of the trial is set to 0.3. # We want the use the 30% posterior quantile (the 30th percentile) of the TD35 # (the dose level with probability of the DLT equals 0.35) and TD30 samples. # For `mg_derive` function (which takes the sample of doses which give the maximum # gain), we will use the 50% posterior quantile (the median or th 50th percentile) # of the sample. my_next_best <- NextBestMaxGainSamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, prob = 0.3))   },   mg_derive = function(mg_samples) {     as.numeric(quantile(mg_samples, prob = 0.5))   } )"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMinDist-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestMinDist — NextBestMinDist-class","title":"NextBestMinDist — NextBestMinDist-class","text":"NextBestMinDist class next best dose based minimum distance target probability.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMinDist-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestMinDist — NextBestMinDist-class","text":"","code":"NextBestMinDist(target)  .DefaultNextBestMinDist()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMinDist-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextBestMinDist — NextBestMinDist-class","text":"target (proportion) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMinDist-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NextBestMinDist — NextBestMinDist-class","text":"target (proportion) single target toxicity probability, except 0 1.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMinDist-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestMinDist — NextBestMinDist-class","text":"Typically, end users use .DefaultNextBestMinDist() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestMinDist-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NextBestMinDist — NextBestMinDist-class","text":"","code":"# In the example below, the MTD is defined as the dose with the toxicity rate # with minimal distance to the target of 30%. next_best_min_dist <- NextBestMinDist(target = 0.3)"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestNCRM-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestNCRM — NextBestNCRM-class","title":"NextBestNCRM — NextBestNCRM-class","text":"NextBestNCRM class next best dose finds next dose high posterior probability target toxicity interval.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestNCRM-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestNCRM — NextBestNCRM-class","text":"","code":"NextBestNCRM(target, overdose, max_overdose_prob)  .DefaultNextBestNCRM()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestNCRM-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextBestNCRM — NextBestNCRM-class","text":"target (numeric) see slot definition. overdose (numeric) see slot definition. max_overdose_prob (proportion) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestNCRM-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NextBestNCRM — NextBestNCRM-class","text":"avoid numerical problems, dose selection algorithm implemented follows: First admissible doses found, probability fall overdose category max_overdose_prob. Next, within admissible doses, maximum probability fall target category calculated. 5% (.e. just numerical error), corresponding dose next recommended dose. Otherwise, highest admissible dose next recommended dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestNCRM-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NextBestNCRM — NextBestNCRM-class","text":"target (numeric) target toxicity interval (limits included). overdose (numeric) overdose toxicity interval (lower limit excluded, upper limit included). used filter probability samples. max_overdose_prob (proportion) maximum overdose posterior probability allowed, except 0 1.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestNCRM-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestNCRM — NextBestNCRM-class","text":"Typically, end users use .DefaultNextBestNCRM() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestNCRM-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NextBestNCRM — NextBestNCRM-class","text":"","code":"# In the example below, the target toxicity interval [0.2, 0.35] while the # overdose interval is (0.35,1]. Finally we would like to constrain the # probability of overdosing below 25%. my_next_best <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestNCRMLoss-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestNCRMLoss — NextBestNCRMLoss-class","title":"NextBestNCRMLoss — NextBestNCRMLoss-class","text":"NextBestNCRMLoss class based NCRM rule loss function. class similar NextBestNCRM class, differences addition loss function re-defined toxicity intervals, see toxicity interval documentation note details. NCRM rule, first admissible doses found, probability fall overdose category max_overdose_prob. Next, within admissible doses, loss function calculated, .e. losses %*% target. Finally, corresponding dose lowest loss function (Bayes risk) recommended next dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestNCRMLoss-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestNCRMLoss — NextBestNCRMLoss-class","text":"","code":"NextBestNCRMLoss(   target,   overdose,   unacceptable = c(1, 1),   max_overdose_prob,   losses )  .DefaultNextBestNCRMLoss()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestNCRMLoss-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextBestNCRMLoss — NextBestNCRMLoss-class","text":"target (numeric) see slot definition. overdose (numeric) see slot definition. unacceptable (numeric) see slot definition. max_overdose_prob (proportion) see slot definition NextBestNCRM. losses (numeric) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestNCRMLoss-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NextBestNCRMLoss — NextBestNCRMLoss-class","text":"target (numeric) target toxicity interval (limits included). probability range excluding 0 1. overdose (numeric) overdose toxicity interval (lower limit excluded, upper limit included) excessive toxicity interval (lower limit excluded, upper limit included) unacceptable provided. probability range. used filter probability samples. unacceptable (numeric) unacceptable toxicity interval (lower limit excluded, upper limit included). must specified overdose include 1. Otherwise, c(1, 1) (default), essentially scalar equals 1. probability range. losses (numeric) vector specifying loss function. unacceptable provided, vector length must 4, otherwise 3.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestNCRMLoss-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestNCRMLoss — NextBestNCRMLoss-class","text":"loss function vector either 3 4 values. loss function values must specified interval, -dosing, target toxicity, overdosing toxicity -dosing, target toxicity, overdosing (excessive) toxicity, unacceptable toxicity intervals. Typically, end users use .DefaultNextBestnCRMLoss() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestNCRMLoss-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NextBestNCRMLoss — NextBestNCRMLoss-class","text":"","code":"# In the example below, the target toxicity interval [0.2, 0.35] while the # overdose interval is (0.35, 1]. We would like to constrain the probability # of overdosing below 25%. The loss function is c(1, 0, 1, 2). my_next_best <- NextBestNCRMLoss(   target = c(0.2, 0.35),   overdose = c(0.35, 0.6),   unacceptable = c(0.6, 1),   max_overdose_prob = 0.25,   losses = c(1, 0, 1, 2) )"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestOrdinal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestOrdinal — NextBestOrdinal-class","title":"NextBestOrdinal — NextBestOrdinal-class","text":"NextBestOrdinal class applying standard NextBest rule results ordinal CRM trial.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestOrdinal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestOrdinal — NextBestOrdinal-class","text":"","code":"NextBestOrdinal(grade, rule)  .DefaultNextBestOrdinal()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestOrdinal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextBestOrdinal — NextBestOrdinal-class","text":"grade (numeric) see slot definition. rule (NextBest) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestOrdinal-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NextBestOrdinal — NextBestOrdinal-class","text":"grade (integer) toxicity grade rule applied. rule (NextBest) standard NextBest rule applied","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestOrdinal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestOrdinal — NextBestOrdinal-class","text":"Typically, end users use .DefaultNextBestOrdinal() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestOrdinal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NextBestOrdinal — NextBestOrdinal-class","text":"","code":"NextBestOrdinal(   grade = 1L,   rule = NextBestMTD(     0.25,     function(mtd_samples) {       quantile(mtd_samples, probs = 0.25)     }   ) ) #> An object of class \"NextBestOrdinal\" #> Slot \"grade\": #> [1] 1 #>  #> Slot \"rule\": #> An object of class \"NextBestMTD\" #> Slot \"target\": #> [1] 0.25 #>  #> Slot \"derive\": #> function (mtd_samples)  #> { #>     quantile(mtd_samples, probs = 0.25) #> } #> <environment: 0x55faaa7b8890> #>  #>"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestProbMTDLTE-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestProbMTDLTE — NextBestProbMTDLTE-class","title":"NextBestProbMTDLTE — NextBestProbMTDLTE-class","text":"NextBestProbMTDLTE class finding next best dose selects dose highest probability toxicity rate less equal toxicity target. dose determined calculating posterior toxicity probability dose per iteration select maximum dose toxicity probability equal target. dose highest frequency selected MTD across iterations next best dose. Placebo considered calculation removed dose grid calculations.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestProbMTDLTE-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestProbMTDLTE — NextBestProbMTDLTE-class","text":"","code":"NextBestProbMTDLTE(target)  .DefaultNextBestProbMTDLTE()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestProbMTDLTE-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextBestProbMTDLTE — NextBestProbMTDLTE-class","text":"target (numeric) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestProbMTDLTE-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NextBestProbMTDLTE — NextBestProbMTDLTE-class","text":"target (numeric) target toxicity probability.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestProbMTDLTE-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestProbMTDLTE — NextBestProbMTDLTE-class","text":"Typically, end users use .DefaultNextBestProbMTDLTE() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestProbMTDLTE-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NextBestProbMTDLTE — NextBestProbMTDLTE-class","text":"","code":"# In the example below, the MTD is defined as the dose with the highest # probability of having a toxicity rate below 30%. next_best_prob_mtd_lte <- NextBestProbMTDLTE(target = 0.3)"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestProbMTDMinDist-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestProbMTDMinDist — NextBestProbMTDMinDist-class","title":"NextBestProbMTDMinDist — NextBestProbMTDMinDist-class","text":"NextBestProbMTDMinDist class finding next best dose selects dose highest probability toxicity rate smallest distance toxicity target. dose determined calculating posterior toxicity probability dose per iteration select dose smallest toxicity probability distance target. dose highest frequency selected MTD across iterations next best dose. Placebo considered next dose reason used calculations. .e. placebo toxicity probability distance target calculated taken account determination next dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestProbMTDMinDist-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestProbMTDMinDist — NextBestProbMTDMinDist-class","text":"","code":"NextBestProbMTDMinDist(target)  .DefaultNextBestProbMTDMinDist()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestProbMTDMinDist-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextBestProbMTDMinDist — NextBestProbMTDMinDist-class","text":"target (numeric) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestProbMTDMinDist-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NextBestProbMTDMinDist — NextBestProbMTDMinDist-class","text":"target (numeric) target toxicity probability.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestProbMTDMinDist-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestProbMTDMinDist — NextBestProbMTDMinDist-class","text":"Typically, end users use .DefaultNextBestProbMTDMinDist() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestProbMTDMinDist-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NextBestProbMTDMinDist — NextBestProbMTDMinDist-class","text":"","code":"# In the example below, the MTD is defined as the dose with the highest # probability of having a toxicity rate with minimal distance # to the target of 30%. next_best_prob_mtd_min_dist <- NextBestProbMTDMinDist(target = 0.3)"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestTD-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestTD — NextBestTD-class","title":"NextBestTD — NextBestTD-class","text":"NextBestTD class find next best dose based pseudo DLT model without samples. Namely, find two next best doses, one allocation trial second final recommendation end trial without involving samples, .e. DLT responses incorporated dose-allocation. based solely probabilities occurrence DLT obtained using modal estimates model parameters. two target probabilities occurrence DLT must specified: target probability used trial target probability used end trial. suitable use ModelTox model class.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestTD-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestTD — NextBestTD-class","text":"","code":".DefaultNextBestTD()  NextBestTD(prob_target_drt, prob_target_eot)"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestTD-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextBestTD — NextBestTD-class","text":"prob_target_drt (proportion) see slot definition. prob_target_eot (proportion) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestTD-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NextBestTD — NextBestTD-class","text":"prob_target_drt (proportion) target probability (except 0 1) occurrence DLT used trial. prob_target_eot (proportion) target probability (except 0 1) occurrence DLT used end trial.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestTD-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestTD — NextBestTD-class","text":"Typically, end users use .DefaultNextBestTD() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestTD-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NextBestTD — NextBestTD-class","text":"","code":"my_next_best <- NextBestTD(0.35, 0.3)"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestTDsamples-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestTDsamples — NextBestTDsamples-class","title":"NextBestTDsamples — NextBestTDsamples-class","text":"NextBestTDsamples class find next best dose based Pseudo DLT model samples. Namely, find two next best doses, one allocation trial second final recommendation end trial. Hence, two target probabilities occurrence DLT must specified: target probability used trial target probability used end trial.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestTDsamples-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestTDsamples — NextBestTDsamples-class","text":"","code":"NextBestTDsamples(prob_target_drt, prob_target_eot, derive)  .DefaultNextBestTDsamples()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestTDsamples-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextBestTDsamples — NextBestTDsamples-class","text":"prob_target_drt (proportion) see slot definition NextBestTD. prob_target_eot (proportion) see slot definition NextBestTD. derive (function) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestTDsamples-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"NextBestTDsamples — NextBestTDsamples-class","text":"derive (function) derives, based vector posterior dose samples, target dose probability occurrence DLT equals either prob_target_drt prob_target_eot. must therefore accept one one argument, numeric vector, return number.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestTDsamples-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestTDsamples — NextBestTDsamples-class","text":"Typically, end users use .DefaultNextBestTDsamples() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestTDsamples-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NextBestTDsamples — NextBestTDsamples-class","text":"","code":"# Target probability of the occurrence of a DLT during the trial is set to 0.35. # Target probability of the occurrence of a DLT at the end of the trial is set to 0.3. # We want the use the 30% posterior quantile (the 30th percentile) of the TD35 # (the dose level with probability of the DLT equals 0.35) and TD30 samples. my_next_best <- NextBestTDsamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, probs = 0.3))   } )"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestThreePlusThree-class.html","id":null,"dir":"Reference","previous_headings":"","what":"NextBestThreePlusThree — NextBestThreePlusThree-class","title":"NextBestThreePlusThree — NextBestThreePlusThree-class","text":"NextBestThreePlusThree class next best dose implements classical 3+3 dose recommendation. input required, hence class slots.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestThreePlusThree-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextBestThreePlusThree — NextBestThreePlusThree-class","text":"","code":"NextBestThreePlusThree()  .DefaultNextBestThreePlusThree()"},{"path":"https://openpharma.github.io/crmPack/reference/NextBestThreePlusThree-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"NextBestThreePlusThree — NextBestThreePlusThree-class","text":"Typically, end users use .DefaultNextBestThreePlusThree() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/NextBestThreePlusThree-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NextBestThreePlusThree — NextBestThreePlusThree-class","text":"","code":"# Next best dose class object using the classical 3+3 design. my_next_best <- NextBestThreePlusThree()"},{"path":"https://openpharma.github.io/crmPack/reference/OneParExpPrior-class.html","id":null,"dir":"Reference","previous_headings":"","what":"OneParExpPrior — OneParExpPrior-class","title":"OneParExpPrior — OneParExpPrior-class","text":"OneParExpPrior class standard CRM exponential prior power parameter skeleton prior probabilities. implementation version one-parameter CRM (O’Quigley et al. 1990).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/OneParExpPrior-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OneParExpPrior — OneParExpPrior-class","text":"","code":"OneParExpPrior(skel_probs, dose_grid, lambda)  .DefaultOneParExpPrior()"},{"path":"https://openpharma.github.io/crmPack/reference/OneParExpPrior-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OneParExpPrior — OneParExpPrior-class","text":"skel_probs see slot definition. dose_grid (numeric) dose grid. must must sorted vector length skel_probs. lambda see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/OneParExpPrior-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"OneParExpPrior — OneParExpPrior-class","text":"skel_fun (function) function calculate prior DLT probabilities. skel_fun_inv (function) inverse function skel_fun. skel_probs (numeric) skeleton prior probabilities. vector unique sorted probability values 0 1. lambda (number) rate parameter prior exponential distribution theta.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/OneParExpPrior-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"OneParExpPrior — OneParExpPrior-class","text":"Typically, end users use .DefaultOneparExpPrior() function. Typically, end users use .DefaultOneParLogNormalPrior() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/OneParExpPrior-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OneParExpPrior — OneParExpPrior-class","text":"","code":"my_model <- OneParExpPrior(   skel_probs = c(0.1, 0.3, 0.5, 0.7, 0.9),   dose_grid = 1:5,   lambda = 2 )"},{"path":"https://openpharma.github.io/crmPack/reference/OneParLogNormalPrior-class.html","id":null,"dir":"Reference","previous_headings":"","what":"OneParLogNormalPrior — OneParLogNormalPrior-class","title":"OneParLogNormalPrior — OneParLogNormalPrior-class","text":"OneParLogNormalPrior class standard CRM normal prior log power parameter skeleton prior probabilities.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/OneParLogNormalPrior-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OneParLogNormalPrior — OneParLogNormalPrior-class","text":"","code":"OneParLogNormalPrior(skel_probs, dose_grid, sigma2)  .DefaultOneParLogNormalPrior()"},{"path":"https://openpharma.github.io/crmPack/reference/OneParLogNormalPrior-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OneParLogNormalPrior — OneParLogNormalPrior-class","text":"skel_probs (numeric) skeleton prior probabilities. vector unique sorted probability values 0 1. dose_grid (numeric) dose grid. must must sorted vector length skel_probs. sigma2 (number) prior variance log power parameter alpha.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/OneParLogNormalPrior-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OneParLogNormalPrior — OneParLogNormalPrior-class","text":"instance OneParLogNormalPrior class","code":""},{"path":"https://openpharma.github.io/crmPack/reference/OneParLogNormalPrior-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"OneParLogNormalPrior — OneParLogNormalPrior-class","text":"skel_fun (function) function calculate prior DLT probabilities. skel_fun_inv (function) inverse function skel_fun. skel_probs (numeric) skeleton prior probabilities. vector unique sorted probability values 0 1. sigma2 (number) prior variance log power parameter alpha.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/OneParLogNormalPrior-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OneParLogNormalPrior — OneParLogNormalPrior-class","text":"","code":"my_model <- OneParLogNormalPrior(   skel_probs = seq(from = 0.1, to = 0.9, length = 5),   dose_grid = 1:5,   sigma2 = 2 )"},{"path":"https://openpharma.github.io/crmPack/reference/ProbitLogNormal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ProbitLogNormal — ProbitLogNormal-class","title":"ProbitLogNormal — ProbitLogNormal-class","text":"ProbitLogNormal class probit regression model bivariate normal prior intercept log slope.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ProbitLogNormal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ProbitLogNormal — ProbitLogNormal-class","text":"","code":"ProbitLogNormal(mean, cov, ref_dose = 1)  .DefaultProbitLogNormal()"},{"path":"https://openpharma.github.io/crmPack/reference/ProbitLogNormal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ProbitLogNormal — ProbitLogNormal-class","text":"mean (numeric) prior mean vector. cov (matrix) prior covariance matrix. precision matrix prec internally calculated inverse cov. ref_dose (number) reference dose \\(x*\\) (strictly positive number).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ProbitLogNormal-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ProbitLogNormal — ProbitLogNormal-class","text":"covariate natural logarithm dose \\(x\\) divided reference dose \\(x*\\), .e.: $$probit[p(x)] = alpha0 + alpha1 * log(x/x*),$$ \\(p(x)\\) probability observing DLT given dose \\(x\\). prior $$(alpha0, log(alpha1)) ~ Normal(mean, cov).$$","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ProbitLogNormal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"ProbitLogNormal — ProbitLogNormal-class","text":"model also used DualEndpoint classes, class can used check prior assumptions dose-toxicity model, even sampling prior distribution dual endpoint model possible. Typically, end users use .DefaultProbitLogNormal() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/ProbitLogNormal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ProbitLogNormal — ProbitLogNormal-class","text":"","code":"my_model <- ProbitLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 7.2 )"},{"path":"https://openpharma.github.io/crmPack/reference/ProbitLogNormalRel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ProbitLogNormalRel — ProbitLogNormalRel-class","title":"ProbitLogNormalRel — ProbitLogNormalRel-class","text":"ProbitLogNormalRel class probit regression model bivariate normal prior intercept log slope.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ProbitLogNormalRel-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ProbitLogNormalRel — ProbitLogNormalRel-class","text":"","code":"ProbitLogNormalRel(mean, cov, ref_dose = 1)  .DefaultProbitLogNormalRel()"},{"path":"https://openpharma.github.io/crmPack/reference/ProbitLogNormalRel-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ProbitLogNormalRel — ProbitLogNormalRel-class","text":"mean (numeric) prior mean vector. cov (matrix) prior covariance matrix. precision matrix prec internally calculated inverse cov. ref_dose (number) reference dose \\(x*\\) (strictly positive number).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ProbitLogNormalRel-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ProbitLogNormalRel — ProbitLogNormalRel-class","text":"covariate dose \\(x\\) divided reference dose \\(x*\\), .e.: $$probit[p(x)] = alpha0 + alpha1 * x/x*,$$ \\(p(x)\\) probability observing DLT given dose \\(x\\). prior $$(alpha0, log(alpha1)) ~ Normal(mean, cov).$$","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ProbitLogNormalRel-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"ProbitLogNormalRel — ProbitLogNormalRel-class","text":"model also used DualEndpoint classes, class can used check prior assumptions dose-toxicity model, even sampling prior distribution dual endpoint model possible. Typically, end users use .DefaultProbitLogNormalRel() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/ProbitLogNormalRel-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ProbitLogNormalRel — ProbitLogNormalRel-class","text":"","code":"my_model <- ProbitLogNormalRel(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2) )"},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualFlexiSimulations-class.html","id":null,"dir":"Reference","previous_headings":"","what":"PseudoDualFlexiSimulations — PseudoDualFlexiSimulations-class","title":"PseudoDualFlexiSimulations — PseudoDualFlexiSimulations-class","text":"class captures trial simulations design using DLE efficacy responses using EffFlexi efficacy model. extends PseudoDualSimulations adding capability capture sigma2betaW estimates.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualFlexiSimulations-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PseudoDualFlexiSimulations — PseudoDualFlexiSimulations-class","text":"","code":"PseudoDualFlexiSimulations(sigma2_beta_w_est, ...)  .DefaultPseudoDualFlexiSimulations()"},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualFlexiSimulations-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PseudoDualFlexiSimulations — PseudoDualFlexiSimulations-class","text":"sigma2_beta_w_est (numeric) vector final posterior mean sigma2betaW estimates ... additional parameters PseudoDualSimulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualFlexiSimulations-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"PseudoDualFlexiSimulations — PseudoDualFlexiSimulations-class","text":"sigma2_beta_w_est (numeric) vector final posterior mean sigma2betaW estimates","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualFlexiSimulations-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"PseudoDualFlexiSimulations — PseudoDualFlexiSimulations-class","text":"Typically, end users use .DefaultPseudoFlexiSimulations() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualSimulations-class.html","id":null,"dir":"Reference","previous_headings":"","what":"PseudoDualSimulations — PseudoDualSimulations-class","title":"PseudoDualSimulations — PseudoDualSimulations-class","text":"class conducts trial simulations designs using DLE efficacy responses. defines final values efficacy fit DLE, estimates Gstar, optimal dose sigma2.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualSimulations-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PseudoDualSimulations — PseudoDualSimulations-class","text":"","code":"PseudoDualSimulations(   fit_eff,   final_gstar_estimates,   final_gstar_at_dose_grid,   final_gstar_cis,   final_gstar_ratios,   final_optimal_dose,   final_optimal_dose_at_dose_grid,   sigma2_est,   ... )  .DefaultPseudoDualSimulations()"},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualSimulations-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PseudoDualSimulations — PseudoDualSimulations-class","text":"fit_eff (list) see slot definition. final_gstar_estimates (numeric) see slot definition. final_gstar_at_dose_grid (numeric) see slot definition. final_gstar_cis (list) see slot definition. final_gstar_ratios (numeric) see slot definition. final_optimal_dose (numeric) see slot definition. final_optimal_dose_at_dose_grid (numeric) see slot definition. sigma2_est (numeric) see slot definition. ... additional parameters PseudoSimulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualSimulations-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"PseudoDualSimulations — PseudoDualSimulations-class","text":"fit_eff (list) final values efficacy fit. final_gstar_estimates (numeric) final Gstar estimates. final_gstar_at_dose_grid (numeric) final Gstar estimates dose grid. final_gstar_cis (list) list 95% confidence interval Gstar estimates. final_gstar_ratios (numeric) ratios confidence intervals Gstar estimates. final_optimal_dose (numeric) final optimal dose. final_optimal_dose_at_dose_grid (numeric) final optimal dose dose grid. sigma2_est (numeric) final sigma2 estimates.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualSimulations-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"PseudoDualSimulations — PseudoDualSimulations-class","text":"use .DefaultPseudoDualSimulations() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualSimulationsSummary-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for the summary of the dual responses simulations using pseudo models — PseudoDualSimulationsSummary-class","title":"Class for the summary of the dual responses simulations using pseudo models — PseudoDualSimulationsSummary-class","text":"contains slots PseudoSimulationsSummary object. addition slots parent class PseudoSimulationsSummary, contains four slots efficacy model fit information.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualSimulationsSummary-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for the summary of the dual responses simulations using pseudo models — PseudoDualSimulationsSummary-class","text":"","code":".DefaultPseudoDualSimulationsSummary()"},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualSimulationsSummary-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for the summary of the dual responses simulations using pseudo models — PseudoDualSimulationsSummary-class","text":"Note objects created users, therefore initialization function provided class.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualSimulationsSummary-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for the summary of the dual responses simulations using pseudo models — PseudoDualSimulationsSummary-class","text":"targetGstar target dose level gain value maximum targetGstarAtDoseGrid dose level dose Grid closest Gstar GstarSummary six-number table summary (lowest, 25th, 50th (median), 75th percentile, mean highest value) final Gstar values obtained across simulations ratioGstarSummary six-number summary table ratios upper lower 95% credibility intervals final Gstar across simulations EffFitAtDoseMostSelected fitted expected mean efficacy value dose often selected meanEffFit list mean, lower (2.5%) upper (97.5%) quantiles fitted expected efficacy value dose level.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoDualSimulationsSummary-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Class for the summary of the dual responses simulations using pseudo models — PseudoDualSimulationsSummary-class","text":"Typically, end users use .DefaultPseudoDualSimulationsSummary() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoSimulations-class.html","id":null,"dir":"Reference","previous_headings":"","what":"PseudoSimulations — PseudoSimulations-class","title":"PseudoSimulations — PseudoSimulations-class","text":"class captures trial simulations designs using pseudo model. additional slots fit stop_reasons compared general class GeneralSimulations.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoSimulations-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PseudoSimulations — PseudoSimulations-class","text":"","code":"PseudoSimulations(   fit,   final_td_target_during_trial_estimates,   final_td_target_end_of_trial_estimates,   final_td_target_during_trial_at_dose_grid,   final_td_target_end_of_trial_at_dose_grid,   final_tdeot_cis,   final_tdeot_ratios,   final_cis,   final_ratios,   stop_report,   stop_reasons,   ... )  .DefaultPseudoSimulations()"},{"path":"https://openpharma.github.io/crmPack/reference/PseudoSimulations-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PseudoSimulations — PseudoSimulations-class","text":"fit (list) see slot definition. final_td_target_during_trial_estimates (numeric) see slot definition. final_td_target_end_of_trial_estimates (numeric) see slot definition. final_td_target_during_trial_at_dose_grid (numeric) see slot definition. final_td_target_end_of_trial_at_dose_grid (numeric) see slot definition. final_tdeot_cis (list) see slot definition. final_tdeot_ratios (numeric) see slot definition. final_cis (list) see slot definition. final_ratios (numeric) see slot definition. stop_report see PseudoSimulations stop_reasons (list) see slot definition. ... additional parameters GeneralSimulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoSimulations-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"PseudoSimulations — PseudoSimulations-class","text":"fit (list) final fit values. final_td_target_during_trial_estimates (numeric) final estimates td_target_during_trial. final_td_target_end_of_trial_estimates (numeric) final estimates td_target_end_of_trial. final_td_target_during_trial_at_dose_grid (numeric)  dose levels dose grid closest final td_target_during_trial estimates. final_td_target_end_of_trial_at_dose_grid (numeric)  dose levels dose grid closest final td_target_end_of_trial estimates. final_tdeot_cis (list) 95% credibility intervals final estimates td_target_end_of_trial. final_tdeot_ratios (numeric) ratio upper lower 95% credibility intervals td_target_end_of_trial. final_cis (list) final 95% credibility intervals td_target_end_of_trial estimates. final_ratios (numeric) final ratios upper lower 95% credibility interval td_target_end_of_trial. stop_report (matrix) outcomes stopping rules. stop_reasons (list) reasons stopping simulation run.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoSimulations-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"PseudoSimulations — PseudoSimulations-class","text":"Typically, end users use .DefaultPseudoSimulations() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoSimulationsSummary-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for the summary of pseudo-models simulations output — PseudoSimulationsSummary-class","title":"Class for the summary of pseudo-models simulations output — PseudoSimulationsSummary-class","text":"Note objects created users, therefore initialization function provided class.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/PseudoSimulationsSummary-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for the summary of pseudo-models simulations output — PseudoSimulationsSummary-class","text":"targetEndOfTrial target probability DLE wanted end trial targetDoseEndOfTrial dose level corresponds target probability DLE wanted end trial, TDEOT targetDoseEndOfTrialAtDoseGrid dose level dose grid corresponds target probability DLE wanted end trial targetDuringTrial target probability DLE wanted trial targetDoseDuringTrial dose level corresponds target probability DLE wanted trial. TDDT targetDoseDuringTrialAtDoseGrid dose level dose grid corresponds target probability DLE wanted trial TDEOTSummary six-number table summary, include lowest, 25th precentile (lower quartile), 50th percentile (median), mean, 27th percentile highest values final dose levels obtained corresponds target probability DLE want end trial across simulations TDDTSummary six-number table summary, include lowest, 25th precentile (lower quartile), 50th percentile (median), mean, 27th percentile highest values final dose levels obtained corresponds target probability DLE want trial across simulations FinalDoseRecSummary six-number table summary, include lowest, 25th precentile (lower quartile), 50th percentile (median), mean, 27th percentile highest values final optimal doses, either TDEOT DLE response incorporated escalation procedure minimum TDEOT Gstar DLE efficacy responses incorporated, across simulations ratioTDEOTSummary six-number summary table final ratios upper lower 95% credibility intervals final TDEOTs across simulations FinalRatioSummary six-number summary table final ratios upper lower 95% credibility intervals final optimal doses across simulations #@slot doseRec dose level recommend subsequent study nsim number simulations propDLE proportions DLE trials meanToxRisk mean toxicity risks patients doseSelected doses selected MTD (targetDoseEndOfTrial) toxAtDosesSelected true toxicity doses selected propAtTargetEndOfTrial Proportion trials selecting doseGrid closest MTD, targetDoseEndOfTrial propAtTargetDuringTrial Proportion trials selecting doseGrid closest targetDoseDuringTrial doseMostSelected dose often selected MTD obsToxRateAtDoseMostSelected observed toxicity rate dose often selected nObs number patients overall nAboveTargetEndOfTrial number patients treated targetDoseEndOfTrial nAboveTargetDuringTrial number patients treated targetDoseDuringTrial doseGrid dose grid used fitAtDoseMostSelected fitted toxicity rate dose often selected meanFit list average, lower (2.5%) upper (97.5%) quantiles mean fitted toxicity dose level stop_report matrix stopping rule outcomes","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Quantiles2LogisticNormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert prior quantiles (lower, median, upper) to logistic (log) normal model — Quantiles2LogisticNormal","title":"Convert prior quantiles (lower, median, upper) to logistic (log) normal model — Quantiles2LogisticNormal","text":"function uses generalized simulated annealing optimize LogisticNormal model close possible given prior quantiles.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Quantiles2LogisticNormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert prior quantiles (lower, median, upper) to logistic (log) normal model — Quantiles2LogisticNormal","text":"","code":"Quantiles2LogisticNormal(   dosegrid,   refDose,   lower,   median,   upper,   level = 0.95,   logNormal = FALSE,   parstart = NULL,   parlower = c(-10, -10, 0, 0, -0.95),   parupper = c(10, 10, 10, 10, 0.95),   seed = 12345,   verbose = TRUE,   control = list(threshold.stop = 0.01, maxit = 50000, temperature = 50000, max.time =     600) )"},{"path":"https://openpharma.github.io/crmPack/reference/Quantiles2LogisticNormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert prior quantiles (lower, median, upper) to logistic (log) normal model — Quantiles2LogisticNormal","text":"dosegrid dose grid refDose reference dose lower lower quantiles median medians upper upper quantiles level credible level (lower, upper) intervals (default: 0.95) logNormal use log-normal prior? (default) otherwise, normal prior logistic regression coefficients used parstart starting values parameters. default, determined medians supplied. parlower lower bounds parameters (intercept alpha slope beta, corresponding standard deviations correlation.) parupper upper bounds parameters seed seed random number generation verbose verbose? (default) control additional options optimisation routine, see GenSA details","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Quantiles2LogisticNormal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert prior quantiles (lower, median, upper) to logistic (log) normal model — Quantiles2LogisticNormal","text":"list best approximating model (LogisticNormal LogisticLogNormal), resulting quantiles, required quantiles distance required quantiles, well final parameters (used running algorithm second time)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Report.html","id":null,"dir":"Reference","previous_headings":"","what":"A Reference Class to represent sequentially updated reporting objects. — Report","title":"A Reference Class to represent sequentially updated reporting objects. — Report","text":"Reference Class represent sequentially updated reporting objects.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Report.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"A Reference Class to represent sequentially updated reporting objects. — Report","text":"object object report df data frame columns sequentially added dfNames names strings sequentially added","code":""},{"path":"https://openpharma.github.io/crmPack/reference/RuleDesign-class.html","id":null,"dir":"Reference","previous_headings":"","what":"RuleDesign — RuleDesign-class","title":"RuleDesign — RuleDesign-class","text":"RuleDesign class rule-based designs. difference class Design class RuleDesign contain model, stopping increments slots.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/RuleDesign-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RuleDesign — RuleDesign-class","text":"","code":"RuleDesign(nextBest, cohort_size, data, startingDose)  .DefaultRuleDesign()  ThreePlusThreeDesign(doseGrid)"},{"path":"https://openpharma.github.io/crmPack/reference/RuleDesign-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RuleDesign — RuleDesign-class","text":"nextBest (NextBest) see slot definition. cohort_size (CohortSize) see slot definition. data (Data) see slot definition. startingDose (number) see slot definition. doseGrid (numeric) dose grid used (sorted).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/RuleDesign-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"RuleDesign — RuleDesign-class","text":"ThreePlusThreeDesign(): creates new 3+3 design object dose grid.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/RuleDesign-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"RuleDesign — RuleDesign-class","text":"nextBest (NextBest) find next best dose. cohort_size (CohortSize) rules cohort sizes. data (Data) specifies dose grid, previous data, etc. startingDose (number) starting dose, must lie dose grid data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/RuleDesign-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"RuleDesign — RuleDesign-class","text":"Typically, end users use .DefaultRuleDesign() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/RuleDesign-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RuleDesign — RuleDesign-class","text":"","code":"# Specify the design to run simulations. The design comprises a model, # the escalation rule, starting data, a cohort size and a starting dose.  # Initialing a 3+3 design with constant cohort size of 3 and starting dose equal 5. my_design <- RuleDesign(   nextBest = NextBestThreePlusThree(),   cohort_size = CohortSizeConst(size = 3L),   data = Data(doseGrid = c(5, 10, 15, 25, 35, 50, 80)),   startingDose = 5 ) # Initialing a 3+3 design with constant cohort size of 3 and starting dose equal 8. my_design <- ThreePlusThreeDesign(doseGrid = c(8, 10, 15, 25, 35, 50, 80))"},{"path":"https://openpharma.github.io/crmPack/reference/RuleDesignOrdinal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"RuleDesignOrdinal — RuleDesignOrdinal-class","title":"RuleDesignOrdinal — RuleDesignOrdinal-class","text":"RuleDesignOrdinal class rule-based designs. difference class DesignOrdinal class RuleDesignOrdinal contain model, stopping increments slots.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/RuleDesignOrdinal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RuleDesignOrdinal — RuleDesignOrdinal-class","text":"","code":"RuleDesignOrdinal(next_best, cohort_size, data, starting_dose)  .DefaultRuleDesignOrdinal()"},{"path":"https://openpharma.github.io/crmPack/reference/RuleDesignOrdinal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RuleDesignOrdinal — RuleDesignOrdinal-class","text":"next_best (NextBestOrdinal) see slot definition. cohort_size (CohortSizeOrdinal) see slot definition. data (DataOrdinal) see slot definition. starting_dose (number) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/RuleDesignOrdinal-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"RuleDesignOrdinal — RuleDesignOrdinal-class","text":"next_best (NextBestOrdinal) find next best dose. cohort_size (CohortSizeOrdinal) rules cohort sizes. data (DataOrdinal) specifies dose grid, previous data, etc. starting_dose (number) starting dose, must lie dose grid data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/RuleDesignOrdinal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"RuleDesignOrdinal — RuleDesignOrdinal-class","text":"Typically, end users use .DefaultRuleDesignOrdinal() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/RuleDesignOrdinal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RuleDesignOrdinal — RuleDesignOrdinal-class","text":"","code":"RuleDesignOrdinal(   next_best = NextBestOrdinal(     1L,     NextBestMTD(       target = 0.25,       derive = function(x) median(x, na.rm = TRUE)     )   ),   cohort_size = CohortSizeOrdinal(1L, CohortSizeConst(size = 3L)),   data = DataOrdinal(doseGrid = c(5, 10, 15, 25, 35, 50, 80)),   starting_dose = 5 ) #> An object of class \"RuleDesignOrdinal\" #> Slot \"next_best\": #> An object of class \"NextBestOrdinal\" #> Slot \"grade\": #> [1] 1 #>  #> Slot \"rule\": #> An object of class \"NextBestMTD\" #> Slot \"target\": #> [1] 0.25 #>  #> Slot \"derive\": #> function (x)  #> median(x, na.rm = TRUE) #> <environment: 0x55faa4ae8f38> #>  #>  #>  #> Slot \"cohort_size\": #> An object of class \"CohortSizeOrdinal\" #> Slot \"grade\": #> [1] 1 #>  #> Slot \"rule\": #> An object of class \"CohortSizeConst\" #> Slot \"size\": #> [1] 3 #>  #>  #>  #> Slot \"data\": #> An object of class \"DataOrdinal\" #> Slot \"x\": #> numeric(0) #>  #> Slot \"y\": #> integer(0) #>  #> Slot \"doseGrid\": #> [1]  5 10 15 25 35 50 80 #>  #> Slot \"nGrid\": #> [1] 7 #>  #> Slot \"xLevel\": #> integer(0) #>  #> Slot \"yCategories\": #> No DLT    DLT  #>      0      1  #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #> integer(0) #>  #> Slot \"cohort\": #> integer(0) #>  #> Slot \"nObs\": #> [1] 0 #>  #>  #> Slot \"starting_dose\": #> [1] 5 #>"},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindow-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SafetyWindow — SafetyWindow-class","title":"SafetyWindow — SafetyWindow-class","text":"SafetyWindow class safety window.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindow-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SafetyWindow — SafetyWindow-class","text":"","code":".DefaultSafetyWindow()"},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindow-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"SafetyWindow — SafetyWindow-class","text":"Typically, end users use .DefaultSafetyWindow() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindowConst-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SafetyWindowConst — SafetyWindowConst-class","title":"SafetyWindowConst — SafetyWindowConst-class","text":"SafetyWindowConst class safety window length used gap kept constant across cohorts (though may vary within cohort).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindowConst-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SafetyWindowConst — SafetyWindowConst-class","text":"","code":"SafetyWindowConst(gap, follow, follow_min)  .DefaultSafetyWindowConst()"},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindowConst-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SafetyWindowConst — SafetyWindowConst-class","text":"gap see slot definition. follow see slot definition. follow_min see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindowConst-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SafetyWindowConst — SafetyWindowConst-class","text":"gap (integer) vector, constant gap patients. follow (count) long follow patient. period time patient cohort needs followed next cohort opens. follow_min (count) minimum follow . least one patient cohort needs followed minimal follow time.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindowConst-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"SafetyWindowConst — SafetyWindowConst-class","text":"Typically, end users use .DefaultSafetyWindowConst() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindowConst-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SafetyWindowConst — SafetyWindowConst-class","text":"","code":"# This is to have along the study constant parameters settings of safety window # length, regardless of the cohort size. my_win_len <- SafetyWindowConst(   gap = c(7, 5, 3),   follow = 7,   follow_min = 14 )"},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindowSize-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SafetyWindowSize — SafetyWindowSize-class","title":"SafetyWindowSize — SafetyWindowSize-class","text":"SafetyWindowSize class safety window length based cohort size. class used decide rolling rule clinical perspective.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindowSize-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SafetyWindowSize — SafetyWindowSize-class","text":"","code":"SafetyWindowSize(gap, size, follow, follow_min)  .DefaultSafetyWindowSize()"},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindowSize-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SafetyWindowSize — SafetyWindowSize-class","text":"gap see slot definition. size see slot definition. follow see slot definition. follow_min see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindowSize-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SafetyWindowSize — SafetyWindowSize-class","text":"gap (list) observed period previous patient next patient can dosed. used follows. instance, cohort size 4 want specify three time intervals four consecutive patients, .e. 7 units time 1st 2nd patient, 5 units 2nd 3rd one, finally 3 units 3rd 4th one, , gap = list(c(7L, 5L, 3L)). Sometimes, want interval 1st 2nd patient increased safety consideration rest time intervals remain constant, regardless cohort size . , gap = list(c(7L, 3L)) package automatically repeat last element vector remaining time intervals. size (integer) vector left bounds relevant cohort size intervals. used follows. instance, want change gap based cohort size, .e. time interval 1st 2nd patient = 9 units time rest time intervals 5 units time cohort size equal larger 4. time interval 1st 2nd patient = 7 units time rest time intervals 3 units time cohort size smaller 4, specify gap = list(c(7, 3), c(9, 5)) size = c(0L, 4L). means, right bounds intervals excluded interval, last interval goes last value infinity. follow (count) period time patient cohort needs followed next cohort opens. follow_min (count) least one patient cohort needs followed minimal follow time.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindowSize-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"SafetyWindowSize — SafetyWindowSize-class","text":"Typically, end users use .DefaultSafetyWindowSize() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/SafetyWindowSize-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SafetyWindowSize — SafetyWindowSize-class","text":"","code":"# Rule for having patient gap (7,3,3,3,...) for cohort size < 4, and # patient gap (9,5,5,5...) for cohort size >= 4. my_window_len <- SafetyWindowSize(   gap = list(c(7, 3), c(9, 5)),   size = c(1, 4),   follow = 7,   follow_min = 14 )"},{"path":"https://openpharma.github.io/crmPack/reference/Samples-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Samples — Samples-class","title":"Samples — Samples-class","text":"Samples class store MCMC samples.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Samples-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Samples — Samples-class","text":"","code":"Samples(data, options)  .DefaultSamples()"},{"path":"https://openpharma.github.io/crmPack/reference/Samples-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Samples — Samples-class","text":"data see slot definition. options see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Samples-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Samples — Samples-class","text":"data (list) MCMC samples parameter. entry list must vector (case scalar parameter) matrix (case vector-valued parameter) samples. case matrix, every row separate sample, columns correspond dimension parameter. options (McmcOptions) MCMC options used generate samples.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Samples-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Samples — Samples-class","text":"Typically, end users use .DefaultSamples() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Samples-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Samples — Samples-class","text":"","code":"# The MCMC options that were used to generate the samples. my_options <- McmcOptions(   burnin = 1000,   step = 2,   samples = 1000 )  # Create an object of class 'Samples' # Here the parameters 'alpha' and 'beta' are randomly generated. Of course, in # a real example these would be a samples coming from MCMC procedures. my_samples <- Samples(   data = list(alpha = rnorm(1000), beta = rnorm(1000)),   options = my_options )"},{"path":"https://openpharma.github.io/crmPack/reference/Simulations-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulations — Simulations-class","title":"Simulations — Simulations-class","text":"class captures trial simulations model based designs. Additional slots fit, stop_reasons, stop_report,additional_stats compared general class GeneralSimulations.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Simulations-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulations — Simulations-class","text":"","code":"Simulations(fit, stop_reasons, stop_report, additional_stats, ...)  .DefaultSimulations()"},{"path":"https://openpharma.github.io/crmPack/reference/Simulations-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulations — Simulations-class","text":"fit (list) see slot definition. stop_reasons (list) see slot definition. stop_report see Simulations additional_stats (list) see slot definition. ... additional parameters GeneralSimulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Simulations-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Simulations — Simulations-class","text":"fit (list) final fits stop_reasons (list) stopping reasons simulation run stop_report matrix stopping rule outcomes additional_stats list additional statistical summary","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Simulations-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulations — Simulations-class","text":"Typically, end users use .DefaultSimulations() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Simulations-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulations — Simulations-class","text":"","code":"data <- list(   Data(     x = 1:2,     y = 0:1,     doseGrid = 1:2,     ID = 1L:2L,     cohort = 1L:2L   ),   Data(     x = 3:4,     y = 0:1,     doseGrid = 3:4,     ID = 1L:2L,     cohort = 1L:2L   ) )  doses <- c(1, 2)  seed <- as.integer(123)  fit <- list(   c(0.1, 0.2),   c(0.3, 0.4) )  stop_report <- matrix(c(TRUE, FALSE), nrow = 2)  stop_reasons <- list(\"A\", \"B\")  additional_stats <- list(a = 1, b = 1)  simulations <- Simulations(   fit = fit,   stop_report = stop_report,   stop_reasons = stop_reasons,   additional_stats = additional_stats,   data,   doses,   seed )"},{"path":"https://openpharma.github.io/crmPack/reference/SimulationsSummary-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SimulationsSummary — SimulationsSummary-class","title":"SimulationsSummary — SimulationsSummary-class","text":"addition slots parent class GeneralSimulationsSummary, contains two slots model fit information.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/SimulationsSummary-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SimulationsSummary — SimulationsSummary-class","text":"","code":".DefaultSimulationsSummary()"},{"path":"https://openpharma.github.io/crmPack/reference/SimulationsSummary-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"SimulationsSummary — SimulationsSummary-class","text":"stop_report (matrix) matrix stopping rule outcomes fit_at_dose_most_selected (numeric) fitted toxicity rate dose often selected additional_stats (list) list additional statistical summary mean_fit (list) list average, lower (2.5%) upper (97.5%) quantiles mean fitted toxicity dose level","code":""},{"path":"https://openpharma.github.io/crmPack/reference/SimulationsSummary-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"SimulationsSummary — SimulationsSummary-class","text":"Typically, end users use .DefaultSimulationsSummary() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StartingDose-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StartingDose — StartingDose-class","title":"StartingDose — StartingDose-class","text":"StartingDose simple wrapper class startingDose slot design classes. used internally knit_print methods","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StartingDose-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StartingDose — StartingDose-class","text":"","code":"StartingDose(starting_dose)  .DefaultStartingDose()"},{"path":"https://openpharma.github.io/crmPack/reference/StartingDose-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StartingDose — StartingDose-class","text":"starting_dose (positive_number) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StartingDose-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StartingDose — StartingDose-class","text":"starting_dose (numeric) starting dose","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StartingDose-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StartingDose — StartingDose-class","text":"Typically, end users use .DefaultStartingDose() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Stopping-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Stopping — Stopping-class","title":"Stopping — Stopping-class","text":"Stopping class stopping rules.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Stopping-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Stopping — Stopping-class","text":"report_label (string) label stopping report. meaning parameter twofold. equal NA_character_ (default), report_label used report . Otherwise, specified empty character (.e. character(0)) user constructor, default, class-specific label created slot. Finally, remaining cases, user can provide custom label.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/StoppingAll-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingAll — StoppingAll-class","title":"StoppingAll — StoppingAll-class","text":"StoppingAll class testing stopping rule consists many single stopping rules turn objects class Stopping. single stopping rules must satisfied order result rule TRUE.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingAll-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingAll — StoppingAll-class","text":"","code":"StoppingAll(stop_list, report_label = NA_character_)  .DefaultStoppingAll()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingAll-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingAll — StoppingAll-class","text":"stop_list (list) see slot definition. report_label (string)  see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingAll-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingAll — StoppingAll-class","text":"stop_list (list) list stopping rules. report_label label reporting","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingAll-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingAll — StoppingAll-class","text":"Typically, end users use .DefaultStoppingAll() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingAll-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingAll — StoppingAll-class","text":"","code":"# Define some stopping rules. my_stopping1 <- StoppingMinCohorts(nCohorts = 3) my_stopping2 <- StoppingTargetProb(target = c(0.2, 0.35), prob = 0.5) my_stopping3 <- StoppingMinPatients(nPatients = 20)  # Create a list of stopping rules (of class `StoppingAll`) which would then be # summarized by the `all` function, meaning that the study would be stopped only # if all of the single stopping rules are `TRUE`. my_stopping <- StoppingAll(   stop_list = c(my_stopping1, my_stopping2, my_stopping3) )"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingAny-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingAny — StoppingAny-class","title":"StoppingAny — StoppingAny-class","text":"StoppingAny class testing stopping rule consists many single stopping rules turn objects class Stopping. least one single stopping rule must satisfied order result rule TRUE.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingAny-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingAny — StoppingAny-class","text":"","code":"StoppingAny(stop_list, report_label = NA_character_)  .DefaultStoppingAny()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingAny-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingAny — StoppingAny-class","text":"stop_list (list) see slot definition. report_label (string) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingAny-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingAny — StoppingAny-class","text":"stop_list (list) list stopping rules. report_label label reporting","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingAny-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingAny — StoppingAny-class","text":"Typically, end users use .DefaultStoppingAny() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingAny-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingAny — StoppingAny-class","text":"","code":"# Define some stopping rules. my_stopping1 <- StoppingMinCohorts(nCohorts = 3) my_stopping2 <- StoppingTargetProb(target = c(0.2, 0.35), prob = 0.5) my_stopping3 <- StoppingMinPatients(nPatients = 20)  # Create a list of stopping rules (of class `StoppingAny`) which would then be # summarized by the `any` function, meaning that the study would be stopped if # any of the single stopping rules is `TRUE`. my_stopping <- StoppingAny(   stop_list = c(my_stopping1, my_stopping2, my_stopping3) )"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingCohortsNearDose-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingCohortsNearDose — StoppingCohortsNearDose-class","title":"StoppingCohortsNearDose — StoppingCohortsNearDose-class","text":"StoppingCohortsNearDose class stopping based number cohorts near next best dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingCohortsNearDose-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingCohortsNearDose — StoppingCohortsNearDose-class","text":"","code":"StoppingCohortsNearDose(   nCohorts = 2L,   percentage = 50,   report_label = NA_character_ )  .DefaultStoppingCohortsNearDose()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingCohortsNearDose-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingCohortsNearDose — StoppingCohortsNearDose-class","text":"nCohorts (number) see slot definition. percentage (number) see slot definition. report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingCohortsNearDose-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingCohortsNearDose — StoppingCohortsNearDose-class","text":"nCohorts (number) number required cohorts. percentage (number) percentage (including 0 100) within next best dose cohorts must lie.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingCohortsNearDose-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingCohortsNearDose — StoppingCohortsNearDose-class","text":"Typically, end users use .DefaultStoppingCohortsNearDose() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingCohortsNearDose-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingCohortsNearDose — StoppingCohortsNearDose-class","text":"","code":"# Here, is the rule for stopping the study if at least 3 cohorts were dosed # at a dose within (1 +/- 0.2) of the next best dose. my_stopping <- StoppingCohortsNearDose(   nCohorts = 3,   percentage = 0.2 )"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingExternal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingExternal — StoppingExternal-class","title":"StoppingExternal — StoppingExternal-class","text":"StoppingExternal class stopping based external flag.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingExternal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingExternal — StoppingExternal-class","text":"","code":"StoppingExternal(report_label = NA_character_)  .DefaultStoppingExternal(report_label = NA_character_)"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingExternal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingExternal — StoppingExternal-class","text":"report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingExternal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingExternal — StoppingExternal-class","text":"Typically, end users use .DefaultStoppingExternal() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingExternal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingExternal — StoppingExternal-class","text":"","code":"my_stopping <- StoppingExternal()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingHighestDose-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingHighestDose — StoppingHighestDose-class","title":"StoppingHighestDose — StoppingHighestDose-class","text":"StoppingHighestDose class stopping based highest dose. , stopping occurs highest dose reached.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingHighestDose-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingHighestDose — StoppingHighestDose-class","text":"","code":"StoppingHighestDose(report_label = NA_character_)  .DefaultStoppingHighestDose()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingHighestDose-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingHighestDose — StoppingHighestDose-class","text":"report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingHighestDose-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingHighestDose — StoppingHighestDose-class","text":"Typically, end users use .DefaultStoppingHighestDose() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingHighestDose-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingHighestDose — StoppingHighestDose-class","text":"","code":"# The following stopping rule is met when: # - next proposed dose is highest dose, and # - there are already at least 3 patients on that dose, and # - we are sure that this dose is safe, e.g. the probability to be in (0%, 20%) # interval of the DLT rate is above 50%. my_stopping <- StoppingHighestDose() &   StoppingPatientsNearDose(nPatients = 3, percentage = 0) &   StoppingTargetProb(target = c(0, 0.2), prob = 0.5)  # We note that this rule would then need to be combined with the other standard # stopping rules, when the MTD is found based on being near e.g. a 30% DLT # probability or having reached maximal sample size, in the manner of: # stop_rule <- stop_high | stop_low | stop_sample_size # nolintr."},{"path":"https://openpharma.github.io/crmPack/reference/StoppingList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingList — StoppingList-class","title":"StoppingList — StoppingList-class","text":"StoppingList class testing stopping rule consists many single stopping rules turn objects class Stopping. summary slot stores function takes logical vector size stop_list returns single logical value. example, function specified summary function, stopping rules defined stop_list must satisfied order result rule TRUE.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingList-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingList — StoppingList-class","text":"","code":"StoppingList(stop_list, summary)  .DefaultStoppingList()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingList-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingList — StoppingList-class","text":"stop_list (list) see slot definition. summary (function) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingList-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingList — StoppingList-class","text":"stop_list (list) list stopping rules. summary (function) summary function combine results stopping rules single result.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingList-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingList — StoppingList-class","text":"Typically, end users use .DefaultStoppingList() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingList-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingList — StoppingList-class","text":"","code":"# Define some stopping rules. my_stopping1 <- StoppingMinCohorts(nCohorts = 3) my_stopping2 <- StoppingTargetProb(target = c(0.2, 0.35), prob = 0.5) my_stopping3 <- StoppingMinPatients(nPatients = 20)  # Create a list of stopping rules (of class `StoppingList`) which will then be # summarized (in this specific example) with the `any` function, meaning that # the study would be stopped if any of the single stopping rules is `TRUE`. my_stopping <- StoppingList(   stop_list = c(my_stopping1, my_stopping2, my_stopping3),   summary = any )"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingLowestDoseHSRBeta-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingLowestDoseHSRBeta — StoppingLowestDoseHSRBeta-class","title":"StoppingLowestDoseHSRBeta — StoppingLowestDoseHSRBeta-class","text":"StoppingLowestDoseHSRBeta class stopping based Hard Safety Rule using Beta posterior distribution Beta(,b) prior Bin-Beta model based observed data lowest dose level. rule triggered first dose considered toxic (.e. threshold probability) based observed data lowest dose level Beta(,b) prior distribution. default prior Beta(1,1). case placebo used, rule evaluated second dose dose grid, .e. lowest non-placebo dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingLowestDoseHSRBeta-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingLowestDoseHSRBeta — StoppingLowestDoseHSRBeta-class","text":"","code":"StoppingLowestDoseHSRBeta(   target = 0.3,   prob = 0.95,   a = 1,   b = 1,   report_label = NA_character_ )  .DefaultStoppingLowestDoseHSRBeta()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingLowestDoseHSRBeta-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingLowestDoseHSRBeta — StoppingLowestDoseHSRBeta-class","text":"target (proportion) see slot definition. prob (proportion) see slot definition. (number) see slot definition. b (number) see slot definition. report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingLowestDoseHSRBeta-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingLowestDoseHSRBeta — StoppingLowestDoseHSRBeta-class","text":"target (proportion) target toxicity. prob (proportion) threshold probability lowest dose toxic. (number) shape parameter \\(> 0\\) probability distribution Beta (,b). b (number) shape parameter \\(b > 0\\) probability distribution Beta (,b).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingLowestDoseHSRBeta-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingLowestDoseHSRBeta — StoppingLowestDoseHSRBeta-class","text":"stopping rule independent underlying model. Typically, end users use .DefaultStoppingLowestDoseHSRBeta() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingLowestDoseHSRBeta-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingLowestDoseHSRBeta — StoppingLowestDoseHSRBeta-class","text":"","code":"# Stopping the study if the first dose is toxic with more than 90% # probability based on a Beta posterior distribution with Beta(1,1) prior. my_stopping <- StoppingLowestDoseHSRBeta(   target = 0.3,   prob = 0.9 )  # Stopping the study if the first dose is toxic with more than 90% # probability based on a Beta posterior distribution with Beta(0.5,0.5) prior. my_stopping <- StoppingLowestDoseHSRBeta(   target = 0.3,   prob = 0.9,   a = 0.5,   b = 0.5 )"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMTDCV-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingMTDCV — StoppingMTDCV-class","title":"StoppingMTDCV — StoppingMTDCV-class","text":"StoppingMTDCV class stopping rule based precision MTD calculated coefficient variation (CV) MTD. , MTD defined dose reaches specific target probability occurrence DLT.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMTDCV-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingMTDCV — StoppingMTDCV-class","text":"","code":"StoppingMTDCV(target = 0.3, thresh_cv = 40, report_label = NA_character_)  .DefaultStoppingMTDCV()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMTDCV-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingMTDCV — StoppingMTDCV-class","text":"target (proportion) see slot definition. thresh_cv (number) see slot definition. report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMTDCV-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingMTDCV — StoppingMTDCV-class","text":"target (proportion) toxicity target MTD (except 0 1). thresh_cv (number) threshold (percentage > 0) CV considered accurate enough stop trial. stopping occurs CV less equal tresh_cv.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMTDCV-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingMTDCV — StoppingMTDCV-class","text":"Typically, end users use .DefaultStoppingMTDCV() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMTDCV-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingMTDCV — StoppingMTDCV-class","text":"","code":"# Stopping the study if the MTD estimation is precise enough, i.e. if robust # coefficient of variation of the MTD is below 40%. my_stopping <- StoppingMTDCV(target = 0.3, thresh_cv = 40)"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMTDdistribution-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingMTDdistribution — StoppingMTDdistribution-class","title":"StoppingMTDdistribution — StoppingMTDdistribution-class","text":"StoppingMTDdistribution class stopping based posterior distribution MTD. used cases stopping occurs probability MTD > thresh * next_dose greater equal prob, next_dose recommended next best dose. , MTD defined dose reaches specific target probability occurrence DLT.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMTDdistribution-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingMTDdistribution — StoppingMTDdistribution-class","text":"","code":"StoppingMTDdistribution(   target = 0.33,   thresh = 0.5,   prob = 0.9,   report_label = NA_character_ )  .DefaultStoppingMTDdistribution()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMTDdistribution-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingMTDdistribution — StoppingMTDdistribution-class","text":"target (proportion) see slot definition. thresh (proportion) see slot definition. prob (proportion) see slot definition. report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMTDdistribution-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingMTDdistribution — StoppingMTDdistribution-class","text":"target (proportion) target toxicity probability (except 0 1) defining MTD. thresh (proportion) threshold (except 0 1) relative recommended next best dose. prob (proportion) required minimum probability, except 0 1.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMTDdistribution-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingMTDdistribution — StoppingMTDdistribution-class","text":"Typically, end users use .DefaultStoppingMTDDistribution() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMTDdistribution-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingMTDdistribution — StoppingMTDdistribution-class","text":"","code":"# As example, here is the rule for stopping the study if there is at least 0.9 # probability that MTD > 0.5 * next_dose. Here MTD is defined as the dose for # which prob(DLT) = 0.33 my_stopping <- StoppingMTDdistribution(   target = 0.33,   thresh = 0.5,   prob = 0.9 )"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMaxGainCIRatio-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingMaxGainCIRatio — StoppingMaxGainCIRatio-class","title":"StoppingMaxGainCIRatio — StoppingMaxGainCIRatio-class","text":"StoppingMaxGainCIRatio class testing stopping rule based target ratio 95% credibility interval. Specifically, ratio upper lower bound 95% credibility interval's estimate : (1) target dose (.e. dose corresponds given target probability occurrence DLT prob_target), (2) max gain dose (.e. dose gives maximum gain), depending one two smaller.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMaxGainCIRatio-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingMaxGainCIRatio — StoppingMaxGainCIRatio-class","text":"","code":"StoppingMaxGainCIRatio(   target_ratio = 5,   prob_target = 0.3,   report_label = NA_character_ )  .DefaultStoppingMaxGainCIRatio()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMaxGainCIRatio-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingMaxGainCIRatio — StoppingMaxGainCIRatio-class","text":"target_ratio (numeric) see slot definition. prob_target (proportion) see slot definition. report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMaxGainCIRatio-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingMaxGainCIRatio — StoppingMaxGainCIRatio-class","text":"target_ratio (numeric) target ratio 95% credibility interval's estimate, required stop trial. prob_target (proportion) target probability occurrence DLT.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMaxGainCIRatio-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingMaxGainCIRatio — StoppingMaxGainCIRatio-class","text":"","code":"# Define the target stopping ratio (5) and the target probability of a DLT to # be used (0.3). my_stopping <- StoppingMaxGainCIRatio(target_ratio = 5, prob_target = 0.3) .DefaultStoppingMaxGainCIRatio() #> An object of class \"StoppingMaxGainCIRatio\" #> Slot \"target_ratio\": #> [1] 5 #>  #> Slot \"prob_target\": #> [1] 0.3 #>  #> Slot \"report_label\": #> [1] \"GStar 5 for 0.3 target prob\" #>"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMinCohorts-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingMinCohorts — StoppingMinCohorts-class","title":"StoppingMinCohorts — StoppingMinCohorts-class","text":"StoppingMinCohorts class stopping based minimum number cohorts.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMinCohorts-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingMinCohorts — StoppingMinCohorts-class","text":"","code":"StoppingMinCohorts(nCohorts = 2L, report_label = NA_character_)  .DefaultStoppingMinCohorts()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMinCohorts-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingMinCohorts — StoppingMinCohorts-class","text":"nCohorts (number) see slot definition. report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMinCohorts-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingMinCohorts — StoppingMinCohorts-class","text":"nCohorts (number) minimum required number cohorts.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMinCohorts-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingMinCohorts — StoppingMinCohorts-class","text":"Typically, end users use .DefaultStoppingMinCohorts() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMinCohorts-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingMinCohorts — StoppingMinCohorts-class","text":"","code":"# As example, here is the rule for stopping the study if at least 6 cohorts # were already dosed. my_stopping <- StoppingMinCohorts(nCohorts = 6)"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMinPatients-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingMinPatients — StoppingMinPatients-class","title":"StoppingMinPatients — StoppingMinPatients-class","text":"StoppingMinPatients class stopping based minimum number patients","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMinPatients-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingMinPatients — StoppingMinPatients-class","text":"","code":"StoppingMinPatients(nPatients = 20L, report_label = NA_character_)  .DefaultStoppingMinPatients()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMinPatients-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingMinPatients — StoppingMinPatients-class","text":"nPatients (number) see slot definition. report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMinPatients-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingMinPatients — StoppingMinPatients-class","text":"nPatients (number) minimum allowed number patients.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMinPatients-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingMinPatients — StoppingMinPatients-class","text":"Typically, end users use .DefaultStoppingMinPatients() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMinPatients-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingMinPatients — StoppingMinPatients-class","text":"","code":"# As example, here is the rule for stopping the study if at least 20 patients # were already dosed my_stopping <- StoppingMinPatients(nPatients = 20)"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMissingDose-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingMissingDose — StoppingMissingDose-class","title":"StoppingMissingDose — StoppingMissingDose-class","text":"StoppingMissingDose class stopping based NA returned next best dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMissingDose-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingMissingDose — StoppingMissingDose-class","text":"","code":"StoppingMissingDose(report_label = NA_character_)  .DefaultStoppingMissingDose()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMissingDose-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingMissingDose — StoppingMissingDose-class","text":"report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMissingDose-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingMissingDose — StoppingMissingDose-class","text":"Typically, end users use .DefaultStoppingMissingDose() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingMissingDose-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingMissingDose — StoppingMissingDose-class","text":"","code":"# The rule for stopping the study if NA or Placebo is returned as # next best dose. my_stopping <- StoppingMissingDose()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingOrdinal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingOrdinal — StoppingOrdinal-class","title":"StoppingOrdinal — StoppingOrdinal-class","text":"StoppingOrdinal class stopping based Stopping rule applied specific toxicity grade ordinal CRM trial","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingOrdinal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingOrdinal — StoppingOrdinal-class","text":"","code":"StoppingOrdinal(grade, rule)  .DefaultStoppingOrdinal()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingOrdinal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingOrdinal — StoppingOrdinal-class","text":"grade (integer) see slot definition. rule (Stopping) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingOrdinal-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingOrdinal — StoppingOrdinal-class","text":"grade (integer) grade rule applied rule (Stopping) rule apply","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingOrdinal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingOrdinal — StoppingOrdinal-class","text":"Typically, end users use .DefaultStoppingOrdinal() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingOrdinal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingOrdinal — StoppingOrdinal-class","text":"","code":"StoppingOrdinal(   1L,   StoppingTargetProb(target = c(0.2, 0.35), prob = 0.6) ) #> An object of class \"StoppingOrdinal\" #> Slot \"grade\": #> [1] 1 #>  #> Slot \"rule\": #> An object of class \"StoppingTargetProb\" #> Slot \"target\": #> [1] 0.20 0.35 #>  #> Slot \"prob\": #> [1] 0.6 #>  #> Slot \"report_label\": #> [1] \"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.6\" #>  #>  #> Slot \"report_label\": #> character(0) #>"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingPatientsNearDose-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingPatientsNearDose — StoppingPatientsNearDose-class","title":"StoppingPatientsNearDose — StoppingPatientsNearDose-class","text":"StoppingPatientsNearDose class stopping based number patients near next best dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingPatientsNearDose-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingPatientsNearDose — StoppingPatientsNearDose-class","text":"","code":"StoppingPatientsNearDose(   nPatients = 10L,   percentage = 50,   report_label = NA_character_ )  .DefaultStoppingPatientsNearDose()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingPatientsNearDose-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingPatientsNearDose — StoppingPatientsNearDose-class","text":"nPatients (number) see slot definition. percentage (number) see slot definition. report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingPatientsNearDose-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingPatientsNearDose — StoppingPatientsNearDose-class","text":"nPatients (number) number required patients. percentage (number) percentage (including 0 100) within next best dose patients must lie.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingPatientsNearDose-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingPatientsNearDose — StoppingPatientsNearDose-class","text":"Typically, end users use .DefaultStoppingPatientsNearDose() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingPatientsNearDose-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingPatientsNearDose — StoppingPatientsNearDose-class","text":"","code":"# As example, here is the rule for stopping the study if at least 9 patients # were dosed at a dose within (1 +/- 0.2) of the next best dose.  my_stopping <- StoppingPatientsNearDose(   nPatients = 9,   percentage = 20 )"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingSpecificDose-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingSpecificDose — StoppingSpecificDose-class","title":"StoppingSpecificDose — StoppingSpecificDose-class","text":"StoppingSpecificDose class testing stopping rule specific dose dose grid next best dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingSpecificDose-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingSpecificDose — StoppingSpecificDose-class","text":"","code":"StoppingSpecificDose(   rule = StoppingTargetProb(target = c(0, 0.3), prob = 0.8),   dose = 80,   report_label = NA_character_ )  .DefaultStoppingSpecificDose()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingSpecificDose-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingSpecificDose — StoppingSpecificDose-class","text":"rule (Stopping) see slot definition. dose (number) see slot definition. report_label (string NA)  see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingSpecificDose-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingSpecificDose — StoppingSpecificDose-class","text":"rule (Stopping) stopping rule available package. dose (positive_number) dose defined part dose grid data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingSpecificDose-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingSpecificDose — StoppingSpecificDose-class","text":"Typically, end users use .DefaultStoppingSpecificDose() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingSpecificDose-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingSpecificDose — StoppingSpecificDose-class","text":"","code":"# Stop if highest dose 80 is safe. highest_dose_safe <- StoppingSpecificDose(   rule = StoppingTargetProb(target = c(0, 0.3), prob = 0.8),   dose = 80 )  # Stop if lowest dose 10 is toxic. lowest_dose_toxic <- StoppingSpecificDose(   rule = StoppingTargetProb(target = c(0.3, 1), prob = 0.8),   dose = 10 )"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTDCIRatio-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingTDCIRatio — StoppingTDCIRatio-class","title":"StoppingTDCIRatio — StoppingTDCIRatio-class","text":"StoppingTDCIRatio class testing stopping rule based target ratio 95% credibility interval. Specifically, ratio upper lower bound 95% credibility interval's estimate target dose (.e. dose corresponds given target probability occurrence DLT prob_target).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTDCIRatio-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingTDCIRatio — StoppingTDCIRatio-class","text":"","code":"StoppingTDCIRatio(   target_ratio = 5,   prob_target = 0.3,   report_label = NA_character_ )  .DefaultStoppingTDCIRatio()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTDCIRatio-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingTDCIRatio — StoppingTDCIRatio-class","text":"target_ratio (numeric) see slot definition. prob_target (proportion) see slot definition. report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTDCIRatio-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingTDCIRatio — StoppingTDCIRatio-class","text":"target_ratio (numeric) target ratio 95% credibility interval's estimate, required stop trial. prob_target (proportion) target probability occurrence DLT.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTDCIRatio-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingTDCIRatio — StoppingTDCIRatio-class","text":"Typically, end users use .DefaultStoppingTDCIRatio() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTDCIRatio-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingTDCIRatio — StoppingTDCIRatio-class","text":"","code":"# Define the target stopping ratio (5) and the target probability of a DLT to # be used (0.3). my_stopping <- StoppingTDCIRatio(   target_ratio = 5,   prob_target = 0.3 )"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTargetBiomarker-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingTargetBiomarker — StoppingTargetBiomarker-class","title":"StoppingTargetBiomarker — StoppingTargetBiomarker-class","text":"StoppingTargetBiomarker class stopping based probability target biomarker.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTargetBiomarker-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingTargetBiomarker — StoppingTargetBiomarker-class","text":"","code":"StoppingTargetBiomarker(   target = c(0.9, 1),   prob = 0.3,   is_relative = TRUE,   report_label = NA_character_ )  .DefaultStoppingTargetBiomarker()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTargetBiomarker-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingTargetBiomarker — StoppingTargetBiomarker-class","text":"target (numeric) see slot definition. prob (proportion) see slot definition. is_relative (flag) see slot definition. report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTargetBiomarker-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingTargetBiomarker — StoppingTargetBiomarker-class","text":"target (numeric) biomarker target range needs reached. example, target = c(0.8, 1.0) is_relative = TRUE means target dose least 80% maximum biomarker level. is_relative (flag) target relative? (default), target interpreted relative maximum, must probability range. Otherwise, target interpreted absolute biomarker range. prob (proportion) required target probability (except 0 1) reaching sufficient precision.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTargetBiomarker-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingTargetBiomarker — StoppingTargetBiomarker-class","text":"Typically, end users use .DefaultStoppingTargetBiomarker() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTargetBiomarker-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingTargetBiomarker — StoppingTargetBiomarker-class","text":"","code":"# Stopping the study if there is at least 0.5 probability that the biomarker # (efficacy) is within the biomarker target range of [0.9, 1.0] (relative to the # maximum for the biomarker).  my_stopping <- StoppingTargetBiomarker(target = c(0.9, 1), prob = 0.5)"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTargetProb-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StoppingTargetProb — StoppingTargetProb-class","title":"StoppingTargetProb — StoppingTargetProb-class","text":"StoppingTargetProb class stopping based probability DLT rate target toxicity interval.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTargetProb-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StoppingTargetProb — StoppingTargetProb-class","text":"","code":"StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.4,   report_label = NA_character_ )  .DefaultStoppingTargetProb()"},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTargetProb-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StoppingTargetProb — StoppingTargetProb-class","text":"target (number) see slot definition. prob (proportion) see slot definition. report_label (string NA) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTargetProb-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"StoppingTargetProb — StoppingTargetProb-class","text":"target (number) target toxicity interval, e.g. c(0.2, 0.35). prob (proportion) required target toxicity probability (except 0 1) reaching sufficient precision.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTargetProb-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"StoppingTargetProb — StoppingTargetProb-class","text":"Typically, end users use .DefaultStoppingTargetProb() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/StoppingTargetProb-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"StoppingTargetProb — StoppingTargetProb-class","text":"","code":"# As example, here is the rule for stopping the study if the posterior # probability that [0.2 =< Prob(DLT | dose) <= 0.35] for the next best dose # is above 0.5. my_stopping <- StoppingTargetProb(target = c(0.2, 0.35), prob = 0.5)"},{"path":"https://openpharma.github.io/crmPack/reference/TDDesign-class.html","id":null,"dir":"Reference","previous_headings":"","what":"TDDesign — TDDesign-class","title":"TDDesign — TDDesign-class","text":"TDDesign class design based DLT responses using ModelTox class model (.e. LogisticIndepBeta) without MCMC samples.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/TDDesign-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TDDesign — TDDesign-class","text":"","code":"TDDesign(   model,   stopping,   increments,   pl_cohort_size = CohortSizeConst(0L),   ... )  .DefaultTDDesign()"},{"path":"https://openpharma.github.io/crmPack/reference/TDDesign-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TDDesign — TDDesign-class","text":"model (ModelTox) see slot definition. stopping (Stopping) see slot definition. increments (Increments) see slot definition. pl_cohort_size (CohortSize) see slot definition. ... Arguments passed RuleDesign nextBest (NextBest) see slot definition. cohort_size (CohortSize) see slot definition. data (Data) see slot definition. startingDose (number) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/TDDesign-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"TDDesign — TDDesign-class","text":"model (ModelTox) pseudo DLT model used. stopping (Stopping) stopping rule(s) trial. increments (Increments) control increments dose levels. pl_cohort_size (CohortSize) rules cohort sizes placebo, planned (defaults constant 0 placebo patients).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/TDDesign-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"TDDesign — TDDesign-class","text":"Typically, end users use .DefaultTDDesign() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/TDDesign-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TDDesign — TDDesign-class","text":"","code":"empty_data <- Data(doseGrid = seq(25, 300, 25))  my_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = empty_data )  # The escalation rule. my_next_best <- NextBestTD(   prob_target_drt = 0.35,   prob_target_eot = 0.3 )  my_size <- CohortSizeConst(size = 3)  # The increments for the dose-escalation process: #  the maximum increase of 200% for doses up to the maximum dose in grid, #  the maximum increase of 200% for dose above the maximum dose in grid. my_increments <- IncrementsRelative(   intervals = range(empty_data@doseGrid),   increments = c(2, 2) )  # Stop when the maximum sample size of 36 patients is reached. my_stopping <- StoppingMinPatients(nPatients = 36)  # The design with all the above information and starting with a dose of 25. # This design incorporates only DLT responses and no DLT samples are involved # during the simulation. design <- TDDesign(   model = my_model,   stopping = my_stopping,   increments = my_increments,   nextBest = my_next_best,   cohort_size = my_size,   data = empty_data,   startingDose = 25 )"},{"path":"https://openpharma.github.io/crmPack/reference/TDsamplesDesign-class.html","id":null,"dir":"Reference","previous_headings":"","what":"TDsamplesDesign — TDsamplesDesign-class","title":"TDsamplesDesign — TDsamplesDesign-class","text":"TDsamplesDesign class design based DLT responses using ModelTox class model (.e. LogisticIndepBeta) well MCMC samples obtained model.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/TDsamplesDesign-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TDsamplesDesign — TDsamplesDesign-class","text":"","code":"TDsamplesDesign(   model,   stopping,   increments,   pl_cohort_size = CohortSizeConst(0L),   ... )  .DefaultTDsamplesDesign()"},{"path":"https://openpharma.github.io/crmPack/reference/TDsamplesDesign-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TDsamplesDesign — TDsamplesDesign-class","text":"model (ModelTox) see slot definition. stopping (Stopping) see slot definition. increments (Increments) see slot definition. pl_cohort_size (CohortSize) see slot definition. ... Arguments passed RuleDesign nextBest (NextBest) see slot definition. cohort_size (CohortSize) see slot definition. data (Data) see slot definition. startingDose (number) see slot definition.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/TDsamplesDesign-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"TDsamplesDesign — TDsamplesDesign-class","text":"model (ModelTox) pseudo DLT model used. stopping (Stopping) stopping rule(s) trial. increments (Increments) control increments dose levels. pl_cohort_size (CohortSize) rules cohort sizes placebo, planned (defaults constant 0 placebo patients).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/TDsamplesDesign-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"TDsamplesDesign — TDsamplesDesign-class","text":"Typically, end users use .DefaultTDsamplesDesign() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/TDsamplesDesign-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TDsamplesDesign — TDsamplesDesign-class","text":"","code":"empty_data <- Data(doseGrid = seq(25, 300, 25))  my_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = empty_data )  # The escalation rule. my_next_best <- NextBestTDsamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, probs = 0.3))   } )  my_size <- CohortSizeConst(size = 3)  # The increments for the dose-escalation process: #  the maximum increase of 200% for doses up to the maximum dose in grid, #  the maximum increase of 200% for dose above the maximum dose in grid. my_increments <- IncrementsRelative(   intervals = range(empty_data@doseGrid),   increments = c(2, 2) )  # Stop when the maximum sample size of 36 patients is reached. my_stopping <- StoppingMinPatients(nPatients = 36)  # The design with all the above information and starting with a dose of 25. design <- TDsamplesDesign(   model = my_model,   stopping = my_stopping,   increments = my_increments,   nextBest = my_next_best,   cohort_size = my_size,   data = empty_data,   startingDose = 25 )"},{"path":"https://openpharma.github.io/crmPack/reference/TITELogisticLogNormal-class.html","id":null,"dir":"Reference","previous_headings":"","what":"TITELogisticLogNormal — TITELogisticLogNormal-class","title":"TITELogisticLogNormal — TITELogisticLogNormal-class","text":"TITELogisticLogNormal class TITE-CRM based logistic regression model using bivariate normal prior intercept log slope parameters. class inherits LogisticLogNormal.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/TITELogisticLogNormal-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TITELogisticLogNormal — TITELogisticLogNormal-class","text":"","code":"TITELogisticLogNormal(weight_method = \"linear\", ...)  .DefaultTITELogisticLogNormal()"},{"path":"https://openpharma.github.io/crmPack/reference/TITELogisticLogNormal-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TITELogisticLogNormal — TITELogisticLogNormal-class","text":"weight_method (string) weight function method: either linear adaptive. used Liu, Yin Yuan's paper. ... Arguments passed LogisticLogNormal mean (numeric) prior mean vector. cov (matrix) prior covariance matrix. precision matrix prec internally calculated inverse cov. ref_dose (number) reference dose \\(x*\\) (strictly positive number).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/TITELogisticLogNormal-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"TITELogisticLogNormal — TITELogisticLogNormal-class","text":"weight_method (string) weight function method: either linear adaptive. used Liu, Yin Yuan's paper.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/TITELogisticLogNormal-class.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"TITELogisticLogNormal — TITELogisticLogNormal-class","text":"Typically, end users use .DefaultTITELogisticLogNormal() function.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/TITELogisticLogNormal-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TITELogisticLogNormal — TITELogisticLogNormal-class","text":"","code":"my_model <- TITELogisticLogNormal(   mean = c(0, 1),   cov = diag(2),   ref_dose = 1,   weight_method = \"linear\" )  my_model1 <- TITELogisticLogNormal(   mean = c(0, 1),   cov = diag(2),   ref_dose = 1,   weight_method = \"adaptive\" )"},{"path":"https://openpharma.github.io/crmPack/reference/Validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate — Validate","title":"Validate — Validate","text":"Validate class Reference Class help programming validation new S4 classes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Validate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate — Validate","text":"Starting empty msg vector, check returning FALSE vector gets new element - string explaining failure validation.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Validate.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Validate — Validate","text":"msg (character) cumulative messages.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/Validate.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Validate — Validate","text":"check(test, string = \"\") Check whether test TRUE; , return NULL. Otherwise, add string message cumulative messages vector msg. result() Return either cumulative messages vector msg (contains error messages checks), NULL, msg empty (.e. checks successful).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/and-Stopping-Stopping-method.html","id":null,"dir":"Reference","previous_headings":"","what":"The method combining two atomic stopping rules — &,Stopping,Stopping-method","title":"The method combining two atomic stopping rules — &,Stopping,Stopping-method","text":"method combining two atomic stopping rules","code":""},{"path":"https://openpharma.github.io/crmPack/reference/and-Stopping-Stopping-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The method combining two atomic stopping rules — &,Stopping,Stopping-method","text":"","code":"# S4 method for class 'Stopping,Stopping' e1 & e2"},{"path":"https://openpharma.github.io/crmPack/reference/and-Stopping-Stopping-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method combining two atomic stopping rules — &,Stopping,Stopping-method","text":"e1 First Stopping object e2 Second Stopping object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/and-Stopping-Stopping-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The method combining two atomic stopping rules — &,Stopping,Stopping-method","text":"StoppingAll object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/and-Stopping-Stopping-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The method combining two atomic stopping rules — &,Stopping,Stopping-method","text":"","code":"## Example of combining two atomic stopping rules with an AND ('&') operator  myStopping1 <- StoppingMinCohorts(nCohorts=3) myStopping2 <- StoppingTargetProb(target=c(0.2, 0.35),                                   prob=0.5)  myStopping <- myStopping1 & myStopping2"},{"path":"https://openpharma.github.io/crmPack/reference/and-Stopping-StoppingAll-method.html","id":null,"dir":"Reference","previous_headings":"","what":"The method combining an atomic and a stopping list — &,Stopping,StoppingAll-method","title":"The method combining an atomic and a stopping list — &,Stopping,StoppingAll-method","text":"method combining atomic stopping list","code":""},{"path":"https://openpharma.github.io/crmPack/reference/and-Stopping-StoppingAll-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The method combining an atomic and a stopping list — &,Stopping,StoppingAll-method","text":"","code":"# S4 method for class 'Stopping,StoppingAll' e1 & e2"},{"path":"https://openpharma.github.io/crmPack/reference/and-Stopping-StoppingAll-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method combining an atomic and a stopping list — &,Stopping,StoppingAll-method","text":"e1 Stopping object e2 StoppingAll object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/and-Stopping-StoppingAll-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The method combining an atomic and a stopping list — &,Stopping,StoppingAll-method","text":"modified StoppingAll object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/and-Stopping-StoppingAll-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The method combining an atomic and a stopping list — &,Stopping,StoppingAll-method","text":"","code":"## Example of combining an atomic stopping rule with a list of stopping rules ## with an AND ('&') operator  myStopping1 <- StoppingMinCohorts(nCohorts=3) myStopping2 <- StoppingTargetProb(target=c(0.2, 0.35),                                   prob=0.5)  myStopping3 <- StoppingMinPatients(nPatients=20)  myStopping <-  myStopping3 & (myStopping1 | myStopping2 )"},{"path":"https://openpharma.github.io/crmPack/reference/and-StoppingAll-Stopping-method.html","id":null,"dir":"Reference","previous_headings":"","what":"The method combining a stopping list and an atomic — &,StoppingAll,Stopping-method","title":"The method combining a stopping list and an atomic — &,StoppingAll,Stopping-method","text":"method combining stopping list atomic","code":""},{"path":"https://openpharma.github.io/crmPack/reference/and-StoppingAll-Stopping-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The method combining a stopping list and an atomic — &,StoppingAll,Stopping-method","text":"","code":"# S4 method for class 'StoppingAll,Stopping' e1 & e2"},{"path":"https://openpharma.github.io/crmPack/reference/and-StoppingAll-Stopping-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method combining a stopping list and an atomic — &,StoppingAll,Stopping-method","text":"e1 StoppingAll object e2 Stopping object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/and-StoppingAll-Stopping-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The method combining a stopping list and an atomic — &,StoppingAll,Stopping-method","text":"modified StoppingAll object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/and-StoppingAll-Stopping-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The method combining a stopping list and an atomic — &,StoppingAll,Stopping-method","text":"","code":"## Example of combining a list of stopping rules with an atomic stopping rule ## with an AND ('&') operator  myStopping1 <- StoppingMinCohorts(nCohorts=3) myStopping2 <- StoppingTargetProb(target=c(0.2, 0.35),                                   prob=0.5)  myStopping3 <- StoppingMinPatients(nPatients=20)  myStopping <- (myStopping1 | myStopping2 ) & myStopping3"},{"path":"https://openpharma.github.io/crmPack/reference/approximate.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate posterior with (log) normal distribution — approximate","title":"Approximate posterior with (log) normal distribution — approximate","text":"reproduce resultant approximate model future exactly, include seed = xxxx call approximate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/approximate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate posterior with (log) normal distribution — approximate","text":"","code":"approximate(object, model, data, ...)  # S4 method for class 'Samples' approximate(   object,   model,   data,   points = seq(from = min(data@doseGrid), to = max(data@doseGrid), length = 5L),   refDose = median(points),   logNormal = FALSE,   verbose = TRUE,   create_plot = TRUE,   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/approximate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate posterior with (log) normal distribution — approximate","text":"object Samples object model GeneralModel object data Data object ... additional arguments (see methods) points optional parameter, gives dose values approximation rely (default: 5 values equally spaced minimum maximum dose grid) refDose reference dose used (default: median points) logNormal use log-normal prior? (default) otherwise, normal prior logistic regression coefficients used verbose verbose (progress statements)? (default) create_plot add ggplot2 object return value (default)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/approximate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate posterior with (log) normal distribution — approximate","text":"list containing approximation model , requested, ggplot2 object containing graphical representation fitted model","code":""},{"path":"https://openpharma.github.io/crmPack/reference/approximate.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Approximate posterior with (log) normal distribution — approximate","text":"approximate(Samples): ... argument can transport additional arguments Quantiles2LogisticNormal, e.g. order control approximation quality, etc.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/approximate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate posterior with (log) normal distribution — approximate","text":"","code":"# nolint start  # Create some data data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid = c(     0.1, 0.5, 1.5, 3, 6,     seq(from = 10, to = 80, by = 2)   ) ) #> Used default patient IDs!  # Initialize a model model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Get posterior for all model parameters options <- McmcOptions(   burnin = 100,   step = 2,   samples = 2000 ) set.seed(94) samples <- mcmc(data, model, options)  # Approximate the posterior distribution with a bivariate normal # max.time and maxit are very small only for the purpose of showing the example. They # should be increased for a real case. set.seed(94) approximation <- approximate(   object = samples,   model = model,   data = data,   logNormal = TRUE,   control = list(     threshold.stop = 0.1,     max.time = 1,     maxit = 1   ) ) #> Emini is: 0.1062769405 #> xmini are: #> -0.08952852265 0.02059494031 0.7359233035 0.5016291938 0.08951893662  #> Totally it used 7.3e-05 secs #> No. of function call is: 1 #> Algorithm reached max number of iterations.  posterior <- approximation$model  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/assertions.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional Assertions for checkmate — assertions","title":"Additional Assertions for checkmate — assertions","text":"provide additional assertion functions can used together checkmate functions. described individual help pages linked .","code":""},{"path":"https://openpharma.github.io/crmPack/reference/assertions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional Assertions for checkmate — assertions","text":"Depending function prefix. assert_ functions return object invisibly successful, otherwise throw error message. check_ functions return TRUE successful, otherwise string error message. test_ functions just return TRUE FALSE.","code":""},{"path":[]},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/biomarker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Biomarker Levels for a Given Dual-Endpoint Model, Given Dose Levels and Samples — biomarker","text":"","code":"biomarker(xLevel, model, samples, ...)  # S4 method for class 'integer,DualEndpoint,Samples' biomarker(xLevel, model, samples, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/biomarker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Biomarker Levels for a Given Dual-Endpoint Model, Given Dose Levels and Samples — biomarker","text":"xLevel (integer) levels doses patients given w.r.t dose grid. See Data details. model (DualEndpoint) model. samples (Samples) samples model's parameters store value biomarker levels doses dose grid. ... used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/biomarker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Biomarker Levels for a Given Dual-Endpoint Model, Given Dose Levels and Samples — biomarker","text":"biomarker levels.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/biomarker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the Biomarker Levels for a Given Dual-Endpoint Model, Given Dose Levels and Samples — biomarker","text":"function simply returns specific columns (indices equal xLevel) biomarker samples matrix, included samples object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/biomarker.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get the Biomarker Levels for a Given Dual-Endpoint Model, Given Dose Levels and Samples — biomarker","text":"biomarker(xLevel = integer, model = DualEndpoint, samples = Samples):","code":""},{"path":"https://openpharma.github.io/crmPack/reference/biomarker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Biomarker Levels for a Given Dual-Endpoint Model, Given Dose Levels and Samples — biomarker","text":"","code":"# Create the data. my_data <- DataDual(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10, 20, 20, 20, 40, 40, 40, 50, 50, 50),   y = c(0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1),   ID = 1:17,   cohort = c(1L, 2L, 3L, 4L, 5L, 6L, 6L, 6L, 7L, 7L, 7L, 8L, 8L, 8L, 9L, 9L, 9L),   w = c(     0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.55, 0.6, 0.52, 0.54,     0.56, 0.43, 0.41, 0.39, 0.34, 0.38, 0.21   ),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) )  # Initialize the Dual-Endpoint model (in this case RW1). my_model <- DualEndpointRW(   mean = c(0, 1),   cov = matrix(c(1, 0, 0, 1), nrow = 2),   sigma2betaW = 0.01,   sigma2W = c(a = 0.1, b = 0.1),   rho = c(a = 1, b = 1),   rw1 = TRUE )  # Set-up some MCMC parameters and generate samples from the posterior. my_options <- McmcOptions(   burnin = 100,   step = 2,   samples = 500 ) my_samples <- mcmc(my_data, my_model, my_options)  # Obtain the biomarker levels (samples) for the second dose from the dose grid, # which is 0.5. biomarker(   xLevel = 2L,   model = my_model,   samples = my_samples ) #>   [1] 0.31158388 0.31492571 0.35227599 0.47516794 0.39595394 0.47168005 #>   [7] 0.48855787 0.51132040 0.41254292 0.37651655 0.34364735 0.38427136 #>  [13] 0.43518915 0.45323886 0.39733863 0.38033958 0.42793408 0.43820285 #>  [19] 0.45819124 0.45121178 0.47826626 0.41223205 0.50626899 0.46518236 #>  [25] 0.49470541 0.41109340 0.31714530 0.32630861 0.41439634 0.39284656 #>  [31] 0.40896246 0.44396811 0.35297023 0.40025916 0.38783393 0.33923702 #>  [37] 0.50389957 0.45837572 0.51361874 0.49248970 0.44263024 0.40390330 #>  [43] 0.26713444 0.31667532 0.19818659 0.28233421 0.34903280 0.36762929 #>  [49] 0.37453314 0.37326343 0.35715245 0.40674645 0.41626794 0.33923388 #>  [55] 0.31277633 0.33396142 0.37346094 0.44732151 0.50531267 0.46760085 #>  [61] 0.42751803 0.46913424 0.55301615 0.64158442 0.44649641 0.41295124 #>  [67] 0.54345077 0.42872669 0.48955399 0.52357519 0.44062209 0.43314581 #>  [73] 0.44247173 0.32464884 0.34462686 0.37896689 0.42084972 0.55289724 #>  [79] 0.65169791 0.61463950 0.63429018 0.59520021 0.47890056 0.43577604 #>  [85] 0.37539309 0.36658948 0.31664897 0.39519653 0.41161969 0.45506352 #>  [91] 0.38560500 0.41640533 0.49657020 0.41745530 0.36086875 0.37294986 #>  [97] 0.34067291 0.41265806 0.38659523 0.33138228 0.33166109 0.35675808 #> [103] 0.31518235 0.33164849 0.25648985 0.30458613 0.29131920 0.36353449 #> [109] 0.46266946 0.46848581 0.42572180 0.43768294 0.39998326 0.43522501 #> [115] 0.56794933 0.74052964 0.64985814 0.45616835 0.48984610 0.45043906 #> [121] 0.53425041 0.50969878 0.41784574 0.43556930 0.38001327 0.42585612 #> [127] 0.44907697 0.41048381 0.40171672 0.48176101 0.42675341 0.37830600 #> [133] 0.37407376 0.40874559 0.64078715 0.61503916 0.52507299 0.62195203 #> [139] 0.48630777 0.37646430 0.51037708 0.30010822 0.34579292 0.43249834 #> [145] 0.33533459 0.30888145 0.21172559 0.37876478 0.40847791 0.43609321 #> [151] 0.45272611 0.45918328 0.42761165 0.40315104 0.42798236 0.41166759 #> [157] 0.38777688 0.38680508 0.27851509 0.42304119 0.42894804 0.52545575 #> [163] 0.43679653 0.44720075 0.48484124 0.58132052 0.60700243 0.67014936 #> [169] 0.62421346 0.39545577 0.32752028 0.37423180 0.34799825 0.23655559 #> [175] 0.32509511 0.36552937 0.38291230 0.38963289 0.39340232 0.51857818 #> [181] 0.47135582 0.51175747 0.47419745 0.29972938 0.35194719 0.36181577 #> [187] 0.37368179 0.42875252 0.52154119 0.51588002 0.42081725 0.44540196 #> [193] 0.52143749 0.46723966 0.35333216 0.36943795 0.39826855 0.34007635 #> [199] 0.01291917 0.13544962 0.20669899 0.36713306 0.41148913 0.45293091 #> [205] 0.58929427 0.57270550 0.52138967 0.51077866 0.50358989 0.46676815 #> [211] 0.43540582 0.39056856 0.39369314 0.41868420 0.47997467 0.39683818 #> [217] 0.45264942 0.40233250 0.41678830 0.49181884 0.49215617 0.43610621 #> [223] 0.40931809 0.48230859 0.41009530 0.42425065 0.42621726 0.46869696 #> [229] 0.44569509 0.48882886 0.50728624 0.42112981 0.43983892 0.35316027 #> [235] 0.48411246 0.47247101 0.45003589 0.42287492 0.45626925 0.42779257 #> [241] 0.65064159 0.58513965 0.59887091 0.55322739 0.60500895 0.53197278 #> [247] 0.52884425 0.43250399 0.41601581 0.45179561 0.50473514 0.46760026 #> [253] 0.61883630 0.63815998 0.43668848 0.48810984 0.63237008 0.55529455 #> [259] 0.42626228 0.46453483 0.53512830 0.50663075 0.47765666 0.60380739 #> [265] 0.61396998 0.61757869 0.64321875 0.51869341 0.56741580 0.52875422 #> [271] 0.50700235 0.55827635 0.55836373 0.48523067 0.34229961 0.32582072 #> [277] 0.35211725 0.41833858 0.34744589 0.27865306 0.24511337 0.34826769 #> [283] 0.28560361 0.43377675 0.43270414 0.49705582 0.50456632 0.47507157 #> [289] 0.49636692 0.46624531 0.38336180 0.33271665 0.35228697 0.30015465 #> [295] 0.28706828 0.34899571 0.32415684 0.28982961 0.42138801 0.42779093 #> [301] 0.43240330 0.42938834 0.51140310 0.51288410 0.53946025 0.58628227 #> [307] 0.54424519 0.55365054 0.65396118 0.57115355 0.49438779 0.45803946 #> [313] 0.53966803 0.58715888 0.67872443 0.64916369 0.59230901 0.58109750 #> [319] 0.40553828 0.46730657 0.38960262 0.39923937 0.39879484 0.33931862 #> [325] 0.37595988 0.44986212 0.42266545 0.46313609 0.40955170 0.40276935 #> [331] 0.49331993 0.40056253 0.45991901 0.46994115 0.58137184 0.43802073 #> [337] 0.42367521 0.36584719 0.29788635 0.14812813 0.17156988 0.21101467 #> [343] 0.37726658 0.38214623 0.56253276 0.53991521 0.45172680 0.43868920 #> [349] 0.42180320 0.43604128 0.47454550 0.50656745 0.52205539 0.52405913 #> [355] 0.54194077 0.36767095 0.34046794 0.28643156 0.28585409 0.23834983 #> [361] 0.32366197 0.39891931 0.49440270 0.45246631 0.45424048 0.45898606 #> [367] 0.42295772 0.40818135 0.41100629 0.38495214 0.39092023 0.47780830 #> [373] 0.42399129 0.36055531 0.44191133 0.52042507 0.47902566 0.51620687 #> [379] 0.41879224 0.35548215 0.53598398 0.47757233 0.40687567 0.36649322 #> [385] 0.48949438 0.38104641 0.36156534 0.28778360 0.27798715 0.29907385 #> [391] 0.39214001 0.34000940 0.37703129 0.42000973 0.44116528 0.46378751 #> [397] 0.55015055 0.50852623 0.57725330 0.47989540 0.43946685 0.44232535 #> [403] 0.47969995 0.42379676 0.36950288 0.47305022 0.44874629 0.43250624 #> [409] 0.33093167 0.33928473 0.38579588 0.40400734 0.35784392 0.40112716 #> [415] 0.34328701 0.38286714 0.19867902 0.23152427 0.41661346 0.30048412 #> [421] 0.29733735 0.24534606 0.32590654 0.34566339 0.40371571 0.39985415 #> [427] 0.43426003 0.39133436 0.37124880 0.39102980 0.42122233 0.37178826 #> [433] 0.43794709 0.45198038 0.45882207 0.38531144 0.37362976 0.35261636 #> [439] 0.34368685 0.36491673 0.31851801 0.30399612 0.21086776 0.21022323 #> [445] 0.25205861 0.27514060 0.41399097 0.58645433 0.63791335 0.84271546 #> [451] 0.91461433 0.65580216 0.50082441 0.55267979 0.52469846 0.49027894 #> [457] 0.47553120 0.52393541 0.56056538 0.43157943 0.37689061 0.39741734 #> [463] 0.37757743 0.43723449 0.42078791 0.37573729 0.36344052 0.48158188 #> [469] 0.57247358 0.59215918 0.51441388 0.32048059 0.26753007 0.17954743 #> [475] 0.18006749 0.13978116 0.14747489 0.27391111 0.27337663 0.35678015 #> [481] 0.32037734 0.41166922 0.42211973 0.45341452 0.43734506 0.50841975 #> [487] 0.49799778 0.49434406 0.46251601 0.37950325 0.31031960 0.46780571 #> [493] 0.36629283 0.36931340 0.51593398 0.33587610 0.37887700 0.47016937 #> [499] 0.55695683 0.45849336"},{"path":"https://openpharma.github.io/crmPack/reference/check_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if All Arguments Are Equal — check_equal","title":"Check if All Arguments Are Equal — check_equal","text":"Elements ... must numeric vectors scalars. function performs element--element comparison first object provided ... every object ... returns TRUE comparisons equal within given tolerance FALSE otherwise. Elements ... must numeric vectors scalars. function performs element--element comparison first object provided ... every object ... throws error .","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if All Arguments Are Equal — check_equal","text":"","code":"check_equal(..., tol = sqrt(.Machine$double.eps))  assert_equal(   ...,   tol = sqrt(.Machine$double.eps),   .var.name = vname(x),   add = NULL )"},{"path":"https://openpharma.github.io/crmPack/reference/check_equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if All Arguments Are Equal — check_equal","text":"... (numeric) vectors compared tol (numeric) maximum difference tolerated judging equality .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if All Arguments Are Equal — check_equal","text":"TRUE element--element differences less tolerance magnitude, FALSE otherwise. list(...), invisibly.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_equal.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if All Arguments Are Equal — check_equal","text":"missing infinite values ..., function returns FALSE, regardless values elements .... elements ... length, FALSE returned. missing infinite values ..., function throws error, regardless values elements .... elements ... length, error thrown.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/check_equal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if All Arguments Are Equal — check_equal","text":"","code":"check_equal(1:2, 1:2) # TRUE #> [1] TRUE check_equal(1:2, 2:3) # \"Not all equal\" #> [1] \"Not all equal\" check_equal(Inf, Inf) # \"Not all equal\" #> [1] \"Not all entries finite\" check_equal(0.01, 0.02) # \"Not all equal\" #> [1] \"Not all equal\" check_equal(0.01, 0.02, tol = 0.05) # TRUE #> [1] TRUE check_equal(1, c(1, 1)) # \"Not all equal\" #> [1] \"Not all of same length\" assert_equal(1:2, 1:2) # no error assert_equal(0.01, 0.02, tol = 0.05) # no error"},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/check_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that an argument is a valid format specification — check_format","text":"","code":"check_format(x, len = NULL, min.len = NULL, max.len = NULL)  assert_format(   x,   len = NULL,   min.len = NULL,   max.len = NULL,   .var.name = checkmate::vname(x),   add = NULL )  test_format(x, len = NULL, min.len = NULL, max.len = NULL)  expect_format(   x,   len = NULL,   min.len = NULL,   max.len = NULL,   info = NULL,   label = vname(x) )"},{"path":"https://openpharma.github.io/crmPack/reference/check_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that an argument is a valid format specification — check_format","text":"x [] Object check. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that an argument is a valid format specification — check_format","text":"TRUE successful, otherwise string error message.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/check_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that an argument is a valid format specification — check_format","text":"","code":"check_format(\"%5.2f\") #> [1] TRUE"},{"path":"https://openpharma.github.io/crmPack/reference/check_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if vectors are of compatible lengths — check_length","title":"Check if vectors are of compatible lengths — check_length","text":"Two vectors compatible size : least one vector size 1 vectors size.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if vectors are of compatible lengths — check_length","text":"","code":"check_length(x, len)  assert_length(x, len, .var.name = checkmate::vname(x), add = NULL)  test_length(x, len)"},{"path":"https://openpharma.github.io/crmPack/reference/check_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if vectors are of compatible lengths — check_length","text":"x () first vector, object length() function defined. len (count) length second vector. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if vectors are of compatible lengths — check_length","text":"TRUE successful, otherwise string error message.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/check_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if vectors are of compatible lengths — check_length","text":"","code":"check_length(1:5, 1) #> [1] TRUE check_length(1:5, 6) #> [1] \"x is of length 5 which is not allowed; the allowed lengths are: 1 or 6\" check_length(1:5, 5) #> [1] TRUE check_length(10, 1) #> [1] TRUE check_length(10, 9) #> [1] TRUE"},{"path":"https://openpharma.github.io/crmPack/reference/check_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a probability vector — check_probabilities","title":"Check if an argument is a probability vector — check_probabilities","text":"Check every element given numerical vector matrix represents probability, number within (0, 1) interval, can optionally closed side.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a probability vector — check_probabilities","text":"","code":"check_probabilities(   x,   bounds_closed = TRUE,   len = NULL,   unique = FALSE,   sorted = FALSE )  assert_probabilities(   x,   bounds_closed = TRUE,   len = NULL,   unique = FALSE,   sorted = FALSE,   .var.name = checkmate::vname(x),   add = NULL )  test_probabilities(   x,   bounds_closed = TRUE,   len = NULL,   unique = FALSE,   sorted = FALSE )  expect_probabilities(   x,   bounds_closed = TRUE,   len = NULL,   unique = FALSE,   sorted = FALSE,   info = NULL,   label = vname(x) )"},{"path":"https://openpharma.github.io/crmPack/reference/check_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a probability vector — check_probabilities","text":"x (numeric) vector matrix numerical values check. bounds_closed (logical) bounds closed? can scalar vector length two. scalar, value applies equally lower bound \\(0\\) upper bound \\(1\\). vector two flags, first flag corresponds lower bound \\(0\\) , second upper bound \\(1\\) . len [integer(1)] Exact expected length x. unique [logical(1)] Must values unique? Default FALSE. sorted [logical(1)] Elements must sorted ascending order. Missing values ignored. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a probability vector — check_probabilities","text":"TRUE successful, otherwise string error message.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_probabilities.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if an argument is a probability vector — check_probabilities","text":"missing non-finite values x, function returns FALSE, regardless values elements x.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/check_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a probability vector — check_probabilities","text":"","code":"x <- c(0, 0.2, 0.1, 0.3, 1) check_probabilities(x) #> [1] TRUE check_probabilities(x, bounds_closed = FALSE) #> [1] \"Probability must be within (0, 1) bounds but it is not\" check_probabilities(x, bounds_closed = c(FALSE, TRUE)) #> [1] \"Probability must be within (0, 1] bounds but it is not\""},{"path":"https://openpharma.github.io/crmPack/reference/check_probability.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a single probability value — check_probability","title":"Check if an argument is a single probability value — check_probability","text":"Check given value represents probability, number within (0, 1) interval, can optionally closed side.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_probability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a single probability value — check_probability","text":"","code":"check_probability(x, bounds_closed = TRUE)  assert_probability(   x,   bounds_closed = TRUE,   .var.name = checkmate::vname(x),   add = NULL )  test_probability(x, bounds_closed = TRUE)  expect_probability(x, bounds_closed = TRUE, info = NULL, label = vname(x))"},{"path":"https://openpharma.github.io/crmPack/reference/check_probability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a single probability value — check_probability","text":"x (number) single value check. bounds_closed (logical) bounds closed? can scalar vector length two. scalar, value applies equally lower bound \\(0\\) upper bound \\(1\\). vector two flags, first flag corresponds lower bound \\(0\\) , second upper bound \\(1\\) . .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_probability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a single probability value — check_probability","text":"TRUE successful, otherwise string error message.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/check_probability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a single probability value — check_probability","text":"","code":"check_probability(0.5) #> [1] TRUE check_probability(0, bounds_closed = FALSE) #> [1] \"Probability must be within (0, 1) bounds but it is not\" check_probability(0, bounds_closed = c(FALSE, TRUE)) #> [1] \"Probability must be within (0, 1] bounds but it is not\""},{"path":"https://openpharma.github.io/crmPack/reference/check_probability_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an argument is a probability range — check_probability_range","title":"Check if an argument is a probability range — check_probability_range","text":"Check given numerical interval represents probability range, sub-interval (0, 1) interval, can optionally closed side.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_probability_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an argument is a probability range — check_probability_range","text":"","code":"check_probability_range(x, bounds_closed = TRUE)  assert_probability_range(   x,   bounds_closed = TRUE,   .var.name = checkmate::vname(x),   add = NULL )  test_probability_range(x, bounds_closed = TRUE)  expect_probability_range(   x,   bounds_closed = TRUE,   info = NULL,   label = vname(x) )"},{"path":"https://openpharma.github.io/crmPack/reference/check_probability_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an argument is a probability range — check_probability_range","text":"x (number) interval check. bounds_closed (logical) bounds closed? can scalar vector length two. scalar, value applies equally lower bound \\(0\\) upper bound \\(1\\). vector two flags, first flag corresponds lower bound \\(0\\) , second upper bound \\(1\\) . .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_probability_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an argument is a probability range — check_probability_range","text":"TRUE successful, otherwise string error message.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/check_probability_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an argument is a probability range — check_probability_range","text":"","code":"x <- c(0, 0.2) check_probability_range(x) #> [1] TRUE check_probability_range(rev(x)) #> [1] \"Must be sorted\" check_probability_range(x, bounds_closed = FALSE) #> [1] \"Probability must be within (0, 1) bounds but it is not\" check_probability_range(x, bounds_closed = c(FALSE, TRUE)) #> [1] \"Probability must be within (0, 1] bounds but it is not\""},{"path":"https://openpharma.github.io/crmPack/reference/check_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that an argument is a numerical range — check_range","title":"Check that an argument is a numerical range — check_range","text":"argument x numerical range (conditions must met): object type: integer double. vector length two value first number less second number. Equalness allowed unique flag set TRUE. Lower bound interval greater equal lower upper bound interval less equal upper. contains finite (given finite TRUE) non-missing values.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that an argument is a numerical range — check_range","text":"","code":"check_range(x, lower = -Inf, upper = Inf, finite = FALSE, unique = TRUE)  assert_range(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   unique = TRUE,   .var.name = checkmate::vname(x),   add = NULL )  test_range(x, lower = -Inf, upper = Inf, finite = FALSE, unique = TRUE)  expect_range(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   unique = TRUE,   info = NULL,   label = vname(x) )"},{"path":"https://openpharma.github.io/crmPack/reference/check_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that an argument is a numerical range — check_range","text":"x [] Object check. lower [numeric(1)] Lower value elements x must greater equal . upper [numeric(1)] Upper value elements x must lower equal . finite [logical(1)] Check finite values? Default FALSE. unique [logical(1)] Must values unique? Default FALSE. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection. info [character(1)] Extra information included message testthat reporter. See expect_that. label [character(1)] Name checked object print messages. Defaults heuristic implemented vname.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/check_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that an argument is a numerical range — check_range","text":"TRUE successful, otherwise string error message.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/check_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that an argument is a numerical range — check_range","text":"","code":"check_range(c(1, 5)) #> [1] TRUE check_range(c(-5, 1)) #> [1] TRUE check_range(c(4, 1)) #> [1] \"x must be a valid numerical range. Must be sorted\" check_range(c(1, 1)) #> [1] \"x must be a valid numerical range. Contains duplicated values, position 2\" check_range(c(1, 1), unique = FALSE) #> [1] TRUE check_range(1:3) #> [1] \"x must be a valid numerical range. Must have length 2, but has length 3\""},{"path":"https://openpharma.github.io/crmPack/reference/crmPack-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Object-oriented implementation of CRM designs — crmPack-package","title":"Object-oriented implementation of CRM designs — crmPack-package","text":"Object-oriented implementation CRM designs","code":""},{"path":"https://openpharma.github.io/crmPack/reference/crmPack-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Object-oriented implementation of CRM designs — crmPack-package","text":"Sabanes Bove D, Yeung WY, Palermo G, Jaki T (2019). \"Model-Based Dose Escalation Designs R crmPack.\" Journal Statistical Software, 89(10), 1-22. doi:10.18637/jss.v089.i10 (URL: http://doi.org/10.18637/jss.v089.i10).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/crmPackExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the example pdf for crmPack — crmPackExample","title":"Open the example pdf for crmPack — crmPackExample","text":"Calling helper function open example.pdf document, residing doc subfolder package installation directory.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/crmPackExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the example pdf for crmPack — crmPackExample","text":"","code":"crmPackExample()"},{"path":"https://openpharma.github.io/crmPack/reference/crmPackExample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open the example pdf for crmPack — crmPackExample","text":"nothing","code":""},{"path":"https://openpharma.github.io/crmPack/reference/crmPackExample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Open the example pdf for crmPack — crmPackExample","text":"Daniel Sabanes Bove sabanesd@rconis.com","code":""},{"path":"https://openpharma.github.io/crmPack/reference/crmPackHelp.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the browser with help pages for crmPack — crmPackHelp","title":"Open the browser with help pages for crmPack — crmPackHelp","text":"convenience function opens browser help pages crmPack.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/crmPackHelp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the browser with help pages for crmPack — crmPackHelp","text":"","code":"crmPackHelp()"},{"path":"https://openpharma.github.io/crmPack/reference/crmPackHelp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open the browser with help pages for crmPack — crmPackHelp","text":"nothing","code":""},{"path":"https://openpharma.github.io/crmPack/reference/crmPackHelp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Open the browser with help pages for crmPack — crmPackHelp","text":"Daniel Sabanes Bove sabanesd@rconis.com","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a Function to Subsets of Data Frame. — dapply","title":"Apply a Function to Subsets of Data Frame. — dapply","text":"dapply splits data df subsets defined f, applies function FUN subset. results row-binded returned data.frame object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a Function to Subsets of Data Frame. — dapply","text":"","code":"dapply(df, f, FUN, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/dapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a Function to Subsets of Data Frame. — dapply","text":"df (data frame) data set divided groups. f (factor formula list) factor sense .factor(f) defines grouping, list factors case interaction used grouping. f can also formula form ~ g1 + ... + gk split interaction variables g1, ..., gk. parameter passed directly split() function. FUN (function) function applied subset df defined f. ... parameters passed lapply(), used applying function FUN groups defined f.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a Function to Subsets of Data Frame. — dapply","text":"data.frame object results FUN.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a Function to Subsets of Data Frame. — dapply","text":"","code":"df <- data.frame(   dose = c(0.1, 6, 6, 5, 0.1, 5, 6, 6),   cohort = c(\"B\", \"B\", \"B\", \"A\", \"A\", \"A\", \"B\", \"B\") )  dapply(   df,   f = ~cohort,   FUN = function(coh) {     data.frame(my_cohort = coh$cohort[1], my_max = max(coh$dose))   } ) #>   my_cohort my_max #> 1         A      5 #> 2         B      6  dapply(   df,   f = ~cohort,   FUN = function(coh) {     coh$dose <- sort(coh$dose, decreasing = TRUE)     coh   } ) #>   dose cohort #> 1  5.0      A #> 2  5.0      A #> 3  0.1      A #> 4  6.0      B #> 5  6.0      B #> 6  6.0      B #> 7  6.0      B #> 8  0.1      B"},{"path":"https://openpharma.github.io/crmPack/reference/dinvGamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the density of Inverse gamma distribution — dinvGamma","title":"Compute the density of Inverse gamma distribution — dinvGamma","text":"Compute density Inverse gamma distribution","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dinvGamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the density of Inverse gamma distribution — dinvGamma","text":"","code":"dinvGamma(x, a, b, log = FALSE, normalize = TRUE)"},{"path":"https://openpharma.github.io/crmPack/reference/dinvGamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the density of Inverse gamma distribution — dinvGamma","text":"x vector quantiles shape parameter inverse gamma distribution b scale parameter inverse gamma distribution log logical; TRUE, probabilities p given log(p) normalize logical; TRUE, output normalized","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing the Doses for a given independent variable, Model and Samples — dose","title":"Computing the Doses for a given independent variable, Model and Samples — dose","text":"function computes dose reaching specific target value given variable dose depends . meaning variable depends type model. instance, single agent dose escalation model pseudo DLE (dose-limiting events)/toxicity model, variable represents probability occurrence DLE. efficacy models, represents expected efficacy. doses computed based samples model parameters (samples).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing the Doses for a given independent variable, Model and Samples — dose","text":"","code":"dose(x, model, samples, ...)  # S4 method for class 'numeric,LogisticNormal,Samples' dose(x, model, samples)  # S4 method for class 'numeric,LogisticLogNormal,Samples' dose(x, model, samples)  # S4 method for class 'numeric,LogisticLogNormalOrdinal,Samples' dose(x, model, samples, grade)  # S4 method for class 'numeric,LogisticLogNormalSub,Samples' dose(x, model, samples)  # S4 method for class 'numeric,ProbitLogNormal,Samples' dose(x, model, samples)  # S4 method for class 'numeric,ProbitLogNormalRel,Samples' dose(x, model, samples)  # S4 method for class 'numeric,LogisticLogNormalGrouped,Samples' dose(x, model, samples, group)  # S4 method for class 'numeric,LogisticKadane,Samples' dose(x, model, samples)  # S4 method for class 'numeric,LogisticKadaneBetaGamma,Samples' dose(x, model, samples)  # S4 method for class 'numeric,LogisticNormalMixture,Samples' dose(x, model, samples)  # S4 method for class 'numeric,LogisticNormalFixedMixture,Samples' dose(x, model, samples)  # S4 method for class 'numeric,LogisticLogNormalMixture,Samples' dose(x, model, samples)  # S4 method for class 'numeric,DualEndpoint,Samples' dose(x, model, samples)  # S4 method for class 'numeric,LogisticIndepBeta,Samples' dose(x, model, samples)  # S4 method for class 'numeric,LogisticIndepBeta,missing' dose(x, model)  # S4 method for class 'numeric,Effloglog,missing' dose(x, model)  # S4 method for class 'numeric,EffFlexi,Samples' dose(x, model, samples)  # S4 method for class 'numeric,OneParLogNormalPrior,Samples' dose(x, model, samples)  # S4 method for class 'numeric,OneParExpPrior,Samples' dose(x, model, samples)"},{"path":"https://openpharma.github.io/crmPack/reference/dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing the Doses for a given independent variable, Model and Samples — dose","text":"x (proportion numeric) value independent variable dose depends. following recycling rule applies samples missing: vectors size 1 recycled size sample (.e. size(samples)). Otherwise, x must size sample. model (GeneralModel ModelPseudo) model. samples (Samples) samples model's parameters used compute resulting doses. Can also missing models. ... model specific parameters samples used. grade (integer) toxicity grade probabilities required group (character factor) LogisticLogNormalGrouped, indicating whether calculate dose mono combo arm.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computing the Doses for a given independent variable, Model and Samples — dose","text":"number numeric vector doses. non-scalar samples used, every element returned vector corresponds one element sample. Hence, case, output vector length sample vector. scalar samples used samples used, e.g. pseudo DLE/toxicity model, output length length prob.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computing the Doses for a given independent variable, Model and Samples — dose","text":"dose() function computes doses corresponding value given independent variable, using samples model parameter(s). work multivariate model parameters, assume model specific dose() method receives samples matrix rows correspond sampling index, .e. layout nSamples x dimParameter.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dose.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Computing the Doses for a given independent variable, Model and Samples — dose","text":"dose(x = numeric, model = LogisticNormal, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). dose(x = numeric, model = LogisticLogNormal, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). dose(x = numeric, model = LogisticLogNormalOrdinal, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). case LogisticLogNormalOrdinal model, dose returns probability toxicity given grade higher dose(x = numeric, model = LogisticLogNormalSub, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). dose(x = numeric, model = ProbitLogNormal, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). dose(x = numeric, model = ProbitLogNormalRel, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). dose(x = numeric, model = LogisticLogNormalGrouped, samples = Samples): method LogisticLogNormalGrouped needs group argument addition. dose(x = numeric, model = LogisticKadane, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). dose(x = numeric, model = LogisticKadaneBetaGamma, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). dose(x = numeric, model = LogisticNormalMixture, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). dose(x = numeric, model = LogisticNormalFixedMixture, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). dose(x = numeric, model = LogisticLogNormalMixture, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). dose(x = numeric, model = DualEndpoint, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). dose(x = numeric, model = LogisticIndepBeta, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). dose(x = numeric, model = LogisticIndepBeta, samples = missing): compute dose level reaching specific target probability occurrence DLE (x). model parameters (except x) present model object. dose(x = numeric, model = Effloglog, samples = missing): compute dose level reaching specific target probability occurrence DLE (x). model parameters (except x) present model object. dose(x = numeric, model = EffFlexi, samples = Samples): compute dose level reaching specific target probability occurrence DLE (x). method x must scalar. dose(x = numeric, model = OneParLogNormalPrior, samples = Samples): compute dose level reaching specific target probability occurrence DLT (x). dose(x = numeric, model = OneParExpPrior, samples = Samples): compute dose level reaching specific target probability occurrence DLT (x).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dose.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Computing the Doses for a given independent variable, Model and Samples — dose","text":"dose() prob() methods inverse , dose() methods first argument, .e. given independent variable dose depends , represents toxicity probability.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/dose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computing the Doses for a given independent variable, Model and Samples — dose","text":"","code":"# Create some data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) ) #> Used default patient IDs!  # Initialize a model, e.g. 'LogisticLogNormal'. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Get samples from posterior. my_options <- McmcOptions(burnin = 100, step = 2, samples = 20) my_samples <- mcmc(data = my_data, model = my_model, options = my_options)  # Posterior for the dose achieving Prob(DLT) = 0.45. dose(x = 0.45, model = my_model, samples = my_samples) #>  [1]  8.864732  6.581658 17.768894 38.155673 15.186236 61.753991 44.268249 #>  [8] 44.268249 47.280979 60.936325 60.936325 60.936325 60.936325 60.936325 #> [15] 60.936325 31.871177 22.370008 98.568554 98.568554 98.568554  # Create data from the 'Data' (or 'DataDual') class. dlt_data <- Data(   x = c(25, 50, 25, 50, 75, 300, 250, 150),   y = c(0, 0, 0, 0, 0, 1, 1, 0),   doseGrid = seq(from = 25, to = 300, by = 25) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Initialize a toxicity model using 'LogisticIndepBeta' model. dlt_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = dlt_data )  # Get samples from posterior. dlt_sample <- mcmc(data = dlt_data, model = dlt_model, options = my_options)  # Posterior for the dose achieving Prob(DLT) = 0.45. dose(x = 0.45, model = dlt_model, samples = dlt_sample) #>  [1]  5.394717e+07 2.079593e-131 2.079593e-131 2.079593e-131 2.079593e-131 #>  [6]  2.103099e+01  2.103099e+01  1.875484e+02  3.718879e+01  3.718879e+01 #> [11]  3.718879e+01  3.718879e+01  3.718879e+01  3.718879e+01  3.718879e+01 #> [16]  3.718879e+01  3.718879e+01  3.718879e+01  3.718879e+01  6.519215e+01 dose(x = c(0.45, 0.6), model = dlt_model) #> [1] 144.6624 247.7348 data_ordinal <- .DefaultDataOrdinal() model <- .DefaultLogisticLogNormalOrdinal() options <- .DefaultMcmcOptions() samples <- mcmc(data_ordinal, model, options) #> Warning: Unused variable \"y\" in data  dose(0.25, model, samples, grade = 2L) #>    [1] 5.663574e+01 7.157569e+01 1.441790e+04 6.206144e+01 6.456386e+01 #>    [6] 5.683822e+01 6.087890e+01 6.448197e+01 6.718741e+01 8.528361e+01 #>   [11] 5.878336e+01 5.383823e+01 6.238352e+01 6.097242e+01 5.840421e+01 #>   [16] 6.789149e+01 7.328310e+01 5.686888e+01 6.573154e+01 6.972353e+01 #>   [21] 5.388496e+01 5.418158e+01 6.566924e+01 6.057461e+01 8.438705e+01 #>   [26] 7.784861e+01 9.154391e+01 5.940324e+01 7.251134e+01 6.105000e+01 #>   [31] 6.746315e+01 5.973233e+01 1.091816e+02 5.631076e+01 1.358143e+02 #>   [36] 5.790148e+01 5.541354e+01 5.932674e+01 6.611773e+01 3.323261e+02 #>   [41] 7.106320e+01 7.316733e+01 5.389717e+01 5.079300e+01 6.429697e+01 #>   [46] 5.726554e+01 5.651569e+01 8.248421e+01 6.165409e+01 6.868590e+01 #>   [51] 7.254672e+01 6.348738e+01 9.869724e+01 5.920392e+01 6.183547e+01 #>   [56] 5.916428e+01 5.903290e+01 8.339364e+01 8.325935e+01 6.327473e+01 #>   [61] 5.496070e+01 6.454177e+01 6.991143e+01 6.013747e+01 6.214012e+01 #>   [66] 1.162662e+02 5.398351e+01 5.769901e+01 5.790667e+01 6.248182e+01 #>   [71] 8.964722e+01 9.413283e+01 1.267348e+02 6.969751e+01 7.247714e+01 #>   [76] 6.585472e+01 5.591396e+01 5.715743e+01 3.159206e+01 1.030087e+02 #>   [81] 6.218281e+01 8.976366e+01 6.387164e+01 8.519279e+01 5.381786e+01 #>   [86] 1.287763e+02 5.765351e+01 8.935984e+01 7.209899e+01 6.861025e+01 #>   [91] 6.674597e+01 6.298233e+01 7.060099e+01 8.933679e+01 1.203062e+03 #>   [96] 7.186574e+01 7.894944e+01 5.955622e+01 6.018268e+01 1.002832e+02 #>  [101] 5.745750e+01 1.027181e+02 7.633085e+01 5.772466e+01 7.261762e+01 #>  [106] 5.920846e+01 6.849256e+01 5.613605e+01 9.149071e+01 5.968718e+01 #>  [111] 5.592182e+01 9.157814e+01 6.804501e+01 5.599750e+01 6.672602e+01 #>  [116] 5.982714e+01 8.582233e+01 1.129423e+02 8.644899e+01 8.506171e+01 #>  [121] 1.073522e+02 7.041318e+01 8.445309e+01 5.578118e+01 6.605120e+01 #>  [126] 6.559430e+01 6.155132e+01 1.679064e+02 2.558479e+02 6.659841e+01 #>  [131] 6.325257e+01 7.810815e+01 5.558795e+01 5.825817e+01 6.994172e+01 #>  [136] 5.885827e+01 5.699319e+01 6.444533e+01 5.842037e+01 6.659621e+01 #>  [141] 5.741522e+01 5.625146e+01 6.008688e+01 1.321218e+02 7.238022e+01 #>  [146] 7.777583e+01 5.952014e+01 7.072920e+01 6.950115e+01 5.830050e+01 #>  [151] 7.420588e+01 6.413561e+01 7.901054e+01 7.160329e+01 6.778554e+01 #>  [156] 9.199278e+01 9.860675e+01 5.567992e+01 6.366793e+01 6.681558e+01 #>  [161] 6.201555e+01 3.664168e+02 5.653153e+01 6.120988e+01 6.228970e+01 #>  [166] 6.994930e+01 5.776448e+01 6.607094e+01 7.114412e+01 2.434210e+02 #>  [171] 6.411773e+01 2.232505e+02 6.824336e+01 1.069578e+02 5.305258e+01 #>  [176] 5.772740e+01 5.694473e+01 7.040540e+01 5.396322e+01 5.266680e+01 #>  [181] 7.554062e+01 1.825770e+02 1.962167e+02 5.820571e+01 5.792279e+01 #>  [186] 6.219719e+01 5.751622e+01 6.618324e+01 1.261759e+02 5.516741e+01 #>  [191] 7.062037e+01 7.084048e+01 6.967634e+01 6.164317e+01 6.042767e+01 #>  [196] 6.667446e+01 1.115493e+02 1.198564e+02 7.984545e+01 5.506639e+01 #>  [201] 8.909598e+01 7.020476e+01 8.444643e+01 6.550594e+01 6.074647e+01 #>  [206] 6.112438e+01 6.152795e+01 6.179696e+01 6.409675e+01 4.986724e+01 #>  [211] 6.750123e+01 8.554977e+01 7.525088e+01 7.620598e+01 6.194986e+01 #>  [216] 5.596570e+01 7.259277e+01 5.947921e+01 6.338285e+01 6.488772e+01 #>  [221] 7.792166e+01 5.811313e+01 6.103117e+01 8.426125e+01 1.107000e+02 #>  [226] 1.277142e+02 6.632354e+01 5.704436e+01 7.349549e+01 8.104839e+01 #>  [231] 9.170750e+01 5.231317e+01 5.940154e+01 6.375299e+01 1.030620e+02 #>  [236] 5.318208e+01 6.943244e+01 7.302922e+01 6.143725e+01 6.316016e+01 #>  [241] 5.527340e+01 6.179492e+01 6.508915e+01 9.647520e+01 5.798279e+01 #>  [246] 7.938424e+01 1.771476e+02 2.417428e+03 7.420614e+01 1.396420e+02 #>  [251] 1.389020e+02 1.288398e+02 5.559837e+01 7.520101e+01 8.293733e+01 #>  [256] 6.399163e+01 5.829773e+01 9.447308e+01 6.498683e+01 8.412010e+01 #>  [261] 6.054862e+01 5.961697e+01 7.619192e+01 5.785177e+01 7.193031e+01 #>  [266] 6.578076e+01 6.885776e+02 7.861534e+01 6.358784e+01 6.121629e+01 #>  [271] 6.446672e+01 6.526960e+01 1.116254e+02 1.456334e+02 1.986552e+02 #>  [276] 5.749005e+01 1.203872e+02 1.435890e+02 6.474303e+01 1.573344e+02 #>  [281] 5.912571e+01 6.547162e+01 5.829598e+01 5.803027e+01 6.538478e+01 #>  [286] 6.414699e+01 5.574026e+01 1.399709e+02 6.682686e+01 7.050022e+01 #>  [291] 5.552881e+01 5.163205e+01 7.374204e+01 6.432337e+01 6.862481e+01 #>  [296] 8.810367e+01 1.344281e+02 6.005552e+01 6.404234e+01 8.645120e+01 #>  [301] 3.961998e+02 6.140172e+01 1.105203e+02 6.276092e+01 1.703712e+02 #>  [306] 3.881924e+02 1.322830e+02 1.105118e+02 6.262241e+01 7.930195e+01 #>  [311] 2.187136e+03 5.989992e+01 1.091165e+02 5.677310e+01 6.316938e+01 #>  [316] 9.380437e+01 9.402453e+01 6.592638e+01 5.512730e+01 6.748263e+01 #>  [321] 6.156059e+01 6.174579e+01 5.968821e+01 5.982729e+01 6.122728e+01 #>  [326] 7.347886e+01 6.177277e+01 6.120882e+01 5.761748e+01 5.825528e+01 #>  [331] 5.794518e+01 6.310688e+01 7.394465e+01 5.327012e+01 7.850895e+01 #>  [336] 6.075052e+01 9.575788e+01 7.822169e+01 6.622666e+01 7.282601e+01 #>  [341] 6.024008e+01 6.280587e+01 9.995354e+01 1.793305e+02 6.151756e+01 #>  [346] 6.054125e+01 5.740126e+01 8.842980e+01 9.266449e+01 6.053097e+01 #>  [351] 5.388999e+01 5.562447e+01 6.399450e+01 7.198340e+01 6.373355e+01 #>  [356] 7.831710e+01 5.509629e+01 6.063344e+01 6.358134e+01 6.901918e+01 #>  [361] 6.222478e+01 7.790548e+01 6.462640e+01 6.258850e+01 6.179451e+01 #>  [366] 1.193552e+02 6.935238e+01 7.588644e+01 5.042513e+01 8.555454e+01 #>  [371] 5.729658e+01 8.025773e+01 6.023073e+01 1.033842e+02 6.286409e+01 #>  [376] 1.435420e+02 5.795936e+01 5.639661e+01 5.457569e+01 5.141277e+01 #>  [381] 4.627876e+01 4.706374e+01 1.163501e+02 5.613698e+01 6.304919e+01 #>  [386] 3.128086e+02 9.816518e+01 6.711250e+01 5.710795e+01 8.808528e+01 #>  [391] 6.038704e+01 1.854945e+02 7.580871e+01 5.875107e+01 5.708727e+01 #>  [396] 8.608547e+01 5.570362e+01 7.418853e+01 7.156010e+01 7.173057e+01 #>  [401] 9.995603e+01 2.246423e+02 1.390127e+02 5.784249e+01 6.285046e+01 #>  [406] 5.960309e+01 5.644792e+01 6.120110e+01 5.941105e+01 7.335525e+01 #>  [411] 7.298221e+01 5.366638e+01 6.632701e+01 6.943376e+01 5.780021e+01 #>  [416] 1.189147e+02 5.415850e+01 6.369706e+01 5.744407e+01 7.816217e+01 #>  [421] 1.043932e+02 6.057806e+01 9.355957e+01 5.716022e+01 5.906255e+01 #>  [426] 6.158456e+01 7.981419e+01 6.101444e+01 1.955164e+02 6.633945e+01 #>  [431] 6.066631e+01 5.917208e+01 6.278736e+01 6.084020e+01 7.221916e+01 #>  [436] 5.579431e+01 8.405773e+01 5.961555e+01 6.032929e+01 6.849824e+01 #>  [441] 6.974846e+01 6.155050e+01 6.614002e+01 7.228133e+01 6.002007e+01 #>  [446] 8.063577e+01 6.355591e+01 6.638978e+01 5.809096e+01 1.445515e+02 #>  [451] 4.968494e+03 1.004272e+02 1.021196e+02 5.487063e+01 5.436158e+01 #>  [456] 8.694941e+01 6.545476e+01 1.049117e+02 8.413820e+01 6.184139e+01 #>  [461] 6.819006e+01 6.236476e+01 1.375996e+02 6.607912e+01 8.066896e+01 #>  [466] 1.119702e+02 5.551738e+01 6.631121e+01 8.840196e+01 7.074993e+01 #>  [471] 5.645049e+01 6.193349e+01 5.946153e+01 7.430673e+01 9.243356e+01 #>  [476] 6.867464e+01 5.714985e+01 1.139315e+02 9.246380e+01 6.802789e+01 #>  [481] 6.317963e+01 7.691186e+01 5.897209e+01 6.105648e+01 7.660304e+01 #>  [486] 7.611523e+01 7.122017e+01 6.906235e+01 7.125891e+01 7.681511e+01 #>  [491] 7.842661e+03 1.367064e+06 2.044005e+03 6.138742e+01 7.845169e+01 #>  [496] 5.361778e+01 7.825419e+01 5.062060e+01 5.803621e+01 5.851164e+01 #>  [501] 8.032102e+01 8.427431e+01 5.764037e+01 1.281613e+02 6.996587e+01 #>  [506] 6.861585e+01 5.510937e+01 6.288273e+01 6.071417e+01 9.800490e+01 #>  [511] 5.741972e+01 7.054546e+01 8.401259e+01 5.461763e+01 1.124736e+02 #>  [516] 5.810864e+01 6.916529e+01 6.888886e+01 6.027260e+01 5.898672e+01 #>  [521] 7.184297e+01 5.906814e+01 1.174256e+02 6.079256e+01 5.811650e+01 #>  [526] 7.526895e+01 6.369891e+01 5.896718e+01 6.474192e+01 1.087055e+02 #>  [531] 5.709276e+01 7.427079e+01 5.164170e+01 5.445548e+01 1.014581e+02 #>  [536] 6.742231e+01 6.730351e+01 6.297535e+01 7.381465e+01 7.496705e+01 #>  [541] 5.946290e+01 5.649423e+01 6.626124e+01 8.599230e+01 5.454893e+01 #>  [546] 6.168305e+01 6.949809e+01 6.209578e+01 6.543649e+01 7.854727e+01 #>  [551] 1.488656e+02 4.666123e+01 6.485905e+01 1.058806e+02 5.917575e+01 #>  [556] 6.426179e+01 2.529340e+02 8.262751e+01 7.750315e+01 1.338960e+02 #>  [561] 6.229991e+01 5.642895e+01 5.899611e+01 5.696641e+01 6.562384e+01 #>  [566] 6.415769e+01 5.597944e+01 8.188608e+01 6.448959e+01 1.247809e+02 #>  [571] 5.925101e+01 5.773470e+01 2.197149e+03 6.881115e+01 5.597411e+01 #>  [576] 6.634009e+01 1.349724e+06 6.088703e+01 1.100500e+02 5.703643e+01 #>  [581] 5.514620e+01 6.082297e+01 6.420830e+01 6.124453e+01 6.064209e+01 #>  [586] 1.041200e+02 8.314956e+01 1.181258e+02 6.608292e+01 7.534672e+01 #>  [591] 6.668380e+01 9.614314e+01 9.916355e+01 5.236393e+01 7.058735e+01 #>  [596] 7.192034e+01 5.856814e+01 5.906523e+01 7.823181e+01 8.997497e+01 #>  [601] 6.518898e+01 7.003831e+01 9.112827e+01 1.663307e+02 7.713035e+01 #>  [606] 6.124956e+01 3.263276e+02 5.921832e+01 4.272502e+01 5.620853e+01 #>  [611] 9.325303e+01 1.139325e+02 5.809705e+01 1.626962e+02 2.639348e+02 #>  [616] 6.368994e+01 6.750450e+01 8.160672e+02 1.220767e+02 5.872518e+01 #>  [621] 1.138321e+02 4.873646e+01 6.175605e+01 7.831569e+01 7.362715e+01 #>  [626] 8.580634e+01 8.132323e+01 7.266236e+01 7.181561e+01 8.118754e+01 #>  [631] 5.536992e+01 4.858717e+01 7.642378e+01 6.508394e+01 5.929266e+01 #>  [636] 5.680497e+01 7.130081e+01 8.614892e+01 9.132745e+01 6.830904e+01 #>  [641] 5.179547e+01 7.794115e+01 7.753935e+01 6.015596e+01 6.872459e+01 #>  [646] 5.613893e+01 7.927680e+01 5.878616e+01 5.445150e+01 6.913512e+01 #>  [651] 5.831127e+01 6.425690e+01 5.640046e+01 6.896438e+01 6.574748e+01 #>  [656] 5.650453e+01 1.287936e+02 1.048434e+02 6.057751e+01 8.426746e+01 #>  [661] 1.359345e+04 7.046232e+01 5.756444e+01 1.122785e+02 1.112062e+02 #>  [666] 5.966342e+01 6.739356e+01 7.219642e+01 8.229129e+01 5.677081e+01 #>  [671] 7.945162e+01 6.764675e+01 5.825616e+01 6.711440e+01 6.537403e+01 #>  [676] 8.998687e+01 7.958595e+01 6.558077e+01 1.340601e+02 5.674368e+01 #>  [681] 8.166339e+01 6.224758e+01 6.225245e+01 5.898519e+01 5.753804e+01 #>  [686] 6.760892e+01 1.212366e+02 6.289590e+01 5.964136e+01 1.823804e+02 #>  [691] 7.311579e+01 5.829695e+01 2.563626e+02 4.487548e+01 7.241273e+01 #>  [696] 6.466939e+01 1.054020e+02 5.099766e+01 5.854983e+01 1.424785e+02 #>  [701] 1.123834e+02 7.735279e+01 8.444287e+01 1.134993e+02 6.633244e+01 #>  [706] 2.036168e+02 5.867844e+01 5.635576e+01 5.324125e+03 1.648378e+02 #>  [711] 6.513496e+01 6.028719e+01 5.706039e+01 4.068488e+01 5.678122e+01 #>  [716] 7.665228e+01 1.076908e+02 8.752680e+02 5.601635e+01 6.533604e+01 #>  [721] 9.669037e+01 6.480704e+01 5.446656e+01 5.870269e+01 6.103825e+01 #>  [726] 1.990498e+03 5.477724e+01 7.917543e+01 1.141288e+02 7.430674e+01 #>  [731] 5.786740e+01 9.287564e+01 6.219283e+01 6.293785e+01 5.753103e+01 #>  [736] 6.374971e+01 6.098374e+01 7.179104e+01 6.448233e+01 6.321146e+01 #>  [741] 6.365089e+01 7.255856e+01 5.956325e+01 8.040112e+01 7.033361e+01 #>  [746] 6.217247e+01 7.316631e+01 5.449509e+01 6.074603e+01 5.702368e+01 #>  [751] 7.957846e+01 5.437971e+01 5.373503e+01 9.888265e+01 8.524108e+01 #>  [756] 6.846820e+01 6.407954e+01 6.231878e+01 7.833097e+01 1.433301e+02 #>  [761] 6.637914e+01 5.836737e+01 7.500896e+01 6.419883e+01 7.320282e+01 #>  [766] 6.363917e+01 1.349768e+02 6.536619e+01 5.982283e+01 2.850790e+02 #>  [771] 6.553373e+01 6.004722e+01 5.975446e+01 4.937822e+01 5.902798e+01 #>  [776] 6.702161e+01 6.356332e+01 7.539381e+01 7.495060e+01 5.970788e+01 #>  [781] 1.350360e+02 4.618952e+02 5.757299e+01 5.862713e+01 6.135768e+01 #>  [786] 1.012383e+02 7.081582e+01 5.987399e+01 1.134118e+02 1.100531e+02 #>  [791] 7.166193e+01 6.831791e+01 5.862092e+01 5.589440e+01 7.074228e+01 #>  [796] 6.901750e+01 8.953672e+01 6.718999e+01 5.346966e+01 7.013954e+01 #>  [801] 7.179710e+01 5.626105e+01 9.614097e+01 6.854421e+01 7.965101e+01 #>  [806] 2.835092e+02 6.132043e+01 6.084895e+01 8.307978e+01 7.154194e+01 #>  [811] 6.633694e+01 5.591158e+01 6.783652e+01 9.889966e+01 5.661673e+01 #>  [816] 5.461520e+01 1.751356e+02 5.759221e+01 2.320493e+02 7.133745e+01 #>  [821] 5.567062e+01 5.741142e+01 5.877631e+01 6.057320e+01 5.987207e+01 #>  [826] 5.181585e+01 6.302061e+01 5.903768e+01 6.353210e+01 4.442109e+01 #>  [831] 4.871703e+01 8.081164e+01 5.986888e+01 1.248589e+02 6.763382e+01 #>  [836] 8.263747e+01 6.625811e+01 6.696473e+01 6.126669e+01 1.470697e+02 #>  [841] 5.748474e+01 6.453728e+01 6.415722e+01 8.037998e+01 6.393107e+01 #>  [846] 6.794727e+01 6.322103e+01 6.661966e+01 6.828805e+02 1.502116e+02 #>  [851] 6.213104e+01 5.200569e+01 6.290888e+01 6.269942e+01 1.353080e+02 #>  [856] 5.432365e+01 5.453881e+01 6.589008e+01 5.925888e+01 5.668092e+01 #>  [861] 1.284262e+02 6.349110e+01 5.486080e+01 6.388115e+01 1.173642e+02 #>  [866] 1.040187e+02 6.319399e+01 7.516661e+01 6.427357e+01 8.251041e+01 #>  [871] 1.167943e+02 6.439244e+01 6.515878e+01 6.022921e+01 6.393135e+01 #>  [876] 7.863089e+01 6.241734e+01 6.771466e+01 5.561627e+01 6.604616e+01 #>  [881] 5.769749e+01 6.096533e+01 6.823174e+01 6.369409e+01 6.676194e+01 #>  [886] 6.702067e+01 6.466159e+01 8.660135e+01 7.719419e+01 6.255239e+01 #>  [891] 1.034230e+02 5.704469e+01 7.148746e+01 6.327671e+01 5.776848e+01 #>  [896] 6.623368e+01 5.851977e+01 8.287785e+01 5.601318e+01 7.436636e+01 #>  [901] 7.615972e+01 6.178347e+01 6.116821e+01 1.493880e+02 1.842725e+02 #>  [906] 5.399707e+01 2.055339e+02 5.217477e+01 5.979828e+01 8.584312e+01 #>  [911] 5.755211e+01 5.780145e+01 6.333587e+01 6.400611e+01 5.438401e+01 #>  [916] 5.086815e+01 1.602855e+02 6.122921e+02 5.881537e+01 5.580340e+01 #>  [921] 6.908080e+01 1.040064e+02 1.020339e+02 5.892114e+01 5.732899e+01 #>  [926] 6.272255e+01 6.373338e+02 6.756102e+01 1.028699e+02 1.205437e+02 #>  [931] 6.581329e+01 6.407592e+01 9.425810e+01 6.055259e+01 5.329322e+01 #>  [936] 5.701629e+01 8.226132e+01 6.287791e+01 5.898627e+01 5.602589e+01 #>  [941] 5.466413e+01 6.898298e+01 6.806220e+01 3.209939e+02 5.848045e+01 #>  [946] 6.276020e+01 1.286038e+02 6.884806e+01 6.728013e+01 6.323211e+01 #>  [951] 5.898016e+01 5.645502e+01 5.901950e+01 2.105045e+02 4.493696e+02 #>  [956] 8.617820e+01 9.559772e+01 6.198079e+01 5.900239e+01 6.423621e+01 #>  [961] 1.236198e+02 6.080464e+01 8.120134e+02 1.390034e+02 7.511249e+01 #>  [966] 6.089482e+01 9.105796e+01 5.053787e+01 6.675653e+01 7.200483e+01 #>  [971] 9.807031e+01 5.488810e+01 1.074356e+02 6.963967e+01 5.599297e+01 #>  [976] 6.163252e+01 5.876791e+01 6.502358e+01 5.844523e+01 1.177739e+02 #>  [981] 6.226039e+01 6.208493e+01 5.694166e+01 8.548381e+01 5.453693e+01 #>  [986] 6.934062e+01 5.915386e+01 7.450001e+01 7.073937e+01 6.741487e+01 #>  [991] 1.238934e+02 1.007408e+02 2.559732e+02 6.246158e+01 5.642692e+01 #>  [996] 7.727540e+01 5.686514e+01 6.925508e+01 1.389802e+02 6.733232e+01"},{"path":"https://openpharma.github.io/crmPack/reference/doseFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting the Dose Function for a Given Model Type — doseFunction","title":"Getting the Dose Function for a Given Model Type — doseFunction","text":"function returns dose() method computes dose reaching specific target value given independent variable, based model specific parameters.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/doseFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting the Dose Function for a Given Model Type — doseFunction","text":"","code":"doseFunction(model, ...)  # S4 method for class 'GeneralModel' doseFunction(model, ...)  # S4 method for class 'ModelPseudo' doseFunction(model, ...)  # S4 method for class 'LogisticLogNormalOrdinal' doseFunction(model, grade, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/doseFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting the Dose Function for a Given Model Type — doseFunction","text":"model (GeneralModel ModelPseudo) model. ... model specific parameters. grade (integer) toxicity grade dose function required","code":""},{"path":"https://openpharma.github.io/crmPack/reference/doseFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getting the Dose Function for a Given Model Type — doseFunction","text":"dose() method computes doses.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/doseFunction.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Getting the Dose Function for a Given Model Type — doseFunction","text":"doseFunction(GeneralModel): doseFunction(ModelPseudo): doseFunction(LogisticLogNormalOrdinal):","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/doseFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getting the Dose Function for a Given Model Type — doseFunction","text":"","code":"my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 50 )  dose_fun <- doseFunction(my_model, alpha0 = 2, alpha1 = 3) dose_fun(0.6) #> [1] 29.38579 data_ordinal <- .DefaultDataOrdinal() model <- .DefaultLogisticLogNormalOrdinal() options <- .DefaultMcmcOptions() suppressWarnings({   samples <- mcmc(data_ordinal, model, options) })  doseFunction(model, alpha1 = samples@data$alpha2, beta = samples@data$beta, grade = 1L)(x = 0.75) #>    [1] 9.822196e+01 9.571270e+01 8.433600e+01 7.407795e+01 7.847139e+01 #>    [6] 3.723361e+03 2.778262e+02 6.573316e+01 7.210658e+01 1.960644e+02 #>   [11] 7.453288e+01 4.635943e+05 1.996841e+04 8.433062e+01 7.456350e+01 #>   [16] 8.113610e+01 6.578776e+01 3.172800e+02 6.536687e+01 9.831366e+01 #>   [21] 3.545002e+02 7.577070e+01 7.848781e+01 7.196397e+01 1.022307e+02 #>   [26] 8.386702e+01 1.801260e+02 7.267948e+01 1.775979e+02 7.289288e+01 #>   [31] 7.392166e+01 8.058974e+01 6.449024e+01 6.309795e+01 4.345540e+02 #>   [36] 1.156626e+02 7.114532e+01 9.274352e+01 7.052162e+01 7.944046e+01 #>   [41] 6.919554e+01 8.663779e+01 7.692657e+01 2.425389e+02 1.339601e+02 #>   [46] 7.495338e+01 8.189714e+01 1.059145e+02 3.541055e+02 8.428549e+01 #>   [51] 8.371364e+01 9.852025e+01 7.216257e+01 9.885745e+01 8.407208e+01 #>   [56] 7.444848e+01 6.210798e+01 6.670019e+01 1.111596e+02 8.157929e+01 #>   [61] 7.397598e+01 1.178701e+02 1.138174e+02 2.533399e+03 9.498906e+01 #>   [66] 6.876666e+01 8.887356e+01 6.715034e+01 6.957361e+01 1.573711e+02 #>   [71] 7.081831e+01 6.166919e+01 1.441658e+08 5.088305e+03 3.803777e+02 #>   [76] 6.295777e+01 6.308147e+01 8.427380e+01 6.629270e+01 6.583953e+01 #>   [81] 6.394515e+01 7.737603e+01 8.078224e+01 7.255804e+01 7.168477e+01 #>   [86] 1.488619e+02 7.740854e+01 9.514477e+01 1.038522e+03 2.040058e+03 #>   [91] 6.400848e+01 6.021229e+01 7.367937e+01 8.295008e+01 1.024831e+02 #>   [96] 8.849817e+01 1.278248e+02 8.857023e+01 1.802276e+02 8.645029e+01 #>  [101] 6.762609e+01 8.473687e+01 8.325076e+01 6.794837e+01 7.929767e+01 #>  [106] 6.637107e+01 7.832298e+01 1.362876e+02 1.286449e+02 9.352317e+01 #>  [111] 1.851011e+02 2.313422e+02 1.573200e+02 1.882408e+02 7.166825e+01 #>  [116] 7.163177e+01 1.779215e+02 1.215302e+02 9.149460e+01 2.002961e+02 #>  [121] 8.396179e+01 2.048053e+02 8.168847e+01 8.963600e+01 8.816991e+01 #>  [126] 8.528786e+01 1.047622e+02 9.744705e+01 7.668089e+01 7.751237e+01 #>  [131] 6.816075e+01 6.102290e+01 1.789242e+03 8.344197e+01 6.653891e+01 #>  [136] 7.291996e+01 8.251809e+01 7.513566e+01 7.404214e+01 8.551408e+01 #>  [141] 9.366814e+01 9.214032e+01 8.587379e+01 8.600587e+01 9.761935e+01 #>  [146] 1.285247e+02 7.135805e+01 8.608030e+01 8.744652e+01 8.609255e+01 #>  [151] 9.794398e+01 7.440980e+01 1.024818e+02 1.168112e+02 7.643199e+01 #>  [156] 1.595141e+02 6.854734e+01 1.216657e+02 1.136382e+02 4.214330e+02 #>  [161] 6.263765e+01 1.003708e+02 9.252981e+01 1.025912e+02 6.590938e+01 #>  [166] 7.137688e+01 7.246009e+01 6.941107e+01 9.834577e+01 6.877818e+01 #>  [171] 1.058751e+02 1.178064e+02 8.345108e+01 3.621451e+02 2.726602e+03 #>  [176] 1.288443e+02 1.879145e+02 2.018393e+02 1.168168e+02 3.282692e+02 #>  [181] 7.313723e+01 7.286498e+01 9.211274e+01 1.206508e+02 6.681439e+01 #>  [186] 7.757188e+01 6.980487e+01 6.548883e+01 1.182677e+02 7.334829e+01 #>  [191] 6.632331e+01 6.507516e+01 1.296357e+02 4.008694e+02 8.180456e+01 #>  [196] 6.822079e+01 7.496344e+01 8.850440e+01 7.392586e+01 3.730782e+02 #>  [201] 3.628092e+02 2.511122e+02 3.520708e+02 7.921498e+01 6.666999e+01 #>  [206] 1.417824e+02 7.803688e+01 1.879789e+02 6.054329e+03 1.047875e+02 #>  [211] 7.991168e+01 6.672996e+01 6.632648e+01 7.938473e+01 8.915989e+01 #>  [216] 1.053717e+02 7.623152e+01 9.064695e+02 1.455773e+02 8.125065e+02 #>  [221] 1.114716e+02 8.595290e+01 9.737814e+01 6.831539e+01 8.739373e+01 #>  [226] 6.920280e+01 2.096663e+02 8.430512e+01 7.795966e+01 9.969946e+01 #>  [231] 9.064113e+01 2.223674e+02 6.589586e+01 8.135549e+01 4.301518e+02 #>  [236] 5.981660e+01 9.192422e+01 7.869394e+01 3.181408e+02 7.717950e+01 #>  [241] 1.025354e+02 2.497009e+02 1.239535e+02 6.731851e+01 1.029644e+02 #>  [246] 1.376013e+02 7.041911e+01 7.168587e+01 1.414836e+02 7.511761e+01 #>  [251] 1.060012e+02 8.665598e+01 8.131755e+01 9.609983e+01 7.906286e+01 #>  [256] 7.495315e+01 1.209137e+02 6.557540e+01 9.249285e+01 7.141119e+01 #>  [261] 2.461602e+02 4.674134e+02 1.380458e+02 8.443861e+01 6.790576e+01 #>  [266] 8.566577e+01 3.983995e+02 3.026470e+02 3.173166e+02 7.063986e+01 #>  [271] 8.287298e+01 6.834713e+01 6.229872e+01 1.136149e+02 1.792218e+02 #>  [276] 1.749811e+02 6.851444e+01 7.102538e+01 1.288007e+02 5.195308e+02 #>  [281] 8.362510e+01 6.843228e+01 1.525717e+02 9.873042e+02 3.951973e+02 #>  [286] 1.060708e+02 8.756452e+01 1.674425e+02 8.477771e+01 1.964038e+02 #>  [291] 6.686126e+01 6.882349e+01 6.101761e+02 6.367095e+01 9.441838e+01 #>  [296] 3.431439e+02 1.016636e+02 1.874197e+02 6.452101e+01 7.101178e+01 #>  [301] 6.785773e+01 7.014639e+01 1.012739e+02 7.019777e+01 8.292826e+01 #>  [306] 7.934912e+01 7.859609e+01 9.330996e+01 6.776248e+01 9.880487e+01 #>  [311] 1.079827e+02 6.234641e+01 1.273290e+02 6.993572e+01 6.669499e+01 #>  [316] 8.118673e+01 8.041300e+01 1.743751e+03 2.811301e+02 6.666109e+02 #>  [321] 1.903503e+02 1.927460e+02 9.347093e+01 5.738725e+02 4.047316e+02 #>  [326] 7.995885e+01 7.723463e+01 1.209110e+02 7.242784e+01 8.063253e+01 #>  [331] 1.637584e+02 8.080778e+02 1.629753e+03 8.131756e+01 2.496855e+02 #>  [336] 8.102347e+01 1.174630e+02 1.254572e+02 9.904660e+01 1.756369e+04 #>  [341] 3.082598e+03 7.938852e+01 8.758491e+01 9.242176e+01 7.293671e+01 #>  [346] 6.172641e+01 6.996357e+01 6.408913e+01 7.853024e+01 9.190706e+01 #>  [351] 6.231710e+01 4.021621e+03 1.284416e+02 8.186527e+01 1.069188e+02 #>  [356] 1.138005e+02 1.187287e+02 8.296913e+01 6.722366e+01 9.657651e+01 #>  [361] 6.776327e+01 7.173411e+01 7.382892e+01 9.949428e+01 1.637201e+02 #>  [366] 1.462811e+02 1.294005e+02 1.319444e+02 7.308249e+01 6.954277e+01 #>  [371] 1.181265e+02 1.334586e+02 1.932852e+02 1.794827e+02 7.751140e+01 #>  [376] 1.001427e+02 1.057143e+02 7.031295e+01 6.486204e+01 3.306438e+02 #>  [381] 6.997906e+01 6.997837e+01 7.366646e+01 8.443799e+01 6.603019e+01 #>  [386] 7.499982e+01 1.050445e+02 1.268828e+02 6.917917e+01 8.972003e+01 #>  [391] 1.559941e+02 1.374038e+03 9.252776e+01 1.101533e+02 1.316674e+02 #>  [396] 8.363564e+01 9.969715e+01 9.866619e+01 1.025831e+02 8.706119e+01 #>  [401] 1.082537e+02 6.321326e+01 7.944861e+01 9.164408e+01 2.972915e+02 #>  [406] 9.281607e+01 7.975834e+01 7.305646e+01 1.312351e+02 6.562385e+01 #>  [411] 2.300374e+03 7.154076e+01 2.838999e+02 4.457763e+03 2.400362e+03 #>  [416] 2.299009e+02 6.896176e+01 6.208224e+01 3.736190e+02 8.729874e+01 #>  [421] 9.169692e+01 1.363012e+02 7.132148e+01 6.164227e+01 1.057016e+02 #>  [426] 7.976767e+01 8.874739e+01 6.772704e+01 8.044332e+01 6.948131e+01 #>  [431] 6.264965e+01 2.135800e+02 1.449464e+02 4.936819e+02 6.830197e+01 #>  [436] 6.700094e+01 7.480206e+01 6.351525e+01 1.177790e+02 8.890582e+01 #>  [441] 1.157934e+02 5.398587e+04 1.601151e+02 2.940640e+02 8.655779e+01 #>  [446] 7.372109e+01 8.351699e+01 1.602971e+02 6.974534e+02 6.786217e+01 #>  [451] 7.685000e+01 9.015623e+01 8.166552e+01 7.271142e+02 7.833076e+01 #>  [456] 2.947009e+02 8.615451e+01 7.838585e+01 7.264648e+01 8.281618e+01 #>  [461] 8.751315e+01 1.331921e+02 7.945336e+01 7.993960e+01 1.026701e+02 #>  [466] 9.349053e+01 6.926777e+01 8.486589e+01 9.720639e+01 2.577042e+02 #>  [471] 8.211951e+01 1.657913e+02 7.158248e+01 6.612618e+01 6.393653e+01 #>  [476] 1.271804e+02 9.046996e+01 6.350453e+01 6.745394e+01 8.695827e+01 #>  [481] 6.242324e+01 5.836747e+01 6.857602e+01 7.071992e+01 1.399746e+02 #>  [486] 1.108128e+02 8.965289e+01 7.027529e+01 6.952415e+01 6.807260e+01 #>  [491] 8.928634e+01 7.525964e+01 7.499922e+01 1.116098e+02 7.676643e+01 #>  [496] 2.241866e+03 7.001153e+01 7.008875e+01 7.462553e+01 9.443476e+01 #>  [501] 1.225128e+02 4.023854e+03 8.366026e+01 7.693639e+01 7.289569e+01 #>  [506] 1.196493e+02 1.350042e+02 9.750883e+01 1.302822e+02 9.058862e+01 #>  [511] 6.700298e+01 6.297724e+01 6.634046e+01 1.473170e+02 1.089921e+02 #>  [516] 1.473296e+02 7.222594e+02 9.650470e+02 1.663629e+02 1.193847e+02 #>  [521] 7.288637e+01 1.566476e+02 9.160685e+01 9.687317e+01 1.881235e+02 #>  [526] 1.561489e+02 7.681829e+01 2.367466e+02 1.397432e+02 7.461392e+01 #>  [531] 8.793900e+01 2.010923e+02 1.032029e+02 1.602395e+02 9.282903e+01 #>  [536] 1.377015e+03 1.016541e+02 1.856868e+02 7.773030e+01 4.016175e+02 #>  [541] 8.503284e+01 1.131486e+02 7.290856e+01 1.140761e+03 1.491448e+03 #>  [546] 8.958703e+01 7.898521e+01 1.352959e+02 8.767284e+01 9.054342e+01 #>  [551] 2.093727e+02 1.509812e+02 7.354698e+01 7.988727e+01 7.571507e+01 #>  [556] 1.640678e+02 9.543161e+01 8.151743e+01 6.882998e+01 1.159443e+02 #>  [561] 6.670922e+01 6.765646e+01 8.772222e+01 7.349377e+01 1.195548e+02 #>  [566] 6.935072e+01 7.071903e+01 7.911464e+01 1.158747e+02 6.635936e+01 #>  [571] 6.679946e+01 8.750456e+01 7.798979e+01 1.661266e+02 8.061555e+01 #>  [576] 7.326578e+01 7.920257e+01 1.284337e+02 8.835298e+01 1.347095e+02 #>  [581] 7.773421e+01 1.272174e+02 2.471412e+02 1.523352e+02 7.309052e+01 #>  [586] 1.123158e+02 7.049325e+01 1.043716e+02 7.120853e+01 7.297617e+01 #>  [591] 6.652279e+01 8.207362e+01 8.376367e+01 1.839416e+02 8.731988e+01 #>  [596] 6.613776e+01 6.441975e+01 5.647728e+02 1.101430e+02 6.292074e+01 #>  [601] 6.789645e+01 4.421151e+02 7.257396e+01 6.846265e+01 1.351686e+03 #>  [606] 9.030366e+01 6.556928e+01 6.624697e+01 2.940694e+02 1.616991e+02 #>  [611] 8.014772e+01 8.759404e+01 9.707423e+01 6.975926e+01 3.334449e+02 #>  [616] 7.597499e+01 6.507295e+01 7.029052e+01 8.541689e+01 8.518457e+01 #>  [621] 1.240760e+02 9.110421e+01 6.679435e+01 7.072031e+01 5.921056e+01 #>  [626] 8.639325e+01 7.495405e+01 8.766028e+01 7.099219e+01 9.632760e+01 #>  [631] 8.742085e+01 9.720001e+01 1.033832e+02 1.811668e+02 7.243224e+01 #>  [636] 6.432274e+01 1.144773e+03 6.483135e+01 6.870234e+01 6.886552e+01 #>  [641] 8.668311e+01 1.336256e+02 8.599191e+01 1.014442e+02 7.736386e+01 #>  [646] 5.090759e+02 5.579784e+02 1.210440e+02 3.277111e+02 6.477808e+02 #>  [651] 3.332340e+03 9.910019e+01 7.166586e+01 7.378540e+01 7.200556e+01 #>  [656] 7.958795e+01 1.246076e+02 8.838660e+01 7.054968e+01 1.213071e+02 #>  [661] 7.449323e+01 6.120266e+01 9.661133e+01 8.937097e+01 9.688484e+01 #>  [666] 8.660563e+01 6.766516e+01 8.796297e+01 6.435222e+01 1.805207e+02 #>  [671] 1.109790e+02 5.991372e+01 6.701006e+01 1.367768e+02 8.116823e+01 #>  [676] 9.398633e+03 2.199006e+02 1.246887e+02 1.238320e+02 3.033046e+02 #>  [681] 1.165149e+02 1.023607e+02 6.666261e+01 2.410617e+02 1.505915e+02 #>  [686] 6.581386e+01 7.379238e+01 7.160907e+01 7.025920e+01 9.574844e+01 #>  [691] 2.173748e+02 8.872187e+01 1.078083e+02 1.069801e+02 7.566528e+01 #>  [696] 7.628357e+01 7.185027e+01 1.312090e+02 6.620010e+01 1.020357e+02 #>  [701] 8.267775e+01 1.226399e+02 8.549076e+01 6.974417e+01 9.736701e+01 #>  [706] 7.318727e+01 8.884859e+02 1.427188e+02 7.605781e+01 1.144458e+02 #>  [711] 9.548556e+01 2.689041e+02 6.765881e+01 6.828940e+01 6.865603e+01 #>  [716] 7.562334e+01 7.606937e+01 6.484592e+01 8.139356e+01 1.241352e+02 #>  [721] 6.886364e+01 3.600536e+02 9.760703e+01 2.569777e+02 3.945594e+02 #>  [726] 1.565346e+02 1.210193e+02 8.327217e+01 3.383033e+02 8.495544e+01 #>  [731] 9.555986e+01 8.793848e+01 7.097581e+01 2.285398e+02 8.845453e+01 #>  [736] 8.140169e+01 3.132188e+02 2.274021e+02 3.234693e+05 9.249846e+01 #>  [741] 7.345228e+01 1.228460e+02 7.483267e+01 1.827708e+02 8.686183e+01 #>  [746] 9.194321e+01 1.012141e+02 8.415176e+01 6.879671e+01 7.491521e+01 #>  [751] 7.572205e+01 1.343650e+02 1.873924e+03 1.443373e+03 8.149593e+01 #>  [756] 9.216303e+01 6.435885e+01 1.064296e+02 9.247177e+01 1.124153e+02 #>  [761] 7.941314e+01 1.809398e+02 9.395032e+01 6.446110e+01 7.537866e+01 #>  [766] 9.376444e+01 8.909611e+01 1.203458e+02 4.282292e+02 1.146243e+02 #>  [771] 7.039445e+01 9.422391e+02 1.398573e+02 7.771008e+01 1.235498e+02 #>  [776] 5.779993e+01 1.131470e+02 9.752238e+01 7.010622e+01 1.407082e+02 #>  [781] 9.758679e+02 7.272851e+01 9.275876e+01 1.169081e+02 1.254645e+02 #>  [786] 8.820896e+01 8.098923e+01 2.327974e+03 3.343159e+05 8.167518e+01 #>  [791] 8.277251e+01 9.391780e+01 1.214848e+02 3.493336e+02 1.069054e+02 #>  [796] 9.048580e+01 7.872575e+01 6.436328e+01 8.244607e+01 6.911903e+01 #>  [801] 9.699882e+01 8.746362e+01 1.368780e+02 7.154598e+01 9.141143e+01 #>  [806] 8.466647e+01 1.359415e+02 6.771475e+01 9.896076e+01 8.686538e+01 #>  [811] 7.038525e+01 1.080967e+02 9.111108e+01 7.725630e+01 6.937264e+01 #>  [816] 6.703629e+01 7.889700e+01 6.158044e+01 1.658013e+02 1.247836e+02 #>  [821] 1.375217e+02 7.133919e+01 6.880637e+01 9.587583e+01 7.658631e+01 #>  [826] 7.419304e+01 7.108192e+01 3.020175e+02 9.137406e+01 7.638407e+01 #>  [831] 7.387146e+01 8.003119e+01 5.110764e+02 1.614107e+02 6.858408e+01 #>  [836] 9.605195e+01 7.351662e+01 1.570029e+02 1.311570e+02 8.105147e+01 #>  [841] 1.387131e+02 6.547303e+01 6.467551e+01 1.287447e+02 1.613657e+02 #>  [846] 6.465820e+01 8.438423e+01 8.338869e+01 2.950144e+02 9.596122e+01 #>  [851] 8.761557e+01 8.940573e+02 8.160190e+01 3.527392e+02 7.393442e+01 #>  [856] 6.411533e+01 8.614311e+01 6.920790e+01 6.345410e+01 1.336134e+02 #>  [861] 7.325389e+01 9.712211e+01 5.847898e+02 1.037328e+02 8.377924e+01 #>  [866] 1.071171e+02 5.476803e+02 1.065613e+07 2.555725e+02 1.131224e+02 #>  [871] 7.114512e+01 1.300776e+02 7.174865e+01 7.927125e+01 6.935482e+01 #>  [876] 2.218786e+02 7.621807e+01 7.017485e+01 6.359539e+01 8.186947e+01 #>  [881] 9.941491e+01 9.742726e+01 9.794429e+02 2.555984e+02 2.616896e+02 #>  [886] 7.767734e+01 7.354205e+01 8.066486e+01 8.001234e+01 7.674292e+01 #>  [891] 1.092862e+02 9.557130e+01 1.064895e+02 8.535980e+01 7.909649e+02 #>  [896] 7.479216e+01 1.434263e+02 1.135212e+02 7.326978e+01 2.066326e+03 #>  [901] 1.906136e+02 4.247542e+02 7.575353e+02 7.537842e+01 3.117595e+02 #>  [906] 7.016900e+01 8.689629e+01 7.933387e+01 9.244997e+01 8.406761e+01 #>  [911] 1.391271e+02 1.474458e+02 1.110109e+02 7.353928e+01 8.794728e+01 #>  [916] 1.010373e+02 9.129717e+01 8.070220e+01 8.581905e+01 7.847814e+01 #>  [921] 4.864136e+03 1.051245e+03 1.855298e+02 8.809478e+01 7.521497e+01 #>  [926] 1.254916e+02 8.406415e+01 1.546324e+02 7.807062e+01 1.159191e+02 #>  [931] 7.737061e+01 7.985734e+01 6.865198e+01 8.206672e+01 8.192270e+01 #>  [936] 6.506812e+01 6.656897e+01 1.093988e+02 1.138587e+10 1.689951e+08 #>  [941] 5.158381e+03 1.063007e+02 1.515511e+02 9.001377e+02 7.007773e+01 #>  [946] 7.754642e+01 7.630413e+01 6.940010e+01 7.328162e+01 8.702174e+01 #>  [951] 8.144832e+01 1.805391e+02 2.385051e+02 8.010657e+01 6.343674e+01 #>  [956] 7.152209e+01 1.828298e+02 1.134166e+02 1.226726e+02 2.759834e+02 #>  [961] 7.765766e+01 1.738137e+02 1.546395e+02 1.026287e+02 8.402131e+01 #>  [966] 1.136237e+02 9.865298e+01 8.069988e+01 1.300127e+02 9.138151e+01 #>  [971] 1.162541e+02 8.926463e+01 9.995903e+01 9.054633e+01 9.694835e+01 #>  [976] 2.845889e+02 1.220698e+04 1.629841e+02 1.177359e+02 1.149492e+02 #>  [981] 7.678585e+01 2.348038e+02 6.376423e+01 7.526168e+01 8.509990e+01 #>  [986] 2.461456e+02 6.842258e+01 7.691306e+01 4.280032e+02 1.128519e+02 #>  [991] 7.764495e+02 1.668083e+02 1.556198e+02 6.319652e+01 7.197891e+01 #>  [996] 9.819773e+01 6.567537e+01 8.444112e+01 1.939722e+02 7.770024e+01 doseFunction(model, alpha2 = samples@data$alpha2, beta = samples@data$beta, grade = 2L)(x = 0.25) #>    [1] 6.780442e+01 7.287658e+01 6.290156e+01 6.052737e+01 6.100517e+01 #>    [6] 7.116447e+02 1.287012e+02 5.906889e+01 6.212417e+01 1.128721e+02 #>   [11] 5.690468e+01 1.195997e+04 1.009457e+03 5.338811e+01 5.875863e+01 #>   [16] 7.099241e+01 6.049831e+01 1.385977e+02 5.858365e+01 7.354955e+01 #>   [21] 1.125258e+02 5.973248e+01 6.124950e+01 5.655516e+01 6.932035e+01 #>   [26] 6.295106e+01 5.545085e+01 5.685601e+01 7.101841e+01 5.981871e+01 #>   [31] 6.247770e+01 6.470927e+01 5.401873e+01 5.388544e+01 9.826243e+01 #>   [36] 6.602963e+01 6.167399e+01 7.614292e+01 6.348897e+01 6.747885e+01 #>   [41] 5.783018e+01 6.901286e+01 6.295596e+01 8.057071e+01 6.234685e+01 #>   [46] 6.281781e+01 6.125498e+01 6.103386e+01 1.157821e+02 6.973469e+01 #>   [51] 6.335441e+01 6.740590e+01 6.141254e+01 6.710870e+01 6.704220e+01 #>   [56] 5.863720e+01 5.479514e+01 5.868230e+01 8.209132e+01 6.506345e+01 #>   [61] 5.593432e+01 6.231895e+01 4.649819e+01 5.599339e+02 6.602096e+01 #>   [66] 5.339581e+01 7.065153e+01 5.876786e+01 6.072411e+01 1.023529e+02 #>   [71] 5.478832e+01 5.185224e+01 8.414484e+04 9.801437e+02 1.801409e+02 #>   [76] 5.659799e+01 5.782265e+01 7.186118e+01 6.056580e+01 6.010787e+01 #>   [81] 5.807771e+01 6.544952e+01 6.685904e+01 5.999904e+01 6.262760e+01 #>   [86] 1.018373e+02 6.676900e+01 7.247361e+01 3.323845e+02 7.731891e+02 #>   [91] 5.856449e+01 5.568935e+01 6.542170e+01 6.532044e+01 7.040274e+01 #>   [96] 6.349647e+01 9.411694e+01 7.013003e+01 1.165337e+02 6.947043e+01 #>  [101] 5.907364e+01 6.494648e+01 6.200559e+01 5.985764e+01 6.759055e+01 #>  [106] 5.819008e+01 6.339424e+01 8.509932e+01 7.069160e+01 6.891365e+01 #>  [111] 9.715203e+01 1.159520e+02 8.332891e+01 1.139312e+02 5.811958e+01 #>  [116] 5.769150e+01 9.066218e+01 7.793548e+01 7.236361e+01 1.045186e+02 #>  [121] 5.899202e+01 1.092251e+02 6.169427e+01 7.188671e+01 6.277803e+01 #>  [126] 6.462597e+01 7.181535e+01 6.023464e+01 6.199531e+01 6.149674e+01 #>  [131] 6.090481e+01 5.712159e+01 4.064369e+02 5.616511e+01 5.909417e+01 #>  [136] 6.011226e+01 6.370312e+01 5.975408e+01 6.337289e+01 6.377889e+01 #>  [141] 6.578714e+01 7.066485e+01 7.104418e+01 7.084823e+01 7.787012e+01 #>  [146] 6.784369e+01 6.115843e+01 6.721773e+01 6.596524e+01 6.486388e+01 #>  [151] 7.306014e+01 6.143082e+01 6.664398e+01 7.790009e+01 6.233013e+01 #>  [156] 7.304722e+01 5.611112e+01 7.366244e+01 6.469107e+01 1.490632e+02 #>  [161] 5.670687e+01 7.668929e+01 7.426599e+01 7.709338e+01 5.705119e+01 #>  [166] 5.971848e+01 6.483999e+01 6.240575e+01 6.865330e+01 5.608870e+01 #>  [171] 6.371454e+01 6.174455e+01 6.595176e+01 1.463229e+02 5.732588e+02 #>  [176] 8.355079e+01 9.451980e+01 1.080527e+02 6.844902e+01 1.572195e+02 #>  [181] 6.372058e+01 6.364782e+01 6.466098e+01 8.186307e+01 5.722620e+01 #>  [186] 6.249919e+01 6.072532e+01 5.861575e+01 6.663082e+01 5.894479e+01 #>  [191] 5.610816e+01 5.625085e+01 8.676777e+01 1.622405e+02 5.755082e+01 #>  [196] 5.681208e+01 6.381440e+01 6.591067e+01 6.060564e+01 1.152085e+02 #>  [201] 1.153354e+02 6.568202e+01 9.965007e+01 5.420378e+01 5.935485e+01 #>  [206] 7.267709e+01 5.938092e+01 1.042898e+02 4.806338e+02 6.655356e+01 #>  [211] 6.312635e+01 5.838353e+01 6.006808e+01 6.729125e+01 7.255174e+01 #>  [216] 7.995607e+01 6.436191e+01 2.615463e+02 8.234181e+01 1.572356e+02 #>  [221] 7.794695e+01 6.932342e+01 6.786534e+01 5.588241e+01 6.323935e+01 #>  [226] 5.703438e+01 1.155008e+02 5.663937e+01 6.406702e+01 7.382751e+01 #>  [231] 6.759031e+01 1.145526e+02 5.778051e+01 6.837685e+01 1.698361e+02 #>  [236] 5.067172e+01 5.872399e+01 5.605642e+01 9.773891e+01 6.149824e+01 #>  [241] 7.256706e+01 1.113796e+02 8.274830e+01 5.586665e+01 7.970415e+01 #>  [246] 8.522876e+01 6.098350e+01 5.748844e+01 6.407351e+01 6.143146e+01 #>  [251] 7.986665e+01 7.132927e+01 6.488464e+01 6.989667e+01 6.411120e+01 #>  [256] 5.680652e+01 8.223898e+01 5.859426e+01 6.485207e+01 6.024036e+01 #>  [261] 1.107884e+02 1.479480e+02 8.009616e+01 5.693829e+01 5.923656e+01 #>  [266] 5.888972e+01 1.645805e+02 1.671392e+02 1.470193e+02 5.881291e+01 #>  [271] 6.818066e+01 6.053046e+01 5.396832e+01 8.685560e+01 9.165637e+01 #>  [276] 1.140018e+02 5.987303e+01 5.985035e+01 8.201091e+01 2.313177e+02 #>  [281] 6.687152e+01 5.887553e+01 7.515417e+01 2.285716e+02 1.480163e+02 #>  [286] 7.367558e+01 6.801161e+01 8.455529e+01 6.524391e+01 6.043434e+01 #>  [291] 5.782727e+01 5.935349e+01 1.540463e+02 5.826797e+01 7.533261e+01 #>  [296] 1.530085e+02 6.964088e+01 8.507957e+01 5.720703e+01 6.281581e+01 #>  [301] 6.250698e+01 6.389953e+01 8.274257e+01 5.835541e+01 6.347573e+01 #>  [306] 6.456682e+01 6.259962e+01 6.755035e+01 4.910661e+01 7.336723e+01 #>  [311] 8.281838e+01 5.493963e+01 9.124684e+01 6.057948e+01 5.817823e+01 #>  [316] 6.217388e+01 6.304372e+01 5.517896e+02 9.446338e+01 2.125134e+02 #>  [321] 1.037336e+02 1.044523e+02 6.019873e+01 1.237586e+02 1.319594e+02 #>  [326] 6.736904e+01 6.183692e+01 7.844051e+01 5.782702e+01 6.326714e+01 #>  [331] 9.723223e+01 2.374301e+02 1.869771e+02 5.500075e+01 8.215102e+01 #>  [336] 6.071275e+01 8.622967e+01 6.687091e+01 6.189122e+01 7.525022e+02 #>  [341] 1.203054e+02 6.254988e+01 6.514174e+01 7.274525e+01 6.006643e+01 #>  [346] 5.706846e+01 6.222040e+01 5.494577e+01 6.628448e+01 7.661571e+01 #>  [351] 5.856785e+01 7.988438e+02 9.328897e+01 6.819083e+01 7.043898e+01 #>  [356] 7.503076e+01 7.517169e+01 6.402244e+01 5.829854e+01 7.330264e+01 #>  [361] 5.942244e+01 6.042132e+01 6.048374e+01 7.512958e+01 8.229874e+01 #>  [366] 7.234469e+01 7.911660e+01 7.350231e+01 5.915024e+01 5.457006e+01 #>  [371] 8.585728e+01 7.262732e+01 7.876981e+01 1.131631e+02 5.452525e+01 #>  [376] 6.251736e+01 4.707902e+01 6.193987e+01 5.776096e+01 7.646120e+01 #>  [381] 6.165585e+01 6.108043e+01 6.283985e+01 6.529813e+01 5.736594e+01 #>  [386] 6.284562e+01 6.591258e+01 7.523785e+01 5.991519e+01 6.083532e+01 #>  [391] 6.765380e+01 3.023776e+02 7.457321e+01 7.046066e+01 6.505179e+01 #>  [396] 6.453052e+01 7.108334e+01 8.127872e+01 8.406255e+01 6.643601e+01 #>  [401] 7.988395e+01 5.842403e+01 6.709145e+01 7.084866e+01 1.050363e+02 #>  [406] 6.857128e+01 6.620993e+01 6.219772e+01 8.175911e+01 5.272342e+01 #>  [411] 4.393258e+02 6.231624e+01 1.252399e+02 5.784335e+02 2.777696e+02 #>  [416] 1.321923e+02 6.090403e+01 5.778873e+01 1.825207e+02 7.164713e+01 #>  [421] 4.769631e+01 8.455346e+01 5.785920e+01 5.553298e+01 7.693374e+01 #>  [426] 5.828452e+01 5.885495e+01 5.725870e+01 6.733498e+01 5.657207e+01 #>  [431] 5.752295e+01 4.279220e+01 1.035253e+02 1.779661e+02 6.104310e+01 #>  [436] 5.721391e+01 6.484399e+01 5.693721e+01 8.378243e+01 7.151692e+01 #>  [441] 7.212788e+01 2.704698e+03 8.994799e+01 1.074014e+02 6.810623e+01 #>  [446] 6.262183e+01 6.353348e+01 8.050542e+01 2.157074e+02 5.823775e+01 #>  [451] 6.307008e+01 6.944379e+01 6.533255e+01 1.924762e+02 5.606958e+01 #>  [456] 1.291493e+02 5.562562e+01 5.670655e+01 5.734806e+01 7.131738e+01 #>  [461] 6.811386e+01 8.785559e+01 6.399608e+01 6.349740e+01 7.072670e+01 #>  [466] 6.306900e+01 5.739101e+01 6.481493e+01 5.956746e+01 1.420286e+02 #>  [471] 6.766417e+01 1.147227e+02 5.691440e+01 5.741263e+01 5.695789e+01 #>  [476] 9.198619e+01 7.215647e+01 5.675015e+01 5.911365e+01 7.336170e+01 #>  [481] 5.613467e+01 5.389009e+01 6.072868e+01 5.736409e+01 9.264460e+01 #>  [486] 7.941241e+01 6.228350e+01 6.094331e+01 5.901234e+01 5.983806e+01 #>  [491] 6.605258e+01 5.925568e+01 5.938513e+01 7.068360e+01 5.680049e+01 #>  [496] 5.732911e+02 5.862041e+01 6.231770e+01 6.299590e+01 7.184686e+01 #>  [501] 6.583633e+01 4.650953e+02 6.358042e+01 5.761548e+01 6.286789e+01 #>  [506] 8.601702e+01 6.479071e+01 7.111360e+01 7.691451e+01 6.906030e+01 #>  [511] 5.726953e+01 5.728638e+01 5.820120e+01 1.013293e+02 7.372400e+01 #>  [516] 8.504403e+01 2.258759e+02 3.047237e+02 1.036076e+02 8.117284e+01 #>  [521] 5.664886e+01 6.392610e+01 6.171519e+01 6.879755e+01 1.002749e+02 #>  [526] 7.973800e+01 5.712438e+01 1.103021e+02 9.802638e+01 6.382359e+01 #>  [531] 6.350023e+01 1.259352e+02 6.191934e+01 8.485175e+01 6.422081e+01 #>  [536] 1.886663e+02 6.834982e+01 9.636453e+01 6.493095e+01 1.294845e+02 #>  [541] 6.447443e+01 5.689839e+01 6.259502e+01 3.547747e+02 5.035050e+02 #>  [546] 5.804544e+01 6.376866e+01 8.594403e+01 6.657665e+01 6.415529e+01 #>  [551] 9.382206e+01 5.406830e+01 5.310049e+01 5.759562e+01 6.026874e+01 #>  [556] 9.638976e+01 7.032738e+01 6.312217e+01 6.022623e+01 8.053350e+01 #>  [561] 5.993011e+01 5.486399e+01 7.019302e+01 5.993873e+01 8.097466e+01 #>  [566] 6.061081e+01 5.896267e+01 6.624692e+01 8.313174e+01 5.993860e+01 #>  [571] 5.742268e+01 6.982510e+01 6.484456e+01 1.117586e+02 6.918414e+01 #>  [576] 6.266849e+01 6.478286e+01 7.958564e+01 6.035841e+01 8.083947e+01 #>  [581] 4.994331e+01 7.766424e+01 1.226291e+02 7.365108e+01 5.798461e+01 #>  [586] 7.290445e+01 5.894395e+01 7.057544e+01 5.538542e+01 6.242624e+01 #>  [591] 5.891348e+01 6.509330e+01 6.728648e+01 1.096807e+02 7.288298e+01 #>  [596] 5.715165e+01 5.696711e+01 1.668840e+02 7.281139e+01 5.558837e+01 #>  [601] 5.986035e+01 1.257017e+02 6.402675e+01 6.021728e+01 2.427990e+02 #>  [606] 7.204581e+01 5.734682e+01 5.359000e+01 1.206747e+02 8.786889e+01 #>  [611] 6.746997e+01 6.796574e+01 6.441100e+01 5.662429e+01 1.254170e+02 #>  [616] 6.270940e+01 5.829457e+01 6.226382e+01 6.888301e+01 6.120693e+01 #>  [621] 7.022121e+01 5.847692e+01 5.750067e+01 5.873996e+01 5.197649e+01 #>  [626] 6.736242e+01 5.710531e+01 6.466408e+01 5.194735e+01 6.219673e+01 #>  [631] 6.663900e+01 7.055747e+01 7.565370e+01 1.103723e+02 6.155401e+01 #>  [636] 5.713175e+01 2.231785e+02 5.652644e+01 5.550865e+01 5.735347e+01 #>  [641] 6.976556e+01 8.769888e+01 6.828811e+01 8.136441e+01 5.872110e+01 #>  [646] 2.314050e+02 1.845097e+02 7.237304e+01 1.599344e+02 1.971823e+02 #>  [651] 2.552945e+02 7.063533e+01 5.767873e+01 6.464885e+01 6.337103e+01 #>  [656] 6.378234e+01 8.399029e+01 6.976189e+01 5.715920e+01 6.794045e+01 #>  [661] 6.270085e+01 5.530027e+01 6.738053e+01 6.575782e+01 6.448276e+01 #>  [666] 7.388080e+01 5.918368e+01 6.459990e+01 5.593429e+01 1.099618e+02 #>  [671] 6.523379e+01 5.338692e+01 5.996571e+01 8.999587e+01 6.731730e+01 #>  [676] 5.338646e+02 1.019890e+02 9.110029e+01 8.044590e+01 5.793769e+01 #>  [681] 7.508002e+01 6.452770e+01 5.820462e+01 1.281390e+02 8.872571e+01 #>  [686] 5.576408e+01 6.064223e+01 5.246344e+01 5.213337e+01 6.565117e+01 #>  [691] 7.214433e+01 7.415761e+01 7.686317e+01 7.226820e+01 5.684074e+01 #>  [696] 5.988677e+01 6.396811e+01 9.404626e+01 5.844164e+01 7.262779e+01 #>  [701] 6.054400e+01 7.029602e+01 6.695727e+01 6.058854e+01 5.809032e+01 #>  [706] 6.102183e+01 3.614836e+02 1.019367e+02 5.471567e+01 7.217756e+01 #>  [711] 6.613770e+01 1.251003e+02 5.876913e+01 5.892030e+01 5.953532e+01 #>  [716] 6.628644e+01 6.598318e+01 5.858188e+01 6.896629e+01 9.101982e+01 #>  [721] 6.054040e+01 1.794750e+02 6.421981e+01 8.396693e+01 1.464285e+02 #>  [726] 1.035412e+02 8.272125e+01 5.679406e+01 1.264636e+02 6.597410e+01 #>  [731] 7.047218e+01 7.369014e+01 6.296456e+01 1.168312e+02 6.927735e+01 #>  [736] 4.924270e+01 1.508234e+02 9.999554e+01 1.999666e+04 7.113151e+01 #>  [741] 5.915139e+01 6.509282e+01 5.729679e+01 6.908522e+01 7.118193e+01 #>  [746] 7.588833e+01 7.338165e+01 6.206847e+01 5.953023e+01 6.291445e+01 #>  [751] 6.702969e+01 1.021826e+02 1.894226e+02 3.255461e+02 6.650809e+01 #>  [756] 7.039177e+01 5.700220e+01 7.586471e+01 5.896796e+01 7.188963e+01 #>  [761] 6.462144e+01 1.058175e+02 5.940267e+01 5.665411e+01 6.153253e+01 #>  [766] 7.323223e+01 6.796463e+01 6.530240e+01 1.571244e+02 7.429245e+01 #>  [771] 5.546612e+01 2.342510e+02 8.285441e+01 6.688254e+01 7.084795e+01 #>  [776] 5.218416e+01 6.310386e+01 7.186967e+01 5.708930e+01 8.015682e+01 #>  [781] 1.764393e+02 6.317360e+01 6.902526e+01 7.500237e+01 8.527828e+01 #>  [786] 6.220313e+01 6.285648e+01 6.436382e+02 4.887622e+03 6.223589e+01 #>  [791] 5.382173e+01 6.822957e+01 7.935756e+01 1.308224e+02 7.313259e+01 #>  [796] 7.001675e+01 6.729656e+01 5.721065e+01 6.941178e+01 6.096373e+01 #>  [801] 7.215224e+01 6.551465e+01 7.056947e+01 6.169403e+01 7.759160e+01 #>  [806] 5.929046e+01 9.593549e+01 6.098467e+01 7.303047e+01 6.135028e+01 #>  [811] 5.817125e+01 6.869816e+01 6.354810e+01 6.043460e+01 6.119352e+01 #>  [816] 5.625687e+01 6.205909e+01 5.549798e+01 8.961143e+01 8.385446e+01 #>  [821] 8.126245e+01 5.696449e+01 6.145778e+01 6.893425e+01 6.373238e+01 #>  [826] 6.001940e+01 6.235069e+01 1.571418e+02 7.375873e+01 6.629385e+01 #>  [831] 6.102630e+01 6.357895e+01 1.806572e+02 9.166206e+01 5.675493e+01 #>  [836] 5.077088e+01 5.600049e+01 6.352401e+01 8.101984e+01 6.206122e+01 #>  [841] 7.419066e+01 5.813468e+01 5.893953e+01 8.467428e+01 7.631835e+01 #>  [846] 5.246095e+01 6.433111e+01 6.487678e+01 1.178280e+02 6.998061e+01 #>  [851] 6.575538e+01 1.977991e+02 5.866065e+01 8.073252e+01 6.108802e+01 #>  [856] 5.735682e+01 6.692079e+01 6.012877e+01 5.822301e+01 9.435859e+01 #>  [861] 6.206512e+01 7.027442e+01 1.975043e+02 7.234547e+01 6.479713e+01 #>  [866] 6.405707e+01 8.207173e+01 3.647089e+04 1.130181e+02 7.907748e+01 #>  [871] 6.093903e+01 7.831313e+01 5.881610e+01 6.395169e+01 5.681822e+01 #>  [876] 1.118827e+02 6.303758e+01 6.079359e+01 5.548880e+01 6.810367e+01 #>  [881] 8.192628e+01 6.282780e+01 3.095890e+02 1.044147e+02 1.130450e+02 #>  [886] 6.248168e+01 6.106004e+01 6.713827e+01 6.738100e+01 5.541032e+01 #>  [891] 6.924529e+01 6.588536e+01 6.706557e+01 6.981019e+01 2.539044e+02 #>  [896] 6.277661e+01 7.652945e+01 8.427374e+01 6.485347e+01 5.297126e+02 #>  [901] 8.614703e+01 1.572814e+02 1.402887e+02 6.018067e+01 1.310750e+02 #>  [906] 6.162295e+01 7.041465e+01 6.550839e+01 6.456856e+01 6.783421e+01 #>  [911] 1.027701e+02 1.033611e+02 8.389812e+01 6.242685e+01 6.359433e+01 #>  [916] 7.047509e+01 6.860915e+01 5.937369e+01 6.678724e+01 6.591879e+01 #>  [921] 7.866776e+02 2.494962e+02 7.995356e+01 6.628426e+01 6.180773e+01 #>  [926] 8.029268e+01 6.494666e+01 8.571286e+01 6.332169e+01 7.123293e+01 #>  [931] 6.626606e+01 6.580547e+01 5.958777e+01 6.178353e+01 6.206913e+01 #>  [936] 5.570003e+01 5.746052e+01 6.961776e+01 1.608611e+06 1.465228e+06 #>  [941] 7.714694e+02 7.472061e+01 8.437945e+01 2.137523e+02 6.002324e+01 #>  [946] 6.480249e+01 6.520204e+01 5.866888e+01 5.957189e+01 6.149801e+01 #>  [951] 6.365868e+01 8.684744e+01 1.013838e+02 5.472034e+01 5.521585e+01 #>  [956] 5.976770e+01 7.286348e+01 8.129472e+01 7.565512e+01 1.148756e+02 #>  [961] 6.178879e+01 1.085271e+02 7.260127e+01 7.498011e+01 6.038035e+01 #>  [966] 7.848742e+01 6.994674e+01 5.350176e+01 9.377081e+01 6.413058e+01 #>  [971] 6.857504e+01 6.465730e+01 8.045706e+01 7.428403e+01 6.923601e+01 #>  [976] 1.102225e+02 1.543191e+03 1.013061e+02 5.100385e+01 7.879646e+01 #>  [981] 5.985339e+01 8.908398e+01 5.402798e+01 6.179499e+01 6.863937e+01 #>  [986] 1.140344e+02 5.358476e+01 6.608994e+01 1.634531e+02 6.276958e+01 #>  [991] 2.218486e+02 6.368813e+01 8.739067e+01 5.742609e+01 6.214454e+01 #>  [996] 6.448902e+01 5.596607e+01 6.106704e+01 5.526599e+01 5.936025e+01"},{"path":"https://openpharma.github.io/crmPack/reference/dose_grid_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting the Dose Grid Range — dose_grid_range","title":"Getting the Dose Grid Range — dose_grid_range","text":"function returns vector length two minimum maximum dose grid. returns c(-Inf, Inf) range determined, happens dose grid empty. User can choose whether placebo dose () counted .","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dose_grid_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting the Dose Grid Range — dose_grid_range","text":"","code":"dose_grid_range(object, ...)  # S4 method for class 'Data' dose_grid_range(object, ignore_placebo = TRUE)  # S4 method for class 'DataOrdinal' dose_grid_range(object, ignore_placebo = TRUE)"},{"path":"https://openpharma.github.io/crmPack/reference/dose_grid_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting the Dose Grid Range — dose_grid_range","text":"object (Data) object dose grid. ... arguments passed class-specific methods. ignore_placebo (flag) placebo dose () counted?","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dose_grid_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getting the Dose Grid Range — dose_grid_range","text":"numeric vector containing minimum maximum doses grid c(-Inf, Inf).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/dose_grid_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getting the Dose Grid Range — dose_grid_range","text":"","code":"my_data <- Data(   x = c(10, 50, 90, 100, 0.001, 20, 30, 30),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   ID = 1:8,   cohort = c(1L, 2L, 3L, 4L, 5L, 5L, 6L, 6L),   doseGrid = c(0.001, seq(from = 10, to = 100, by = 10)),   placebo = TRUE ) dose_grid_range(my_data) #> [1]  10 100 dose_grid_range(my_data, ignore_placebo = FALSE) #> [1] 1e-03 1e+02 data <- DataOrdinal(   x = c(10, 20, 30, 40, 50, 50, 50, 60, 60, 60),   y = as.integer(c(0, 0, 0, 0, 0, 1, 0, 0, 1, 2)),   ID = 1L:10L,   cohort = as.integer(c(1:4, 5, 5, 5, 6, 6, 6)),   doseGrid = c(seq(from = 10, to = 100, by = 10)),   yCategories = c(\"No tox\" = 0L, \"Sub-tox AE\" = 1L, \"DLT\" = 2L),   placebo = FALSE )  dose_grid_range(data) #> [1]  10 100"},{"path":"https://openpharma.github.io/crmPack/reference/efficacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing Expected Efficacy for a Given Dose, Model and Samples — efficacy","title":"Computing Expected Efficacy for a Given Dose, Model and Samples — efficacy","text":"function computes value expected efficacy specified dose level, based model specific parameters. model parameters (samples) obtained based prior specified form pseudo data combined observed responses ().","code":""},{"path":"https://openpharma.github.io/crmPack/reference/efficacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing Expected Efficacy for a Given Dose, Model and Samples — efficacy","text":"","code":"efficacy(dose, model, samples, ...)  # S4 method for class 'numeric,Effloglog,Samples' efficacy(dose, model, samples)  # S4 method for class 'numeric,Effloglog,missing' efficacy(dose, model)  # S4 method for class 'numeric,EffFlexi,Samples' efficacy(dose, model, samples)"},{"path":"https://openpharma.github.io/crmPack/reference/efficacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing Expected Efficacy for a Given Dose, Model and Samples — efficacy","text":"dose (numeric) dose targeted. following recycling rule applies samples missing: vectors size 1 recycled size sample (.e. size(samples)). Otherwise, dose must size sample. model (ModelEff) efficacy model pseudo data prior. samples (Samples) samples model's parameters used compute expected efficacy values. Can also missing models. ... model specific parameters samples used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/efficacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computing Expected Efficacy for a Given Dose, Model and Samples — efficacy","text":"numeric vector values expected efficacy. non-scalar samples used, every element returned vector corresponds one element sample. Hence, case, output vector length sample vector. scalar samples used samples used, e.g. pseudo DLE/toxicity model, output length length dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/efficacy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computing Expected Efficacy for a Given Dose, Model and Samples — efficacy","text":"efficacy() function computes expected efficacy given doses, using samples model parameter(s). work multivariate model parameters, assume model specific efficacy() method receives samples matrix rows correspond sampling index, .e. layout nSamples x dimParameter.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/efficacy.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Computing Expected Efficacy for a Given Dose, Model and Samples — efficacy","text":"efficacy(dose = numeric, model = Effloglog, samples = Samples): compute expected efficacy specified dose level, based samples Effloglog model parameters. efficacy(dose = numeric, model = Effloglog, samples = missing): compute expected efficacy specified dose level, based Effloglog model parameters. model parameters (except dose) present model object. efficacy(dose = numeric, model = EffFlexi, samples = Samples): compute expected efficacy specified dose level, based samples EffFlexi model parameters. given dose dose vector outside dose grid range, NA_real returned dose warning thrown.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/efficacy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computing Expected Efficacy for a Given Dose, Model and Samples — efficacy","text":"","code":"# Obtain the expected efficacy value for a given dose, a given pseudo efficacy # model (in flexible form for prior) and efficacy samples.  # Empty data (i.e. no observed data), dose grid only. my_data <- DataDual(doseGrid = seq(25, 300, 25))  my_model <- EffFlexi(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   sigma2W = c(a = 0.1, b = 0.1),   sigma2betaW = c(a = 20, b = 50),   rw1 = FALSE,   data = my_data )  my_options <- McmcOptions(   burnin = 100, step = 2, samples = 200, rng_kind = \"Mersenne-Twister\", rng_seed = 94 )  my_samples <- mcmc(data = my_data, model = my_model, options = my_options)  # Efficacy for dose 75. efficacy(dose = 75, model = my_model, samples = my_samples) #>   [1]   1.53309381  -0.36750631   7.55527614   5.25469404   3.66693278 #>   [6]   8.70838981   4.90252140  -0.69061135   1.34203932  -7.43545911 #>  [11]  -2.94369030  -0.31605961   0.50693514  -9.26862484   1.46306208 #>  [16]  -1.14134478   7.32450512  -1.62809243  -2.49305731  -1.66356028 #>  [21]   0.14878359  -0.49947849   4.42304913   4.56649426  -3.57361192 #>  [26]  -5.63080113  -1.94459230  14.44628993   7.35954897   3.02553881 #>  [31]  11.10188815  11.22388514   6.80186903   0.36884435  -2.82813022 #>  [36]  -4.73915711   9.09265745   0.45171075   7.47281283  -3.04597000 #>  [41]  12.38787082   2.42193236   0.61608253  -0.13622731  -6.08412025 #>  [46]  -1.86297634   3.28013838  -2.48647780   1.42981578  -6.81130220 #>  [51]  -5.26399353   2.63505491  -5.57528885  -1.18080239   0.68363630 #>  [56]   0.80957042   1.66747143   1.90085264   0.31491916  -2.97512796 #>  [61]   6.73581440   0.80529855  10.99746433  -4.50426438   2.35555834 #>  [66]  -2.03180783   3.97573796   4.27632858  -9.42646554  12.55749274 #>  [71]  -0.80789290  -1.90257411  -2.49043558   5.63952769   3.45659353 #>  [76]   0.47354025   2.52357271  -1.38263265  -7.15088137  -1.94147061 #>  [81]  -1.49545417  -4.77468458  -2.72741400   9.03347724   2.29069087 #>  [86]   3.92829723   2.63532137   1.82836285   0.58927326   4.21572326 #>  [91]  -2.45214763   7.88420978   0.19709801   0.89906020   4.88309101 #>  [96]   3.04825966  -1.81374639   1.45541231  14.61364519  10.31328290 #> [101]  -7.21042554   2.98659493   8.94809729  -0.36850893   0.77558282 #> [106]   3.24200951  -9.74784292  12.41222304   1.69010933  -1.74952128 #> [111]   5.69098809   2.62087863  -4.88471879  -1.90574868  -0.46153796 #> [116]   2.26830157  -1.42972655  10.97802797  -4.39581100   0.51699864 #> [121]   3.48569230   0.79299301  -6.87113975   3.24208183   6.76958848 #> [126]  -1.49208773   3.78647974   6.56550883   4.58980593  -0.41956371 #> [131]   3.92797953  -0.25794403   3.79244917  -3.41126635  -2.31361622 #> [136]   0.68751868   1.86167000   3.36000659   0.42099810   4.07698962 #> [141]   4.50480555   6.29500656  -4.07015627   6.86309949   4.04608404 #> [146]   1.83641311  -5.48623907  -4.74101984  -5.79376521   1.15017134 #> [151]  -2.50564693  -3.48767730   3.83157946   2.09528864  -1.72330218 #> [156]   8.21151143   6.95861675   5.57982266   8.51214305  -2.05622819 #> [161]   9.80142831  -5.12209892  -6.73822609   2.30227490   1.75097164 #> [166]   1.44273838   2.96978667  10.76845222   4.07874269   7.10792088 #> [171]  -2.05910186   7.30915648   2.61942655  -3.28100602  -0.59016549 #> [176]  -0.08740698   9.11846595  -2.74656639   2.79106308 -10.22195117 #> [181]  -1.57917435  -0.75159739  -0.42006406   5.53433055  -0.76741452 #> [186]  -4.14286245   1.27944063   3.12421033  -3.08574641  10.18627697 #> [191]   9.74964035  -1.02936258   4.68939972   1.95388350   0.99957216 #> [196]  -0.74528033  -0.29508297   2.96868789  14.94223266   4.32409978  # Obtain the expected efficacy value for a given dose, a given pseudo efficacy # model (linear log-log efficacy) and no samples. my_model_ll <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = my_data,   const = 0 )  efficacy(dose = 75, model = my_model_ll) #> [1] 1.885121"},{"path":"https://openpharma.github.io/crmPack/reference/efficacyFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting the Efficacy Function for a Given Model Type — efficacyFunction","title":"Getting the Efficacy Function for a Given Model Type — efficacyFunction","text":"function returns efficacy() function computes expected efficacy given dose level, based model specific parameters.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/efficacyFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting the Efficacy Function for a Given Model Type — efficacyFunction","text":"","code":"efficacyFunction(model, ...)  # S4 method for class 'ModelEff' efficacyFunction(model, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/efficacyFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting the Efficacy Function for a Given Model Type — efficacyFunction","text":"model (ModelEff) model. ... model specific parameters.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/efficacyFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getting the Efficacy Function for a Given Model Type — efficacyFunction","text":"efficacy() function computes expected efficacy.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/efficacyFunction.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Getting the Efficacy Function for a Given Model Type — efficacyFunction","text":"efficacyFunction(ModelEff):","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/efficacyFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getting the Efficacy Function for a Given Model Type — efficacyFunction","text":"","code":"my_data <- DataDual(   doseGrid = c(0.001, seq(25, 300, 25)),   placebo = TRUE )  my_model <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = my_data,   const = 2 )  eff_fun <- efficacyFunction(my_model, theta1 = -4.8, theta2 = 3.7) eff_fun(30) #> [1] -0.2011775"},{"path":"https://openpharma.github.io/crmPack/reference/enable_logging.html","id":null,"dir":"Reference","previous_headings":"","what":"Verbose Logging — enable_logging","title":"Verbose Logging — enable_logging","text":"family wrappers selected futile.logger functions control logging mechanism crmPack. crmPack uses futile.logger package logging purposes. messages logged crmPack logged crmPack logger futile.logger::TRACE level. Hence, enabling verbose logging means logging threshold set futile.logger::TRACE crmPack logger, disabling verbose logging means set futile.logger::FATAL.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/enable_logging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verbose Logging — enable_logging","text":"","code":"enable_logging()  disable_logging()  is_logging_enabled()  log_trace(msg, ..., capture = FALSE)"},{"path":"https://openpharma.github.io/crmPack/reference/enable_logging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verbose Logging — enable_logging","text":"msg message log ... Optional arguments populate format string capture Capture print output variables instead interpolate","code":""},{"path":"https://openpharma.github.io/crmPack/reference/enable_logging.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Verbose Logging — enable_logging","text":"enable_logging(): simple wrapper futile.logger::flog.threshold() enables crmPack verbose logging setting logging threshold futile.logger::TRACE crmPack logger. disable_logging(): simple wrapper futile.logger::flog.threshold() disables crmPack verbose logging setting logging threshold futile.logger::FATAL crmPack logger. is_logging_enabled(): simple wrapper futile.logger::flog.logger() checks whether current threshold level crmPack logger verbose, futile.logger::TRACE. returns TRUE current logging level verbose, FALSE otherwise. log_trace(): simple wrapper futile.logger::flog.trace() prints log message crmPack logger.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/examine.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain hypothetical trial course table for a design — examine","title":"Obtain hypothetical trial course table for a design — examine","text":"generic function takes design generates dataframe showing beginning several hypothetical trial courses design. means, generated dataframe one can read : many cohorts required optimal case (DLTs observed) order reach highest dose specified dose grid (stopping rule fulfilled) assuming DLTs observed certain dose level, next recommended dose possible number DLTs observed actual relative increments used cases whether trial stop certain cohort Examining \"single trial\" behavior dose escalation design first important step evaluating design, replaced studying solely operating characteristics \"many trials\". cohort sizes also taken design, assuming DLTs occur dose listed.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/examine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain hypothetical trial course table for a design — examine","text":"","code":"examine(object, ..., maxNoIncrement = 100L)  # S4 method for class 'Design' examine(object, mcmcOptions = McmcOptions(), ..., maxNoIncrement)  # S4 method for class 'RuleDesign' examine(object, ..., maxNoIncrement = 100L)  # S4 method for class 'DADesign' examine(object, mcmcOptions = McmcOptions(), ..., maxNoIncrement)"},{"path":"https://openpharma.github.io/crmPack/reference/examine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain hypothetical trial course table for a design — examine","text":"object design (Design RuleDesign object) want examine ... additional arguments (see methods) maxNoIncrement maximum number contiguous next doses 0 DLTs , .e. increment (default 100) mcmcOptions object class McmcOptions, giving MCMC options evaluation trial. default, standard options used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/examine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain hypothetical trial course table for a design — examine","text":"data frame","code":""},{"path":"https://openpharma.github.io/crmPack/reference/examine.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Obtain hypothetical trial course table for a design — examine","text":"examine(Design): Examine model-based CRM examine(RuleDesign): Examine rule-based design examine(DADesign): Examine model-based CRM","code":""},{"path":"https://openpharma.github.io/crmPack/reference/examine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain hypothetical trial course table for a design — examine","text":"","code":"# Define the dose-grid. emptydata <- Data(doseGrid = c(1, 3, 5, 10, 15, 20, 25))   # Initialize the CRM model. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov =     matrix(c(1, -0.5, -0.5, 1),       nrow = 2     ),   ref_dose = 56 )  # Choose the rule for selecting the next dose. my_next_best <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )   my_size1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) my_size2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) my_size <- maxSize(my_size1, my_size2)  # Choose the rule for stopping. my_stopping1 <- StoppingMinCohorts(nCohorts = 3) my_stopping2 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) my_stopping3 <- StoppingMinPatients(nPatients = 20) my_stopping <- (my_stopping1 & my_stopping2) | my_stopping3  # Choose the rule for dose increments. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design. my_design <- Design(   model = my_model,   nextBest = my_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = emptydata,   startingDose = 3 )  my_options <- McmcOptions(   burnin = 10, step = 1, samples = 20, rng_kind = \"Super-Duper\",   rng_seed = 94 )  examine(my_design, my_options) #>   dose DLTs nextDose  stop increment #> 1    3    0        5 FALSE        67 #> 2    3    1        1 FALSE       -67 #> 3    5    0       10 FALSE       100 #> 4    5    1        5 FALSE         0 #> 5   10    0       20 FALSE       100 #> 6   10    1        5 FALSE       -50 #> 7   20    0       25 FALSE        25 #> 8   20    1       20 FALSE         0  # Example where examine stops because stopping rule already fulfilled. my_stopping4 <- StoppingMinPatients(nPatients = 3) my_stopping <- (my_stopping1 & my_stopping2) | my_stopping4  my_design <- Design(   model = my_model,   nextBest = my_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = emptydata,   startingDose = 3 )  examine(my_design, mcmcOptions = my_options) #>   dose DLTs nextDose  stop increment #> 1    3    0        5 FALSE        67 #> 2    3    1        1 FALSE       -67 #> 3    5    0       10 FALSE       100 #> 4    5    1        5 FALSE         0 #> 5   10    0       20  TRUE       100 #> 6   10    1        5  TRUE       -50  # Example where examine stops because infinite looping # (note that here a very low threshold is used for the parameter # \"maxNoIncrement\" in \"examine\" to keep the execution time short). my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.00001) )  my_stopping <- (my_stopping1 & my_stopping2) | StoppingMissingDose()  design <- Design(   model = my_model,   nextBest = my_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = emptydata,   startingDose = 3 )  examine(my_design, mcmcOptions = my_options, maxNoIncrement = 2) #>   dose DLTs nextDose  stop increment #> 1    3    0        5 FALSE        67 #> 2    3    1        1 FALSE       -67 #> 3    5    0       10 FALSE       100 #> 4    5    1        5 FALSE         0 #> 5   10    0       20  TRUE       100 #> 6   10    1        5  TRUE       -50 # Define the dose-grid emptydata <- Data(doseGrid = c(5, 10, 15, 25, 35, 50, 80))  # inizialing a 3+3 design with constant cohort size of 3 and # starting dose equal 5 myDesign <- RuleDesign(   nextBest = NextBestThreePlusThree(),   cohort_size = CohortSizeConst(size = 3L),   data = emptydata,   startingDose = 5 )  # Examine the design set.seed(4235) examine(myDesign) #>    dose DLTs nextDose  stop increment #> 1     5    0       10 FALSE       100 #> 2     5    1        5 FALSE         0 #> 3     5    2       NA  TRUE        NA #> 4     5    3       NA  TRUE        NA #> 5    10    0       15 FALSE        50 #> 6    10    1       10 FALSE         0 #> 7    10    2        5 FALSE       -50 #> 8    10    3        5 FALSE       -50 #> 9    15    0       25 FALSE        67 #> 10   15    1       15 FALSE         0 #> 11   15    2       10 FALSE       -33 #> 12   15    3       10 FALSE       -33 #> 13   25    0       35 FALSE        40 #> 14   25    1       25 FALSE         0 #> 15   25    2       15 FALSE       -40 #> 16   25    3       15 FALSE       -40 #> 17   35    0       50 FALSE        43 #> 18   35    1       35 FALSE         0 #> 19   35    2       25 FALSE       -29 #> 20   35    3       25 FALSE       -29 #> 21   50    0       80 FALSE        60 #> 22   50    1       50 FALSE         0 #> 23   50    2       35 FALSE       -30 #> 24   50    3       35 FALSE       -30 # nolint start  # Define the dose-grid and PEM parameters emptydata <- DataDA(doseGrid = c(   0.1, 0.5, 1, 1.5, 3, 6,   seq(from = 10, to = 80, by = 2) ), Tmax = 60) # Initialize the mDA-CRM model npiece_ <- 10 Tmax_ <- 60  lambda_prior <- function(k) {   npiece_ / (Tmax_ * (npiece_ - k + 0.5)) }  model <- DALogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56,   npiece = npiece_,   l = as.numeric(t(apply(as.matrix(c(1:npiece_), 1, npiece_), 2, lambda_prior))),   c_par = 2 ) # Choose the rule for dose increments myIncrements <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  myNextBest <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort-size mySize1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) mySize2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) mySize <- maxSize(mySize1, mySize2)  # Choose the rule for stopping myStopping1 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) myStopping2 <- StoppingMinPatients(nPatients = 50)  myStopping <- (myStopping1 | myStopping2)  # Choose the safety window mysafetywindow <- SafetyWindowConst(c(6, 2), 7, 7)  # Initialize the design design <- DADesign(   model = model,   increments = myIncrements,   nextBest = myNextBest,   stopping = myStopping,   cohort_size = mySize,   data = emptydata,   safetyWindow = mysafetywindow,   startingDose = 3 )  set.seed(4235) # MCMC parameters are set to small values only to show this example. They should be # increased for a real case. # This procedure will take a while. options <- McmcOptions(   burnin = 10,   step = 1,   samples = 100,   rng_kind = \"Mersenne-Twister\",   rng_seed = 12 ) testthat::expect_warning(   result <- examine(design, mcmcOptions = options, maxNoIncrement = 2),   \"Stopping because 2 times no increment\" )  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit method for the Samples class — fit","title":"Fit method for the Samples class — fit","text":"Note new generic function necessary fitted function allows first argument object appear signature. need also arguments signature.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit method for the Samples class — fit","text":"","code":"fit(object, model, data, ...)  # S4 method for class 'Samples,GeneralModel,Data' fit(   object,   model,   data,   points = data@doseGrid,   quantiles = c(0.025, 0.975),   middle = mean,   ... )  # S4 method for class 'Samples,DualEndpoint,DataDual' fit(object, model, data, quantiles = c(0.025, 0.975), middle = mean, ...)  # S4 method for class 'Samples,LogisticIndepBeta,Data' fit(   object,   model,   data,   points = data@doseGrid,   quantiles = c(0.025, 0.975),   middle = mean,   ... )  # S4 method for class 'Samples,Effloglog,DataDual' fit(   object,   model,   data,   points = data@doseGrid,   quantiles = c(0.025, 0.975),   middle = mean,   ... )  # S4 method for class 'Samples,EffFlexi,DataDual' fit(   object,   model,   data,   points = data@doseGrid,   quantiles = c(0.025, 0.975),   middle = mean,   ... )  # S4 method for class 'Samples,LogisticLogNormalOrdinal,DataOrdinal' fit(   object,   model,   data,   points = data@doseGrid,   quantiles = c(0.025, 0.975),   middle = mean,   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit method for the Samples class — fit","text":"object Samples object model GeneralModel object data Data object ... passed prob() method. points dose levels fit requested? default dose grid quantiles quantiles calculated (default: 0.025 0.975) middle function computing middle point. Default: mean","code":""},{"path":"https://openpharma.github.io/crmPack/reference/fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit method for the Samples class — fit","text":"data frame required information (see method details)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/fit.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Fit method for the Samples class — fit","text":"fit(object = Samples, model = GeneralModel, data = Data): method returns data frame dose, middle, lower upper quantiles dose-toxicity curve fit(object = Samples, model = DualEndpoint, data = DataDual): method returns data frame dose, middle, lower upper quantiles, dose-tox dose-biomarker (suffix \"Biomarker\") curves, grid points (Note currently grid points can used, DualEndpointRW models allow ) fit(object = Samples, model = LogisticIndepBeta, data = Data): method return data frame dose, middle lower upper quantiles dose-DLE curve using DLE samples “LogisticIndepBeta” model class fit(object = Samples, model = Effloglog, data = DataDual): method returns data frame dose, middle, lower, upper quantiles dose-efficacy curve using efficacy samples “Effloglog” model class fit(object = Samples, model = EffFlexi, data = DataDual): method returns data frame dose, middle, lower upper quantiles dose-efficacy curve using efficacy samples “EffFlexi” model class fit(object = Samples, model = LogisticLogNormalOrdinal, data = DataOrdinal): method returns data frame dose, middle, lower upper quantiles dose-efficacy curve using efficacy samples “LogisticLogNormalOrdinal” model class","code":""},{"path":"https://openpharma.github.io/crmPack/reference/fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit method for the Samples class — fit","text":"","code":"# nolint start  # Create some data data <- Data(x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y = c(0, 0, 0, 0, 0, 0, 1, 0),              cohort = c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid = c(0.1, 0.5, 1.5, 3, 6,                           seq(from = 10, to = 80, by=2))) #> Used default patient IDs!  # Initialize a model  model <- LogisticLogNormal(mean = c(-0.85, 1),                            cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),                            ref_dose = 56)  # Get posterior for all model parameters options <- McmcOptions(burnin = 100,                        step = 2,                        samples = 2000) set.seed(94) samples <- mcmc(data, model, options)  # Extract the posterior mean  (and empirical 2.5 and 97.5 percentile) # for the prob(DLT) by doses fitted <- fit(object = samples,               model = model,               data = data,               quantiles=c(0.025, 0.975),               middle=mean)   # ---------------------------------------------- # A different example using a different model ## we need a data object with doses >= 1: data<-Data(x=c(25,50,50,75,150,200,225,300),            y=c(0,0,0,0,1,1,1,1),            doseGrid=seq(from=25,to=300,by=25)) #> Used default patient IDs! #> Used best guess cohort indices!   model <- LogisticIndepBeta(binDLE=c(1.05,1.8),                            DLEweights=c(3,3),                            DLEdose=c(25,300),                            data=data) options <- McmcOptions(burnin=100,                        step=2,                        samples=200) ## samples must be from 'Samples' class (object slot in fit) samples <- mcmc(data,model,options)  fitted <- fit(object=samples, model=model, data=data)  # nolint end # nolint start  # Create some data data <- DataDual(   x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10,       20, 20, 20, 40, 40, 40, 50, 50, 50),   y=c(0, 0, 0, 0, 0, 0, 1, 0,       0, 1, 1, 0, 0, 1, 0, 1, 1),   w=c(0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.55, 0.6,       0.52, 0.54, 0.56, 0.43, 0.41, 0.39, 0.34, 0.38, 0.21),   doseGrid=c(0.1, 0.5, 1.5, 3, 6,              seq(from=10, to=80, by=2))) #> Used default patient IDs! #> Used best guess cohort indices!  # Initialize the Dual-Endpoint model (in this case RW1) model <- DualEndpointRW(mean = c(0, 1),                         cov = matrix(c(1, 0, 0, 1), nrow=2),                         sigma2betaW = 0.01,                         sigma2W = c(a=0.1, b=0.1),                         rho = c(a=1, b=1),                         rw1 = TRUE)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=500) set.seed(94) samples <- mcmc(data, model, options)  # Extract the posterior mean  (and empirical 2.5 and 97.5 percentile) # for the prob(DLT) by doses and the Biomarker by doses fitted <- fit(object = samples,               model = model,               data = data,               quantiles=c(0.025, 0.975),               middle=mean)  # nolint end ##Obtain the 'fit' the middle, uppper and lower quantiles for the dose-DLE curve ## at all dose levels using a DLE sample, a DLE model and the data ## samples must be from 'Samples' class (object slot) ## we need a data object with doses >= 1: data<-Data(x=c(25,50,50,75,150,200,225,300),            y=c(0,0,0,0,1,1,1,1),            doseGrid=seq(from=25,to=300,by=25)) #> Used default patient IDs! #> Used best guess cohort indices! ## model must be from 'Model' or 'ModelTox' class e.g using 'LogisticIbdepBeta' model class model<-LogisticIndepBeta(binDLE=c(1.05,1.8),DLEweights=c(3,3),DLEdose=c(25,300),data=data) ##options for MCMC options<-McmcOptions(burnin=100,step=2,samples=200) ## samples must be from 'Samples' class (object slot in fit) samples<-mcmc(data,model,options)  fit(object=samples, model=model,data=data) #>    dose    middle      lower     upper #> 1    25 0.2362155 0.08981218 0.4190492 #> 2    50 0.3682220 0.20111117 0.5781557 #> 3    75 0.4575540 0.27620943 0.6661194 #> 4   100 0.5223768 0.33161940 0.7239995 #> 5   125 0.5717475 0.37825701 0.7709958 #> 6   150 0.6107229 0.40917199 0.8141918 #> 7   175 0.6423542 0.42871110 0.8437866 #> 8   200 0.6685943 0.44575657 0.8651832 #> 9   225 0.6907535 0.46059389 0.8819519 #> 10  250 0.7097445 0.47392655 0.8953912 #> 11  275 0.7262234 0.48877922 0.9063659 #> 12  300 0.7406746 0.51041966 0.9148683 ##Obtain the 'fit' the middle, uppper and lower quantiles for the dose-efficacy curve ## at all dose levels using an efficacy sample, a pseudo efficacy model and the data ## data must be from 'DataDual' class data<-DataDual(x=c(25,50,25,50,75,300,250,150),                y=c(0,0,0,0,0,1,1,0),                w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),                doseGrid=seq(25,300,25),                placebo=FALSE) #> Used default patient IDs! #> Used best guess cohort indices! ## model must be from 'ModelEff' e.g using 'Effloglog' class Effmodel<-Effloglog(c(1.223,2.513),c(25,300),nu=c(a=1,b=0.025),data=data,c=0) ## samples must be from 'Samples' class (object slot in fit) options<-McmcOptions(burnin=100,step=2,samples=200) Effsamples <- mcmc(data=data,model=Effmodel,options=options) fit(object=Effsamples, model=Effmodel,data=data) #>    dose   middle      lower    upper #> 1    25 0.465844 -0.1165332 1.007491 #> 2    50 0.822886  0.3886473 1.180275 #> 3    75 1.003435  0.5768330 1.403713 #> 4   100 1.121531  0.6228397 1.630016 #> 5   125 1.208159  0.6601782 1.787815 #> 6   150 1.276017  0.6894266 1.902756 #> 7   175 1.331491  0.7064292 2.018253 #> 8   200 1.378223  0.6925712 2.105017 #> 9   225 1.418476  0.6806345 2.173231 #> 10  250 1.453748  0.6701746 2.233005 #> 11  275 1.485081  0.6687583 2.286102 #> 12  300 1.513225  0.6801521 2.333796 # nolint start  ##Obtain the 'fit' the middle, uppper and lower quantiles for the dose-efficacy curve ## at all dose levels using an efficacy sample, the 'EffFlexi' efficacy model and the data ## data must be from 'DataDual' class data<-DataDual(x=c(25,50,25,50,75,300,250,150),                y=c(0,0,0,0,0,1,1,0),                w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),                doseGrid=seq(25,300,25),                placebo=FALSE) #> Used default patient IDs! #> Used best guess cohort indices! ## model must be from 'ModelEff' e.g using 'Effloglog' class Effmodel<- EffFlexi(eff=c(1.223, 2.513),eff_dose=c(25,300),                     sigma2W=c(a=0.1,b=0.1),sigma2betaW=c(a=20,b=50),rw1 = FALSE,data=data)  ## samples must be from 'Samples' class (object slot in fit) options<-McmcOptions(burnin=100,step=2,samples=200) Effsamples <- mcmc(data=data,model=Effmodel,options=options) fit(object=Effsamples, model=Effmodel,data=data) #>    dose    middle      lower     upper #> 1    25 0.7036011  0.6866660 0.7158120 #> 2    50 0.4494999  0.4100730 0.5051847 #> 3    75 0.5795760  0.5125865 0.6297975 #> 4   100 0.6321164 -1.3094061 2.4041159 #> 5   125 0.5879013 -1.3602565 2.2919075 #> 6   150 0.5246635  0.5162698 0.5419775 #> 7   175 0.6355070 -1.7183340 3.1674019 #> 8   200 0.8103666 -3.1066777 5.2791132 #> 9   225 1.0235281 -4.1707667 5.8087216 #> 10  250 1.4342934 -4.1558082 6.0408674 #> 11  275 1.9401852 -1.9698781 5.1282467 #> 12  300 2.5119573  2.5075891 2.5129950  # nolint end model <- .DefaultLogisticLogNormalOrdinal() ordinal_data <- .DefaultDataOrdinal() options <- .DefaultMcmcOptions() samples <- mcmc(ordinal_data, model, options) #> Warning: Unused variable \"y\" in data  grade1_fit <- fit(samples, model, ordinal_data, grade = 1L) grade2_fit <- fit(samples, model, ordinal_data, grade = 2L)"},{"path":"https://openpharma.github.io/crmPack/reference/fitGain.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the fitted values for the gain values at all dose levels based on a given pseudo DLE model, DLE sample, a pseudo efficacy model, a Efficacy sample and data. This method returns a data frame with dose, middle, lower and upper quantiles of the gain value samples — fitGain","title":"Get the fitted values for the gain values at all dose levels based on a given pseudo DLE model, DLE sample, a pseudo efficacy model, a Efficacy sample and data. This method returns a data frame with dose, middle, lower and upper quantiles of the gain value samples — fitGain","text":"Get fitted values gain values dose levels based given pseudo DLE model, DLE sample, pseudo efficacy model, Efficacy sample data. method returns data frame dose, middle, lower upper quantiles gain value samples","code":""},{"path":"https://openpharma.github.io/crmPack/reference/fitGain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the fitted values for the gain values at all dose levels based on a given pseudo DLE model, DLE sample, a pseudo efficacy model, a Efficacy sample and data. This method returns a data frame with dose, middle, lower and upper quantiles of the gain value samples — fitGain","text":"","code":"fitGain(DLEmodel, DLEsamples, Effmodel, Effsamples, data, ...)  # S4 method for class 'ModelTox,Samples,ModelEff,Samples,DataDual' fitGain(   DLEmodel,   DLEsamples,   Effmodel,   Effsamples,   data,   points = data@doseGrid,   quantiles = c(0.025, 0.975),   middle = mean,   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/fitGain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the fitted values for the gain values at all dose levels based on a given pseudo DLE model, DLE sample, a pseudo efficacy model, a Efficacy sample and data. This method returns a data frame with dose, middle, lower and upper quantiles of the gain value samples — fitGain","text":"DLEmodel DLE pseudo model ModelTox class object DLEsamples DLE samples Samples class object Effmodel efficacy pseudo model ModelEff class object Effsamples efficacy samples Samples class object data data input DataDual class object ... additional arguments methods points dose levels fit requested? default dose grid quantiles quantiles calculated (default: 0.025 0.975) middle function computing middle point. Default: mean","code":""},{"path":"https://openpharma.github.io/crmPack/reference/fitGain.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get the fitted values for the gain values at all dose levels based on a given pseudo DLE model, DLE sample, a pseudo efficacy model, a Efficacy sample and data. This method returns a data frame with dose, middle, lower and upper quantiles of the gain value samples — fitGain","text":"fitGain(   DLEmodel = ModelTox,   DLEsamples = Samples,   Effmodel = ModelEff,   Effsamples = Samples,   data = DataDual ): method returns data frame dose, middle, lower, upper quantiles gain values obtained given DLE efficacy samples","code":""},{"path":"https://openpharma.github.io/crmPack/reference/fitGain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the fitted values for the gain values at all dose levels based on a given pseudo DLE model, DLE sample, a pseudo efficacy model, a Efficacy sample and data. This method returns a data frame with dose, middle, lower and upper quantiles of the gain value samples — fitGain","text":"","code":"##Obtain the 'fitGain' the middle, uppper and lower quantiles for the samples of gain values ## at all dose levels using a pseudo DLE model, a DLE sample, a pseudo Efficacy model and ## a efficacy sample ## data must be from 'DataDual' class data<-DataDual(x=c(25,50,25,50,75,300,250,150),                y=c(0,0,0,0,0,1,1,0),                w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),                doseGrid=seq(25,300,25),                placebo=FALSE) #> Used default patient IDs! #> Used best guess cohort indices! ## DLE model must be from 'ModelTox' class e.g using 'LogisticIndepBeta' model DLEmodel<-LogisticIndepBeta(binDLE=c(1.05,1.8),DLEweights=c(3,3),DLEdose=c(25,300),data=data)  ## Efficacy model must be from 'ModelEff' class e.g using 'Effloglog' model Effmodel<-Effloglog(c(1.223,2.513),c(25,300),nu=c(a=1,b=0.025),data=data,c=0) ## samples must be from 'Samples' class (object slot in fit) options<-McmcOptions(burnin=100,step=2,samples=200) ##set up the same data set in class 'Data' for MCMC sampling for DLE data1 <- Data(x=data@x,y=data@y,doseGrid=data@doseGrid) #> Used default patient IDs! #> Used best guess cohort indices!  DLEsamples <- mcmc(data=data1,model=DLEmodel,options=options) Effsamples <- mcmc(data=data,model=Effmodel,options=options)  fitGain(DLEmodel=DLEmodel,DLEsamples=DLEsamples,         Effmodel=Effmodel, Effsamples=Effsamples,data=data) #>    dose    middle       lower     upper #> 1    25 0.3005989 -0.08718754 0.7332158 #> 2    50 0.5185839  0.23160384 0.8886416 #> 3    75 0.6105264  0.30266627 0.9820510 #> 4   100 0.6618601  0.30095400 1.0883378 #> 5   125 0.6946738  0.28103149 1.1346464 #> 6   150 0.7174815  0.26318215 1.2011287 #> 7   175 0.7342843  0.25135980 1.2535173 #> 8   200 0.7472094  0.23857418 1.2962004 #> 9   225 0.7574892  0.22706268 1.3318520 #> 10  250 0.7658857  0.21668277 1.3754153 #> 11  275 0.7728943  0.20729352 1.4124810 #> 12  300 0.7788504  0.19876788 1.4322783 ##Obtain the 'fitGain' the middle, uppper and lower quantiles for the samples of gain values ## at all dose levels using a pseudo DLE model, a DLE sample, a pseudo Efficacy model and ## a efficacy sample ## data must be from 'DataDual' class data<-DataDual(x=c(25,50,25,50,75,300,250,150),                y=c(0,0,0,0,0,1,1,0),                w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),                doseGrid=seq(25,300,25),                placebo=FALSE) #> Used default patient IDs! #> Used best guess cohort indices! ## DLE model must be from 'ModelTox' class e.g using 'LogisticIndepBeta' model DLEmodel<-LogisticIndepBeta(binDLE=c(1.05,1.8),DLEweights=c(3,3),DLEdose=c(25,300),data=data)  ## Efficacy model must be from 'ModelEff' class e.g using 'Effloglog' model Effmodel<-Effloglog(c(1.223,2.513),c(25,300),nu=c(a=1,b=0.025),data=data,c=0) ## samples must be from 'Samples' class (object slot in fit) options<-McmcOptions(burnin=100,step=2,samples=200) ##set up the same data set in class 'Data' for MCMC sampling for DLE data1 <- Data(x=data@x,y=data@y,doseGrid=data@doseGrid) #> Used default patient IDs! #> Used best guess cohort indices!  DLEsamples <- mcmc(data=data1,model=DLEmodel,options=options) Effsamples <- mcmc(data=data,model=Effmodel,options=options)  fitGain(DLEmodel=DLEmodel,DLEsamples=DLEsamples,         Effmodel=Effmodel, Effsamples=Effsamples,data=data) #>    dose    middle      lower     upper #> 1    25 0.3035639 -0.1419281 0.7336815 #> 2    50 0.5442238  0.2441919 0.8627864 #> 3    75 0.6400330  0.3130091 1.0534260 #> 4   100 0.6901998  0.3051387 1.1878586 #> 5   125 0.7198842  0.2679615 1.2763298 #> 6   150 0.7386820  0.2648011 1.3378176 #> 7   175 0.7510732  0.2812509 1.3772132 #> 8   200 0.7594264  0.2943053 1.4172885 #> 9   225 0.7651054  0.2841997 1.4543642 #> 10  250 0.7689465  0.2694592 1.4789627 #> 11  275 0.7714876  0.2563641 1.4993280 #> 12  300 0.7730880  0.2446324 1.5163999"},{"path":"https://openpharma.github.io/crmPack/reference/fitPEM.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the fitted DLT free survival (piecewise exponential model). This function returns a data frame with dose, middle, lower and upper quantiles for the PEM curve. If hazard=TRUE, — fitPEM","title":"Get the fitted DLT free survival (piecewise exponential model). This function returns a data frame with dose, middle, lower and upper quantiles for the PEM curve. If hazard=TRUE, — fitPEM","text":"Get fitted DLT free survival (piecewise exponential model). function returns data frame dose, middle, lower upper quantiles PEM curve. hazard=TRUE,","code":""},{"path":"https://openpharma.github.io/crmPack/reference/fitPEM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the fitted DLT free survival (piecewise exponential model). This function returns a data frame with dose, middle, lower and upper quantiles for the PEM curve. If hazard=TRUE, — fitPEM","text":"","code":"fitPEM(   object,   model,   data,   quantiles = c(0.025, 0.975),   middle = mean,   hazard = FALSE,   ... )  # S4 method for class 'Samples,DALogisticLogNormal,DataDA' fitPEM(   object,   model,   data,   quantiles = c(0.025, 0.975),   middle = mean,   hazard = FALSE,   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/fitPEM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the fitted DLT free survival (piecewise exponential model). This function returns a data frame with dose, middle, lower and upper quantiles for the PEM curve. If hazard=TRUE, — fitPEM","text":"object mcmc samples model mDA-CRM model data data input, DataDA class object quantiles quantiles calculated (default: 0.025 0.975) middle function computing middle point. Default: mean hazard hazard time plotted based PEM? (default) Otherwise ... ... additional arguments methods","code":""},{"path":"https://openpharma.github.io/crmPack/reference/fitPEM.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get the fitted DLT free survival (piecewise exponential model). This function returns a data frame with dose, middle, lower and upper quantiles for the PEM curve. If hazard=TRUE, — fitPEM","text":"fitPEM(object = Samples, model = DALogisticLogNormal, data = DataDA): method works DALogisticLogNormal model class.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/fitPEM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the fitted DLT free survival (piecewise exponential model). This function returns a data frame with dose, middle, lower and upper quantiles for the PEM curve. If hazard=TRUE, — fitPEM","text":"","code":"# nolint start  # Create the data data <- DataDA(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 1, 1, 0, 0, 1, 0),   ID = 1L:8L,   cohort = as.integer(c(1:5, 6, 6, 6)),   doseGrid =     c(       0.1, 0.5, 1.5, 3, 6,       seq(from = 10, to = 80, by = 2)     ),   u = c(42, 30, 15, 5, 20, 25, 30, 60),   t0 = c(0, 15, 30, 40, 55, 70, 75, 85),   Tmax = 60 )  # Initialize the CRM model used to model the data npiece_ <- 10 lambda_prior <- function(k) {   npiece_ / (data@Tmax * (npiece_ - k + 0.5)) }  model <- DALogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56,   npiece = npiece_,   l = as.numeric(t(apply(as.matrix(c(1:npiece_), 1, npiece_), 2, lambda_prior))),   c_par = 2 )  # Obtain the posterior  options <- McmcOptions(   burnin = 10,   step = 2,   samples = 1e2 )  set.seed(94) samples <- mcmc(data, model, options)   # Extract the posterior mean hazard (and empirical 2.5 and 97.5 percentile) # for the piecewise exponential model # If hazard=FALSE, the posterior PEM will be plot fitted <- fitPEM(   object = samples,   model = model,   data = data,   middle = mean,   hazard = TRUE,   quantiles = c(0.25, 0.75) )  # nolint end"},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/gain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Gain Values based on Pseudo DLE and a Pseudo Efficacy Models and Using Optional Samples. — gain","text":"","code":"gain(dose, model_dle, samples_dle, model_eff, samples_eff, ...)  # S4 method for class 'numeric,ModelTox,Samples,ModelEff,Samples' gain(dose, model_dle, samples_dle, model_eff, samples_eff, ...)  # S4 method for class 'numeric,ModelTox,missing,Effloglog,missing' gain(dose, model_dle, samples_dle, model_eff, samples_eff, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/gain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Gain Values based on Pseudo DLE and a Pseudo Efficacy Models and Using Optional Samples. — gain","text":"dose (number numeric) dose targeted. following recycling rule applies samples missing: vectors size 1 recycled size sample. Otherwise, dose must size sample. model_dle (ModelTox) pseudo DLE (dose-limiting events)/toxicity model. samples_dle (Samples) samples model's parameters used compute toxicity probabilities. Can also missing models. model_eff (ModelEff) efficacy model pseudo data prior. samples_eff (Samples) samples model's parameters used compute expected efficacy values. Can also missing models. ... used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/gain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Gain Values based on Pseudo DLE and a Pseudo Efficacy Models and Using Optional Samples. — gain","text":"gain values.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/gain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Gain Values based on Pseudo DLE and a Pseudo Efficacy Models and Using Optional Samples. — gain","text":"function computes gain values given dose level, pseudo DLE Efficacy models well given DLE Efficacy samples.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/gain.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Compute Gain Values based on Pseudo DLE and a Pseudo Efficacy Models and Using Optional Samples. — gain","text":"gain(   dose = numeric,   model_dle = ModelTox,   samples_dle = Samples,   model_eff = ModelEff,   samples_eff = Samples ): gain(   dose = numeric,   model_dle = ModelTox,   samples_dle = missing,   model_eff = Effloglog,   samples_eff = missing ): Compute gain value given dose level, pseudo DLE Efficacy models without DLE Efficacy samples.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/gain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Gain Values based on Pseudo DLE and a Pseudo Efficacy Models and Using Optional Samples. — gain","text":"","code":"# Obtain the gain value for a given dose, a pseudo DLE and efficacy models # as well as DLE and efficacy samples. emptydata <- DataDual(doseGrid = seq(25, 300, 25), placebo = FALSE) mcmc_opts <- McmcOptions(burnin = 100, step = 2, samples = 200)  # DLE model and samples. model_dle <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = emptydata )  samples_dle <- mcmc(emptydata, model_dle, mcmc_opts)  # Efficacy model (Effloglog) and samples. model_effloglog <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = emptydata )  samples_effloglog <- mcmc(emptydata, model_effloglog, mcmc_opts)  # Gain values for dose level 75 and Effloglog efficacy model. gain(   dose = 75,   model_dle = model_dle,   samples_dle = samples_dle,   model_eff = model_effloglog,   samples_eff = samples_effloglog ) #>   [1] 1.3724463 1.1163011 1.1876543 0.5601303 1.6102540 0.6156309 1.0702110 #>   [8] 1.4812699 1.4689083 0.5991908 0.9135514 1.4188588 0.8914392 0.9510920 #>  [15] 0.9962461 0.8646416 1.4064603 0.6449197 0.6616455 0.8855359 0.6516058 #>  [22] 0.4573677 0.2922851 1.5184059 0.7864663 0.7575013 0.6550523 1.4341707 #>  [29] 0.6397446 0.5902374 1.3455265 0.5084815 0.6228258 0.2742999 1.1028332 #>  [36] 1.2683656 1.4552391 1.7914810 1.2640065 0.8954424 0.4557674 0.7072762 #>  [43] 0.6508919 0.9339104 0.6563602 1.0341947 0.5346614 0.9638692 1.2067207 #>  [50] 1.3048691 1.3450987 0.2951774 1.2150462 1.2154166 0.6994934 0.9380233 #>  [57] 1.6054284 1.4631007 0.7170195 1.1514112 1.2336247 0.7694697 0.6456181 #>  [64] 1.2906157 1.3531875 0.9304359 1.2255894 1.2325904 1.2405950 1.7368240 #>  [71] 0.8030362 1.3514498 1.2226824 0.4009393 1.0961200 1.3827692 1.3408870 #>  [78] 1.0155697 1.3858920 0.7852963 1.0389329 0.7076404 0.9516520 1.2265820 #>  [85] 0.6453395 1.1631187 1.1300966 1.0829065 1.3729595 0.6465427 0.9005294 #>  [92] 1.0391913 1.0106432 1.2346600 0.9347928 0.4895462 0.4382956 1.3669563 #>  [99] 1.2218775 0.8111870 0.4934214 1.1457987 1.1405332 1.1489580 1.4535811 #> [106] 0.3077070 1.2252347 1.5443211 1.3362472 1.1712998 1.0014473 1.1369257 #> [113] 0.8171996 0.2649928 1.1712471 0.4232131 1.0481358 1.4055183 1.3802208 #> [120] 1.1189702 0.9606329 1.2678369 1.2700036 0.5651039 1.8531221 1.5108585 #> [127] 1.5765327 1.1742238 1.5648763 1.0839926 0.9758415 0.8558122 1.1538830 #> [134] 1.1561811 1.4922312 0.9087434 0.6369058 1.1785576 1.2719208 0.7536225 #> [141] 0.4610063 1.0802367 1.2740320 0.7842036 1.5808339 1.4593170 0.6581335 #> [148] 0.5965571 1.1217183 1.6115560 0.9235499 1.4685061 0.9808467 0.4309496 #> [155] 1.4693931 1.1060406 1.7424236 0.6815545 0.9528618 1.3946497 1.0070073 #> [162] 0.9412750 0.6710952 1.3174514 1.4569902 0.9076429 0.1721784 0.6274587 #> [169] 1.0012481 0.6883088 1.0717720 1.3573660 1.2150049 1.7473766 1.1468327 #> [176] 0.6136378 1.1348749 1.0056950 1.2825347 1.2099100 1.1442010 1.3166977 #> [183] 0.6235300 1.0662774 0.8839399 0.8752322 1.2075558 0.8035865 1.1490294 #> [190] 0.8053042 0.8663338 1.7354374 0.9656245 0.7848750 1.0084461 1.1694038 #> [197] 1.1076468 1.2395853 1.3728410 1.1775367  # Efficacy model (EffFlexi) and samples. model_effflexi <- EffFlexi(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   sigma2W = c(a = 0.1, b = 0.1),   sigma2betaW = c(a = 20, b = 50),   rw1 = FALSE,   data = emptydata )  samples_effflexi <- mcmc(emptydata, model_effflexi, mcmc_opts)  # Gain values for dose level 75 and EffFlexi efficacy model. gain(   dose = 75,   model_dle = model_dle,   samples_dle = samples_dle,   model_eff = model_effflexi,   samples_eff = samples_effflexi ) #>   [1] -7.797762012 -0.199336986  2.523438672  0.214818998 -0.547251404 #>   [6] -0.828895061 -0.077208139  4.198925893 -2.514839633 -0.993067176 #>  [11] -2.132389402  3.077140329  1.501540022  0.965118633  2.448944419 #>  [16]  1.603548539  0.184034225  0.557697919 -1.952719644  2.492728818 #>  [21] -0.846354589  1.614736279  0.041034314 -1.658099056  0.062305215 #>  [26]  0.929473739  1.467771682  5.695943231  2.757768442 -0.081225987 #>  [31]  6.972030665  3.929777824  0.289435533  0.816732419  2.506860558 #>  [36] -0.425530328 -2.334480198  0.586245417 -3.720766029  0.137125761 #>  [41]  1.426266668  2.928028475  2.507657658  0.594944379  1.404831845 #>  [46] -1.769188692  2.344694257  2.425595600 -3.724049447  5.721211847 #>  [51]  1.240789611  0.661480509 -0.935456834  1.859864240  3.598570254 #>  [56]  4.066092601 -0.283984842 -1.789499719  2.291953834 -0.340493900 #>  [61]  2.729746082  3.088494146  0.002428012  5.549212571  2.237065518 #>  [66] -1.146073828 -1.215629407  4.093263442  4.365740674 -3.579946118 #>  [71]  0.868637136 -0.796092404  1.728214732  1.480074653  3.188259955 #>  [76]  1.805344902 -1.316897949  0.917944815  2.347651429 -2.057661335 #>  [81]  1.924687634 -0.059670211  2.093612794 -0.844486312 -1.187736649 #>  [86]  4.166443525 -6.163708089 -2.062453988  0.389062104 -0.293947515 #>  [91]  3.633662621  7.428196399 -0.427327028  0.842044527  1.278787634 #>  [96] -1.228131627  1.172618349  7.690292673 -2.492784535  1.276139945 #> [101]  0.093697215 -0.505052555 -0.776274633  0.063380404 -2.593648360 #> [106]  0.261357399 -1.711652634  1.622242271 -0.362393167  4.461089005 #> [111]  3.450033563  6.051686737 -1.351043509  1.375461317 -3.742672152 #> [116]  0.242883309 -3.645677222  4.822342119  2.679937625  2.173108830 #> [121]  0.348438489  0.070456192  4.777059451  5.306383005  3.369429858 #> [126]  6.363568789  2.947605736  0.669428991 -4.638862209 -0.544622733 #> [131]  0.993147986  0.850065911  4.797947307 -0.434228667 -0.487685678 #> [136] -0.263474416 -0.130119997 -1.364954217  1.327120227  1.435113453 #> [141]  1.800903129  2.340832586 -2.214719403 -2.190862346 -1.090888958 #> [146] -0.571400968  1.106625717  3.326360639  0.832149924  4.986322978 #> [151]  4.470591160 -0.643807544  3.225924662  1.616645210 -3.171086291 #> [156] -1.400515992 -7.580812166 -1.147022482  3.689024159  5.515599083 #> [161] -0.133504677  1.728566992  2.175123544  8.539899820  2.385615370 #> [166]  6.408512552 -0.585672716 -1.243101730  7.299838519  0.975173504 #> [171]  4.320059944 -4.355521566 -0.778941163  2.320029619  4.591606364 #> [176]  1.794935961  3.213033813 -1.320620632  3.283390555  3.408311801 #> [181]  2.528529997  0.216659653 -0.362232228  0.796268488  3.334793341 #> [186]  3.359729037  3.392465865  1.565422596  5.336320093 -0.466097505 #> [191]  1.968541610  3.428795440 -0.408071475  1.622276788 -4.710188753 #> [196] -1.358776379  1.004604940  2.729044949  2.522123248 -0.558105107  # Obtain the gain value for a given dose, a pseudo DLE and efficacy models # without DLE and efficacy samples. emptydata <- DataDual(doseGrid = seq(25, 300, 25), placebo = FALSE) data <- Data(doseGrid = seq(25, 300, 25), placebo = FALSE) mcmc_opts <- McmcOptions(burnin = 100, step = 2, samples = 200)  # DLE model and samples. model_dle <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = data )  # Efficacy model and samples. model_eff <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = emptydata )  # Gain value for dose level 75. gain(   dose = 75,   model_dle = model_dle,   model_eff = model_eff ) #> [1] 1.020657"},{"path":"https://openpharma.github.io/crmPack/reference/get-Samples-character-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get specific parameter samples and produce a data.frame — get,Samples,character-method","title":"Get specific parameter samples and produce a data.frame — get,Samples,character-method","text":"specify pos parameter like extract Samples object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/get-Samples-character-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get specific parameter samples and produce a data.frame — get,Samples,character-method","text":"","code":"# S4 method for class 'Samples,character' get(x, pos = -1L, envir = NULL, mode = NULL, inherits = NULL)"},{"path":"https://openpharma.github.io/crmPack/reference/get-Samples-character-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get specific parameter samples and produce a data.frame — get,Samples,character-method","text":"x Samples object pos name parameter envir vectorial parameters, can give indices elements like extract. NULL, whole vector samples returned mode used inherits used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/get-Samples-character-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get specific parameter samples and produce a data.frame — get,Samples,character-method","text":"data frame suitable use ggmcmc","code":""},{"path":"https://openpharma.github.io/crmPack/reference/get-Samples-character-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get specific parameter samples and produce a data.frame — get,Samples,character-method","text":"","code":"# nolint start  # Create some data data <- Data(x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y = c(0, 0, 0, 0, 0, 0, 1, 0),              cohort = c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid = c(0.1, 0.5, 1.5, 3, 6,                           seq(from = 10, to = 80, by=2))) #> Used default patient IDs!  # Initialize a model  model <- LogisticLogNormal(mean = c(-0.85, 1),                            cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),                            ref_dose = 56)  # Get posterior for all model parameters options <- McmcOptions(burnin = 100,                        step = 2,                        samples = 2000) set.seed(94) samples <- mcmc(data, model, options)  # now extract the alpha0 samples (intercept of the regression model) alpha0samples <- get(samples, \"alpha0\")  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/getEff.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting Efficacy Responses for Subjects Categorized by the DLT — getEff","title":"Extracting Efficacy Responses for Subjects Categorized by the DLT — getEff","text":"method extracts efficacy responses subjects categorizes respect DLT, .e. DLT DLT. efficacy responses reported together corresponding dose levels.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/getEff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting Efficacy Responses for Subjects Categorized by the DLT — getEff","text":"","code":"getEff(object, ...)  # S4 method for class 'DataDual' getEff(object, no_dlt = FALSE)"},{"path":"https://openpharma.github.io/crmPack/reference/getEff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting Efficacy Responses for Subjects Categorized by the DLT — getEff","text":"object (DataDual) object responses dose levels extracted. ... arguments passed class-specific methods. no_dlt (flag) DLT responses returned? Otherwise, responses returned.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/getEff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting Efficacy Responses for Subjects Categorized by the DLT — getEff","text":"list efficacy responses categorized DLT value.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/getEff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting Efficacy Responses for Subjects Categorized by the DLT — getEff","text":"","code":"# Example data. data <- DataDual(   x = c(25, 50, 25, 50, 75, 300, 250, 150),   y = c(0, 0, 0, 0, 0, 1, 1, 0),   w = c(0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.6, 0.52),   doseGrid = seq(25, 300, 25) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Get the efficacy response and their corresponding dose levels # categorized by the DLT. getEff(data) #> $x_no_dlt #> [1]  25  50  25  50  75 150 #>  #> $w_no_dlt #> [1] 0.31 0.42 0.59 0.45 0.60 0.52 #>  #> $x_dlt #> [1] 300 250 #>  #> $w_dlt #> [1] 0.7 0.6 #>"},{"path":"https://openpharma.github.io/crmPack/reference/get_result_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Obtain Simulation Results List — get_result_list","title":"Helper Function to Obtain Simulation Results List — get_result_list","text":"function fun can use variables visible . names variables given vector vars.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/get_result_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Obtain Simulation Results List — get_result_list","text":"","code":"get_result_list(fun, nsim, vars, parallel, n_cores)"},{"path":"https://openpharma.github.io/crmPack/reference/get_result_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Obtain Simulation Results List — get_result_list","text":"fun (function) simulation function single iteration, takes single parameter iteration index. nsim number simulations conducted. vars names variables. parallel simulation runs parallelized across clusters computer? n_cores many cores used parallel computing?","code":""},{"path":"https://openpharma.github.io/crmPack/reference/get_result_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to Obtain Simulation Results List — get_result_list","text":"list simulation results (one iteration corresponds one list element).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_all_equivalent.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison with Numerical Tolerance and Without Name Comparison — h_all_equivalent","title":"Comparison with Numerical Tolerance and Without Name Comparison — h_all_equivalent","text":"helper function ensures default tolerance level equal 1e-10, ignores names attributes. contrast .equal(), always returns logical type object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_all_equivalent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison with Numerical Tolerance and Without Name Comparison — h_all_equivalent","text":"","code":"h_all_equivalent(target, current, tolerance = 1e-10)"},{"path":"https://openpharma.github.io/crmPack/reference/h_all_equivalent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison with Numerical Tolerance and Without Name Comparison — h_all_equivalent","text":"target (numeric) target values. current (numeric) current values. tolerance (number) relative differences smaller reported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_all_equivalent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparison with Numerical Tolerance and Without Name Comparison — h_all_equivalent","text":"TRUE target current differ desired tolerance without looking names attributes, FALSE otherwise.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_barplot_percentages.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function to make barplots of percentages — h_barplot_percentages","title":"Convenience function to make barplots of percentages — h_barplot_percentages","text":"Convenience function make barplots percentages","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_barplot_percentages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function to make barplots of percentages — h_barplot_percentages","text":"","code":"h_barplot_percentages(x, description, xaxisround = 0)"},{"path":"https://openpharma.github.io/crmPack/reference/h_barplot_percentages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function to make barplots of percentages — h_barplot_percentages","text":"x vector samples description xlab string xaxisround rounding xaxis labels (default: 0, .e. integers used)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_barplot_percentages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience function to make barplots of percentages — h_barplot_percentages","text":"ggplot2 object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_blind_plot_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Blind Plot Data — h_blind_plot_data","title":"Helper Function to Blind Plot Data — h_blind_plot_data","text":"Helper Function Blind Plot Data","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_blind_plot_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Blind Plot Data — h_blind_plot_data","text":"","code":"h_blind_plot_data(df, blind, has_placebo, pbo_dose)"},{"path":"https://openpharma.github.io/crmPack/reference/h_blind_plot_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Blind Plot Data — h_blind_plot_data","text":"df (GeneralData) data blinded blind (flag) data blinded? has_placebo (flag) data contain placebo dose? pbo_dose (positive_number) dose taken placebo. Ignored has_placebo FALSE","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_blind_plot_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to Blind Plot Data — h_blind_plot_data","text":"blinded data","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_calc_report_label_percentage.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to calculate percentage of true stopping rules for report label output calculates true column means and converts output into percentages before combining the output with the report label; output is passed to show() and output with cat to console — h_calc_report_label_percentage","title":"Helper function to calculate percentage of true stopping rules for report label output calculates true column means and converts output into percentages before combining the output with the report label; output is passed to show() and output with cat to console — h_calc_report_label_percentage","text":"Helper function calculate percentage true stopping rules report label output calculates true column means converts output percentages combining output report label; output passed show() output cat console","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_calc_report_label_percentage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to calculate percentage of true stopping rules for report label output calculates true column means and converts output into percentages before combining the output with the report label; output is passed to show() and output with cat to console — h_calc_report_label_percentage","text":"","code":"h_calc_report_label_percentage(stop_report)"},{"path":"https://openpharma.github.io/crmPack/reference/h_calc_report_label_percentage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to calculate percentage of true stopping rules for report label output calculates true column means and converts output into percentages before combining the output with the report label; output is passed to show() and output with cat to console — h_calc_report_label_percentage","text":"stop_report object summary method","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_calc_report_label_percentage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to calculate percentage of true stopping rules for report label output calculates true column means and converts output into percentages before combining the output with the report label; output is passed to show() and output with cat to console — h_calc_report_label_percentage","text":"named list label percentage rule activation","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_check_fun_formals.html","id":null,"dir":"Reference","previous_headings":"","what":"Checking Formals of a Function — h_check_fun_formals","title":"Checking Formals of a Function — h_check_fun_formals","text":"helper function checks whether given function fun required allowed arguments. argument check based names arguments. logic verified .","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_check_fun_formals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checking Formals of a Function — h_check_fun_formals","text":"","code":"h_check_fun_formals(fun, mandatory = NULL, allowed = NULL)"},{"path":"https://openpharma.github.io/crmPack/reference/h_check_fun_formals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checking Formals of a Function — h_check_fun_formals","text":"fun (function) function name whose argument names checked. mandatory (character NULL) names arguments must present fun. mandatory specified NULL (default) requirement ignored. allowed (character NULL) names arguments allowed fun. Names belong allowed simply allowed. allowed parameter independent mandatory, sense mandatory specified character vector, repeated allowed. allowed specified NULL (default), means must arguments fun (except ones specified mandatory).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_convert_ordinal_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Ordinal Data to the Equivalent Binary Data for a Specific Grade — h_convert_ordinal_data","title":"Convert a Ordinal Data to the Equivalent Binary Data for a Specific Grade — h_convert_ordinal_data","text":"simple helper function takes DataOrdinal object integer grade converts equivalent Data object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_convert_ordinal_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Ordinal Data to the Equivalent Binary Data for a Specific Grade — h_convert_ordinal_data","text":"","code":"h_convert_ordinal_data(data_ord, grade)"},{"path":"https://openpharma.github.io/crmPack/reference/h_convert_ordinal_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Ordinal Data to the Equivalent Binary Data for a Specific Grade — h_convert_ordinal_data","text":"data_ord (DataOrdinal) DataOrdinal object covert grade (integer) toxicity grade equivalent data required.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_convert_ordinal_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Ordinal Data to the Equivalent Binary Data for a Specific Grade — h_convert_ordinal_data","text":"Data object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_convert_ordinal_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an ordinal CRM model to the Equivalent Binary CRM Model for a Specific Grade — h_convert_ordinal_model","title":"Convert an ordinal CRM model to the Equivalent Binary CRM Model for a Specific Grade — h_convert_ordinal_model","text":"simple helper function takes LogisticLogNormalOrdinal integer grade converts equivalent LogisticLogNormal model.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_convert_ordinal_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an ordinal CRM model to the Equivalent Binary CRM Model for a Specific Grade — h_convert_ordinal_model","text":"","code":"h_convert_ordinal_model(x, grade)"},{"path":"https://openpharma.github.io/crmPack/reference/h_convert_ordinal_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an ordinal CRM model to the Equivalent Binary CRM Model for a Specific Grade — h_convert_ordinal_model","text":"x (LogisticLogNormalOrdinal) LogisticLogNormalOrdinal model covert grade (integer) toxicity grade equivalent model required.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_convert_ordinal_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an ordinal CRM model to the Equivalent Binary CRM Model for a Specific Grade — h_convert_ordinal_model","text":"LogisticLogNormal model.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_convert_ordinal_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Samples Object from an ordinal Model to the Equivalent Samples Object from a Binary Model — h_convert_ordinal_samples","title":"Convert a Samples Object from an ordinal Model to the Equivalent Samples Object from a Binary Model — h_convert_ordinal_samples","text":"simple helper function converts Samples object fit ordinal CRM model obtained fitting binary CRM model toxicities specified grade observed data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_convert_ordinal_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Samples Object from an ordinal Model to the Equivalent Samples Object from a Binary Model — h_convert_ordinal_samples","text":"","code":"h_convert_ordinal_samples(obj, grade)"},{"path":"https://openpharma.github.io/crmPack/reference/h_convert_ordinal_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Samples Object from an ordinal Model to the Equivalent Samples Object from a Binary Model — h_convert_ordinal_samples","text":"obj (Samples) Samples object covert grade (integer) toxicity grade equivalent data required.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_convert_ordinal_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Samples Object from an ordinal Model to the Equivalent Samples Object from a Binary Model — h_convert_ordinal_samples","text":"Samples object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_covr_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers for stripping expressions of covr-inserted trace code — h_covr_helpers","title":"Helpers for stripping expressions of covr-inserted trace code — h_covr_helpers","text":"Workarounds allow package continue work running covr minimal changes package code.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_covr_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers for stripping expressions of covr-inserted trace code — h_covr_helpers","text":"","code":"h_covr_active()  h_covr_detrace(expr)  h_is_covr_trace(expr)  h_covr_detrace_call(expr)"},{"path":"https://openpharma.github.io/crmPack/reference/h_covr_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers for stripping expressions of covr-inserted trace code — h_covr_helpers","text":"expr (language) R expression call test strip covr trace counters.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_covr_helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helpers for stripping expressions of covr-inserted trace code — h_covr_helpers","text":"logical value transformed expression calls covr:::count removed.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_covr_helpers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helpers for stripping expressions of covr-inserted trace code — h_covr_helpers","text":"using covr, source code package objects modified add callbacks expression log execution. Given arbitrary expression, :   code modified executing package code look like:   functions used stripping expressions code package continues work intended running tests part running covr calculate package coverage. method non-exhaustive, covering subset covr's tracing behaviors necessary package.","code":"expr if (TRUE) {   covr:::count(\"file.R:1:2:3:4:5:6:7:8\")   expr }"},{"path":"https://openpharma.github.io/crmPack/reference/h_covr_helpers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helpers for stripping expressions of covr-inserted trace code — h_covr_helpers","text":"h_covr_active(): Determine whether covr currently running h_covr_detrace(): Remove covr traces expression h_is_covr_trace(): Determine whether current expression covr-modified expression h_covr_detrace_call(): Extract original expression covr-modified expression","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_default_if_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting the default value for an empty object — h_default_if_empty","title":"Getting the default value for an empty object — h_default_if_empty","text":"simple helper function sets default value empty missing object, object length() function returns 0L length 1 .na() returns TRUE.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_default_if_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting the default value for an empty object — h_default_if_empty","text":"","code":"h_default_if_empty(x, default)"},{"path":"https://openpharma.github.io/crmPack/reference/h_default_if_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting the default value for an empty object — h_default_if_empty","text":"x ()  object handle. can object length() function defined. default ()  default value x object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_default_if_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getting the default value for an empty object — h_default_if_empty","text":"","code":"h_default_if_empty(character(0), default = \"default label\") #> [1] \"default label\" h_default_if_empty(\"custom label\", default = \"default label\") #> [1] \"custom label\" h_default_if_empty(NA, default = \"default label\") #> [1] \"default label\""},{"path":"https://openpharma.github.io/crmPack/reference/h_determine_dlts.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to determine the dlts including first separate and placebo condition — h_determine_dlts","title":"Helper function to determine the dlts including first separate and placebo condition — h_determine_dlts","text":"Helper function determine dlts including first separate placebo condition","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_determine_dlts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to determine the dlts including first separate and placebo condition — h_determine_dlts","text":"","code":"h_determine_dlts(   data,   dose,   prob,   prob_placebo,   cohort_size,   cohort_size_placebo,   dose_grid,   first_separate )"},{"path":"https://openpharma.github.io/crmPack/reference/h_determine_dlts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to determine the dlts including first separate and placebo condition — h_determine_dlts","text":"data (Data) data start . dose (number) current dose. prob (function) defines true probability DLT dose. prob_placebo (function) defines true probability DLT placebo condition. cohort_size (number) cohort size use. cohort_size_placebo (number) cohort size use placebo condition. dose_grid (numeric) dose_grid specified user. first_separate (flag) whether first patient enrolled separately.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_determine_dlts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to determine the dlts including first separate and placebo condition — h_determine_dlts","text":"updated data object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_find_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Interval Numbers or Indices and Return Custom Number For 0. — h_find_interval","title":"Find Interval Numbers or Indices and Return Custom Number For 0. — h_find_interval","text":"simple wrapper findInterval() function invokes findInterval(), takes output replaces elements \\(0\\) value custom number specified replacement argument.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_find_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Interval Numbers or Indices and Return Custom Number For 0. — h_find_interval","text":"","code":"h_find_interval(..., replacement = -Inf)"},{"path":"https://openpharma.github.io/crmPack/reference/h_find_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Interval Numbers or Indices and Return Custom Number For 0. — h_find_interval","text":"... Arguments passed base::findInterval x numeric. vec numeric, sorted (weakly) increasingly, length N,     say. rightmost.closed logical; true, rightmost interval,     vec[N-1] .. vec[N] treated closed, see . .inside logical; true, returned indices coerced     1,...,N-1, .e., 0 mapped 1     N N-1. left.open logical; true intervals open left     closed right; formulas , \\(\\le\\)     swapped \\(<\\) (\\(>\\) \\(\\ge\\)),     rightmost.closed means ‘leftmost closed’.  may     useful, e.g., survival analysis computations. replacement (number) custom number used replacement \\(0\\). Default -Inf.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_find_interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Interval Numbers or Indices and Return Custom Number For 0. — h_find_interval","text":"","code":"h_find_interval(1, c(2, 4, 6)) #> [1] -Inf h_find_interval(3, c(2, 4, 6)) #> [1] 1 h_find_interval(1, c(2, 4, 6), replacement = -1) #> [1] -1"},{"path":"https://openpharma.github.io/crmPack/reference/h_format_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Formatting Using C-style Formats — h_format_number","title":"Conditional Formatting Using C-style Formats — h_format_number","text":"helper function conditionally formats number formatC() function using \"E\" format specific number digits given user. number formatted absolute value less 0.001 greater 10000. Otherwise, number formatted. Additionally, custom prefix suffix can appended character string formatted number, changes marked.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_format_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Formatting Using C-style Formats — h_format_number","text":"","code":"h_format_number(x, digits = 5, prefix = \"\", suffix = \"\")"},{"path":"https://openpharma.github.io/crmPack/reference/h_format_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Formatting Using C-style Formats — h_format_number","text":"x (number) number formatted. digits (function) desired number significant digits. prefix (string) prefix added front formatted number. suffix (string) suffix appended formatted number.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_format_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional Formatting Using C-style Formats — h_format_number","text":"Either formatted x string unchanged x formatting condition met.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_format_number.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Conditional Formatting Using C-style Formats — h_format_number","text":"function primarily designed helper h_jags_write_model() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_format_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Formatting Using C-style Formats — h_format_number","text":"","code":"h_format_number(50000) #> [1] \"5.00000E+04\" h_format_number(50000, prefix = \"P\", suffix = \"S\") #> [1] \"P5.00000E+04S\""},{"path":"https://openpharma.github.io/crmPack/reference/h_get_formatted_dosegrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a doseGrid for Printing — h_get_formatted_dosegrid","title":"Format a doseGrid for Printing — h_get_formatted_dosegrid","text":"Format doseGrid Printing","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_get_formatted_dosegrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a doseGrid for Printing — h_get_formatted_dosegrid","text":"","code":"h_get_formatted_dosegrid(grid, units = NA, fmt = NA, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/h_get_formatted_dosegrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a doseGrid for Printing — h_get_formatted_dosegrid","text":"grid (numeric) dose grid units (character) units values doseGrid fmt (character) format used display values doseGrid. NA, grid values pre-formatted ... used present measured.  Appended value doseGrid knit_printed.  default, NA, omits units.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_get_formatted_dosegrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a doseGrid for Printing — h_get_formatted_dosegrid","text":"character string containing formatted dose grid.  grid c(1, 2, 3) units \"mg\", returned value \"1 mg, 2 mg 3 mg\".","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_get_min_inf_beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for Minimal Informative Unimodal Beta Distribution — h_get_min_inf_beta","title":"Helper for Minimal Informative Unimodal Beta Distribution — h_get_min_inf_beta","text":"defined Neuenschwander et al (2008), function computes parameters minimal informative unimodal beta distribution, given request p-quantile q, .e. X ~ (, b) Pr(X <= q) = p.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_get_min_inf_beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for Minimal Informative Unimodal Beta Distribution — h_get_min_inf_beta","text":"","code":"h_get_min_inf_beta(p, q)"},{"path":"https://openpharma.github.io/crmPack/reference/h_get_min_inf_beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for Minimal Informative Unimodal Beta Distribution — h_get_min_inf_beta","text":"p (number) probability. q (number) quantile.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_get_min_inf_beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for Minimal Informative Unimodal Beta Distribution — h_get_min_inf_beta","text":"list two resulting beta parameters b.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_group_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Group Together Mono and Combo Data — h_group_data","title":"Group Together Mono and Combo Data — h_group_data","text":"used simulation method DesignGrouped combine separately generated data sets mono combo arms fit combined logistic regression model. Hence ID cohort information relevant arbitrarily assigned avoid problems DataGrouped validation.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_group_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group Together Mono and Combo Data — h_group_data","text":"","code":"h_group_data(mono_data, combo_data)"},{"path":"https://openpharma.github.io/crmPack/reference/h_group_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group Together Mono and Combo Data — h_group_data","text":"mono_data (Data) mono data. combo_data (Data) combo data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_group_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group Together Mono and Combo Data — h_group_data","text":"DataGrouped object containing mono_data combo_data, arbitrary ID cohort slots.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_in_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Check which elements are in a given range — h_in_range","title":"Check which elements are in a given range — h_in_range","text":"simple helper function tests whether elements given vector matrix within specified interval.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_in_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check which elements are in a given range — h_in_range","text":"","code":"h_in_range(x, range = c(0, 1), bounds_closed = TRUE)"},{"path":"https://openpharma.github.io/crmPack/reference/h_in_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check which elements are in a given range — h_in_range","text":"x (numeric) vector matrix elements test. range (numeric) interval, .e. sorted two-elements vector. bounds_closed (logical) bounds range treated closed? can scalar vector length two. scalar, value applies lower bound range[1] upper bound range[2]. vector two flags, first flag corresponds lower bound , second upper bound .","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_in_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check which elements are in a given range — h_in_range","text":"logical vector matrix length equal length x, every element x, indicates whether given element x range.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_in_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check which elements are in a given range — h_in_range","text":"","code":"x <- 1:4 h_in_range(x, range = c(1, 3)) #> [1]  TRUE  TRUE  TRUE FALSE h_in_range(x, range = c(1, 3), bounds_closed = FALSE) #> [1] FALSE  TRUE FALSE FALSE h_in_range(x, range = c(1, 3), bounds_closed = c(FALSE, TRUE)) #> [1] FALSE  TRUE  TRUE FALSE mat <- matrix(c(2, 5, 3, 10, 4, 9, 1, 8, 7), nrow = 3) h_in_range(mat, range = c(1, 5)) #>      [,1]  [,2]  [,3] #> [1,] TRUE FALSE  TRUE #> [2,] TRUE  TRUE FALSE #> [3,] TRUE FALSE FALSE"},{"path":"https://openpharma.github.io/crmPack/reference/h_info_theory_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculating the Information Theoretic Distance — h_info_theory_dist","title":"Calculating the Information Theoretic Distance — h_info_theory_dist","text":"Helper function provides value divergence given equation (7) reference https://doi.org/10.1002/sim.8450.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_info_theory_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculating the Information Theoretic Distance — h_info_theory_dist","text":"","code":"h_info_theory_dist(prob, target, asymmetry)"},{"path":"https://openpharma.github.io/crmPack/reference/h_info_theory_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculating the Information Theoretic Distance — h_info_theory_dist","text":"prob (numeric) vector matrix probabilities DLT occurring. target (number ) single target probability DLT. asymmetry (number) describes rate penalization overly toxic , range 0 2.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_info_theory_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculating the Information Theoretic Distance — h_info_theory_dist","text":"","code":"h_info_theory_dist(c(0.5, 0.2), 0.4, 1.2) #> [1] 0.040000 0.329877"},{"path":"https://openpharma.github.io/crmPack/reference/h_is_positive_definite.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing Matrix for Positive Definiteness — h_is_positive_definite","title":"Testing Matrix for Positive Definiteness — h_is_positive_definite","text":"helper function checks whether given numerical matrix x positive-definite square matrix given size, without missing values. function used test given matrix covariance matrix, since every symmetric positive semi-definite matrix covariance matrix.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_is_positive_definite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing Matrix for Positive Definiteness — h_is_positive_definite","text":"","code":"h_is_positive_definite(x, size = 2, tol = 1e-08)"},{"path":"https://openpharma.github.io/crmPack/reference/h_is_positive_definite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Testing Matrix for Positive Definiteness — h_is_positive_definite","text":"x (matrix) matrix checked. size (integer) size square matrix x checked . tol (number) given tolerance number used check whether eigenvalue positive . eigenvalue considered positive greater tol.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_is_positive_definite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Testing Matrix for Positive Definiteness — h_is_positive_definite","text":"TRUE given matrix positive-definite, FALSE otherwise.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_is_positive_definite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Testing Matrix for Positive Definiteness — h_is_positive_definite","text":"positive definiteness test implemented function based following characterization valid real matrices: symmetric matrix positive-definite eigenvalues positive. function eigenvalue considered positive greater tol.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_add_dummy.html","id":null,"dir":"Reference","previous_headings":"","what":"Appending a Dummy Number for Selected Slots in Data — h_jags_add_dummy","title":"Appending a Dummy Number for Selected Slots in Data — h_jags_add_dummy","text":"helper function appends dummy value given slots GeneralData class object, total number observations (indicated object@nObs) equals 1. Otherwise, object changed.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_add_dummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Appending a Dummy Number for Selected Slots in Data — h_jags_add_dummy","text":"","code":"h_jags_add_dummy(object, where, dummy = 0)"},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_add_dummy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Appending a Dummy Number for Selected Slots in Data — h_jags_add_dummy","text":"object (GeneralData) object dummy values added. (character) names slots object dummy number appended. dummy (number) dummy number appended selected slots object. Default 0.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_add_dummy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Appending a Dummy Number for Selected Slots in Data — h_jags_add_dummy","text":"GeneralData object slots updated dummy number.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_add_dummy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Appending a Dummy Number for Selected Slots in Data — h_jags_add_dummy","text":"main motivation behind function related JAGS. one observation, data passed correctly JAGS, .e. e.g. x y treated like scalars data file. Therefore necessary add dummy values vectors case change number observations (nObs), addition zeros affect results JAGS computations.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_add_dummy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Appending a Dummy Number for Selected Slots in Data — h_jags_add_dummy","text":"","code":"# Create some data of class 'Data' my_data <- Data(   x = 0.1,   y = 0,   doseGrid = c(0.1, 0.5) ) #> Used default patient IDs! #> Used best guess cohort indices!  my_data_2 <- Data(   x = c(0.1, 0.5),   y = c(0, 1),   doseGrid = c(0.1, 0.5) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Append dummy to `x` and `y`. h_jags_add_dummy(my_data, where = c(\"x\", \"y\")) #> An object of class \"Data\" #> Slot \"x\": #> [1] 0.1 0.0 #>  #> Slot \"y\": #> [1] 0 0 #>  #> Slot \"doseGrid\": #> [1] 0.1 0.5 #>  #> Slot \"nGrid\": #> [1] 2 #>  #> Slot \"xLevel\": #> [1] 1 #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #> [1] 1 #>  #> Slot \"cohort\": #> [1] 1 #>  #> Slot \"nObs\": #> [1] 1 #>   # Append dummy to `x` and `y`. No effect as `my_data_2@nObs != 1`. h_jags_add_dummy(my_data_2, where = c(\"x\", \"y\")) #> An object of class \"Data\" #> Slot \"x\": #> [1] 0.1 0.5 #>  #> Slot \"y\": #> [1] 0 1 #>  #> Slot \"doseGrid\": #> [1] 0.1 0.5 #>  #> Slot \"nGrid\": #> [1] 2 #>  #> Slot \"xLevel\": #> [1] 1 2 #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #> [1] 1 2 #>  #> Slot \"cohort\": #> [1] 1 2 #>  #> Slot \"nObs\": #> [1] 2 #>"},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_extract_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting Samples from JAGS mcarray Object — h_jags_extract_samples","title":"Extracting Samples from JAGS mcarray Object — h_jags_extract_samples","text":"simple helper function extracts sample rjags::mcarray.object S3 class object. rjags::mcarray.object object used rjags::jags.samples() function represent MCMC output JAGS model.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_extract_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting Samples from JAGS mcarray Object — h_jags_extract_samples","text":"","code":"h_jags_extract_samples(x)"},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_extract_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting Samples from JAGS mcarray Object — h_jags_extract_samples","text":"x rjags::mcarray.object object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting Data for JAGS — h_jags_get_data","title":"Getting Data for JAGS — h_jags_get_data","text":"simple helper function prepares object data argument rjags::jags.model(), invoked mcmc() method.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting Data for JAGS — h_jags_get_data","text":"","code":"h_jags_get_data(model, data, from_prior)"},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting Data for JAGS — h_jags_get_data","text":"model (GeneralModel) input model. data (GeneralData) input data. from_prior (flag) sample prior ? case data appended output, .e. variables required model@priormodel model returned data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getting Data for JAGS — h_jags_get_data","text":"","code":"# Create some data from the class `Data`. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Initialize the CRM model. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  jags_data <- h_jags_get_data(my_model, my_data, from_prior = FALSE) jags_data #> $nObs #> [1] 8 #>  #> $y #> [1] 0 0 0 0 0 0 1 0 #>  #> $x #> [1]  0.1  0.5  1.5  3.0  6.0 10.0 10.0 10.0 #>  #> $mean #> [1] -0.85  1.00 #>  #> $prec #>           [,1]      [,2] #> [1,] 1.3333333 0.6666667 #> [2,] 0.6666667 1.3333333 #>  #> $ref_dose #> [1] 56 #>"},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_get_model_inits.html","id":null,"dir":"Reference","previous_headings":"","what":"Setting Initial Values for JAGS Model Parameters — h_jags_get_model_inits","title":"Setting Initial Values for JAGS Model Parameters — h_jags_get_model_inits","text":"simple helper function prepares object inits argument rjags::jags.model(), invoked mcmc() method. inits argument specifies initial values model parameters.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_get_model_inits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setting Initial Values for JAGS Model Parameters — h_jags_get_model_inits","text":"","code":"h_jags_get_model_inits(model, data)"},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_get_model_inits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setting Initial Values for JAGS Model Parameters — h_jags_get_model_inits","text":"model (GeneralModel) input model. data (GeneralData) input data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_get_model_inits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setting Initial Values for JAGS Model Parameters — h_jags_get_model_inits","text":"list starting values parameters required initialized MCMC JAGS sampler.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_get_model_inits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setting Initial Values for JAGS Model Parameters — h_jags_get_model_inits","text":"","code":"# Create some data from the class `Data`. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Initialize the CRM model. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  h_jags_get_model_inits(model = my_model, data = my_data) #> $theta #> [1] 0 1 #>"},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_join_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Joining JAGS Models — h_jags_join_models","title":"Joining JAGS Models — h_jags_join_models","text":"helper function joins two JAGS models way body second model appended body first model (order). , first, body-extended model returned. arguments model1, model2 model functions () combined way.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_join_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joining JAGS Models — h_jags_join_models","text":"","code":"h_jags_join_models(model1, model2)"},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_join_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joining JAGS Models — h_jags_join_models","text":"model1 (function) first model join. model2 (function) second model join.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_join_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joining JAGS Models — h_jags_join_models","text":"joined models.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_join_models.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Joining JAGS Models — h_jags_join_models","text":"model1 model2 functions must multi-expression body, .e. braced expression(s). Environments attributes function bodies preserved way joining.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_write_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Writing JAGS Model to a File — h_jags_write_model","title":"Writing JAGS Model to a File — h_jags_write_model","text":"function converts R function JAGS model text writes given file. \"model text\" conversion, format numbers absolute value less 0.001 greater 10000 changed. numbers converted scientific format specified number significant digits using formatC() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_write_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writing JAGS Model to a File — h_jags_write_model","text":"","code":"h_jags_write_model(model, file = NULL, digits = 5)"},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_write_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writing JAGS Model to a File — h_jags_write_model","text":"model (function) function containing JAGS model. file (string NULL) name file (including optional path) model saved. NULL, file created R_crmPack folder placed temporary directory indicated tempdir() function. digits (count) desired number significant digits numbers used JAGS input, see formatC().","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_write_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writing JAGS Model to a File — h_jags_write_model","text":"name file model saved.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_write_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Writing JAGS Model to a File — h_jags_write_model","text":"JAGS syntax allows truncation specification like dnorm(...) (...), illegal R. overcome incompatibility, use dummy operator \\%_\\% (...), .e. dnorm(...) \\%_\\% (...) model's code. dummy operator \\%_\\% removed just saving JAGS code file. Due technical issues related conversion numbers scientific format, required body model function contain TEMP_NUM_PREF_ _TEMP_NUM_SUF character constants body.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_jags_write_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Writing JAGS Model to a File — h_jags_write_model","text":"","code":"# Some model function my_model <- function() {   alpha0 <- mean(1:10)   alpha1 <- 600000 }  h_jags_write_model(my_model, digits = 5) #> [1] \"/tmp/Rtmp7HcHVc/R_crmPack/jags_model_fun2d115f17ec5.txt\""},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Update certain components of DualEndpoint model with regard to parameters of the function that models dose-biomarker relationship defined in the DualEndpointBeta class. — h_model_dual_endpoint_beta","title":"Update certain components of DualEndpoint model with regard to parameters of the function that models dose-biomarker relationship defined in the DualEndpointBeta class. — h_model_dual_endpoint_beta","text":"simple helper function takes DualEndpoint object updates use_fixed, priormodel, modelspecs, init, sample slots regard given parameter dose-biomarker relationship \\(f(x)\\) defined DualEndpointBeta class. update solely depends whether given parameter's value param fixed-valued scalar two-elements numeric vector. later case, assumed param represents two parameters probability distribution used priormodel function generate values param_name parameter \\(f(x)\\). See help page DualEndpointBeta class details.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update certain components of DualEndpoint model with regard to parameters of the function that models dose-biomarker relationship defined in the DualEndpointBeta class. — h_model_dual_endpoint_beta","text":"","code":"h_model_dual_endpoint_beta(   param,   param_name,   param_suffix = c(\"_low\", \"_high\"),   priormodel = NULL,   de )"},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update certain components of DualEndpoint model with regard to parameters of the function that models dose-biomarker relationship defined in the DualEndpointBeta class. — h_model_dual_endpoint_beta","text":"param (numeric) value given param_name parameter dose-biomarker relationship function \\(f(x)\\). Either fixed-valued scalar vector two elements parameters probability distribution used priormodel function generate values param_name parameter \\(f(x)\\). param_name (string) name parameter \\(f(x)\\), whose value depends param. param_suffix (character) two suffixes appended elements param_name used updating modelspecs. value argument ignored param scalar. priormodel (function NULL) function representing JAGS prior specification appended existing de@priormodel specification param scalar. Otherwise, de@priormodel remains unchanged. de (DualEnpoint) dual endpoint model whose slots updated.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update certain components of DualEndpoint model with regard to parameters of the function that models dose-biomarker relationship defined in the DualEndpointBeta class. — h_model_dual_endpoint_beta","text":"DualEndpoint model updated use_fixed, priormodel, modelspecs, init, sample slots.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_rho.html","id":null,"dir":"Reference","previous_headings":"","what":"Update DualEndpoint class model components with regard to DLT and biomarker correlation. — h_model_dual_endpoint_rho","title":"Update DualEndpoint class model components with regard to DLT and biomarker correlation. — h_model_dual_endpoint_rho","text":"simple helper function takes DualEndpoint model existing components (priormodel, modelspecs, init, sample), updates regard DLT biomarker correlation rho.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_rho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update DualEndpoint class model components with regard to DLT and biomarker correlation. — h_model_dual_endpoint_rho","text":"","code":"h_model_dual_endpoint_rho(use_fixed, rho, comp)"},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_rho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update DualEndpoint class model components with regard to DLT and biomarker correlation. — h_model_dual_endpoint_rho","text":"use_fixed (flag) indicates whether fixed value DLT biomarker correlation rho used . rho supposed fixed value, prior distribution scaled Beta family used. See details , rho argument. rho (numeric) DLT biomarker correlation. must either fixed value (-1 1), named vector two elements, named b Beta prior transformation kappa = (rho + 1) / 2, (0, 1). example, = 1, b = 1 leads uniform prior rho. comp (list) named list model components updated. names : priormodel, modelspecs, init, sample. definitions components, see GeneralModel class. modelspecs init components comp list specified body corresponding GeneralModel@modelspecs GeneralModel@init functions. bodies simply lists .","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_rho.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update DualEndpoint class model components with regard to DLT and biomarker correlation. — h_model_dual_endpoint_rho","text":"list updated model components.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_sigma2W.html","id":null,"dir":"Reference","previous_headings":"","what":"Update DualEndpoint class model components with regard to biomarker regression variance. — h_model_dual_endpoint_sigma2W","title":"Update DualEndpoint class model components with regard to biomarker regression variance. — h_model_dual_endpoint_sigma2W","text":"simple helper function takes DualEndpoint model existing components (priormodel, modelspecs, init, sample), updates regard biomarker regression variance sigma2W.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_sigma2W.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update DualEndpoint class model components with regard to biomarker regression variance. — h_model_dual_endpoint_sigma2W","text":"","code":"h_model_dual_endpoint_sigma2W(use_fixed, sigma2W, comp)"},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_sigma2W.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update DualEndpoint class model components with regard to biomarker regression variance. — h_model_dual_endpoint_sigma2W","text":"use_fixed (flag) indicates whether fixed value biomarker regression variance sigma2W used . sigma2W supposed fixed value, prior distribution Inverse-Gamma distribution used. See details , sigma2W argument. sigma2W (numeric) biomarker variance. Either fixed value Inverse-Gamma distribution parameters, .e. vector two elements named b. comp (list) named list model components updated. names : priormodel, modelspecs, init, sample. definitions components, see GeneralModel class. modelspecs init components comp list specified body corresponding GeneralModel@modelspecs GeneralModel@init functions. bodies simply lists .","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_sigma2W.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update DualEndpoint class model components with regard to biomarker regression variance. — h_model_dual_endpoint_sigma2W","text":"list updated model components.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_sigma2betaW.html","id":null,"dir":"Reference","previous_headings":"","what":"Update certain components of DualEndpoint model with regard to prior variance factor of the random walk. — h_model_dual_endpoint_sigma2betaW","title":"Update certain components of DualEndpoint model with regard to prior variance factor of the random walk. — h_model_dual_endpoint_sigma2betaW","text":"simple helper function takes DualEndpoint object updates priormodel, modelspecs, init, sample slots according random walk variance.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_sigma2betaW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update certain components of DualEndpoint model with regard to prior variance factor of the random walk. — h_model_dual_endpoint_sigma2betaW","text":"","code":"h_model_dual_endpoint_sigma2betaW(use_fixed, sigma2betaW, de)"},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_sigma2betaW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update certain components of DualEndpoint model with regard to prior variance factor of the random walk. — h_model_dual_endpoint_sigma2betaW","text":"use_fixed (flag) indicates whether fixed value sigma2betaW used . sigma2betaW supposed fixed value, prior distribution Inverse-Gamma distribution used. See details , sigma2betaW argument. sigma2betaW (numeric) prior variance factor random walk prior biomarker model. Either fixed value Inverse-Gamma distribution parameters, .e. vector two elements named b. de (DualEnpoint) dual endpoint model whose slots updated.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_model_dual_endpoint_sigma2betaW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update certain components of DualEndpoint model with regard to prior variance factor of the random walk. — h_model_dual_endpoint_sigma2betaW","text":"DualEndpoint model updated priormodel, modelspecs, init, sample slots.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_eligible_doses.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Eligible Doses from the Dose Grid. — h_next_best_eligible_doses","title":"Get Eligible Doses from the Dose Grid. — h_next_best_eligible_doses","text":"Helper function gets eligible doses dose grid. eligible doses doses exceed given doselimit. placebo design, safety allows (.e. least one non-placebo dose exceed dose limit), placebo dose excluded eligible doses.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_eligible_doses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Eligible Doses from the Dose Grid. — h_next_best_eligible_doses","text":"","code":"h_next_best_eligible_doses(dose_grid, doselimit, placebo, levels = FALSE)"},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_eligible_doses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Eligible Doses from the Dose Grid. — h_next_best_eligible_doses","text":"dose_grid (numeric) possible doses. doselimit (number) maximum allowed next dose. placebo (flag) TRUE first dose level dose_grid considered placebo. levels (flag) TRUE levels eligible doses returned, otherwise, doses (default).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_eligible_doses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Eligible Doses from the Dose Grid. — h_next_best_eligible_doses","text":"numeric vector eligible doses eligible dose levels levels flag TRUE.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_eligible_doses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Eligible Doses from the Dose Grid. — h_next_best_eligible_doses","text":"","code":"dose_grid <- c(0.001, seq(25, 200, 25)) h_next_best_eligible_doses(dose_grid, 79, TRUE) #> [1] 25 50 75 h_next_best_eligible_doses(dose_grid, 24, TRUE) #> [1] 0.001"},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_mg_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Credibility Intervals for Max Gain and Target Doses at nextBest-NextBestMaxGain Method. — h_next_best_mg_ci","title":"Credibility Intervals for Max Gain and Target Doses at nextBest-NextBestMaxGain Method. — h_next_best_mg_ci","text":"Helper function nextBest-NextBestMaxGain() method. computes 95% credibility intervals given target dose max gain dose. also returns ratio upper lower bounds interval.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_mg_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Credibility Intervals for Max Gain and Target Doses at nextBest-NextBestMaxGain Method. — h_next_best_mg_ci","text":"","code":"h_next_best_mg_ci(dose_target, dose_mg, prob_target, placebo, model, model_eff)"},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_mg_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Credibility Intervals for Max Gain and Target Doses at nextBest-NextBestMaxGain Method. — h_next_best_mg_ci","text":"dose_target (number) target dose estimate. dose_mg (number) dose corresponding maximum gain. prob_target (proportion) target DLT probability. placebo (flag) TRUE first dose level dose grid used considered placebo. needed adjust max gain dose using efficacy constant value. placebo used, model_eff@const added dose_mg. model (ModelTox) DLT model. model_eff (Effloglog) efficacy model.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_mg_ci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Credibility Intervals for Max Gain and Target Doses at nextBest-NextBestMaxGain Method. — h_next_best_mg_ci","text":"Yeung, W.Y., Whitehead, J., Reigner, B., Beyer, U., Diack, Ch., Jaki, T. (2015), Bayesian adaptive dose-escalation procedures binary continuous responses utilizing gain function, Pharmaceutical Statistics, doi:10.1002/pst.1706","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_mg_doses_at_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Closest Grid Doses for a Given Target Doses for nextBest-NextBestMaxGain Method. — h_next_best_mg_doses_at_grid","title":"Get Closest Grid Doses for a Given Target Doses for nextBest-NextBestMaxGain Method. — h_next_best_mg_doses_at_grid","text":"Helper function given target doses finds dose grid closest target. four different targets context nextBest-NextBestMaxGain() method: \\(min(`dose_mg`, `dose_target_drt`)\\), dose_mg, dose_target_drt dose_target_eot.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_mg_doses_at_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Closest Grid Doses for a Given Target Doses for nextBest-NextBestMaxGain Method. — h_next_best_mg_doses_at_grid","text":"","code":"h_next_best_mg_doses_at_grid(   dose_target_drt,   dose_target_eot,   dose_mg,   dose_grid,   doselimit,   placebo )"},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_mg_doses_at_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Closest Grid Doses for a Given Target Doses for nextBest-NextBestMaxGain Method. — h_next_best_mg_doses_at_grid","text":"dose_target_drt (number) target dose estimate trial. dose_target_eot (number) target dose estimate end trial. dose_mg (number) dose corresponding maximum gain. dose_grid (numeric) possible doses. doselimit (number) maximum allowed next dose. placebo (flag) TRUE first dose level dose_grid considered placebo.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_mg_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Building the Plot for nextBest-NextBestMaxGain Method. — h_next_best_mg_plot","title":"Building the Plot for nextBest-NextBestMaxGain Method. — h_next_best_mg_plot","text":"Helper function creates plot nextBest-NextBestMaxGain() method.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_mg_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Building the Plot for nextBest-NextBestMaxGain Method. — h_next_best_mg_plot","text":"","code":"h_next_best_mg_plot(   prob_target_drt,   dose_target_drt,   prob_target_eot,   dose_target_eot,   dose_mg,   max_gain,   next_dose,   doselimit,   data,   model,   model_eff )"},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_mg_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Building the Plot for nextBest-NextBestMaxGain Method. — h_next_best_mg_plot","text":"prob_target_drt (proportion) target DLT probability trial. dose_target_drt (number) target dose estimate trial. prob_target_eot (proportion) target DLT probability end trial. dose_target_eot (number) target dose estimate end trial. dose_mg (number) dose corresponding maximum gain. max_gain (number) maximum gain estimate. next_dose (number) next best dose. doselimit (number) maximum allowed next dose. data (DataDual) data object dose grid fetched. model (ModelTox) DLT model. model_eff (Effloglog) efficacy model.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_mgsamples_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Building the Plot for nextBest-NextBestMaxGainSamples Method. — h_next_best_mgsamples_plot","title":"Building the Plot for nextBest-NextBestMaxGainSamples Method. — h_next_best_mgsamples_plot","text":"Helper function creates plot nextBest-NextBestMaxGainSamples() method.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_mgsamples_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Building the Plot for nextBest-NextBestMaxGainSamples Method. — h_next_best_mgsamples_plot","text":"","code":"h_next_best_mgsamples_plot(   prob_target_drt,   dose_target_drt,   prob_target_eot,   dose_target_eot,   dose_mg,   dose_mg_samples,   next_dose,   doselimit,   dose_grid_range )"},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_mgsamples_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Building the Plot for nextBest-NextBestMaxGainSamples Method. — h_next_best_mgsamples_plot","text":"prob_target_drt (proportion) target DLT probability trial. dose_target_drt (number) target dose estimate trial. prob_target_eot (proportion) target DLT probability end trial. dose_target_eot (number) target dose estimate end trial. dose_mg (number) dose corresponding maximum gain. dose_mg_samples (numeric) every sample, dose (dose grid) gives maximum gain value. next_dose (number) next best dose. doselimit (number) maximum allowed next dose. dose_grid_range (numeric) dose grid range.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_ncrm_loss_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Building the Plot for nextBest-NextBestNCRMLoss Method. — h_next_best_ncrm_loss_plot","title":"Building the Plot for nextBest-NextBestNCRMLoss Method. — h_next_best_ncrm_loss_plot","text":"Helper function creates plot nextBest-NextBestNCRMLoss() method.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_ncrm_loss_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Building the Plot for nextBest-NextBestNCRMLoss Method. — h_next_best_ncrm_loss_plot","text":"","code":"h_next_best_ncrm_loss_plot(   prob_mat,   posterior_loss,   max_overdose_prob,   dose_grid,   max_eligible_dose_level,   doselimit,   next_dose,   is_unacceptable_specified )"},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_ncrm_loss_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Building the Plot for nextBest-NextBestNCRMLoss Method. — h_next_best_ncrm_loss_plot","text":"prob_mat (numeric) matrix probabilities grid doses given interval. is_unacceptable_specified TRUE, must 4 intervals (columns) prob_mat: underdosing, target, excessive, unacceptable. Otherwise, must 3 intervals (columns): underdosing, target, overdose. Number rows must equal number doses grid. posterior_loss (numeric) posterior losses. max_overdose_prob (number) maximum overdose posterior probability allowed. dose_grid (numeric) dose grid. max_eligible_dose_level (number) maximum eligible dose level dose_grid. doselimit (number) maximum allowed next dose. next_dose (number) next best dose. is_unacceptable_specified (flag) unacceptable interval specified?","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_td_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Building the Plot for nextBest-NextBestTD Method. — h_next_best_td_plot","title":"Building the Plot for nextBest-NextBestTD Method. — h_next_best_td_plot","text":"Helper function creates plot nextBest-NextBestTD() method.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_td_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Building the Plot for nextBest-NextBestTD Method. — h_next_best_td_plot","text":"","code":"h_next_best_td_plot(   prob_target_drt,   dose_target_drt,   prob_target_eot,   dose_target_eot,   data,   prob_dlt,   doselimit,   next_dose )"},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_td_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Building the Plot for nextBest-NextBestTD Method. — h_next_best_td_plot","text":"prob_target_drt (proportion) target DLT probability trial. dose_target_drt (number) target dose estimate trial. prob_target_eot (proportion) target DLT probability end trial. dose_target_eot (number) target dose estimate end trial. data (Data) data object dose grid fetched. prob_dlt (numeric) DLT probabilities doses grid. doselimit (number) maximum allowed next dose. next_dose (number) next best dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_tdsamples_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Building the Plot for nextBest-NextBestTDsamples Method. — h_next_best_tdsamples_plot","title":"Building the Plot for nextBest-NextBestTDsamples Method. — h_next_best_tdsamples_plot","text":"Helper function creates plot nextBest-NextBestTDsamples() method.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_tdsamples_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Building the Plot for nextBest-NextBestTDsamples Method. — h_next_best_tdsamples_plot","text":"","code":"h_next_best_tdsamples_plot(   dose_target_drt_samples,   dose_target_eot_samples,   dose_target_drt,   dose_target_eot,   dose_grid_range,   nextBest,   doselimit,   next_dose )"},{"path":"https://openpharma.github.io/crmPack/reference/h_next_best_tdsamples_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Building the Plot for nextBest-NextBestTDsamples Method. — h_next_best_tdsamples_plot","text":"dose_target_drt_samples (numeric) vector -trial samples. dose_target_eot_samples (numeric) vector end--trial samples. dose_target_drt (number) target -trial estimate. dose_target_eot (number) target end--trial estimate. dose_grid_range (numeric) range dose grid. nextBest (NextBestTDsamples) rule next best dose. doselimit (number) maximum allowed next dose. next_dose (number) next best dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_null_if_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting NULL for NA — h_null_if_na","title":"Getting NULL for NA — h_null_if_na","text":"simple helper function replaces NA object NULL object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_null_if_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting NULL for NA — h_null_if_na","text":"","code":"h_null_if_na(x)"},{"path":"https://openpharma.github.io/crmPack/reference/h_null_if_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting NULL for NA — h_null_if_na","text":"x () atomic object length 1. definition \"atomic\", see .atomic().","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_null_if_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getting NULL for NA — h_null_if_na","text":"NULL x NA, otherwise, x.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_null_if_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getting NULL for NA — h_null_if_na","text":"","code":"h_null_if_na(NA) #> NULL"},{"path":"https://openpharma.github.io/crmPack/reference/h_obtain_dose_grid_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function Containing Common Functionality — h_obtain_dose_grid_range","title":"Helper Function Containing Common Functionality — h_obtain_dose_grid_range","text":"Used dose_grid_range-Data dose_grid_range-DataOrdinal","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_obtain_dose_grid_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function Containing Common Functionality — h_obtain_dose_grid_range","text":"","code":"h_obtain_dose_grid_range(object, ignore_placebo)"},{"path":"https://openpharma.github.io/crmPack/reference/h_obtain_dose_grid_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function Containing Common Functionality — h_obtain_dose_grid_range","text":"object (Data DataOrdinal) object dose grid range required ignore_placebo (flag) placebo dose () counted?","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_plot_data_cohort_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Preparing Cohort Lines for Data Plot — h_plot_data_cohort_lines","title":"Preparing Cohort Lines for Data Plot — h_plot_data_cohort_lines","text":"helper function prepares ggplot geom reference lines separating different cohorts plot Data class object. Lines either vertical horizontal green color longdash type.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_plot_data_cohort_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preparing Cohort Lines for Data Plot — h_plot_data_cohort_lines","text":"","code":"h_plot_data_cohort_lines(cohort, placebo, vertical = TRUE)"},{"path":"https://openpharma.github.io/crmPack/reference/h_plot_data_cohort_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preparing Cohort Lines for Data Plot — h_plot_data_cohort_lines","text":"cohort (integer) cohort indices. placebo (flag) placebo included doses? , function returns NULL object case doses given cohort equal need separate . vertical (flag) line vertical? Otherwise horizontal.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_plot_data_cohort_lines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preparing Cohort Lines for Data Plot — h_plot_data_cohort_lines","text":"geom object returned placebo equal TRUE one unique values cohort. Otherwise, function returns NULL object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_plot_data_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Preparing Data for Plotting — h_plot_data_df","title":"Preparing Data for Plotting — h_plot_data_df","text":"helper function prepares data.frame object based Data class object. resulting data frame used plot function Data class objects.  method transforms GeneralData  objects tibble suitable plotting ggplot2 methods","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_plot_data_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preparing Data for Plotting — h_plot_data_df","text":"","code":"h_plot_data_df(data, ...)  h_plot_data_df(data, ...)  # S4 method for class 'Data' h_plot_data_df(data, blind = FALSE, legend = TRUE, ...)  # S4 method for class 'DataOrdinal' h_plot_data_df(data, blind = FALSE, legend = TRUE, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/h_plot_data_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preparing Data for Plotting — h_plot_data_df","text":"data (Data) object data extracted converted data frame. ... arguments passed data.frame constructor. can e.g. extra column_name = value pair based slot x (case might subclass Data) appear Data. blind (flag) data blinded? TRUE, cohort, DLTs assigned first subjects cohort. addition, placebo () set active dose level cohort. legend (flag) Display legend toxicity categories","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_plot_data_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preparing Data for Plotting — h_plot_data_df","text":"data.frame object values plot. data.frame containing columns patient, cohort, dose toxicity grade data.frame object columns patient, ID, cohort, dose toxicity.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_plot_data_df.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Preparing Data for Plotting — h_plot_data_df","text":"h_plot_data_df(Data): method Data. h_plot_data_df(DataOrdinal): Class specific method DataOrdinal","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_prepare_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Check That Labels Are Valid and Useful — h_prepare_labels","title":"Check That Labels Are Valid and Useful — h_prepare_labels","text":"vector labels valid useful length 2, type character values distinct.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_prepare_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check That Labels Are Valid and Useful — h_prepare_labels","text":"","code":"h_prepare_labels(x)"},{"path":"https://openpharma.github.io/crmPack/reference/h_prepare_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check That Labels Are Valid and Useful — h_prepare_labels","text":"x (character) vector checked","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_prepare_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check That Labels Are Valid and Useful — h_prepare_labels","text":"character vector length 2 whose values distinct","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_prepare_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check That Labels Are Valid and Useful — h_prepare_labels","text":"x scalar, second element added, whose value value scalar \"s\" appended.  x \"toxicity\", plural handled appropriately.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_prepare_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Append Units to a Numeric Dose — h_prepare_units","title":"Append Units to a Numeric Dose — h_prepare_units","text":"Append Units Numeric Dose","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_prepare_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append Units to a Numeric Dose — h_prepare_units","text":"","code":"h_prepare_units(units = NA)"},{"path":"https://openpharma.github.io/crmPack/reference/h_prepare_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append Units to a Numeric Dose — h_prepare_units","text":"units (character) units displayed","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_prepare_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append Units to a Numeric Dose — h_prepare_units","text":"units NA, NA.  Otherwise, units, ensuring exactly one space precedes first non-whitespace character","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_rapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively Apply a Function to a List — h_rapply","title":"Recursively Apply a Function to a List — h_rapply","text":"helper function recursively iterates \"list-like\" object checks whether element given class. , replaces element result execution given function. Otherwise, element length greater 1 (.e. scalar), replaces element result h_rapply(), recursively called element. remaining case, , element given class scalar, element remains unchanged.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_rapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively Apply a Function to a List — h_rapply","text":"","code":"h_rapply(x, fun, classes, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/h_rapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively Apply a Function to a List — h_rapply","text":"x () \"list-like\" object subsetting operator [[ defined. fun (function) function one \"principal\" argument, passing arguments via .... classes (character) class names. ... arguments passed function fun.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_rapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursively Apply a Function to a List — h_rapply","text":"\"list-like\" object similar structure x.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_rapply.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Recursively Apply a Function to a List — h_rapply","text":"helper function conceptually similar rapply() function. However, differs rapply() two major ways. First, h_rapply() limited objects type list expression . can \"list-like\" object type subsetting operator [[ defined. can , example, object type language, often obtained body() function. second difference flexibility rapply() result structured available h_rapply() user. , h_rapply() element x, class included classes, replaced result applying fun element. behavior corresponds rapply() invoked fixed = replace. function primarily designed helper h_jags_write_model() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_rapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recursively Apply a Function to a List — h_rapply","text":"","code":"# Some model function. my_model <- function() {   alpha0 <- mean(1:10)   alpha1 <- 600000 }  # Replace format of numbers using `formatC` function. h_rapply(   x = body(my_model),   fun = formatC,   classes = c(\"integer\", \"numeric\"),   digits = 3,   format = \"E\" ) #> { #>     alpha0 <- mean(\"1.000E+00\":\"1.000E+01\") #>     alpha1 <- \"6.000E+05\" #> }"},{"path":"https://openpharma.github.io/crmPack/reference/h_simulations_output_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to create return list for Simulations output — h_simulations_output_format","title":"Helper Function to create return list for Simulations output — h_simulations_output_format","text":"Helper Function create return list Simulations output","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_simulations_output_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to create return list for Simulations output — h_simulations_output_format","text":"","code":"h_simulations_output_format(resultList)"},{"path":"https://openpharma.github.io/crmPack/reference/h_simulations_output_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to create return list for Simulations output — h_simulations_output_format","text":"resultList (list) raw iteration output.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_simulations_output_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to create return list for Simulations output — h_simulations_output_format","text":"aggregated output simulation object list.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_slots.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting the Slots from a S4 Object — h_slots","title":"Getting the Slots from a S4 Object — h_slots","text":"helper function extracts requested slots S4 class object. simple wrapper methods::slot() function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_slots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting the Slots from a S4 Object — h_slots","text":"","code":"h_slots(object, names, simplify = FALSE)"},{"path":"https://openpharma.github.io/crmPack/reference/h_slots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting the Slots from a S4 Object — h_slots","text":"object (S4) object formally defined S4 class. names (character) vector names slots fetched. function assumes every element names, exists slot name object. simplify (flag) output simplified? effect single slot extracted, .e. names just single string.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_slots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getting the Slots from a S4 Object — h_slots","text":"list slots extracted object according names, single slot simplification required possible.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_summarize_add_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to calculate average across iterations for each additional reporting parameter extracts parameter names as specified by user and averaged the values for each specified parameter to show() and output with cat to console — h_summarize_add_stats","title":"Helper function to calculate average across iterations for each additional reporting parameter extracts parameter names as specified by user and averaged the values for each specified parameter to show() and output with cat to console — h_summarize_add_stats","text":"Helper function calculate average across iterations additional reporting parameter extracts parameter names specified user averaged values specified parameter show() output cat console","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_summarize_add_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to calculate average across iterations for each additional reporting parameter extracts parameter names as specified by user and averaged the values for each specified parameter to show() and output with cat to console — h_summarize_add_stats","text":"","code":"h_summarize_add_stats(stats_list)"},{"path":"https://openpharma.github.io/crmPack/reference/h_summarize_add_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to calculate average across iterations for each additional reporting parameter extracts parameter names as specified by user and averaged the values for each specified parameter to show() and output with cat to console — h_summarize_add_stats","text":"stats_list object simulation nested parameter values (sublist parameter)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_summarize_add_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to calculate average across iterations for each additional reporting parameter extracts parameter names as specified by user and averaged the values for each specified parameter to show() and output with cat to console — h_summarize_add_stats","text":"list parameter names averaged values console output","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_test_named_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that an argument is a named vector of type numeric — h_test_named_numeric","title":"Check that an argument is a named vector of type numeric — h_test_named_numeric","text":"simple helper function tests whether object named numerical vector.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_test_named_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that an argument is a named vector of type numeric — h_test_named_numeric","text":"","code":"h_test_named_numeric(   x,   subset.of = NULL,   must.include = NULL,   permutation.of = NULL,   identical.to = NULL,   disjunct.from = NULL,   lower = 0 + .Machine$double.xmin,   finite = TRUE,   any.missing = FALSE,   len = 2,   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/h_test_named_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that an argument is a named vector of type numeric — h_test_named_numeric","text":"x () object check. subset.[character] Names provided x must subset set subset.. must.include [character] Names provided x must superset set must.include. permutation.[character] Names provided x must permutation set permutation.. Duplicated names permutation.stripped duplicated names x thus lead failed check. Use argument instead identical.order names relevant. identical.[character] Names provided x must identical vector identical.. Use argument instead permutation.order names relevant. disjunct.[character] Names provided x must may present vector disjunct.. lower [numeric(1)] Lower value elements x must greater equal . finite [logical(1)] Check finite values? Default FALSE. .missing [logical(1)] vectors missing values allowed? Default TRUE. len [integer(1)] Exact expected length x. ... parameters passed checkmate::test_numeric().","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_test_named_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that an argument is a named vector of type numeric — h_test_named_numeric","text":"TRUE x named vector type numeric, otherwise FALSE.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_test_named_numeric.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check that an argument is a named vector of type numeric — h_test_named_numeric","text":"function based checkmate::test_numeric() checkmate::test_names() functions.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_test_named_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that an argument is a named vector of type numeric — h_test_named_numeric","text":"","code":"h_test_named_numeric(1:2, permutation.of = c(\"a\", \"b\")) #> [1] FALSE h_test_named_numeric(c(a = 1, b = 2), permutation.of = c(\"a\", \"b\")) #> [1] TRUE h_test_named_numeric(c(a = 1, b = 2), permutation.of = c(\"b\", \"a\")) #> [1] TRUE"},{"path":"https://openpharma.github.io/crmPack/reference/h_this_truth.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to call truth calculation — h_this_truth","title":"Helper Function to call truth calculation — h_this_truth","text":"Helper Function call truth calculation","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_this_truth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to call truth calculation — h_this_truth","text":"","code":"h_this_truth(dose, this_args, truth)"},{"path":"https://openpharma.github.io/crmPack/reference/h_this_truth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to call truth calculation — h_this_truth","text":"dose (number) current dose. this_args (data.frame) list arguments truth. truth (function) defines true probability DLT dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_this_truth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to call truth calculation — h_this_truth","text":"updated this_truth.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_unpack_stopit.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to recursively unpack stopping rules and return lists with logical value and label given — h_unpack_stopit","title":"Helper function to recursively unpack stopping rules and return lists with logical value and label given — h_unpack_stopit","text":"Helper function recursively unpack stopping rules return lists logical value label given","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_unpack_stopit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to recursively unpack stopping rules and return lists with logical value and label given — h_unpack_stopit","text":"","code":"h_unpack_stopit(stopit_tree)"},{"path":"https://openpharma.github.io/crmPack/reference/h_unpack_stopit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to recursively unpack stopping rules and return lists with logical value and label given — h_unpack_stopit","text":"stopit_tree object simulate method","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_unpack_stopit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to recursively unpack stopping rules and return lists with logical value and label given — h_unpack_stopit","text":"named list","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_validate_combine_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Combining S4 Class Validation Results — h_validate_combine_results","title":"Combining S4 Class Validation Results — h_validate_combine_results","text":"simple helper function combines two outputs calls result() function placed slot Validate() reference class.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_validate_combine_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combining S4 Class Validation Results — h_validate_combine_results","text":"","code":"h_validate_combine_results(v1, v2)"},{"path":"https://openpharma.github.io/crmPack/reference/h_validate_combine_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combining S4 Class Validation Results — h_validate_combine_results","text":"v1 (logical character) output result() function Validate() reference class, combined v2. v2 (logical character) output result() function Validate() reference class, combined v1.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_validate_combine_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combining S4 Class Validation Results — h_validate_combine_results","text":"","code":"h_validate_combine_results(TRUE, \"some_message\") #> [1] \"some_message\""},{"path":"https://openpharma.github.io/crmPack/reference/h_validate_common_data_slots.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function performing validation Common to Data and DataOrdinal — h_validate_common_data_slots","title":"Helper Function performing validation Common to Data and DataOrdinal — h_validate_common_data_slots","text":"Helper Function performing validation Common Data DataOrdinal","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_validate_common_data_slots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function performing validation Common to Data and DataOrdinal — h_validate_common_data_slots","text":"","code":"h_validate_common_data_slots(object)"},{"path":"https://openpharma.github.io/crmPack/reference/h_validate_common_data_slots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function performing validation Common to Data and DataOrdinal — h_validate_common_data_slots","text":"object (Data DataOrdinal) object validated","code":""},{"path":"https://openpharma.github.io/crmPack/reference/h_validate_common_data_slots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function performing validation Common to Data and DataOrdinal — h_validate_common_data_slots","text":"Validate object containing result validation","code":""},{"path":"https://openpharma.github.io/crmPack/reference/is.wholenumber.html","id":null,"dir":"Reference","previous_headings":"","what":"checks for whole numbers (integers) — is.wholenumber","title":"checks for whole numbers (integers) — is.wholenumber","text":"checks whole numbers (integers)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/is.wholenumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checks for whole numbers (integers) — is.wholenumber","text":"","code":"is.wholenumber(x, tol = .Machine$double.eps^0.5)"},{"path":"https://openpharma.github.io/crmPack/reference/is.wholenumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checks for whole numbers (integers) — is.wholenumber","text":"x numeric vector tol tolerance","code":""},{"path":"https://openpharma.github.io/crmPack/reference/is.wholenumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checks for whole numbers (integers) — is.wholenumber","text":"TRUE FALSE element x","code":""},{"path":"https://openpharma.github.io/crmPack/reference/knit_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a CohortSizeConst Object — knit_print","title":"Render a CohortSizeConst Object — knit_print","text":"provide additional utility functions allow human-friendly rendition crmPack objects Markdown Quarto files         provide additional utility functions allow human-friendly rendition crmPack objects Markdown Quarto files.  file contains methods design classes, just direct descendants Design.                                               provide additional utility functions allow human-friendly rendition crmPack objects Markdown Quarto files","code":""},{"path":"https://openpharma.github.io/crmPack/reference/knit_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a CohortSizeConst Object — knit_print","text":"","code":"# S3 method for class 'CohortSizeConst' knit_print(x, ..., asis = TRUE, label = c(\"participant\", \"participants\"))  # S3 method for class 'CohortSizeRange' knit_print(x, ..., asis = TRUE)  # S3 method for class 'CohortSizeDLT' knit_print(x, ..., tox_label = \"toxicity\", asis = TRUE)  # S3 method for class 'CohortSizeParts' knit_print(x, ..., asis = TRUE, label = c(\"participant\", \"participants\"))  # S3 method for class 'CohortSizeMax' knit_print(x, ..., asis = TRUE)  # S3 method for class 'CohortSizeMin' knit_print(x, ..., asis = TRUE)  # S3 method for class 'CohortSizeOrdinal' knit_print(x, ..., tox_label = \"toxicity\", asis = TRUE)  # S3 method for class 'StartingDose' knit_print(x, ..., asis = TRUE)  # S3 method for class 'RuleDesign' knit_print(x, ..., level = 2L, title = \"Design\", sections = NA, asis = TRUE)  # S3 method for class 'Design' knit_print(x, ..., level = 2L, title = \"Design\", sections = NA, asis = TRUE)  # S3 method for class 'DualDesign' knit_print(x, ..., level = 2L, title = \"Design\", sections = NA, asis = TRUE)  # S3 method for class 'DADesign' knit_print(x, ..., level = 2L, title = \"Design\", sections = NA, asis = TRUE)  # S3 method for class 'TDDesign' knit_print(x, ..., level = 2L, title = \"Design\", sections = NA, asis = TRUE)  # S3 method for class 'DualResponsesDesign' knit_print(x, ..., level = 2L, title = \"Design\", sections = NA, asis = TRUE)  # S3 method for class 'DesignOrdinal' knit_print(x, ..., level = 2L, title = \"Design\", sections = NA, asis = TRUE)  # S3 method for class 'DesignGrouped' knit_print(   x,   ...,   level = 2L,   title = \"Design\",   sections = c(model = \"Dose toxicity model\", mono = \"Monotherapy rules\", combo =     \"Combination therapy rules\", other = \"Other details\"),   asis = TRUE )  # S3 method for class 'TDsamplesDesign' knit_print(x, ..., level = 2L, title = \"Design\", sections = NA, asis = TRUE)  # S3 method for class 'DualResponsesDesign' knit_print(x, ..., level = 2L, title = \"Design\", sections = NA, asis = TRUE)  # S3 method for class 'DualResponsesSamplesDesign' knit_print(x, ..., level = 2L, title = \"Design\", sections = NA, asis = TRUE)  # S3 method for class 'RuleDesignOrdinal' knit_print(x, ..., level = 2L, title = \"Design\", sections = NA, asis = TRUE)  # S3 method for class 'GeneralData' knit_print(   x,   ...,   asis = TRUE,   label = c(\"participant\", \"participants\"),   full_grid = FALSE,   summarise = c(\"none\", \"dose\", \"cohort\"),   summarize = summarise,   units = NA,   format_func = function(x) x )  # S3 method for class 'DataParts' knit_print(   x,   ...,   asis = TRUE,   label = c(\"participant\", \"participants\"),   full_grid = FALSE,   summarise = c(\"none\", \"dose\", \"cohort\"),   summarize = summarise,   units = NA,   format_func = function(x) x )  # S3 method for class 'DualEndpoint' knit_print(   x,   ...,   asis = TRUE,   use_values = TRUE,   fmt = \"%5.2f\",   units = NA,   tox_label = \"toxicity\",   biomarker_label = \"PD biomarker\" )  # S3 method for class 'ModelParamsNormal' knit_print(   x,   use_values = TRUE,   fmt = \"%5.2f\",   params = c(\"alpha\", \"beta\"),   preamble = \"The prior for &theta; is given by\\\\n\",   asis = TRUE,   theta = \"\\\\theta\",   ... )  # S3 method for class 'GeneralModel' knit_print(   x,   ...,   params = c(\"alpha\", \"beta\"),   asis = TRUE,   use_values = TRUE,   fmt = \"%5.2f\",   units = NA )  # S3 method for class 'LogisticKadane' knit_print(   x,   ...,   asis = TRUE,   use_values = TRUE,   fmt = \"%5.2f\",   units = NA,   tox_label = \"toxicity\" )  # S3 method for class 'LogisticKadaneBetaGamma' knit_print(   x,   ...,   asis = TRUE,   use_values = TRUE,   fmt = \"%5.2f\",   tox_label = \"toxicity\",   units = NA )  # S3 method for class 'LogisticLogNormal' knit_print(   x,   ...,   use_values = TRUE,   fmt = \"%5.2f\",   params = c(`\\\\alpha` = \"alpha\", `log(\\\\beta)` = \"beta\"),   preamble = \"The prior for &theta; is given by\\\\n\",   asis = TRUE )  # S3 method for class 'LogisticLogNormalMixture' knit_print(x, ..., asis = TRUE, use_values = TRUE, fmt = \"%5.2f\", units = NA)  # S3 method for class 'LogisticLogNormalSub' knit_print(   x,   ...,   use_values = TRUE,   fmt = \"%5.2f\",   params = c(`\\\\alpha` = \"alpha\", `log(\\\\beta)` = \"beta\"),   preamble = \"The prior for &theta; is given by\\\\n\",   asis = TRUE )  # S3 method for class 'LogisticNormalMixture' knit_print(x, ..., asis = TRUE, use_values = TRUE, fmt = \"%5.2f\", units = NA)  # S3 method for class 'LogisticNormalFixedMixture' knit_print(x, ..., asis = TRUE, use_values = TRUE, fmt = \"%5.2f\", units = NA)  # S3 method for class 'OneParLogNormalPrior' knit_print(   x,   ...,   tox_label = \"toxicity\",   asis = TRUE,   use_values = TRUE,   fmt = \"%5.2f\" )  # S3 method for class 'OneParExpPrior' knit_print(x, ..., asis = TRUE)  # S3 method for class 'LogisticLogNormalGrouped' knit_print(   x,   ...,   use_values = TRUE,   fmt = \"%5.2f\",   params = c(`\\\\alpha` = \"alpha\", `\\\\beta` = \"beta\", `log(\\\\delta_0)` = \"delta_0\",     `log(\\\\delta_1)` = \"delta_1\"),   preamble = \"The prior for &theta; is given by\\\\n\",   asis = TRUE )  # S3 method for class 'LogisticLogNormalOrdinal' knit_print(   x,   ...,   use_values = TRUE,   fmt = \"%5.2f\",   params = NA,   preamble = \"The prior for &theta; is given by\\\\n\",   asis = TRUE )  # S3 method for class 'LogisticIndepBeta' knit_print(   x,   ...,   use_values = TRUE,   fmt = \"%5.2f\",   params = NA,   tox_label = \"DLAE\",   preamble = \"The prior for &theta; is given by\\\\n\",   asis = TRUE )  # S3 method for class 'Effloglog' knit_print(   x,   ...,   use_values = TRUE,   fmt = \"%5.2f\",   params = NA,   tox_label = \"DLAE\",   eff_label = \"efficacy\",   label = \"participant\",   preamble = \"The prior for &theta; is given by\\\\n\",   asis = TRUE )  # S3 method for class 'IncrementsRelative' knit_print(x, ..., asis = TRUE)  # S3 method for class 'IncrementsRelativeDLT' knit_print(x, ..., asis = TRUE)  # S3 method for class 'IncrementsDoseLevels' knit_print(x, ..., asis = TRUE)  # S3 method for class 'IncrementsHSRBeta' knit_print(x, ..., asis = TRUE)  # S3 method for class 'IncrementsMin' knit_print(x, ..., asis = TRUE)  # S3 method for class 'IncrementsOrdinal' knit_print(x, ..., asis = TRUE)  # S3 method for class 'IncrementsRelativeParts' knit_print(x, ..., asis = TRUE, tox_label = c(\"toxicity\", \"toxicities\"))  # S3 method for class 'IncrementsRelativeDLTCurrent' knit_print(x, ..., asis = TRUE, tox_label = c(\"DLT\", \"DLTs\"))  # S3 method for class 'NextBestMTD' knit_print(   x,   ...,   target_label = \"the 25th centile\",   tox_label = \"toxicity\",   asis = TRUE )  # S3 method for class 'NextBestNCRM' knit_print(x, ..., tox_label = \"toxicity\", asis = TRUE)  # S3 method for class 'NextBestThreePlusThree' knit_print(   x,   ...,   tox_label = c(\"toxicity\", \"toxicities\"),   label = \"participant\",   asis = TRUE )  # S3 method for class 'NextBestDualEndpoint' knit_print(   x,   ...,   tox_label = \"toxicity\",   biomarker_label = \"the biomarker\",   biomarker_units = ifelse(x@target_relative, \"%\", \"\"),   asis = TRUE )  # S3 method for class 'NextBestMinDist' knit_print(x, ..., tox_label = \"toxicity\", asis = TRUE)  # S3 method for class 'NextBestInfTheory' knit_print(   x,   ...,   tox_label = \"toxicity\",   citation_text = \"Mozgunov & Jaki (2019)\",   citation_link = \"https://doi.org/10.1002/sim.8450\",   asis = TRUE )  # S3 method for class 'NextBestTD' knit_print(x, ..., tox_label = \"toxicity\", asis = TRUE)  # S3 method for class 'NextBestMaxGain' knit_print(x, ..., tox_label = \"toxicity\", asis = TRUE)  # S3 method for class 'NextBestProbMTDLTE' knit_print(x, ..., tox_label = \"toxicity\", asis = TRUE)  # S3 method for class 'NextBestProbMTDMinDist' knit_print(x, ..., tox_label = \"toxicity\", asis = TRUE)  # S3 method for class 'NextBestNCRMLoss' knit_print(   x,   ...,   tox_label = \"toxicity\",   asis = TRUE,   format_func = function(x) {      kableExtra::kable_styling(x, bootstrap_options =     c(\"striped\", \"hover\", \"condensed\"))  } )  # S3 method for class 'NextBestTDsamples' knit_print(x, ..., tox_label = \"toxicity\", asis = TRUE)  # S3 method for class 'NextBestMaxGainSamples' knit_print(x, ..., tox_label = \"toxicity\", asis = TRUE)  # S3 method for class 'NextBestOrdinal' knit_print(x, ..., tox_label = \"toxicity\", asis = TRUE)  # S3 method for class 'SafetyWindow' knit_print(x, ..., asis = TRUE, time_unit = \"day\", label = \"participant\")  # S3 method for class 'SafetyWindowConst' knit_print(   x,   ...,   asis = TRUE,   label = \"participant\",   ordinals = c(\"first\", \"second\", \"third\", \"fourth\", \"fifth\", \"sixth\", \"seventh\",     \"eighth\", \"ninth\", \"tenth\"),   time_unit = \"day\" )  # S3 method for class 'SafetyWindowSize' knit_print(   x,   ...,   asis = TRUE,   ordinals = c(\"first\", \"second\", \"third\", \"fourth\", \"fifth\", \"sixth\", \"seventh\",     \"eighth\", \"ninth\", \"tenth\"),   label = \"participant\",   time_unit = \"day\",   level = 2L )  # S3 method for class 'StoppingOrdinal' knit_print(x, ..., asis = TRUE)  # S3 method for class 'StoppingMaxGainCIRatio' knit_print(x, ..., asis = TRUE)  # S3 method for class 'StoppingList' knit_print(x, ..., preamble, indent = 0L, asis = TRUE)  # S3 method for class 'StoppingAny' knit_print(x, ..., preamble, asis = TRUE)  # S3 method for class 'StoppingAll' knit_print(x, ..., preamble, asis = TRUE)  # S3 method for class 'StoppingTDCIRatio' knit_print(   x,   ...,   dose_label = \"the next best dose\",   tox_label = \"toxicity\",   fmt_string =     paste0(\"%sIf, at %s, the ratio of the upper to the lower limit of the posterior \",     \"95%% credible interval for %s (targetting %2.0f%%) is less than or equal to \"),   asis = TRUE )  # S3 method for class 'StoppingTargetBiomarker' knit_print(   x,   ...,   dose_label = \"the next best dose\",   biomarker_label = \"the target biomarker\",   fmt_string =     paste0(\"%sIf, at %s, the posterior probability that %s is in the range \",     \"(%.2f, %.2f)%s is %.0f%% or more.\\n\\n\"),   asis = TRUE )  # S3 method for class 'StoppingLowestDoseHSRBeta' knit_print(   x,   ...,   tox_label = \"toxicity\",   fmt_string =     paste0(\"%sIf, using a Hard Stopping Rule with a prior of Beta(%.0f, %.0f), the \",     \"lowest dose in the dose grid has a posterior probability of %s of \",     \"%.0f%% or more.\\n\\n\"),   asis = TRUE )  # S3 method for class 'StoppingMTDCV' knit_print(   x,   ...,   fmt_string =     paste0(\"%sIf the posterior estimate of the robust coefficient of variation of \",     \"the MTD (targetting %2.0f%%), is than or equal to %.0f%%.\\n\\n\"),   asis = TRUE )  # S3 method for class 'StoppingMTDdistribution' knit_print(   x,   ...,   fmt_string =     \"%sIf the mean posterior probability of %s at %.0f%% of %s is at least %4.2f.\\n\\n\",   dose_label = \"the next best dose\",   tox_label = \"toxicity\",   asis = TRUE )  # S3 method for class 'StoppingHighestDose' knit_print(   x,   ...,   dose_label = \"the highest dose in the dose grid\",   asis = TRUE )  # S3 method for class 'StoppingSpecificDose' knit_print(x, ..., dose_label = as.character(x@dose), asis = TRUE)  # S3 method for class 'StoppingTargetProb' knit_print(   x,   ...,   fmt_string =     paste0(\"%sIf the probability of %s at %s is in the range [%4.2f, %4.2f] \",     \"is at least %4.2f.\\n\\n\"),   dose_label = \"the next best dose\",   tox_label = \"toxicity\",   asis = TRUE )  # S3 method for class 'StoppingMinCohorts' knit_print(x, ..., asis = TRUE)  # S3 method for class 'StoppingMinPatients' knit_print(x, ..., label = \"participant\", asis = TRUE)  # S3 method for class 'StoppingPatientsNearDose' knit_print(   x,   ...,   dose_label = \"the next best dose\",   label = \"participants\",   asis = TRUE )  # S3 method for class 'StoppingCohortsNearDose' knit_print(x, ..., dose_label = \"the next best dose\", asis = TRUE)  # S3 method for class 'StoppingMissingDose' knit_print(x, ..., asis = TRUE)"},{"path":"https://openpharma.github.io/crmPack/reference/knit_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a CohortSizeConst Object — knit_print","text":"x (ModelParamsNormal) object rendered ... passed knitr::kable() asis (flag) used present label (character) term used label participants tox_label (character) term used describe toxicity level (count) markdown level headings cohort size printed.  integer 1 6 title (character) text heading section describing design sections (character) named vector length least 4 defining headings used define sections corresponding design's slots. element names must match Design's slot names. full_grid (flag) full dose grid appear output table simply doses least one evaluable participant available? Ignored unless summarise == \"dose\". summarise (character) summarise observed data.  default, \"none\", lists observed data participant level.  \"dose\" presents participant counts dose \"cohort\" cohort. summarize (character) Synonym summarise units (character) units values doseGrid format_func (function) function used format range table. use_values (flag) print values associated hyperparameters, symbols used define hyper-parameters.  , example, mu 1. fmt (character) sprintf format string used render numerical values.  Ignored use_values FALSE. biomarker_label (character) term used describe biomarker params (character) names model parameters.  See Usage Notes . preamble (character) text introduces list rules theta (character) LaTeX representation theta vector eff_label (character) term used describe efficacy target_label (character) term used describe target toxicity rate biomarker_units (character) units biomarker measured citation_text (character) text used cite Mozgunov & Jaki citation_link (character) link Mozgunov & Jaki time_unit (character) word used describe units time. See Usage Notes . ordinals (character) character vector whose nth defines word used written representation nth ordinal number. indent (integer) indent level current stopping rule list. Spaces length indent * 4 prepended beginning rendered stopping rule list. dose_label (character) term used describe target dose fmt_string (character) character string defines format output","code":""},{"path":"https://openpharma.github.io/crmPack/reference/knit_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a CohortSizeConst Object — knit_print","text":"character string represents object markdown. markdown representation object, character string character string represents object markdown. character string containing LaTeX rendition object. character string represents object markdown.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/knit_print.html","id":"usage-notes","dir":"Reference","previous_headings":"","what":"Usage Notes","title":"Render a CohortSizeConst Object — knit_print","text":"label describes trial's participants. character vector length 1 2.  length 2, first element describes cohort_size 1 second describes cohort_sizes.  length 1, character s appended value cohort_size 1. default value col.names c(\"Lower\", \"Upper\", \"Cohort size\") caption \"Defined dose used next cohort\". values can overridden passing col.names caption function call. default, columns labelled Lower, Upper Cohort size. table's caption Defined number <tox_label[2]> far observed. values can overridden passing col.names caption function call. label describes trial's participants. character vector length 1 2.  length 2, first element describes single participant second describes situations.  length 1, character s appended value number participants 1. default values col.names caption vary depending summary requested. default values can overridden passing col.names caption function call. params must character vector length equal x@mean (x@cov).  values represent parameters model entries vector theta, left-hand side \"~\" definition prior. named, names valid LaTeX, escaped usual R character variables. example, \"\\\\alpha\" \"\\\\beta_0\".  unnamed, names constructed pre-pending escaped backslash value provided. default value col.names c(\"Min\", \"Max\", \"Increment\") caption \"Defined highest dose administered far\".  values can overridden passing col.names caption function call. default value col.names c(\"Min\", \"Max\", \"Increment\") caption \"Defined number DLTs reported far\". values can overridden passing col.names caption function call. label defines toxicities described. character vector length 1 2.  length 2, first element describes single toxicity second describes toxicity counts.  length 1, character s appended value describing single toxicity. default value col.names c(\"Min\", \"Max\", \"Increment\") caption \"Defined number DLTs current cohort\". values can overridden passing col.names caption function call. tox_label defines toxicities described. character vector length 1 2.  length 2, first element describes single toxicity second describes toxicity counts.  length 1, character s appended value describing single toxicity. section describes use label tox_label, collectively referred labels. label scalar vector length 2.  scalar, converted adding second element equal first, suffixed s. example, tox_label = \"DLT\" becomes tox_label = c(\"DLT\", \"DLTs\").  first element vector used describe count 1.  second used cases. use BibTeX-style citation, specify (example) citation_text = \"@MOZGUNOV\", citation_link = \"\". label character vector length 1 2.  length 2, first element describes count 1 second describes counts. length 1, character s appended value count 1. label time_unit , collectively, labels. label character vector length 1 2.  length 2, first element describes count 1 second describes counts. length 1, character s appended value count 1. label describes trial's participants. character vector length 1 2.  length 2, first element describes cohort_size 1 second describes cohort_sizes.  length 1, character s appended value cohort_size 1. default value col.names c(\"Lower\", \"Upper\", \"Cohort size\") caption \"Defined dose used next cohort\". values can overridden passing col.names caption function call. default, columns labelled Lower, Upper Cohort size. table's caption Defined number <tox_label[2]> far observed. values can overridden passing col.names caption function call. label describes trial's participants. character vector length 1 2.  length 2, first element describes single participant second describes situations.  length 1, character s appended value number participants 1. default values col.names caption vary depending summary requested. default values can overridden passing col.names caption function call. params must character vector length equal x@mean (x@cov).  values represent parameters model entries vector theta, left-hand side \"~\" definition prior. named, names valid LaTeX, escaped usual R character variables. example, \"\\\\alpha\" \"\\\\beta_0\".  unnamed, names constructed pre-pending escaped backslash value provided. default value col.names c(\"Min\", \"Max\", \"Increment\") caption \"Defined highest dose administered far\".  values can overridden passing col.names caption function call. default value col.names c(\"Min\", \"Max\", \"Increment\") caption \"Defined number DLTs reported far\". values can overridden passing col.names caption function call. label defines toxicities described. character vector length 1 2.  length 2, first element describes single toxicity second describes toxicity counts.  length 1, character s appended value describing single toxicity. default value col.names c(\"Min\", \"Max\", \"Increment\") caption \"Defined number DLTs current cohort\". values can overridden passing col.names caption function call. tox_label defines toxicities described. character vector length 1 2.  length 2, first element describes single toxicity second describes toxicity counts.  length 1, character s appended value describing single toxicity. section describes use label tox_label, collectively referred labels. label scalar vector length 2.  scalar, converted adding second element equal first, suffixed s. example, tox_label = \"DLT\" becomes tox_label = c(\"DLT\", \"DLTs\").  first element vector used describe count 1.  second used cases. use BibTeX-style citation, specify (example) citation_text = \"@MOZGUNOV\", citation_link = \"\". label character vector length 1 2.  length 2, first element describes count 1 second describes counts. length 1, character s appended value count 1. label time_unit , collectively, labels. label character vector length 1 2.  length 2, first element describes count 1 second describes counts. length 1, character s appended value count 1.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/logit.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorthand for logit function — logit","title":"Shorthand for logit function — logit","text":"Shorthand logit function","code":""},{"path":"https://openpharma.github.io/crmPack/reference/logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorthand for logit function — logit","text":"","code":"logit(x)"},{"path":"https://openpharma.github.io/crmPack/reference/logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorthand for logit function — logit","text":"x function argument","code":""},{"path":"https://openpharma.github.io/crmPack/reference/logit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shorthand for logit function — logit","text":"logit(x)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/match_within_tolerance.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for value matching with tolerance — match_within_tolerance","title":"Helper function for value matching with tolerance — match_within_tolerance","text":"modified version match supports tolerance.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/match_within_tolerance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for value matching with tolerance — match_within_tolerance","text":"","code":"match_within_tolerance(x, table)"},{"path":"https://openpharma.github.io/crmPack/reference/match_within_tolerance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for value matching with tolerance — match_within_tolerance","text":"x values matched table values matched ","code":""},{"path":"https://openpharma.github.io/crmPack/reference/match_within_tolerance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for value matching with tolerance — match_within_tolerance","text":"vector length x empty vector table empty.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/maxDose.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the Maximum Possible Next Dose — maxDose","title":"Determine the Maximum Possible Next Dose — maxDose","text":"function determines upper limit next dose based incrementsand data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/maxDose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the Maximum Possible Next Dose — maxDose","text":"","code":"maxDose(increments, data, ...)  # S4 method for class 'IncrementsRelative,Data' maxDose(increments, data, ...)  # S4 method for class 'IncrementsRelativeDLT,Data' maxDose(increments, data, ...)  # S4 method for class 'IncrementsRelativeDLTCurrent,Data' maxDose(increments, data, ...)  # S4 method for class 'IncrementsRelativeParts,DataParts' maxDose(increments, data, ...)  # S4 method for class 'IncrementsDoseLevels,Data' maxDose(increments, data, ...)  # S4 method for class 'IncrementsHSRBeta,Data' maxDose(increments, data, ...)  # S4 method for class 'IncrementsMin,Data' maxDose(increments, data, ...)  # S4 method for class 'IncrementsMin,DataOrdinal' maxDose(increments, data, ...)  # S4 method for class 'IncrementsOrdinal,DataOrdinal' maxDose(increments, data, ...)  # S4 method for class 'IncrementsMaxToxProb,DataOrdinal' maxDose(increments, data, model, samples, ...)  # S4 method for class 'IncrementsMaxToxProb,Data' maxDose(increments, data, model, samples, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/maxDose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the Maximum Possible Next Dose — maxDose","text":"increments (Increments) rule next best dose. data (Data) input data. ... additional arguments without method dispatch. model (GeneralModel) model probabilities based samples (Samples) MCMC samples model applied","code":""},{"path":"https://openpharma.github.io/crmPack/reference/maxDose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the Maximum Possible Next Dose — maxDose","text":"number, maximum possible next dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/maxDose.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determine the Maximum Possible Next Dose — maxDose","text":"maxDose(increments = IncrementsRelative, data = Data): determine maximum possible next dose based relative increments. maxDose(increments = IncrementsRelativeDLT, data = Data): determine maximum possible next dose based relative increments determined DLTs far. maxDose(increments = IncrementsRelativeDLTCurrent, data = Data): determine maximum possible next dose based relative increments determined DLTs current cohort. maxDose(increments = IncrementsRelativeParts, data = DataParts): determine maximum possible next dose based relative increments well part 1 beginning part 2. maxDose(increments = IncrementsDoseLevels, data = Data): determine maximum possible next dose based number dose grid levels. , max dose determined one level equal : base dose level + level increment. base dose level level last dose grid level maximum dose applied, defined increments object. Find IncrementsDoseLevels. maxDose(increments = IncrementsHSRBeta, data = Data): determine maximum possible next dose escalation. maxDose(increments = IncrementsMin, data = Data): determine maximum possible next dose based multiple increment rules, taking minimum across individual increments. maxDose(increments = IncrementsMin, data = DataOrdinal): determine maximum possible next dose based multiple increment rules, taking minimum across individual increments. maxDose(increments = IncrementsOrdinal, data = DataOrdinal): determine maximum possible next dose ordinal CRM trial maxDose(increments = IncrementsMaxToxProb, data = DataOrdinal): determine maximum possible next dose based probability toxicity maxDose(increments = IncrementsMaxToxProb, data = Data): determine maximum possible next dose based probability toxicity","code":""},{"path":"https://openpharma.github.io/crmPack/reference/maxDose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the Maximum Possible Next Dose — maxDose","text":"","code":"# Example of usage for `IncrementsRelative` maxDose class.  # Create the data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 8, 8, 8),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   ID = 1:8,   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, 8, 10:40) )  # Define a rule for dose increments which allows for: #  - doubling the dose if the last dose was below 20, #  - increasing the dose by 33% of the last dose, only if the last dose was #    above or equal to 20. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Based on the rule above, the maximum dose allowed is: max_dose <- maxDose(my_increments, data = my_data) # Example of usage for `IncrementsRelativeDLT` maxDose class.  # Create the data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 8, 8, 8),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   ID = 1:8,   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, 8, seq(from = 10, to = 80, by = 2)) )  # Define a rule for dose increments which allows for: #  - doubling the dose if no DLTs were yet observed, #  - increasing the dose by 33% if 1 or 2 DLTs were already observed, #  - increasing the dose by 20% if at least 3 DLTs were already observed. my_increments <- IncrementsRelativeDLT(   intervals = c(0, 1, 3),   increments = c(1, 0.33, 0.2) )  # Based on the rule above, the maximum dose allowed is: max_dose <- maxDose(my_increments, data = my_data) # Example of usage for `IncrementsRelativeDLTCurrent` maxDose class.  # Create the data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   ID = 1:8,   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) )  # Define a rule for dose increments which allows for: #  - doubling the dose if no DLTs were observed in current (i.e. last) cohort, #  - only increasing the dose by 33% if 1 or 2 DLTs were observed in current cohort, #  - only increasing the dose by 20% if at least 3 DLTs were observed in current cohort. my_increments <- IncrementsRelativeDLTCurrent(   intervals = c(0, 1, 3),   increments = c(1, 0.33, 0.2) )  # Based on the rule above, the maximum dose allowed is: max_dose <- maxDose(my_increments, data = my_data) # Example of usage for `IncrementsRelativeParts` maxDose class.  # Create an object of class `DataParts`. my_data <- DataParts(   x = c(0.1, 0.5, 1.5),   y = c(0, 0, 0),   ID = 1:3,   cohort = 1:3,   doseGrid = c(0.1, 0.5, 1.5, 3, 6, 10),   part = c(1L, 1L, 1L),   nextPart = 1L,   part1Ladder = c(0.1, 0.5, 1.5, 3, 6, 10) )  my_increments <- IncrementsRelativeParts(   dlt_start = 0,   clean_start = 1 )  max_dose <- maxDose(my_increments, data = my_data) # Example of usage for `IncrementsDoseLevels` maxDose class.  # Create the data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 8, 8, 12, 12, 12, 16, 16, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1),   ID = 1:14,   cohort = c(1, 2, 3, 4, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, 8, 10:30) )  # In this first example we define a rule for dose increments which allows for # maximum skip one dose level, that is 2 dose levels higher than the last dose # given. my_increments_1 <- IncrementsDoseLevels(levels = 2, basis_level = \"last\")  # Based on the rule above, the maximum dose allowed is: max_dose_1 <- maxDose(my_increments_1, data = my_data)  # In this second example we define a rule for dose increments which allows for # maximum skip one dose level, that is 2 dose levels higher than the max dose # given. my_increments_2 <- IncrementsDoseLevels(levels = 2, basis_level = \"max\")  # Based on the rule above, the maximum dose allowed is: max_dose_2 <- maxDose(my_increments_2, data = my_data)  # Create the data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 8, 8, 8, 6, 6, 6),   y = c(0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1),   cohort = c(0, 1, 2, 3, 4, 5, 5, 5, 6, 6, 6),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, 8,       seq(from = 10, to = 80, by = 2)     ) ) #> Used default patient IDs!  # In this example we define a rule for dose increments that limits the further # dose escalation to doses below 6, because dose 6 is above the probability # toxicity threshold. my_increments <- IncrementsHSRBeta(target = 0.3, prob = 0.95)  # Based on the rule above, we then calculate the maximum dose allowed. my_next_max_dose <- maxDose(my_increments, data = my_data) # Example of usage for `IncrementsRelativeDLTCurrent` maxDose class.  # Create the data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 8, 8, 8),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   ID = 1:8,   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, 8, 10:80) )  # Here, we combine two different increment rules.  # The first rule allows for: #  - doubling the dose if no DLTs were observed at the current dose, #  - increasing the dose by 33% if 1 or 2 DLTs were observed at the current dose, #  - increasing the dose by 22% if 3 or more DLTs were observed. my_increments_1 <- IncrementsRelativeDLT(   intervals = c(0, 1, 3),   increments = c(1, 0.33, 0.2) )  # The second rule allows for: #  - doubling the dose if the current dose is <20, #  - increasing the dose by 33% if the current dose is >=20. my_increments_2 <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Finally, the maximum dose allowed is computed by taking the minimum dose from # the maximum doses computed by the two rules. my_increments <- IncrementsMin(   increments_list = list(my_increments_1, my_increments_2) ) max_dose <- maxDose(my_increments, my_data) maxDose(   increments = IncrementsOrdinal(2L, .DefaultIncrementsRelative()),   data = .DefaultDataOrdinal() ) #> [1] 79.8 model <- LogisticLogNormalOrdinal(   mean = c(0.25, 0.15, 0.5),   cov = matrix(c(1.5, 0, 0, 0, 2, 0, 0, 0, 1), nrow = 3),   ref_dose = 30 )  emptyData <- DataOrdinal(   doseGrid = c(1, 3, 9, 25, 50, 75, 100),   yCategories = c(\"No tox\" = 0L, \"DLAE\" = 1L, \"CRS\" = 2L) )  # For warning regarding tox, see issue #748 https://github.com/openpharma/crmPack/issues/748 suppressWarnings({   samples <- mcmc(emptyData, model, .DefaultMcmcOptions()) }) toxIncrements <- IncrementsMaxToxProb(prob = c(\"DLAE\" = 0.2, \"CRS\" = 0.05)) maxDose(toxIncrements, emptyData, model, samples) #> [1] 1 model <- LogisticLogNormalOrdinal(   mean = c(0.25, 0.15, 0.5),   cov = matrix(c(1.5, 0, 0, 0, 2, 0, 0, 0, 1), nrow = 3),   ref_dose = 30 )  emptyData <- DataOrdinal(   doseGrid = c(1, 3, 9, 25, 50, 75, 100),   yCategories = c(\"No tox\" = 0L, \"DLAE\" = 1L, \"CRS\" = 2L) )  # For warning regarding tox, see issue #748 https://github.com/openpharma/crmPack/issues/748 suppressWarnings({   samples <- mcmc(emptyData, model, .DefaultMcmcOptions()) }) toxIncrements <- IncrementsMaxToxProb(prob = c(\"DLAE\" = 0.2, \"CRS\" = 0.05)) maxDose(toxIncrements, emptyData, model, samples) #> [1] 3"},{"path":"https://openpharma.github.io/crmPack/reference/maxSize.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"function combines cohort size rules taking maximum sizes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/maxSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"maxSize(...)  # S4 method for class 'CohortSize' maxSize(...)"},{"path":"https://openpharma.github.io/crmPack/reference/maxSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"... Objects class CohortSize","code":""},{"path":"https://openpharma.github.io/crmPack/reference/maxSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"","text":"combination object class CohortSizeMax","code":""},{"path":"https://openpharma.github.io/crmPack/reference/maxSize.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"","text":"maxSize(CohortSize): method combining cohort size rules taking maximum","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/maxSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"","text":"","code":"# Here is the rule for: #   having cohort of size 1 for doses <30 #   and having cohort of size 3 for doses >=30 mySize1 <- CohortSizeRange(intervals = c(0, 30), cohort_size = c(1, 3))  # Here is the rule for: #   having cohort of size 1 until no DLT were observed #   and having cohort of size 3 as soon as 1 DLT is observed mySize2 <- CohortSizeDLT(intervals = c(0, 1), cohort_size = c(1, 3))  # This is combining the two rules above by taking the maximum of the sample sizes of # the single rules mySize <- maxSize(mySize1, mySize2)"},{"path":"https://openpharma.github.io/crmPack/reference/mcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtaining Posterior Samples for all Model Parameters — mcmc","title":"Obtaining Posterior Samples for all Model Parameters — mcmc","text":"function actually runs JAGS MCMC machinery produce posterior samples model parameters required derived values. generic function, customized versions may conveniently defined specific subclasses GeneralData, GeneralModel, McmcOptions input.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/mcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtaining Posterior Samples for all Model Parameters — mcmc","text":"","code":"mcmc(data, model, options, ...)  # S4 method for class 'GeneralData,GeneralModel,McmcOptions' mcmc(data, model, options, from_prior = data@nObs == 0L, ...)  # S4 method for class 'GeneralData,DualEndpointRW,McmcOptions' mcmc(data, model, options, from_prior = data@nObs == 0L, ...)  # S4 method for class 'GeneralData,DualEndpointBeta,McmcOptions' mcmc(data, model, options, from_prior = data@nObs == 0L, ...)  # S4 method for class 'GeneralData,DualEndpointEmax,McmcOptions' mcmc(data, model, options, from_prior = data@nObs == 0L, ...)  # S4 method for class 'GeneralData,OneParLogNormalPrior,McmcOptions' mcmc(data, model, options, from_prior = data@nObs == 0L, ...)  # S4 method for class 'GeneralData,OneParExpPrior,McmcOptions' mcmc(data, model, options, from_prior = data@nObs == 0L, ...)  # S4 method for class 'DataMixture,GeneralModel,McmcOptions' mcmc(   data,   model,   options,   from_prior = data@nObs == 0L & data@nObsshare == 0L,   ... )  # S4 method for class 'Data,LogisticIndepBeta,McmcOptions' mcmc(data, model, options, ...)  # S4 method for class 'DataDual,Effloglog,McmcOptions' mcmc(data, model, options, ...)  # S4 method for class 'DataDual,EffFlexi,McmcOptions' mcmc(data, model, options, ...)  # S4 method for class 'DataOrdinal,LogisticLogNormalOrdinal,McmcOptions' mcmc(data, model, options, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/mcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtaining Posterior Samples for all Model Parameters — mcmc","text":"data (GeneralData) input data. model (GeneralModel) input model. options (McmcOptions) MCMC options. ... used. from_prior (flag) sample prior ? Default TRUE number observations data 0. models might necessary specify manually though.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/mcmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtaining Posterior Samples for all Model Parameters — mcmc","text":"posterior samples, object class Samples.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/mcmc.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Obtaining Posterior Samples for all Model Parameters — mcmc","text":"mcmc(data = GeneralData, model = GeneralModel, options = McmcOptions): Standard method uses JAGS. mcmc(data = GeneralData, model = DualEndpointRW, options = McmcOptions): Standard method uses JAGS. DualEndpointRW model, required least two (case random walk prior first order biomarker level) three doses grid. mcmc(data = GeneralData, model = DualEndpointBeta, options = McmcOptions): Standard method uses JAGS. DualEndpointBeta model, required value ref_dose_beta slot greater maximum dose grid. requirement comes definition beta function used model dose-biomarker relationship DualEndpointBeta model. requirement must least one dose grid. mcmc(data = GeneralData, model = DualEndpointEmax, options = McmcOptions): Standard method uses JAGS. DualEndpointEmax model, required least one dose grid. mcmc(data = GeneralData, model = OneParLogNormalPrior, options = McmcOptions): Standard method uses JAGS. OneParLogNormalPrior model, required length skeleton prior probabilities vector equal length number doses. mcmc(data = GeneralData, model = OneParExpPrior, options = McmcOptions): Standard method uses JAGS. OneParExpPrior model, required length skeleton prior probabilities vector equal length number doses. mcmc(data = DataMixture, model = GeneralModel, options = McmcOptions): Method DataMixture different from_prior default mcmc(data = Data, model = LogisticIndepBeta, options = McmcOptions): Obtain posterior samples model parameters based pseudo 'LogisticsIndepBeta' DLE model. joint prior posterior probability density function intercept \\(\\phi_1\\) (phi1) slope \\(\\phi_2\\) (phi2) given Whitehead Williamson (1998) TsuTakawa (1975). However, since asymptotically, joint posterior probability density bivariate normal use bivariate normal distribution generate posterior samples intercept slope parameters. prior samples intercept slope bivariate normal distribution mean covariance matrix given Whitehead Williamson (1998) used. mcmc(data = DataDual, model = Effloglog, options = McmcOptions): Obtain posterior samples model parameters Efficacy log log model. Given value \\(\\nu\\), precision efficacy responses, joint prior posterior probability intercept \\(\\theta_1\\) (theta1) slope \\(\\theta_2\\) (theta2) bivariate normal distribution.  \\(\\nu\\) (nu), precision efficacy responses either fixed value gamma distribution. gamma distribution used, samples nu first generated. mean nu samples used generate samples intercept slope parameters model mcmc(data = DataDual, model = EffFlexi, options = McmcOptions): Obtain posterior samples estimates Efficacy Flexible form. mcmc procedure based described Lang Brezger (2004) samples mean efficacy responses dose levels, samples sigma2 \\(sigma^2\\), variance efficacy response samples sigma2betaW \\(sigma^2_{beta_W}\\), variance random walk model generated. Please refer Lang Brezger (2004) procedures form joint prior posterior probability density mean efficacy responses. addition, sigma2 sigma2betaW can fixed inverse-gamma prior posterior distribution. Therefore, inverse gamma distribution(s) used, parameters distribution first updated samples sigma2 sigma2betaW generated using updated parameters. mcmc(   data = DataOrdinal,   model = LogisticLogNormalOrdinal,   options = McmcOptions ): Obtain posterior samples model parameters LogisticLogNormalOrdinal. generic mcmc method returns Samples object elements data slot named alpha[1], alpha[2], ..., alpha[k] beta passed LogisticLogNormalOrdinal object.  makes \"alpha elements\" awkward access inconsistent Model objects.  rename alpha elements alpha1, alpha2, ..., alpha<k> ease consistency.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/mcmc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Obtaining Posterior Samples for all Model Parameters — mcmc","text":"type Random Number Generator (RNG) initial seed used JAGS taken options argument. initial values supplied (.e RNG kind seed slot options NA), generated automatically JAGS.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/mcmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtaining Posterior Samples for all Model Parameters — mcmc","text":"","code":"# Create some data from the class `Data`. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Initialize the CRM model. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Sample from the posterior distribution. my_options <- McmcOptions(   burnin = 100,   step = 2,   samples = 1000 )  samples <- mcmc(data = my_data, model = my_model, options = my_options) samples #> An object of class \"Samples\" #> Slot \"data\": #> $alpha0 #>    [1] -0.048856486 -1.493193237 -0.251138541 -0.251138541 -0.251138541 #>    [6] -0.461191736  0.265654331  0.265654331  0.733715967 -0.040099343 #>   [11]  1.008880299  1.008880299  1.322492115  0.159468914 -0.776736108 #>   [16] -0.776736108 -0.776736108 -1.192082868 -1.192082868 -0.807159577 #>   [21] -0.807159577 -0.807159577 -0.275694663 -0.275694663 -0.704383514 #>   [26] -0.704383514 -0.704383514 -0.704383514 -0.704383514 -0.704383514 #>   [31]  0.272922741  0.272922741  0.657827321  0.657827321  0.657827321 #>   [36]  0.657827321  0.657827321  0.657827321  0.657827321 -0.582784772 #>   [41] -0.582784772 -0.582784772 -0.582784772 -0.582784772 -1.349360937 #>   [46] -0.602938679 -0.435821017 -0.435821017 -0.435821017 -0.435821017 #>   [51] -0.435821017  0.312811344  0.312811344  0.312811344  0.268204432 #>   [56]  0.290853481 -0.587211416 -0.587211416  0.016302133  1.144698297 #>   [61]  1.144698297 -0.080699187 -0.080699187 -0.080699187 -0.080699187 #>   [66]  0.823643176  0.823643176  0.823643176  0.823643176  0.160166737 #>   [71] -0.144270079  0.557593254 -0.434619722 -0.434619722 -0.434619722 #>   [76] -0.434619722 -0.434619722 -0.525292377 -0.525292377  0.231674398 #>   [81]  0.231674398  0.637811612  0.145648753  0.437134456 -0.092902227 #>   [86] -0.092902227  0.035491833  0.035491833  0.083205082 -0.422014956 #>   [91]  0.572205487 -1.003916826 -1.003916826 -1.003916826 -0.766916933 #>   [96] -0.766916933 -0.766916933  0.633380342  0.633380342  0.633380342 #>  [101]  0.633380342  0.290142916  0.636689116  0.636689116 -0.228643516 #>  [106] -0.228643516 -0.020076963 -0.020076963  0.360336823  0.016277143 #>  [111]  0.016277143 -0.396588004 -0.396588004 -0.396588004 -0.572206801 #>  [116] -0.719911092  0.828175714 -0.168295608  0.199101681 -0.310909841 #>  [121] -0.310909841 -0.310909841 -0.310909841 -0.310909841  0.354334718 #>  [126] -0.659815607  0.970501660  0.003998887  0.003998887 -0.089155284 #>  [131] -0.605272083 -2.053866801 -0.219712125  1.372411503  1.343325761 #>  [136]  1.343325761 -0.527487603 -1.427887604 -1.128417363 -1.128417363 #>  [141] -1.128417363 -1.128417363 -0.271988675  1.564102105  1.564102105 #>  [146]  2.174716798  1.336376361  1.336376361  1.336376361  1.125756054 #>  [151]  1.125756054  1.125756054  1.187224677  0.388613542  0.388613542 #>  [156] -0.210029303  0.173769716  0.173769716  0.173769716 -0.005480898 #>  [161] -0.005480898 -0.005480898 -0.005480898 -0.765403826 -0.765403826 #>  [166]  0.638836707  0.619357119  0.301013698  0.301013698  0.529275641 #>  [171]  0.789159236  0.789159236 -0.224451690 -0.224451690 -0.224451690 #>  [176] -0.224451690 -0.224451690 -0.224451690 -1.286146972  0.420519280 #>  [181]  0.697834021  0.697834021 -0.639966515 -0.639966515 -0.639966515 #>  [186] -1.178490600 -1.178490600 -1.178490600 -1.178490600 -1.178490600 #>  [191]  0.137042787  0.137042787  0.137042787  0.137042787 -0.354076847 #>  [196] -1.324106183 -1.324106183 -0.713981730 -0.713981730  0.152559791 #>  [201] -0.580996101 -0.580996101  0.127656873  0.127656873  0.111758093 #>  [206]  0.014404208  0.959873138  1.263522289  1.263522289  0.204049596 #>  [211]  0.204049596  0.693275910 -0.182542366  0.504449246  0.504449246 #>  [216]  0.504449246  0.504449246  1.193319147  0.660239951 -0.042958171 #>  [221] -0.458690988 -0.380147629 -0.164740285 -0.164740285  0.175170150 #>  [226]  0.077406235  0.077406235  0.077406235  0.077406235  0.077406235 #>  [231] -0.640778513 -0.640778513 -0.360612218 -0.360612218 -0.360612218 #>  [236] -0.455276699 -0.455276699 -0.455276699 -0.455276699 -0.532726741 #>  [241] -0.187926666 -0.187926666 -1.269154979 -0.880735717 -0.880735717 #>  [246] -1.636673819 -1.767068729 -1.100374196 -1.345300369 -1.345300369 #>  [251] -1.345300369 -1.345300369 -0.405670588 -0.405670588 -0.932534574 #>  [256] -0.932534574 -0.932534574  0.675030661  0.675030661  0.140928124 #>  [261]  0.140928124  1.092720531  1.092720531  0.658268924  0.658268924 #>  [266] -0.153201061 -0.153201061  0.771018642  0.771018642  0.771018642 #>  [271]  0.771018642 -0.226562822 -0.226562822 -0.226562822  0.827284209 #>  [276]  0.827284209  0.827284209  1.080882231  1.080882231  1.080882231 #>  [281]  0.695659884 -0.534864366  0.345701307 -0.471851741  0.328558879 #>  [286] -0.149785700 -1.525763238 -1.525763238 -1.525763238 -1.795369380 #>  [291] -1.641241455 -1.641241455 -1.641241455 -1.641241455 -1.888543590 #>  [296] -1.989543010  0.009611136  0.009611136  0.009611136  0.009611136 #>  [301]  0.009611136  0.009611136  0.009611136  0.009611136  0.009611136 #>  [306]  0.387024758  0.302547912 -0.657191901 -1.131620168 -1.131620168 #>  [311] -1.046820606 -1.046820606 -1.162104448 -1.162104448 -0.501579776 #>  [316]  0.307191355  0.307191355 -0.143951611 -1.679781020 -1.679781020 #>  [321] -0.858801739 -0.796859006 -0.037211466 -0.037211466 -0.037211466 #>  [326]  0.345052095  0.345052095  0.552950469  1.346382050  1.346382050 #>  [331]  1.346382050  1.346382050  1.346382050 -0.178041180 -0.613027943 #>  [336] -0.450768889 -0.450768889 -0.450768889 -0.107943500 -0.107943500 #>  [341]  0.660048407 -0.744617183 -0.744617183  0.187239872 -0.974695312 #>  [346] -0.974695312 -0.371990374 -0.371990374 -0.694964311 -0.581376862 #>  [351] -0.581376862 -0.581376862  0.788064906  0.788064906  0.788064906 #>  [356]  1.610439402  1.734728964  1.728460567  1.728460567  1.741728086 #>  [361] -0.101075919 -0.101075919  0.787156625  0.787156625 -0.285894875 #>  [366] -0.285894875 -0.471555808 -0.471555808 -0.471555808 -0.471555808 #>  [371] -0.471555808 -0.471555808 -0.471555808 -0.471555808 -0.471555808 #>  [376] -0.471555808 -0.471555808 -0.471555808 -0.471555808 -0.471555808 #>  [381] -0.471555808 -0.471555808 -0.471555808 -0.471555808  0.238955825 #>  [386]  0.238955825  0.615832402 -0.784409404  0.573934256 -0.230554333 #>  [391] -0.230554333 -0.230554333 -0.230554333 -0.230554333 -1.389384790 #>  [396] -1.389384790 -0.402906887 -0.402906887 -0.402906887 -0.402906887 #>  [401] -0.402906887  0.369176694  0.354814254  0.354814254 -1.125088348 #>  [406] -1.125088348 -1.125088348  0.076606419  0.279646683  0.531640543 #>  [411]  1.601860403  1.601860403  1.601860403  1.601860403  1.601860403 #>  [416]  1.601860403  1.952384010  1.952384010  1.127454335  0.536808058 #>  [421]  0.536808058  0.536808058  0.536808058  0.536808058  0.536808058 #>  [426]  0.536808058 -0.374310732 -0.522095368 -0.522095368 -1.504272537 #>  [431] -0.267643783 -0.267643783 -0.267643783  0.028051771  0.070575527 #>  [436] -0.759909240  0.188286439  0.451099545  0.451099545 -0.061482770 #>  [441] -1.269937351 -1.269937351 -1.269937351 -0.589611745 -0.006799386 #>  [446] -0.006799386 -0.006799386 -1.322146558 -1.145282074 -0.824363344 #>  [451] -0.554466674 -0.554466674 -0.694104858 -0.694104858  0.003956459 #>  [456]  0.003956459  0.003956459  0.003956459  0.836482840  0.836482840 #>  [461]  0.028393624  0.028393624  0.028393624  0.028393624 -0.809721586 #>  [466]  0.211718677  0.211718677  0.211718677  0.211718677  0.211718677 #>  [471]  0.211718677  0.211718677  0.211718677  0.211718677  0.211718677 #>  [476] -0.356483744 -0.470514743 -1.592439092 -1.592439092 -0.212865275 #>  [481]  0.260920890  0.260920890  0.955924034  0.955924034  0.955924034 #>  [486]  0.955924034  0.955924034  0.955924034  0.955924034  0.955924034 #>  [491] -0.092935453 -0.092935453 -0.092935453 -0.092935453 -0.176359137 #>  [496] -0.176359137 -0.176359137 -0.176359137 -0.199108569  0.003731696 #>  [501]  0.003731696  0.003731696  0.003731696 -0.223708262 -0.187126849 #>  [506] -0.187126849  0.924801038  0.924801038  0.924801038  0.272220511 #>  [511] -0.256987274 -0.256987274 -0.256987274 -0.256987274 -0.256987274 #>  [516]  0.848660863  0.848660863 -0.582683597 -0.246427716  0.047584086 #>  [521]  0.047584086  0.853260873 -0.532109522 -1.173612554 -0.298130707 #>  [526]  0.464770145 -0.406969222 -0.406969222  0.405920747  0.405920747 #>  [531] -0.368430723 -0.033252562 -0.033252562 -0.033252562  1.007386436 #>  [536]  0.907118491  0.920660133  0.920660133  0.920660133  0.722341324 #>  [541]  0.290445013 -0.547175642 -0.547175642 -0.547175642 -1.264146841 #>  [546] -0.543538338  0.907600119  0.190316142  0.190316142  0.190316142 #>  [551]  1.378309077 -1.423632468 -1.419562781 -1.419562781 -1.569482021 #>  [556] -1.569482021 -0.138166315 -0.273745844 -0.394344676 -0.476067234 #>  [561] -0.958805186  1.160328211  0.274104999  0.274104999 -0.316026096 #>  [566] -0.316026096 -0.919820969 -0.919820969 -0.919820969 -0.919820969 #>  [571] -0.919820969 -0.919820969 -0.587343602  1.863493508  2.076239030 #>  [576]  2.076239030  0.825881474  0.482519761  0.482519761  0.460902384 #>  [581]  0.460902384  0.460902384  0.460902384  0.460902384  0.460902384 #>  [586]  0.460902384  0.004169645  0.004169645  0.004169645  0.004169645 #>  [591]  0.617500850 -0.881928407 -0.881928407 -0.881928407 -0.881928407 #>  [596] -0.881928407 -0.003989676 -0.003989676 -0.003989676  0.731374662 #>  [601]  0.505218049  1.538489293  1.418910746  1.242429476  1.242429476 #>  [606]  1.242429476  0.678989826 -1.359489658  0.373765047  0.373765047 #>  [611] -0.041672079 -0.201751604 -0.201751604 -0.382222301 -0.731906512 #>  [616] -0.731906512 -0.731906512 -0.731906512 -0.292705501 -0.292705501 #>  [621] -0.292705501  0.068996029  0.068996029  0.068996029  0.068996029 #>  [626]  0.815494372  1.213864807  1.213864807  0.771789972  0.771789972 #>  [631]  0.613515791  1.188618745 -0.152999661 -0.419725002 -0.419725002 #>  [636] -0.419725002 -0.869924266 -0.869924266 -0.383998347 -0.383998347 #>  [641]  0.968362066  1.264297014  1.232667008  1.232667008  0.168678977 #>  [646] -0.136169866 -0.136169866 -0.136169866  0.173370605  0.937197200 #>  [651]  0.937197200  1.822764806  0.840708882  0.194116596 -1.652021847 #>  [656] -0.416934940 -0.416934940 -0.992044562 -0.701704919 -0.922054614 #>  [661] -0.922054614 -1.004083992 -1.863326341 -1.519412229 -0.457489718 #>  [666] -1.108020723 -0.939702877 -1.648678344 -1.554572754 -1.318494479 #>  [671] -1.318494479 -0.511553968  1.025047684  0.279198460  0.279198460 #>  [676] -0.540650701  0.118263236  0.118263236  0.118263236  0.118263236 #>  [681]  0.118263236  0.118263236  0.118263236  0.118263236  0.298528216 #>  [686]  0.298528216 -0.624407928 -0.624407928 -0.624407928 -0.624407928 #>  [691] -0.959329821 -0.372758727 -0.667702610 -0.667702610 -0.667702610 #>  [696] -0.667702610 -0.688265955 -0.688265955 -1.097421384 -1.097421384 #>  [701] -1.097421384 -1.097421384 -0.943758781 -0.800620243 -0.267652098 #>  [706] -0.051008042 -0.108601606 -0.108601606 -0.108601606  0.668421233 #>  [711]  0.748122258  0.214475458  0.664746849  0.664746849  0.664746849 #>  [716]  0.664746849  0.179470840  0.179470840  0.565557424  0.706128789 #>  [721]  0.733557633  0.733557633  0.733557633  0.733557633  0.733557633 #>  [726] -0.720740952 -0.901334317 -0.328556228 -0.328556228 -0.328556228 #>  [731] -0.400225920  0.103420230  0.103420230  0.103420230  0.051312642 #>  [736]  0.051312642  0.618048142  0.290308027  0.625851776  0.625851776 #>  [741]  0.625851776  0.234121596  1.211382877 -0.328568006  0.345026168 #>  [746]  0.345026168 -1.193441597 -1.193441597 -1.193441597 -0.566494690 #>  [751] -0.566494690 -0.566494690 -0.221633410 -0.221633410 -0.221633410 #>  [756]  0.685685602  0.685685602  1.193386443  0.835691595  0.835691595 #>  [761]  0.120472192  0.120472192  0.120472192  0.120472192 -0.455058229 #>  [766] -0.060475395  0.924840583 -1.022245520 -1.022245520 -1.022245520 #>  [771] -1.022245520 -0.657852074 -0.287886646 -0.287886646 -0.287886646 #>  [776] -0.287886646 -0.596167859 -0.743097568  0.015282349 -0.265279016 #>  [781] -0.508359370 -1.580730634 -1.580730634 -0.869107015 -0.005882325 #>  [786]  0.600989875  0.600989875 -0.828057058 -0.828057058 -0.828057058 #>  [791] -0.828057058 -0.385401875 -0.385401875 -1.493560969 -1.493560969 #>  [796] -0.686177224 -0.686177224 -0.092731824 -0.092731824 -0.092731824 #>  [801] -0.092731824 -0.220770870 -0.991044041 -0.991044041 -0.991044041 #>  [806] -0.991044041 -0.991044041 -0.991044041 -1.056811539 -1.056811539 #>  [811] -1.056811539 -1.056811539 -1.056811539 -1.056811539 -0.652039044 #>  [816] -0.652039044 -0.652039044  0.331362881  0.331362881  0.331362881 #>  [821] -1.438158870 -1.438158870 -1.438158870 -1.542603133 -1.114587825 #>  [826] -1.114587825 -0.580652562 -0.025557735 -0.025557735 -0.025557735 #>  [831] -0.025557735 -0.319920585 -0.319920585 -0.319920585 -0.319920585 #>  [836] -0.319920585 -0.319920585 -0.273533431  0.077792511  0.077792511 #>  [841]  0.701307116  0.701307116 -0.153449515 -0.153449515  0.078875343 #>  [846]  0.117668853  0.117668853  0.117668853  0.117668853  0.117668853 #>  [851]  0.117668853 -0.791633055 -0.457245130 -1.866024240 -1.866024240 #>  [856] -0.391295503 -0.391295503  0.111317083  0.298360880 -0.207161620 #>  [861] -0.584014677 -0.584014677 -0.584014677 -0.313740334 -0.313740334 #>  [866]  0.051643666  0.051643666  0.051643666  0.051643666  0.920552650 #>  [871]  0.920552650  0.611645177  0.338996118 -0.139810877 -0.139810877 #>  [876] -0.139810877 -0.002954128 -0.002954128 -0.332934354 -0.993104632 #>  [881] -1.307926641 -1.307926641 -0.810598574 -0.810598574 -0.810598574 #>  [886] -0.462356054  0.369556068  0.130886270  0.130886270  0.130886270 #>  [891]  0.130886270 -0.828807382 -1.194249637 -1.194249637 -1.194249637 #>  [896] -0.140515772 -0.008415336 -0.008415336 -0.768871392 -1.018116178 #>  [901] -1.018116178 -1.018116178 -1.018116178 -1.495242630 -0.585854151 #>  [906] -0.292630454  0.637483529  0.637483529  0.729527703  0.729527703 #>  [911]  0.729527703  0.729527703  0.738973138  1.105474828  1.105474828 #>  [916]  1.105474828  0.054704155  0.054704155  0.054704155  0.142729613 #>  [921]  0.142729613  0.142729613  0.142729613  1.119496072  1.119496072 #>  [926]  1.589699032  0.068147188  0.068147188 -0.257966304 -0.257966304 #>  [931] -0.257966304 -1.596354149 -0.300246261  1.244264814 -0.973459788 #>  [936] -0.030530679 -0.030530679 -0.030530679 -0.986763011  0.772241737 #>  [941] -0.841179987 -0.841179987 -0.841179987 -0.694633313 -0.694633313 #>  [946] -0.468230293 -0.468230293 -0.468230293 -0.468230293 -0.660729420 #>  [951] -0.660729420  0.139645599 -0.802242198 -0.160649229 -0.160649229 #>  [956]  0.075933112  0.075933112  0.075933112  0.075933112 -0.422734734 #>  [961] -0.422734734 -0.422734734  0.239828218 -0.544448576 -0.725602468 #>  [966] -0.725602468 -0.725602468  0.457724089  0.457724089  0.457724089 #>  [971]  0.636350695 -0.349427450 -0.349427450 -0.349427450 -0.349427450 #>  [976] -0.349427450 -0.349427450  0.009641368  0.009641368 -0.211370935 #>  [981] -0.211370935 -0.467774189 -0.467774189 -1.020505290 -1.020505290 #>  [986] -0.165137465 -0.165137465 -0.165137465 -0.989393908 -0.650143168 #>  [991] -0.650143168 -0.650143168 -0.614635168 -0.614635168 -0.614635168 #>  [996] -0.614635168 -0.614635168 -0.884932760 -0.884932760  0.757186761 #>  #> $alpha1 #>    [1] 1.3572491 0.4450189 0.5189969 0.5189969 0.5189969 1.7848739 0.5689957 #>    [8] 0.5689957 1.7756818 0.6104978 0.7930775 0.7930775 1.7657635 2.4298693 #>   [15] 1.4482225 1.4482225 1.4482225 1.7384814 1.7384814 0.6390219 0.6390219 #>   [22] 0.6390219 1.1360246 1.1360246 1.4552505 1.4552505 1.4552505 1.4552505 #>   [29] 1.4552505 1.4552505 1.1451497 1.1451497 1.2349412 1.2349412 1.2349412 #>   [36] 1.2349412 1.2349412 1.2349412 1.2349412 0.6594864 0.6594864 0.6594864 #>   [43] 0.6594864 0.6594864 1.2254543 1.3103121 1.5621600 1.5621600 1.5621600 #>   [50] 1.5621600 1.5621600 1.3997965 1.3997965 1.3997965 1.2795509 1.1379979 #>   [57] 1.0554846 1.0554846 2.7719761 0.7384568 0.7384568 0.9548058 0.9548058 #>   [64] 0.9548058 0.9548058 1.3753099 1.3753099 1.3753099 1.3753099 2.6377757 #>   [71] 0.5141222 1.3068035 1.2362561 1.2362561 1.2362561 1.2362561 1.2362561 #>   [78] 1.6755877 1.6755877 0.3177237 0.3177237 0.5983266 0.5110599 0.2577860 #>   [85] 0.3604734 0.3604734 0.4060914 0.4060914 0.7315395 1.2105242 0.5770147 #>   [92] 0.7497191 0.7497191 0.7497191 2.8163811 2.8163811 2.8163811 0.6922736 #>   [99] 0.6922736 0.6922736 0.6922736 1.9493740 0.8340746 0.8340746 1.0874006 #>  [106] 1.0874006 0.6781358 0.6781358 1.2041447 0.6087735 0.6087735 0.9040064 #>  [113] 0.9040064 0.9040064 1.5482513 1.6992550 1.3247950 1.0324662 1.3219808 #>  [120] 0.3612234 0.3612234 0.3612234 0.3612234 0.3612234 0.4605737 2.5842581 #>  [127] 1.3164403 1.0297503 1.0297503 1.2644517 1.0886980 0.5707804 0.2991366 #>  [134] 0.8202160 1.6776474 1.6776474 1.9789863 0.8540243 2.0560128 2.0560128 #>  [141] 2.0560128 2.0560128 2.4348578 1.2419030 1.2419030 1.6787618 1.9759199 #>  [148] 1.9759199 1.9759199 2.4278987 2.4278987 2.4278987 0.7034361 1.2971501 #>  [155] 1.2971501 2.4109040 1.5489513 1.5489513 1.5489513 1.1762618 1.1762618 #>  [162] 1.1762618 1.1762618 0.8389886 0.8389886 0.6533827 0.9636404 1.5141488 #>  [169] 1.5141488 0.7620022 0.3312763 0.3312763 2.1719492 2.1719492 2.1719492 #>  [176] 2.1719492 2.1719492 2.1719492 1.1147147 0.5617046 1.0169736 1.0169736 #>  [183] 1.5486828 1.5486828 1.5486828 2.1416842 2.1416842 2.1416842 2.1416842 #>  [190] 2.1416842 1.5208762 1.5208762 1.5208762 1.5208762 3.4267872 1.5310169 #>  [197] 1.5310169 0.9579820 0.9579820 1.3405859 1.6014445 1.6014445 0.9076276 #>  [204] 0.9076276 1.0893300 2.2770690 1.3170423 1.0153933 1.0153933 0.5363880 #>  [211] 0.5363880 1.1102608 0.3076898 1.5073249 1.5073249 1.5073249 1.5073249 #>  [218] 1.3278476 0.4777245 2.1911519 2.2529752 2.6014205 2.0448622 2.0448622 #>  [225] 0.7632755 1.0072295 1.0072295 1.0072295 1.0072295 1.0072295 1.2563480 #>  [232] 1.2563480 1.6607370 1.6607370 1.6607370 1.2681965 1.2681965 1.2681965 #>  [239] 1.2681965 0.9193999 0.6478600 0.6478600 1.7048166 1.1095548 1.1095548 #>  [246] 0.7553729 1.0361993 0.7166981 1.2275552 1.2275552 1.2275552 1.2275552 #>  [253] 0.8895633 0.8895633 0.6242770 0.6242770 0.6242770 1.8591074 1.8591074 #>  [260] 1.0725507 1.0725507 0.8736649 0.8736649 2.1909469 2.1909469 1.7270804 #>  [267] 1.7270804 2.0784778 2.0784778 2.0784778 2.0784778 1.0273047 1.0273047 #>  [274] 1.0273047 1.6833878 1.6833878 1.6833878 0.9856423 0.9856423 0.9856423 #>  [281] 0.9582440 0.5683042 0.4288392 0.4414013 0.4531601 0.6482098 0.4330413 #>  [288] 0.4330413 0.4330413 0.7066465 0.5693617 0.5693617 0.5693617 0.5693617 #>  [295] 1.1489241 1.2379828 1.8951769 1.8951769 1.8951769 1.8951769 1.8951769 #>  [302] 1.8951769 1.8951769 1.8951769 1.8951769 1.0130388 0.9683962 1.9655895 #>  [309] 1.2895062 1.2895062 1.0236513 1.0236513 0.9931076 0.9931076 0.9949380 #>  [316] 0.7656696 0.7656696 0.7056831 1.1330907 1.1330907 1.7550496 1.6122625 #>  [323] 1.3343257 1.3343257 1.3343257 0.7645871 0.7645871 0.8037207 2.0193697 #>  [330] 2.0193697 2.0193697 2.0193697 2.0193697 1.7350418 0.9420637 0.5051026 #>  [337] 0.5051026 0.5051026 0.8153005 0.8153005 1.7247014 1.7684987 1.7684987 #>  [344] 2.2100021 1.0163146 1.0163146 0.6624404 0.6624404 0.7878721 1.4895198 #>  [351] 1.4895198 1.4895198 1.5836307 1.5836307 1.5836307 0.6065056 2.6686227 #>  [358] 1.1050564 1.1050564 2.1405249 1.6287141 1.6287141 0.9690833 0.9690833 #>  [365] 0.6034128 0.6034128 1.0186125 1.0186125 1.0186125 1.0186125 1.0186125 #>  [372] 1.0186125 1.0186125 1.0186125 1.0186125 1.0186125 1.0186125 1.0186125 #>  [379] 1.0186125 1.0186125 1.0186125 1.0186125 1.0186125 1.0186125 1.3982560 #>  [386] 1.3982560 0.6083880 0.9216405 0.9415805 0.6165024 0.6165024 0.6165024 #>  [393] 0.6165024 0.6165024 0.5550613 0.5550613 0.7160493 0.7160493 0.7160493 #>  [400] 0.7160493 0.7160493 0.8710913 0.8167875 0.8167875 0.9483149 0.9483149 #>  [407] 0.9483149 1.4044436 0.6691802 2.3631277 1.4482477 1.4482477 1.4482477 #>  [414] 1.4482477 1.4482477 1.4482477 1.5392426 1.5392426 0.8818381 1.5346600 #>  [421] 1.5346600 1.5346600 1.5346600 1.5346600 1.5346600 1.5346600 1.1166803 #>  [428] 1.0314149 1.0314149 1.3894894 0.8969134 0.8969134 0.8969134 1.6704282 #>  [435] 1.1962584 1.2135693 0.8100507 0.8681633 0.8681633 1.5538050 2.6468720 #>  [442] 2.6468720 2.6468720 2.0534465 1.2548571 1.2548571 1.2548571 1.6534137 #>  [449] 1.3863576 1.1916628 0.5140538 0.5140538 0.5000155 0.5000155 1.4554518 #>  [456] 1.4554518 1.4554518 1.4554518 1.9516879 1.9516879 1.0691296 1.0691296 #>  [463] 1.0691296 1.0691296 1.5972901 2.1448693 2.1448693 2.1448693 2.1448693 #>  [470] 2.1448693 2.1448693 2.1448693 2.1448693 2.1448693 2.1448693 1.0736446 #>  [477] 0.7722513 0.9793321 0.9793321 0.2624060 0.4062710 0.4062710 1.2203321 #>  [484] 1.2203321 1.2203321 1.2203321 1.2203321 1.2203321 1.2203321 1.2203321 #>  [491] 1.6728843 1.6728843 1.6728843 1.6728843 0.8514932 0.8514932 0.8514932 #>  [498] 0.8514932 0.8453972 1.6739287 1.6739287 1.6739287 1.6739287 0.9264308 #>  [505] 0.7717793 0.7717793 0.8466927 0.8466927 0.8466927 1.8141294 1.2635157 #>  [512] 1.2635157 1.2635157 1.2635157 1.2635157 1.1527360 1.1527360 0.8195161 #>  [519] 0.7650075 1.3203313 1.3203313 1.3841008 1.0194798 1.1769021 1.0744221 #>  [526] 2.1780717 1.7244950 1.7244950 2.3414832 2.3414832 0.7861748 0.4512088 #>  [533] 0.4512088 0.4512088 0.7984020 1.0130682 0.8678163 0.8678163 0.8678163 #>  [540] 1.6384186 1.4251514 1.0219064 1.0219064 1.0219064 2.0201929 0.3226610 #>  [547] 0.4282802 0.1515172 0.1515172 0.1515172 1.3881241 1.1888219 2.3843760 #>  [554] 2.3843760 0.8515917 0.8515917 1.6391784 1.3889034 1.2564715 1.4183059 #>  [561] 0.8633970 1.1734349 0.8678673 0.8678673 0.8705166 0.8705166 0.9827522 #>  [568] 0.9827522 0.9827522 0.9827522 0.9827522 0.9827522 1.5306252 1.2275879 #>  [575] 1.7551142 1.7551142 0.7250559 1.3883160 1.3883160 0.8984067 0.8984067 #>  [582] 0.8984067 0.8984067 0.8984067 0.8984067 0.8984067 0.8492936 0.8492936 #>  [589] 0.8492936 0.8492936 1.8006062 1.1469593 1.1469593 1.1469593 1.1469593 #>  [596] 1.1469593 0.7511254 0.7511254 0.7511254 1.2680074 0.7883587 1.0374359 #>  [603] 1.7058166 2.3903836 2.3903836 2.3903836 2.1221312 0.4971913 0.6974371 #>  [610] 0.6974371 3.0902049 0.8433747 0.8433747 0.6188885 2.3912070 2.3912070 #>  [617] 2.3912070 2.3912070 2.6458370 2.6458370 2.6458370 0.9356552 0.9356552 #>  [624] 0.9356552 0.9356552 2.3931450 1.4246920 1.4246920 0.8635665 0.8635665 #>  [631] 1.8934105 0.8811908 1.1264541 0.9697121 0.9697121 0.9697121 1.1420649 #>  [638] 1.1420649 1.1669670 1.1669670 1.1411378 1.7803760 1.6706932 1.6706932 #>  [645] 2.1433417 0.8620399 0.8620399 0.8620399 1.0805624 0.5222798 0.5222798 #>  [652] 2.1019691 0.3407467 0.4591368 1.2867347 0.4404170 0.4404170 1.1113999 #>  [659] 1.3947312 1.4221658 1.4221658 0.7181238 1.0377750 1.1489198 2.7102861 #>  [666] 0.7750106 0.5182909 0.9567846 0.7814971 0.8854748 0.8854748 2.1064736 #>  [673] 1.8493257 1.1874835 1.1874835 1.8635097 1.2709945 1.2709945 1.2709945 #>  [680] 1.2709945 1.2709945 1.2709945 1.2709945 1.2709945 1.7936313 1.7936313 #>  [687] 1.0187826 1.0187826 1.0187826 1.0187826 0.8134795 0.4274129 0.7766554 #>  [694] 0.7766554 0.7766554 0.7766554 0.6845717 0.6845717 1.2017334 1.2017334 #>  [701] 1.2017334 1.2017334 0.5377428 0.2763834 0.4113459 1.4771419 1.3836946 #>  [708] 1.3836946 1.3836946 1.7395599 0.8586918 2.1415298 3.2040198 3.2040198 #>  [715] 3.2040198 3.2040198 0.4426695 0.4426695 0.7509758 1.5603473 1.2127184 #>  [722] 1.2127184 1.2127184 1.2127184 1.2127184 0.6892607 0.6341770 0.5460254 #>  [729] 0.5460254 0.5460254 0.5470066 1.6385543 1.6385543 1.6385543 0.8077068 #>  [736] 0.8077068 1.1623447 1.2175753 1.4401932 1.4401932 1.4401932 0.5721057 #>  [743] 1.0175257 1.9133811 1.3065924 1.3065924 0.9372832 0.9372832 0.9372832 #>  [750] 1.9047379 1.9047379 1.9047379 2.5754544 2.5754544 2.5754544 1.9885307 #>  [757] 1.9885307 1.5374669 1.1873793 1.1873793 1.5884740 1.5884740 1.5884740 #>  [764] 1.5884740 0.5009067 1.6397886 0.9491291 0.9563236 0.9563236 0.9563236 #>  [771] 0.9563236 1.3236394 1.3696800 1.3696800 1.3696800 1.3696800 1.6726789 #>  [778] 1.8759320 1.3466184 0.6601204 2.8168388 0.5891380 0.5891380 0.3351637 #>  [785] 0.3737176 0.6295468 0.6295468 0.8571607 0.8571607 0.8571607 0.8571607 #>  [792] 0.5072438 0.5072438 0.5990033 0.5990033 1.1798256 1.1798256 1.0229544 #>  [799] 1.0229544 1.0229544 1.0229544 1.0802034 1.0947348 1.0947348 1.0947348 #>  [806] 1.0947348 1.0947348 1.0947348 0.6650058 0.6650058 0.6650058 0.6650058 #>  [813] 0.6650058 0.6650058 0.6845667 0.6845667 0.6845667 0.7113499 0.7113499 #>  [820] 0.7113499 0.9682400 0.9682400 0.9682400 1.4816237 1.9954962 1.9954962 #>  [827] 0.4889815 0.7451799 0.7451799 0.7451799 0.7451799 0.7078645 0.7078645 #>  [834] 0.7078645 0.7078645 0.7078645 0.7078645 1.3157993 1.7423859 1.7423859 #>  [841] 1.1555460 1.1555460 1.8646947 1.8646947 1.6160510 1.4244672 1.4244672 #>  [848] 1.4244672 1.4244672 1.4244672 1.4244672 1.0712118 0.9171100 1.0639489 #>  [855] 1.0639489 0.8447954 0.8447954 0.5124847 0.9168689 0.5742656 1.3381276 #>  [862] 1.3381276 1.3381276 0.9574465 0.9574465 1.4231249 1.4231249 1.4231249 #>  [869] 1.4231249 1.7144160 1.7144160 1.7472445 0.9504955 0.8321728 0.8321728 #>  [876] 0.8321728 1.3779180 1.3779180 2.3096915 0.6114317 0.6978542 0.6978542 #>  [883] 0.7073131 0.7073131 0.7073131 2.2672638 0.7101908 0.9009689 0.9009689 #>  [890] 0.9009689 0.9009689 0.9024879 0.6722448 0.6722448 0.6722448 1.7046672 #>  [897] 1.6914404 1.6914404 0.7086002 1.1623039 1.1623039 1.1623039 1.1623039 #>  [904] 0.6793507 0.3126977 2.3490741 1.1784035 1.1784035 1.2135646 1.2135646 #>  [911] 1.2135646 1.2135646 2.1272788 1.1748850 1.1748850 1.1748850 0.5302918 #>  [918] 0.5302918 0.5302918 1.3290849 1.3290849 1.3290849 1.3290849 1.0105048 #>  [925] 1.0105048 0.5864882 0.2767468 0.2767468 1.4743669 1.4743669 1.4743669 #>  [932] 1.6668887 0.3112286 0.8781847 2.8319408 1.6503255 1.6503255 1.6503255 #>  [939] 0.5718246 1.0917870 0.5752065 0.5752065 0.5752065 0.8825901 0.8825901 #>  [946] 1.2821194 1.2821194 1.2821194 1.2821194 0.9348202 0.9348202 0.5309674 #>  [953] 0.5652406 2.1161057 2.1161057 0.7486245 0.7486245 0.7486245 0.7486245 #>  [960] 0.9689660 0.9689660 0.9689660 0.7605620 0.5735958 1.1532011 1.1532011 #>  [967] 1.1532011 0.7074986 0.7074986 0.7074986 0.6224301 1.3681145 1.3681145 #>  [974] 1.3681145 1.3681145 1.3681145 1.3681145 1.2328185 1.2328185 1.2546556 #>  [981] 1.2546556 1.8735429 1.8735429 1.4117832 1.4117832 0.8974343 0.8974343 #>  [988] 0.8974343 0.8455126 0.5075869 0.5075869 0.5075869 1.6358335 1.6358335 #>  [995] 1.6358335 1.6358335 1.6358335 0.7718534 0.7718534 0.9021329 #>  #>  #> Slot \"options\": #> An object of class \"McmcOptions\" #> Slot \"iterations\": #> [1] 2100 #>  #> Slot \"burnin\": #> [1] 100 #>  #> Slot \"step\": #> [1] 2 #>  #> Slot \"rng_kind\": #> [1] NA #>  #> Slot \"rng_seed\": #> [1] NA #>  #>  # Create some data from the class `DataDual`. plcb <- 0.001 my_data <- DataDual(   w = c(13, 77, 86, 26, 27, 36, 37, 97, 21, 49, 87, 48),   x = c(plcb, 25, 25, 25, plcb, 50, 50, 50, plcb, 100, 100, 100),   y = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L),   doseGrid = c(plcb, seq(25, 300, 25)),   placebo = TRUE,   ID = 1:12,   cohort = c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L) )  # Initialize the CRM model. my_model <- DualEndpointRW(   mean = c(0, 1),   cov = matrix(c(1, 0, 0, 1), nrow = 2),   sigma2W = c(a = 0.1, b = 0.1),   rho = c(a = 1, b = 1),   sigma2betaW = 0.01,   rw1 = TRUE )  # Sample from the posterior distribution. my_options <- McmcOptions(   burnin = 50,   step = 2,   samples = 4,   rng_kind = \"Mersenne-Twister\",   rng_seed = 1 )  samples <- mcmc(data = my_data, model = my_model, options = my_options) samples #> An object of class \"Samples\" #> Slot \"data\": #> $betaW #>          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8] #> [1,] 43.97979 44.41466 44.43972 44.11392 44.62213 45.16043 45.16812 45.21349 #> [2,] 43.15657 42.91989 43.51310 44.68803 44.56862 44.87953 44.94821 45.51928 #> [3,] 63.68104 63.29789 63.85898 64.05148 63.52357 64.10696 64.75609 65.32082 #> [4,] 50.45590 49.98192 49.94248 50.23495 50.54648 50.68016 51.02047 50.21193 #>          [,9]    [,10]    [,11]    [,12]    [,13] #> [1,] 45.17819 44.50411 44.97736 44.98087 45.22721 #> [2,] 45.87216 45.26223 45.42696 45.75288 45.95267 #> [3,] 65.62907 65.52253 66.59065 66.42558 66.77227 #> [4,] 50.02701 49.17010 49.01135 49.45278 49.73688 #>  #> $betaZ #>           [,1]       [,2] #> [1,] -2.507907 0.03496807 #> [2,] -2.507907 0.03496807 #> [3,] -2.507907 0.03496807 #> [4,] -2.507907 0.03496807 #>  #> $delta #>            [,1]        [,2]       [,3]       [,4]      [,5]        [,6] #> [1,]  0.4348687  0.02505645 -0.3258029  0.5082169 0.5382963 0.007687938 #> [2,] -0.2366798  0.59321185  1.1749236 -0.1194105 0.3109172 0.068670722 #> [3,] -0.3831418  0.56109098  0.1924961 -0.5279107 0.5833939 0.649129673 #> [4,] -0.4739807 -0.03943816  0.2924624  0.3115307 0.1336790 0.340314130 #>             [,7]        [,8]       [,9]      [,10]        [,11]     [,12] #> [1,]  0.04537578 -0.03529845 -0.6740836  0.4732525  0.003504127 0.2463430 #> [2,]  0.57107036  0.35288467 -0.6099253  0.1647277  0.325915901 0.1997869 #> [3,]  0.56472919  0.30824406 -0.1065357  1.0681196 -0.165072414 0.3466892 #> [4,] -0.80854374 -0.18491804 -0.8569132 -0.1587477  0.441429357 0.2841035 #>  #> $precW #> [1] 0.0007380298 0.0009402290 0.0006374998 0.0006963610 #>  #> $rho #> [1] 0.1193680 0.1129187 0.2440825 0.1499421 #>  #>  #> Slot \"options\": #> An object of class \"McmcOptions\" #> Slot \"iterations\": #> [1] 58 #>  #> Slot \"burnin\": #> [1] 50 #>  #> Slot \"step\": #> [1] 2 #>  #> Slot \"rng_kind\": #> [1] \"base::Mersenne-Twister\" #>  #> Slot \"rng_seed\": #> [1] 1 #>  #>  # Create some data from the class `DataDual`. plcb <- 0.001 my_data <- DataDual(   w = c(13, 77, 86, 26, 27, 36, 37, 97, 21, 49, 87, 48),   x = c(plcb, 25, 25, 25, plcb, 50, 50, 50, plcb, 100, 100, 100),   y = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L),   doseGrid = c(plcb, seq(25, 300, 25)),   placebo = TRUE,   ID = 1:12,   cohort = c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L) )  # Initialize the CRM model. my_model <- DualEndpointBeta(   mean = c(0, 1),   cov = diag(2),   ref_dose = 2,   use_log_dose = FALSE,   sigma2W = c(a = 1, b = 2),   rho = c(a = 1.5, b = 2.5),   E0 = 2,   Emax = 50,   delta1 = 6,   mode = 9,   ref_dose_beta = my_data@doseGrid[my_data@nGrid] + 10 )  # Sample from the posterior distribution. my_options <- McmcOptions(   burnin = 50,   step = 2,   samples = 4,   rng_kind = \"Mersenne-Twister\",   rng_seed = 1 )  samples <- mcmc(data = my_data, model = my_model, options = my_options) samples #> An object of class \"Samples\" #> Slot \"data\": #> $betaW #>      [,1]     [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #> [1,]    2 2.383076    2    2    2    2    2    2    2     2     2     2     2 #> [2,]    2 2.383076    2    2    2    2    2    2    2     2     2     2     2 #> [3,]    2 2.383076    2    2    2    2    2    2    2     2     2     2     2 #> [4,]    2 2.383076    2    2    2    2    2    2    2     2     2     2     2 #>  #> $betaZ #>           [,1]       [,2] #> [1,] -4.354759 0.09035452 #> [2,] -4.354759 0.09035452 #> [3,] -4.354759 0.09035452 #> [4,] -3.273111 0.08172139 #>  #> $precW #> [1] 0.0004229406 0.0004149886 0.0004264222 0.0003413195 #>  #> $rho #> [1] -0.5116824 -0.5902350 -0.5709147 -0.5230612 #>  #>  #> Slot \"options\": #> An object of class \"McmcOptions\" #> Slot \"iterations\": #> [1] 58 #>  #> Slot \"burnin\": #> [1] 50 #>  #> Slot \"step\": #> [1] 2 #>  #> Slot \"rng_kind\": #> [1] \"base::Mersenne-Twister\" #>  #> Slot \"rng_seed\": #> [1] 1 #>  #>  ##obtain mcmc DLE samples given the data, LogisticIndepBeta (DLE model) and mcmc simulations options ## data must be of 'Data' class data<-Data(x=c(25,50,50,75,100,100,225,300),y=c(0,0,0,0,1,1,1,1),            doseGrid=seq(25,300,25)) #> Used default patient IDs! #> Used best guess cohort indices! ## model must be of 'LogisticIndepBeta' class model<-LogisticIndepBeta(binDLE=c(1.05,1.8),DLEweights=c(3,3),DLEdose=c(25,300),data=data) ## options must be ''McmcOptions' class options<-McmcOptions(burnin=100,step=2,samples=200) set.seed(94) samples<-mcmc(data=data,model=model,options=options) # nolint start ##obtain mcmc efficacy samples given the data, 'Effloglog' model (efficacy model) and ## mcmc simulations options data must be of 'DataDual' class data<-DataDual(x=c(25,50,25,50,75,300,250,150),               y=c(0,0,0,0,0,1,1,0),               w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),               doseGrid=seq(25,300,25),placebo=FALSE) #> Used default patient IDs! #> Used best guess cohort indices! ## model must be of 'Effloglog' class Effmodel<-Effloglog(eff=c(1.223,2.513),eff_dose=c(25,300),nu=c(a=1,b=0.025),data=data)  ## options must be ''McmcOptions' class options<-McmcOptions(burnin=100,step=2,samples=200) set.seed(94) samples<-mcmc(data=data,model=Effmodel,options=options) # nolint end ## obtain mcmc efficacy samples given the data, 'EffFlexi' model (efficacy model) and ## mcmc simulations options ## data must be of 'DataDual' class data <- DataDual(   x = c(25, 50, 25, 50, 75, 300, 250, 150),   y = c(0, 0, 0, 0, 0, 1, 1, 0),   w = c(0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.6, 0.52),   doseGrid = seq(25, 300, 25) ) #> Used default patient IDs! #> Used best guess cohort indices! ## model must be of 'EffFlexi' class  effmodel <- EffFlexi(   eff = c(1.223, 2.513), eff_dose = c(25, 300),   sigma2W = c(a = 0.1, b = 0.1), sigma2betaW = c(a = 20, b = 50), rw1 = FALSE, data = data )  ## options must be ''McmcOptions' class options <- McmcOptions(burnin = 100, step = 2, samples = 200) set.seed(94) samples <- mcmc(data = data, model = effmodel, options = options) ordinal_data <- .DefaultDataOrdinal() ordinal_model <- .DefaultLogisticLogNormalOrdinal() mcmc_options <- .DefaultMcmcOptions()  samples <- mcmc(ordinal_data, ordinal_model, mcmc_options) #> Warning: Unused variable \"y\" in data"},{"path":"https://openpharma.github.io/crmPack/reference/minSize.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"function combines cohort size rules taking minimum sizes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/minSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"minSize(...)  # S4 method for class 'CohortSize' minSize(...)"},{"path":"https://openpharma.github.io/crmPack/reference/minSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"... Objects class CohortSize","code":""},{"path":"https://openpharma.github.io/crmPack/reference/minSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"","text":"combination object class CohortSizeMin","code":""},{"path":"https://openpharma.github.io/crmPack/reference/minSize.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"","text":"minSize(CohortSize): method combining cohort size rules taking minimum","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/minSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"","text":"","code":"# Here is the rule for: #   having cohort of size 1 for doses <30 #   and having cohort of size 3 for doses >=30 mySize1 <- CohortSizeRange(intervals = c(0, 30), cohort_size = c(1, 3))  # Here is the rule for: #   having cohort of size 1 until no DLT were observed #   and having cohort of size 3 as soon as 1 DLT is observed mySize2 <- CohortSizeDLT(intervals = c(0, 1), cohort_size = c(1, 3))  # This is combining the two rules above by taking the minimum of the sample sizes of # the single rules mySize <- minSize(mySize1, mySize2)"},{"path":"https://openpharma.github.io/crmPack/reference/myBayesLogit.html","id":null,"dir":"Reference","previous_headings":"","what":"Do MCMC sampling for Bayesian logistic regression model — myBayesLogit","title":"Do MCMC sampling for Bayesian logistic regression model — myBayesLogit","text":"MCMC sampling Bayesian logistic regression model","code":""},{"path":"https://openpharma.github.io/crmPack/reference/myBayesLogit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do MCMC sampling for Bayesian logistic regression model — myBayesLogit","text":"","code":"myBayesLogit(y, X, m0, P0, options)"},{"path":"https://openpharma.github.io/crmPack/reference/myBayesLogit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do MCMC sampling for Bayesian logistic regression model — myBayesLogit","text":"y 0/1 vector responses X design matrix m0 prior mean vector P0 precision matrix options McmcOptions object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/myBayesLogit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do MCMC sampling for Bayesian logistic regression model — myBayesLogit","text":"matrix samples (samples x parameters)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/names-Samples-method.html","id":null,"dir":"Reference","previous_headings":"","what":"The Names of the Sampled Parameters — names,Samples-method","title":"The Names of the Sampled Parameters — names,Samples-method","text":"method returns names parameters sampled.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/names-Samples-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Names of the Sampled Parameters — names,Samples-method","text":"","code":"# S4 method for class 'Samples' names(x)"},{"path":"https://openpharma.github.io/crmPack/reference/names-Samples-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Names of the Sampled Parameters — names,Samples-method","text":"x (Samples) object samples.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/names-Samples-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Names of the Sampled Parameters — names,Samples-method","text":"","code":"my_samples <- Samples(   data = list(alpha = 1:5, beta = 15:19),   options = McmcOptions(burnin = 2, step = 2, samples = 5) )  names(my_samples) #> [1] \"alpha\" \"beta\""},{"path":"https://openpharma.github.io/crmPack/reference/nextBest.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding the Next Best Dose — nextBest","title":"Finding the Next Best Dose — nextBest","text":"function computes recommended next best dose based corresponding rule nextBest, posterior samples model underlying data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/nextBest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding the Next Best Dose — nextBest","text":"","code":"nextBest(nextBest, doselimit, samples, model, data, ...)  # S4 method for class 'NextBestMTD,numeric,Samples,GeneralModel,Data' nextBest(nextBest, doselimit = Inf, samples, model, data, ...)  # S4 method for class 'NextBestNCRM,numeric,Samples,GeneralModel,Data' nextBest(nextBest, doselimit = Inf, samples, model, data, ...)  # S4 method for class 'NextBestNCRM,numeric,Samples,GeneralModel,DataParts' nextBest(nextBest, doselimit = Inf, samples, model, data, ...)  # S4 method for class 'NextBestNCRMLoss,numeric,Samples,GeneralModel,Data' nextBest(nextBest, doselimit = Inf, samples, model, data, ...)  # S4 method for class 'NextBestThreePlusThree,missing,missing,missing,Data' nextBest(nextBest, doselimit, samples, model, data, ...)  # S4 method for class 'NextBestDualEndpoint,numeric,Samples,DualEndpoint,Data' nextBest(nextBest, doselimit = Inf, samples, model, data, ...)  # S4 method for class 'NextBestMinDist,numeric,Samples,GeneralModel,Data' nextBest(nextBest, doselimit = Inf, samples, model, data, ...)  # S4 method for class 'NextBestInfTheory,numeric,Samples,GeneralModel,Data' nextBest(nextBest, doselimit = Inf, samples, model, data, ...)  # S4 method for class 'NextBestTD,numeric,missing,LogisticIndepBeta,Data' nextBest(nextBest, doselimit = Inf, model, data, in_sim = FALSE, ...)  # S4 method for class 'NextBestTDsamples,numeric,Samples,LogisticIndepBeta,Data' nextBest(nextBest, doselimit = Inf, samples, model, data, in_sim, ...)  # S4 method for class 'NextBestMaxGain,numeric,missing,ModelTox,DataDual' nextBest(   nextBest,   doselimit = Inf,   model,   data,   model_eff,   in_sim = FALSE,   ... )  # S4 method for class 'NextBestMaxGainSamples,numeric,Samples,ModelTox,DataDual' nextBest(   nextBest,   doselimit = Inf,   samples,   model,   data,   model_eff,   samples_eff,   in_sim = FALSE,   ... )  # S4 method for class 'NextBestProbMTDLTE,numeric,Samples,GeneralModel,Data' nextBest(nextBest, doselimit, samples, model, data, ...)  # S4 method for class 'NextBestProbMTDMinDist,numeric,Samples,GeneralModel,Data' nextBest(nextBest, doselimit, samples, model, data, ...)  # S4 method for class 'NextBestOrdinal,numeric,Samples,GeneralModel,Data' nextBest(nextBest, doselimit = Inf, samples, model, data, ...)  # S4 method for class 'NextBestOrdinal,numeric,Samples,LogisticLogNormalOrdinal,DataOrdinal' nextBest(nextBest, doselimit = Inf, samples, model, data, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/nextBest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding the Next Best Dose — nextBest","text":"nextBest (NextBest) rule next best dose. doselimit (number) maximum allowed next dose. infinity (default), essentially dose limit applied course dose recommendation calculation. samples (Samples) posterior samples model parameters given data. model (ModelTox) DLT model. data (Data) data used generate samples. ... additional arguments without method dispatch. in_sim (flag) method used simulations? Default FALSE. flag TRUE target dose estimates (trial end--trial) outside dose grid range, information message printed method. model_eff (Effloglog EffFlexi) efficacy model. samples_eff (Samples) posterior samples model_eff parameters given data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/nextBest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding the Next Best Dose — nextBest","text":"list next best dose recommendation  (element named value) grid defined data, plot depicting recommendation (element named plot). case multiple plots also element named singlePlots included. singlePlots list single plots. additional list elements describing outcome rule can contained .","code":""},{"path":"https://openpharma.github.io/crmPack/reference/nextBest.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Finding the Next Best Dose — nextBest","text":"nextBest(   nextBest = NextBestMTD,   doselimit = numeric,   samples = Samples,   model = GeneralModel,   data = Data ): find next best dose based MTD rule. nextBest(   nextBest = NextBestNCRM,   doselimit = numeric,   samples = Samples,   model = GeneralModel,   data = Data ): find next best dose based NCRM method. additional element probs output's list contains target overdosing probabilities (across doses dose grid) used derivation next best dose. nextBest(   nextBest = NextBestNCRM,   doselimit = numeric,   samples = Samples,   model = GeneralModel,   data = DataParts ): find next best dose based NCRM method two parts trial used. nextBest(   nextBest = NextBestNCRMLoss,   doselimit = numeric,   samples = Samples,   model = GeneralModel,   data = Data ): find next best dose based NCRM method loss function. nextBest(   nextBest = NextBestThreePlusThree,   doselimit = missing,   samples = missing,   model = missing,   data = Data ): find next best dose based 3+3 method. nextBest(   nextBest = NextBestDualEndpoint,   doselimit = numeric,   samples = Samples,   model = DualEndpoint,   data = Data ): find next best dose based dual endpoint model. additional list element probs contains target overdosing probabilities (across doses dose grid) used derivation next best dose. nextBest(   nextBest = NextBestMinDist,   doselimit = numeric,   samples = Samples,   model = GeneralModel,   data = Data ): gives dose dose limit estimated DLT probability closest target dose. nextBest(   nextBest = NextBestInfTheory,   doselimit = numeric,   samples = Samples,   model = GeneralModel,   data = Data ): gives appropriate dose within information theoretic framework. nextBest(   nextBest = NextBestTD,   doselimit = numeric,   samples = missing,   model = LogisticIndepBeta,   data = Data ): find next best dose based DLT responses LogisticIndepBeta model class object without DLT samples. nextBest(   nextBest = NextBestTDsamples,   doselimit = numeric,   samples = Samples,   model = LogisticIndepBeta,   data = Data ): find next best dose based DLT responses LogisticIndepBeta model class object involving DLT samples. nextBest(   nextBest = NextBestMaxGain,   doselimit = numeric,   samples = missing,   model = ModelTox,   data = DataDual ): find next best dose based pseudo DLT model ModelTox Effloglog efficacy model without samples. nextBest(   nextBest = NextBestMaxGainSamples,   doselimit = numeric,   samples = Samples,   model = ModelTox,   data = DataDual ): find next best dose based DLT efficacy responses DLT efficacy samples. nextBest(   nextBest = NextBestProbMTDLTE,   doselimit = numeric,   samples = Samples,   model = GeneralModel,   data = Data ): find next best dose based highest probability toxicity rate less equal target toxicity level. nextBest(   nextBest = NextBestProbMTDMinDist,   doselimit = numeric,   samples = Samples,   model = GeneralModel,   data = Data ): find next best dose based highest probability toxicity rate minimum distance target toxicity level. nextBest(   nextBest = NextBestOrdinal,   doselimit = numeric,   samples = Samples,   model = GeneralModel,   data = Data ): find next best dose ordinal CRM models. nextBest(   nextBest = NextBestOrdinal,   doselimit = numeric,   samples = Samples,   model = LogisticLogNormalOrdinal,   data = DataOrdinal ): find next best dose ordinal CRM models.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/nextBest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding the Next Best Dose — nextBest","text":"","code":"# Example of usage for `NextBestMTD` NextBest class.  # Create the data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   ID = 1:8,   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) )  # Initialize the CRM model used to model the data. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Set-up some MCMC parameters and generate samples from the posterior. my_options <- McmcOptions(burnin = 100, step = 2, samples = 500) my_samples <- mcmc(my_data, my_model, my_options)  # Define the rule for dose increments and calculate the maximum dose allowed. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) ) next_max_dose <- maxDose(my_increments, data = my_data)  # Define the rule which will be used to select the next best dose # based on the 'NextBestMTD' class. mtd_next_best <- NextBestMTD(   target = 0.33,   derive = function(mtd_samples) {     quantile(mtd_samples, probs = 0.25)   } )  # Calculate the next best dose. dose_recommendation <- nextBest(   nextBest = mtd_next_best,   doselimit = next_max_dose,   samples = my_samples,   model = my_model,   data = my_data )  # Example of usage for `NextBestNCRM` NextBest class.  # Create the data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   ID = 1:8,   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) )  # Initialize the CRM model used to model the data. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Set-up some MCMC parameters and generate samples from the posterior. my_options <- McmcOptions(burnin = 100, step = 2, samples = 500) my_samples <- mcmc(my_data, my_model, my_options)  # Define the rule for dose increments and calculate the maximum dose allowed. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) ) next_max_dose <- maxDose(my_increments, data = my_data)  # Define the rule which will be used to select the next best dose # based on the 'NextBestNCRM' class. nrcm_next_best <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Calculate the next best dose. dose_recommendation <- nextBest(   nextBest = nrcm_next_best,   doselimit = next_max_dose,   samples = my_samples,   model = my_model,   data = my_data )  # See the probabilities. dose_recommendation$probs #>       dose target overdose #>  [1,]  0.1  0.000    0.000 #>  [2,]  0.5  0.002    0.000 #>  [3,]  1.5  0.028    0.000 #>  [4,]  3.0  0.068    0.004 #>  [5,]  6.0  0.138    0.026 #>  [6,] 10.0  0.252    0.074 #>  [7,] 12.0  0.268    0.114 #>  [8,] 14.0  0.304    0.142 #>  [9,] 16.0  0.322    0.168 #> [10,] 18.0  0.346    0.198 #> [11,] 20.0  0.320    0.258 #> [12,] 22.0  0.332    0.284 #> [13,] 24.0  0.358    0.304 #> [14,] 26.0  0.370    0.334 #> [15,] 28.0  0.324    0.396 #> [16,] 30.0  0.292    0.450 #> [17,] 32.0  0.306    0.480 #> [18,] 34.0  0.320    0.498 #> [19,] 36.0  0.306    0.536 #> [20,] 38.0  0.290    0.562 #> [21,] 40.0  0.304    0.566 #> [22,] 42.0  0.298    0.582 #> [23,] 44.0  0.274    0.624 #> [24,] 46.0  0.264    0.644 #> [25,] 48.0  0.250    0.666 #> [26,] 50.0  0.242    0.676 #> [27,] 52.0  0.226    0.694 #> [28,] 54.0  0.218    0.712 #> [29,] 56.0  0.216    0.728 #> [30,] 58.0  0.198    0.746 #> [31,] 60.0  0.198    0.746 #> [32,] 62.0  0.172    0.778 #> [33,] 64.0  0.176    0.790 #> [34,] 66.0  0.168    0.800 #> [35,] 68.0  0.178    0.802 #> [36,] 70.0  0.182    0.802 #> [37,] 72.0  0.182    0.802 #> [38,] 74.0  0.168    0.816 #> [39,] 76.0  0.150    0.834 #> [40,] 78.0  0.148    0.836 #> [41,] 80.0  0.134    0.850  # Example of usage for `NextBestNCRM-DataParts` NextBest class.  # Create the data. my_data <- DataParts(   x = c(0.1, 0.5, 1.5),   y = c(0, 0, 0),   ID = 1:3,   cohort = 1:3,   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)),   part = c(1L, 1L, 1L),   nextPart = 1L,   part1Ladder = c(0.1, 0.5, 1.5, 3, 6, 10) )  # Initialize the CRM model used to model the data. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Set-up some MCMC parameters and generate samples from the posterior. my_options <- McmcOptions(burnin = 100, step = 2, samples = 500) my_samples <- mcmc(my_data, my_model, my_options)  # Define the rule for dose increments and calculate the maximum dose allowed. my_increments <- IncrementsRelativeParts(   dlt_start = 0,   clean_start = 1 ) next_max_dose <- maxDose(my_increments, data = my_data)  # Define the rule which will be used to select the next best dose # based on the 'NextBestNCRM' class. nrcm_next_best <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Calculate the next best dose. dose_recommendation <- nextBest(   nextBest = nrcm_next_best,   doselimit = next_max_dose,   samples = my_samples,   model = my_model,   data = my_data )  dose_recommendation #> $value #> [1] 3 #>  #> $plot #> NULL #>   # Example of usage for `NextBestNCRMLoss` NextBest class.  # Create the data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   ID = 1:8,   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) )  # Initialize the CRM model used to model the data. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Set-up some MCMC parameters and generate samples from the posterior. my_options <- McmcOptions(burnin = 100, step = 2, samples = 500) my_samples <- mcmc(my_data, my_model, my_options)  # Define the rule for dose increments and calculate the maximum dose allowed. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) ) next_max_dose <- maxDose(my_increments, data = my_data)  # Define the rule which will be used to select the next best dose # based on the class `NextBestNCRMLoss`. nrcm_loss_next_best <- NextBestNCRMLoss(   target = c(0.2, 0.35),   overdose = c(0.35, 0.6),   unacceptable = c(0.6, 1),   max_overdose_prob = 0.999,   losses = c(1, 0, 1, 2) )  # Calculate the next best dose. dose_recommendation <- nextBest(   nextBest = nrcm_loss_next_best,   doselimit = next_max_dose,   samples = my_samples,   model = my_model,   data = my_data )  # Next best dose. dose_recommendation$value #> [1] 20  # Look at the probabilities. dose_recommendation$probs #>     dose underdosing target excessive unacceptable       mean    std_dev #> 0.1  0.1       0.998  0.002     0.000        0.000 0.01068793 0.02422188 #> 0.5  0.5       0.986  0.014     0.000        0.000 0.02442112 0.04112772 #> 1.5  1.5       0.962  0.036     0.002        0.000 0.04570059 0.06027959 #> 3    3.0       0.932  0.062     0.006        0.000 0.06992275 0.07756630 #> 6    6.0       0.818  0.146     0.036        0.000 0.10951419 0.10006061 #> 10  10.0       0.706  0.198     0.094        0.002 0.15451023 0.11973558 #> 12  12.0       0.644  0.238     0.116        0.002 0.17509581 0.12712890 #> 14  14.0       0.596  0.258     0.144        0.002 0.19474588 0.13341320 #> 16  16.0       0.538  0.266     0.194        0.002 0.21359534 0.13882028 #> 18  18.0       0.496  0.286     0.208        0.010 0.23173382 0.14351171 #> 20  20.0       0.452  0.294     0.240        0.014 0.24922403 0.14760250 #> 22  22.0       0.404  0.318     0.262        0.016 0.26611195 0.15117859 #> 24  24.0       0.358  0.332     0.284        0.026 0.28243248 0.15430988 #> 26  26.0       0.306  0.336     0.320        0.038 0.29821270 0.15705871 #> 28  28.0       0.282  0.332     0.330        0.056 0.31347387 0.15948415 #> 30  30.0       0.244  0.330     0.360        0.066 0.32823277 0.16164283 #> 32  32.0       0.226  0.336     0.342        0.096 0.34250277 0.16358779 #> 34  34.0       0.186  0.342     0.372        0.100 0.35629488 0.16536652 #> 36  36.0       0.168  0.328     0.392        0.112 0.36961862 0.16701921 #> 38  38.0       0.158  0.326     0.390        0.126 0.38248280 0.16857776 #> 40  40.0       0.128  0.320     0.416        0.136 0.39489616 0.17006566 #> 42  42.0       0.120  0.318     0.408        0.154 0.40686784 0.17149870 #> 44  44.0       0.104  0.298     0.418        0.180 0.41840768 0.17288620 #> 46  46.0       0.104  0.274     0.426        0.196 0.42952634 0.17423243 #> 48  48.0       0.100  0.264     0.432        0.204 0.44023535 0.17553805 #> 50  50.0       0.078  0.244     0.456        0.222 0.45054704 0.17680139 #> 52  52.0       0.062  0.252     0.442        0.244 0.46047443 0.17801953 #> 54  54.0       0.054  0.236     0.460        0.250 0.47003102 0.17918908 #> 56  56.0       0.050  0.208     0.464        0.278 0.47923071 0.18030676 #> 58  58.0       0.050  0.202     0.454        0.294 0.48808755 0.18136979 #> 60  60.0       0.046  0.196     0.434        0.324 0.49661563 0.18237609 #> 62  62.0       0.032  0.188     0.450        0.330 0.50482896 0.18332433 #> 64  64.0       0.032  0.180     0.444        0.344 0.51274131 0.18421398 #> 66  66.0       0.032  0.176     0.446        0.346 0.52036612 0.18504523 #> 68  68.0       0.030  0.158     0.452        0.360 0.52771647 0.18581887 #> 70  70.0       0.026  0.160     0.448        0.366 0.53480500 0.18653620 #> 72  72.0       0.026  0.156     0.446        0.372 0.54164384 0.18719893 #> 74  74.0       0.026  0.130     0.456        0.388 0.54824464 0.18780903 #> 76  76.0       0.024  0.128     0.448        0.400 0.55461853 0.18836871 #> 78  78.0       0.024  0.120     0.438        0.418 0.56077613 0.18888026 #> 80  80.0       0.022  0.100     0.452        0.426 0.56672752 0.18934606 #>     posterior_loss #> 0.1          0.998 #> 0.5          0.986 #> 1.5          0.964 #> 3            0.938 #> 6            0.854 #> 10           0.804 #> 12           0.764 #> 14           0.744 #> 16           0.736 #> 18           0.724 #> 20           0.720 #> 22           0.698 #> 24           0.694 #> 26           0.702 #> 28           0.724 #> 30           0.736 #> 32           0.760 #> 34           0.758 #> 36           0.784 #> 38           0.800 #> 40           0.816 #> 42           0.836 #> 44           0.882 #> 46           0.922 #> 48           0.940 #> 50           0.978 #> 52           0.992 #> 54           1.014 #> 56           1.070 #> 58           1.092 #> 60           1.128 #> 62           1.142 #> 64           1.164 #> 66           1.170 #> 68           1.202 #> 70           1.206 #> 72           1.216 #> 74           1.258 #> 76           1.272 #> 78           1.298 #> 80           1.326  # Define another rule (loss function of 3 elements). nrcm_loss_next_best_losses_3 <- NextBestNCRMLoss(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.30,   losses = c(1, 0, 2) )  # Calculate the next best dose. dose_recommendation_losses_3 <- nextBest(   nextBest = nrcm_loss_next_best_losses_3,   doselimit = next_max_dose,   samples = my_samples,   model = my_model,   data = my_data )  # Next best dose. dose_recommendation_losses_3$value #> [1] 12  # Look at the probabilities. dose_recommendation_losses_3$probs #>     dose underdosing target overdose       mean    std_dev posterior_loss #> 0.1  0.1       0.998  0.002    0.000 0.01068793 0.02422188          0.998 #> 0.5  0.5       0.986  0.014    0.000 0.02442112 0.04112772          0.986 #> 1.5  1.5       0.962  0.036    0.002 0.04570059 0.06027959          0.966 #> 3    3.0       0.932  0.062    0.006 0.06992275 0.07756630          0.944 #> 6    6.0       0.818  0.146    0.036 0.10951419 0.10006061          0.890 #> 10  10.0       0.706  0.198    0.096 0.15451023 0.11973558          0.898 #> 12  12.0       0.644  0.238    0.118 0.17509581 0.12712890          0.880 #> 14  14.0       0.596  0.258    0.146 0.19474588 0.13341320          0.888 #> 16  16.0       0.538  0.266    0.196 0.21359534 0.13882028          0.930 #> 18  18.0       0.496  0.286    0.218 0.23173382 0.14351171          0.932 #> 20  20.0       0.452  0.294    0.254 0.24922403 0.14760250          0.960 #> 22  22.0       0.404  0.318    0.278 0.26611195 0.15117859          0.960 #> 24  24.0       0.358  0.332    0.310 0.28243248 0.15430988          0.978 #> 26  26.0       0.306  0.336    0.358 0.29821270 0.15705871          1.022 #> 28  28.0       0.282  0.332    0.386 0.31347387 0.15948415          1.054 #> 30  30.0       0.244  0.330    0.426 0.32823277 0.16164283          1.096 #> 32  32.0       0.226  0.336    0.438 0.34250277 0.16358779          1.102 #> 34  34.0       0.186  0.342    0.472 0.35629488 0.16536652          1.130 #> 36  36.0       0.168  0.328    0.504 0.36961862 0.16701921          1.176 #> 38  38.0       0.158  0.326    0.516 0.38248280 0.16857776          1.190 #> 40  40.0       0.128  0.320    0.552 0.39489616 0.17006566          1.232 #> 42  42.0       0.120  0.318    0.562 0.40686784 0.17149870          1.244 #> 44  44.0       0.104  0.298    0.598 0.41840768 0.17288620          1.300 #> 46  46.0       0.104  0.274    0.622 0.42952634 0.17423243          1.348 #> 48  48.0       0.100  0.264    0.636 0.44023535 0.17553805          1.372 #> 50  50.0       0.078  0.244    0.678 0.45054704 0.17680139          1.434 #> 52  52.0       0.062  0.252    0.686 0.46047443 0.17801953          1.434 #> 54  54.0       0.054  0.236    0.710 0.47003102 0.17918908          1.474 #> 56  56.0       0.050  0.208    0.742 0.47923071 0.18030676          1.534 #> 58  58.0       0.050  0.202    0.748 0.48808755 0.18136979          1.546 #> 60  60.0       0.046  0.196    0.758 0.49661563 0.18237609          1.562 #> 62  62.0       0.032  0.188    0.780 0.50482896 0.18332433          1.592 #> 64  64.0       0.032  0.180    0.788 0.51274131 0.18421398          1.608 #> 66  66.0       0.032  0.176    0.792 0.52036612 0.18504523          1.616 #> 68  68.0       0.030  0.158    0.812 0.52771647 0.18581887          1.654 #> 70  70.0       0.026  0.160    0.814 0.53480500 0.18653620          1.654 #> 72  72.0       0.026  0.156    0.818 0.54164384 0.18719893          1.662 #> 74  74.0       0.026  0.130    0.844 0.54824464 0.18780903          1.714 #> 76  76.0       0.024  0.128    0.848 0.55461853 0.18836871          1.720 #> 78  78.0       0.024  0.120    0.856 0.56077613 0.18888026          1.736 #> 80  80.0       0.022  0.100    0.878 0.56672752 0.18934606          1.778  # Example of usage for `NextBestThreePlusThree` NextBest class.  # Create the data. my_data <- Data(   x = c(5, 5, 5, 10, 10, 10),   y = c(0, 0, 0, 0, 1, 0),   ID = 1:6,   cohort = c(0, 0, 0, 1, 1, 1),   doseGrid = c(0.1, 0.5, 1.5, 3, 5, seq(from = 10, to = 80, by = 2)) )  # The rule to select the next best dose will be based on the 3+3 method. my_next_best <- NextBestThreePlusThree()  # Calculate the next best dose. dose_recommendation <- nextBest(my_next_best, data = my_data) # Example of usage for `NextBestDualEndpoint` NextBest class.  # Create the data. my_data <- DataDual(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10, 20, 20, 20, 40, 40, 40, 50, 50, 50),   y = c(0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1),   ID = 1:17,   cohort = c(1L, 2L, 3L, 4L, 5L, 6L, 6L, 6L, 7L, 7L, 7L, 8L, 8L, 8L, 9L, 9L, 9L),   w = c(     0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.55, 0.6, 0.52, 0.54,     0.56, 0.43, 0.41, 0.39, 0.34, 0.38, 0.21   ),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) )  # Initialize the Dual-Endpoint model (in this case RW1). my_model <- DualEndpointRW(   mean = c(0, 1),   cov = matrix(c(1, 0, 0, 1), nrow = 2),   sigma2betaW = 0.01,   sigma2W = c(a = 0.1, b = 0.1),   rho = c(a = 1, b = 1),   rw1 = TRUE )  # Set-up some MCMC parameters and generate samples from the posterior. my_options <- McmcOptions(burnin = 100, step = 2, samples = 500) my_samples <- mcmc(my_data, my_model, my_options)  # Define the rule for dose increments and calculate the maximum dose allowed. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) ) next_max_dose <- maxDose(my_increments, data = my_data)  # Define the rule which will be used to select the next best dose. In this case, # target a dose achieving at least 0.9 of maximum biomarker level (efficacy) # and with a probability below 0.25 that prob(DLT)>0.35 (safety). de_next_best <- NextBestDualEndpoint(   target = c(0.9, 1),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Calculate the next best dose. dose_recommendation <- nextBest(   nextBest = de_next_best,   doselimit = next_max_dose,   samples = my_samples,   model = my_model,   data = my_data )  # See the probabilities. dose_recommendation$probs #>       dose target overdose #>  [1,]  0.1  0.006    0.000 #>  [2,]  0.5  0.012    0.000 #>  [3,]  1.5  0.028    0.000 #>  [4,]  3.0  0.034    0.000 #>  [5,]  6.0  0.064    0.008 #>  [6,] 10.0  0.106    0.064 #>  [7,] 12.0  0.120    0.184 #>  [8,] 14.0  0.122    0.206 #>  [9,] 16.0  0.034    0.278 #> [10,] 18.0  0.034    0.452 #> [11,] 20.0  0.012    0.550 #> [12,] 22.0  0.022    0.640 #> [13,] 24.0  0.024    0.658 #> [14,] 26.0  0.036    0.782 #> [15,] 28.0  0.022    0.844 #> [16,] 30.0  0.018    0.882 #> [17,] 32.0  0.016    0.896 #> [18,] 34.0  0.020    0.920 #> [19,] 36.0  0.012    0.960 #> [20,] 38.0  0.004    0.976 #> [21,] 40.0  0.000    0.976 #> [22,] 42.0  0.002    0.976 #> [23,] 44.0  0.000    0.998 #> [24,] 46.0  0.004    0.998 #> [25,] 48.0  0.000    0.998 #> [26,] 50.0  0.000    0.998 #> [27,] 52.0  0.002    1.000 #> [28,] 54.0  0.002    1.000 #> [29,] 56.0  0.002    1.000 #> [30,] 58.0  0.006    1.000 #> [31,] 60.0  0.012    1.000 #> [32,] 62.0  0.012    1.000 #> [33,] 64.0  0.012    1.000 #> [34,] 66.0  0.022    1.000 #> [35,] 68.0  0.022    1.000 #> [36,] 70.0  0.022    1.000 #> [37,] 72.0  0.014    1.000 #> [38,] 74.0  0.024    1.000 #> [39,] 76.0  0.028    1.000 #> [40,] 78.0  0.040    1.000 #> [41,] 80.0  0.028    1.000  # Joint plot. print(dose_recommendation$plot)   # Show customization of single plot. variant1 <- dose_recommendation$singlePlots$plot1 + xlim(0, 20) print(variant1) #> Warning: Removed 31 rows containing missing values or values outside the scale range #> (`geom_bar()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_vline()`).   # Example of usage for `NextBestTD` NextBest class. my_data <- Data(   x = c(25, 50, 50, 75, 150, 200, 225, 300),   y = c(0, 0, 0, 0, 1, 1, 1, 1),   ID = 1:8,   cohort = c(1L, 2L, 2L, 3L, 4L, 5L, 6L, 7L),   doseGrid = seq(from = 25, to = 300, by = 25) )  my_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = my_data )  # Target probabilities of the occurrence of a DLT during trial and # at the end of the trial are defined as 0.35 and 0.3, respectively. td_next_best <- NextBestTD(prob_target_drt = 0.35, prob_target_eot = 0.3)  # doselimit is the maximum allowable dose level to be given to subjects. dose_recommendation <- nextBest(   nextBest = td_next_best,   doselimit = max(my_data@doseGrid),   model = my_model,   data = my_data )  dose_recommendation$next_dose_drt #> [1] 50 dose_recommendation$plot  # Example of usage for `NextBestTDsamples` NextBest class. my_data <- Data(   x = c(25, 50, 50, 75, 150, 200, 225, 300),   y = c(0, 0, 0, 0, 1, 1, 1, 1),   ID = 1:8,   cohort = c(1L, 2L, 2L, 3L, 4L, 5L, 6L, 7L),   doseGrid = seq(from = 25, to = 300, by = 25) )  my_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = my_data )  # Set-up some MCMC parameters and generate samples. my_options <- McmcOptions(burnin = 100, step = 2, samples = 800) my_samples <- mcmc(my_data, my_model, my_options)  # Target probabilities of the occurrence of a DLT during trial and # at the end of the trial are defined as 0.35 and 0.3, respectively. # 'derive' is specified such that the 30% posterior quantile of the TD35 and # TD30 samples will be used as TD35 and TD30 estimates. tds_next_best <- NextBestTDsamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, probs = 0.3))   } )  # doselimit is the maximum allowable dose level to be given to subjects. dose_recommendation <- nextBest(   nextBest = tds_next_best,   doselimit = max(my_data@doseGrid),   samples = my_samples,   model = my_model,   data = my_data )  dose_recommendation$next_dose_drt #> [1] 50 dose_recommendation$plot #> Warning: Some data points are outside of `bounds`. Removing them. #> Warning: Some data points are outside of `bounds`. Removing them.   # Example of usage for `NextBestMaxGain` NextBest class.  # Create the data. my_data <- DataDual(   x = c(25, 50, 25, 50, 75, 300, 250, 150),   y = c(0, 0, 0, 0, 0, 1, 1, 0),   ID = 1:8,   cohort = 1:8,   w = c(0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.6, 0.52),   doseGrid = seq(25, 300, 25),   placebo = FALSE )  # 'ModelTox' DLT model, e.g 'LogisticIndepBeta'. my_model_dlt <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = my_data )  # 'ModelEff' efficacy model, e.g. 'Effloglog'. my_model_eff <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = my_data )  # Target probabilities of the occurrence of a DLT during trial and at the # end of trial are defined as 0.35 and 0.3, respectively. mg_next_best <- NextBestMaxGain(   prob_target_drt = 0.35,   prob_target_eot = 0.3 )  # doselimit is the maximum allowable dose level to be given to subjects. dose_recommendation <- nextBest(   nextBest = mg_next_best,   doselimit = 300,   model = my_model_dlt,   model_eff = my_model_eff,   data = my_data )  dose_recommendation$next_dose #> [1] 75 dose_recommendation$plot   # Example of usage for `NextBestMaxGainSamples` NextBest class.  # Create the data. my_data <- DataDual(   x = c(25, 50, 25, 50, 75, 300, 250, 150),   y = c(0, 0, 0, 0, 0, 1, 1, 0),   w = c(0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.6, 0.52),   ID = 1:8,   cohort = 1:8,   doseGrid = seq(25, 300, 25),   placebo = FALSE )  # 'ModelTox' DLT model, e.g 'LogisticIndepBeta'. my_model_dlt <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = my_data )  # 'ModelEff' efficacy model, e.g 'Effloglog'. my_model_effll <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = my_data )  # Set-up some MCMC parameters and generate samples from the posterior. my_options <- McmcOptions(burnin = 100, step = 2, samples = 500) my_samples_dlt <- mcmc(my_data, my_model_dlt, my_options) my_samples_effll <- mcmc(my_data, my_model_effll, my_options)  # Target probabilities of the occurrence of a DLT during trial and at the end of # trial are defined as 0.35 and 0.3, respectively. # Use 30% posterior quantile of the TD35 and TD30 samples as estimates of TD35 # and TD30. # Use 50% posterior quantile of the Gstar (the dose which gives the maxim gain value) # samples as Gstar estimate. mgs_next_best <- NextBestMaxGainSamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, prob = 0.3))   },   mg_derive = function(mg_samples) {     as.numeric(quantile(mg_samples, prob = 0.5))   } )  dose_recommendation <- nextBest(   nextBest = mgs_next_best,   doselimit = max(my_data@doseGrid),   samples = my_samples_dlt,   model = my_model_dlt,   data = my_data,   model_eff = my_model_effll,   samples_eff = my_samples_effll )  dose_recommendation$next_dose #> [1] 75 dose_recommendation$plot   # Now using the 'EffFlexi' class efficacy model:  my_model_effflexi <- EffFlexi(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   sigma2W = c(a = 0.1, b = 0.1),   sigma2betaW = c(a = 20, b = 50),   rw1 = FALSE,   data = my_data )  my_samples_effflexi <- mcmc(my_data, my_model_effflexi, my_options)  dose_recommendation <- nextBest(   nextBest = mgs_next_best,   doselimit = max(my_data@doseGrid),   samples = my_samples_dlt,   model = my_model_dlt,   data = my_data,   model_eff = my_model_effflexi,   samples_eff = my_samples_effflexi )  dose_recommendation$next_dose #> [1] 75 dose_recommendation$plot # Example of usage for `NextBestProbMTDLTE` NextBest class.  # Create the data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   ID = 1:8,   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) )  # Initialize the CRM model used to model the data. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Set-up some MCMC parameters and generate samples from the posterior. my_options <- McmcOptions(burnin = 100, step = 2, samples = 500) my_samples <- mcmc(my_data, my_model, my_options)  # Define the rule for dose increments and calculate the maximum dose allowed. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) ) next_max_dose <- maxDose(my_increments, data = my_data)  # Define the rule which will be used to select the next best dose # based on the 'NextBestProbMTDLTE' class. nb_mtd_lte <- NextBestProbMTDLTE(target = 0.33)  # Calculate the next best dose. dose_recommendation <- nextBest(   nextBest = nb_mtd_lte,   doselimit = next_max_dose,   samples = my_samples,   model = my_model,   data = my_data ) # Example of usage for `NextBestProbMTDMinDist` NextBest class.  # Create the data. my_data <- Data(   x = c(1.5, 1.5, 1.5, 2.5, 2.5, 2.5, 3.5, 3.5, 3.5),   y = c(0, 0, 0, 0, 0, 0, 1, 1, 0),   ID = 1:9,   cohort = c(1, 1, 1, 2, 2, 2, 3, 3, 3),   doseGrid = c(1.5, 2.5, 3.5, 4.5, 6, 7) )  # Initialize the CRM model used to model the data. my_model <- my_model <- LogisticKadaneBetaGamma(   theta = 0.3,   xmin = 1.5,   xmax = 7,   alpha = 1,   beta = 19,   shape = 0.5625,   rate = 0.125 )  # Set-up some MCMC parameters and generate samples from the posterior. my_options <- McmcOptions(burnin = 100, step = 2, samples = 500) my_samples <- mcmc(my_data, my_model, my_options)  # Define the rule for dose increments and calculate the maximum dose allowed. my_increments <- IncrementsDoseLevels(levels = 1)  next_max_dose <- maxDose(my_increments, data = my_data)  # Define the rule which will be used to select the next best dose # based on the 'NextBestProbMTDMinDist' class. nb_mtd_min_dist <- NextBestProbMTDMinDist(target = 0.3)  # Calculate the next best dose. dose_recommendation <- nextBest(   nextBest = nb_mtd_min_dist,   doselimit = next_max_dose,   samples = my_samples,   model = my_model,   data = my_data ) ordinal_data <- .DefaultDataOrdinal() ordinal_model <- .DefaultLogisticLogNormalOrdinal() options <- .DefaultMcmcOptions() ordinal_samples <- mcmc(ordinal_data, ordinal_model, options) #> Warning: Unused variable \"y\" in data  nextBest(   nextBest = NextBestOrdinal(2L, .DefaultNextBestNCRM()),   samples = ordinal_samples,   doselimit = Inf,   model = ordinal_model,   data = ordinal_data )  #> $value #> [1] 60 #>  #> $plot #>  #> $singlePlots #> $singlePlots$plot1  #>  #> $singlePlots$plot2 #>  #>  #> $probs #>       dose target overdose #>  [1,]   10  0.000    0.000 #>  [2,]   20  0.000    0.000 #>  [3,]   30  0.001    0.000 #>  [4,]   40  0.000    0.001 #>  [5,]   50  0.019    0.002 #>  [6,]   60  0.223    0.134 #>  [7,]   70  0.172    0.496 #>  [8,]   80  0.109    0.659 #>  [9,]   90  0.088    0.733 #> [10,]  100  0.073    0.784 #>  ordinal_data <- .DefaultDataOrdinal() ordinal_model <- .DefaultLogisticLogNormalOrdinal() options <- .DefaultMcmcOptions() ordinal_samples <- mcmc(ordinal_data, ordinal_model, options) #> Warning: Unused variable \"y\" in data  nextBest(   nextBest = NextBestOrdinal(2L, .DefaultNextBestNCRM()),   samples = ordinal_samples,   doselimit = Inf,   model = ordinal_model,   data = ordinal_data )  #> $value #> [1] 60 #>  #> $plot #>  #> $singlePlots #> $singlePlots$plot1  #>  #> $singlePlots$plot2  #>  #>  #> $probs #>       dose target overdose #>  [1,]   10  0.000    0.000 #>  [2,]   20  0.000    0.000 #>  [3,]   30  0.001    0.000 #>  [4,]   40  0.001    0.000 #>  [5,]   50  0.016    0.002 #>  [6,]   60  0.217    0.132 #>  [7,]   70  0.171    0.478 #>  [8,]   80  0.110    0.651 #>  [9,]   90  0.094    0.743 #> [10,]  100  0.083    0.782 #>"},{"path":"https://openpharma.github.io/crmPack/reference/ngrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of Doses in Grid — ngrid","title":"Number of Doses in Grid — ngrid","text":"function gets number doses grid. User can choose whether placebo dose () counted .","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ngrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of Doses in Grid — ngrid","text":"","code":"ngrid(object, ignore_placebo = TRUE, ...)  # S4 method for class 'Data' ngrid(object, ignore_placebo = TRUE, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/ngrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of Doses in Grid — ngrid","text":"object (Data) object dose grid. ignore_placebo (flag) placebo dose () counted? ... arguments passed class-specific methods.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ngrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of Doses in Grid — ngrid","text":"integer number doses grid.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/ngrid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of Doses in Grid — ngrid","text":"","code":"my_data <- Data(   x = c(10, 50, 90, 100, 0.001, 20, 30, 30),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   ID = 1:8,   cohort = c(1L, 2L, 3L, 4L, 5L, 5L, 6L, 6L),   doseGrid = c(0.001, seq(from = 10, to = 100, by = 10)),   placebo = TRUE ) ngrid(my_data) #> [1] 10 ngrid(my_data, ignore_placebo = FALSE) #> [1] 11"},{"path":"https://openpharma.github.io/crmPack/reference/or-Stopping-Stopping.html","id":null,"dir":"Reference","previous_headings":"","what":"The method combining two atomic stopping rules — or-Stopping-Stopping","title":"The method combining two atomic stopping rules — or-Stopping-Stopping","text":"method combining two atomic stopping rules","code":""},{"path":"https://openpharma.github.io/crmPack/reference/or-Stopping-Stopping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The method combining two atomic stopping rules — or-Stopping-Stopping","text":"","code":"# S4 method for class 'Stopping,Stopping' e1 | e2"},{"path":"https://openpharma.github.io/crmPack/reference/or-Stopping-Stopping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method combining two atomic stopping rules — or-Stopping-Stopping","text":"e1 First Stopping object e2 Second Stopping object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/or-Stopping-Stopping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The method combining two atomic stopping rules — or-Stopping-Stopping","text":"StoppingAny object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/or-Stopping-Stopping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The method combining two atomic stopping rules — or-Stopping-Stopping","text":"","code":"## Example of combining two atomic stopping rules with an OR ('|') operator  myStopping1 <- StoppingMinCohorts(nCohorts=3) myStopping2 <- StoppingTargetProb(target=c(0.2, 0.35),                                   prob=0.5)  myStopping <- myStopping1 | myStopping2"},{"path":"https://openpharma.github.io/crmPack/reference/or-Stopping-StoppingAny.html","id":null,"dir":"Reference","previous_headings":"","what":"The method combining a stopping list and an atomic — or-Stopping-StoppingAny","title":"The method combining a stopping list and an atomic — or-Stopping-StoppingAny","text":"method combining stopping list atomic","code":""},{"path":"https://openpharma.github.io/crmPack/reference/or-Stopping-StoppingAny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The method combining a stopping list and an atomic — or-Stopping-StoppingAny","text":"","code":"# S4 method for class 'StoppingAny,Stopping' e1 | e2"},{"path":"https://openpharma.github.io/crmPack/reference/or-Stopping-StoppingAny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method combining a stopping list and an atomic — or-Stopping-StoppingAny","text":"e1 StoppingAny object e2 Stopping object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/or-Stopping-StoppingAny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The method combining a stopping list and an atomic — or-Stopping-StoppingAny","text":"modified StoppingAny object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/or-Stopping-StoppingAny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The method combining a stopping list and an atomic — or-Stopping-StoppingAny","text":"","code":"## Example of combining a list of stopping rules with an atomic stopping rule ## with an OR ('|') operator  myStopping1 <- StoppingMinCohorts(nCohorts=3) myStopping2 <- StoppingTargetProb(target=c(0.2, 0.35),                                   prob=0.5)  myStopping3 <- StoppingMinPatients(nPatients=20)  myStopping <- (myStopping1 & myStopping2 ) | myStopping3"},{"path":"https://openpharma.github.io/crmPack/reference/or-StoppingAny-Stopping.html","id":null,"dir":"Reference","previous_headings":"","what":"The method combining an atomic and a stopping list — or-StoppingAny-Stopping","title":"The method combining an atomic and a stopping list — or-StoppingAny-Stopping","text":"method combining atomic stopping list","code":""},{"path":"https://openpharma.github.io/crmPack/reference/or-StoppingAny-Stopping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The method combining an atomic and a stopping list — or-StoppingAny-Stopping","text":"","code":"# S4 method for class 'Stopping,StoppingAny' e1 | e2"},{"path":"https://openpharma.github.io/crmPack/reference/or-StoppingAny-Stopping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method combining an atomic and a stopping list — or-StoppingAny-Stopping","text":"e1 Stopping object e2 StoppingAny object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/or-StoppingAny-Stopping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The method combining an atomic and a stopping list — or-StoppingAny-Stopping","text":"modified StoppingAny object","code":""},{"path":"https://openpharma.github.io/crmPack/reference/or-StoppingAny-Stopping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The method combining an atomic and a stopping list — or-StoppingAny-Stopping","text":"","code":"## Example of combining an atomic stopping rule with a list of stopping rules ## with an OR ('|') operator  myStopping1 <- StoppingMinCohorts(nCohorts=3) myStopping2 <- StoppingTargetProb(target=c(0.2, 0.35),                                   prob=0.5)  myStopping3 <- StoppingMinPatients(nPatients=20)  myStopping <-  myStopping3 | (myStopping1 & myStopping2 )"},{"path":"https://openpharma.github.io/crmPack/reference/pinvGamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the distribution function of Inverse gamma distribution — pinvGamma","title":"Compute the distribution function of Inverse gamma distribution — pinvGamma","text":"Compute distribution function Inverse gamma distribution","code":""},{"path":"https://openpharma.github.io/crmPack/reference/pinvGamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the distribution function of Inverse gamma distribution — pinvGamma","text":"","code":"pinvGamma(q, a, b, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://openpharma.github.io/crmPack/reference/pinvGamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the distribution function of Inverse gamma distribution — pinvGamma","text":"q vector quantiles shape parameter inverse gamma distribution b scale parameter inverse gamma distribution lower.tail logical; TRUE (default), probabilities P(X  > x), otherwise, P(X <= x). log.p TRUE, probabilities/densities p returned log(p)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://openpharma.github.io/crmPack/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Data-ModelTox-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of the fitted dose-tox based with a given pseudo DLE model and data without samples — plot,Data,ModelTox-method","title":"Plot of the fitted dose-tox based with a given pseudo DLE model and data without samples — plot,Data,ModelTox-method","text":"Plot fitted dose-tox based given pseudo DLE model data without samples","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Data-ModelTox-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of the fitted dose-tox based with a given pseudo DLE model and data without samples — plot,Data,ModelTox-method","text":"","code":"# S4 method for class 'Data,ModelTox' plot(   x,   y,   xlab = \"Dose level\",   ylab = \"Probability of DLE\",   showLegend = TRUE,   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/plot-Data-ModelTox-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of the fitted dose-tox based with a given pseudo DLE model and data without samples — plot,Data,ModelTox-method","text":"x data Data class object y model ModelTox class object xlab x axis label ylab y axis label showLegend legend shown? (default) ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Data-ModelTox-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of the fitted dose-tox based with a given pseudo DLE model and data without samples — plot,Data,ModelTox-method","text":"returns ggplot object dose-DLE model plot","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Data-ModelTox-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of the fitted dose-tox based with a given pseudo DLE model and data without samples — plot,Data,ModelTox-method","text":"","code":"## plot the dose-DLE curve given a pseudo DLE model using data without samples ## data must be of 'Data' class ## define the data data <- Data(   x = c(25, 50, 50, 75, 100, 100, 225, 300),   y = c(0, 0, 0, 0, 1, 1, 1, 1),   ID = 1L:8L,   cohort = as.integer(c(1, 2, 2, 3, 4, 4, 5, 6)),   doseGrid = seq(25, 300, 25) ) ## model must be from 'ModelTox' class e.g 'LogisticIndepBeta' class model ## define the model (see LogisticIndepBeta example) model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = data ) ## plot the dose-DLE curve ## 'x' is the data and 'y' is the model in plot plot(x = data, y = model)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-Data.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function for the Plot Method of the Data and DataOrdinal Classes — h_plot_data_dataordinal","title":"Helper Function for the Plot Method of the Data and DataOrdinal Classes — h_plot_data_dataordinal","text":"method creates plot Data  DataOrdinal objects.  method creates plot Data object.  method creates plot DataOrdinal object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function for the Plot Method of the Data and DataOrdinal Classes — h_plot_data_dataordinal","text":"","code":"h_plot_data_dataordinal(   x,   blind = FALSE,   legend = TRUE,   tox_labels = c(Yes = \"red\", No = \"black\"),   tox_shapes = c(Yes = 17L, No = 16L),   ... )  # S4 method for class 'Data,missing' plot(x, y, blind = FALSE, legend = TRUE, ...)  # S4 method for class 'DataOrdinal,missing' plot(   x,   y,   blind = FALSE,   legend = TRUE,   tox_labels = NULL,   tox_shapes = NULL,   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/plot-Data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function for the Plot Method of the Data and DataOrdinal Classes — h_plot_data_dataordinal","text":"x (DataOrdinal) object want plot. blind (flag) indicates whether blind data. TRUE, placebo subjects reported level active dose level corresponding cohort, DLTs always assigned first subjects cohort. legend (flag) whether legend added. tox_labels (named list character) labels toxicity categories. tox_shapes (names list integers) symbols used identify toxicity categories. ... used. y (missing) missing object, compatibility generic function.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function for the Plot Method of the Data and DataOrdinal Classes — h_plot_data_dataordinal","text":"ggplot2 object. ggplot2 object. ggplot2 object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Helper Function for the Plot Method of the Data and DataOrdinal Classes — h_plot_data_dataordinal","text":"default values tox_shapes tox_labels result DLTs displayed red triangles responses black circles. 9 toxicity categories, toxicity symbols must specified manually. 5 toxicity categories, toxicity labels must specified manually.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function for the Plot Method of the Data and DataOrdinal Classes — h_plot_data_dataordinal","text":"","code":"# Create some data of class 'Data'. my_data <- Data(   x = c(0.001, 0.1, 0.1, 0.5, 0.001, 3, 3, 0.001, 10, 10, 10),   y = c(0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0),   cohort = c(1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4),   doseGrid = c(0.001, 0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)),   placeb = TRUE ) #> Used default patient IDs!  # Plot the data. plot(my_data)  data <- DataOrdinal(   x = c(10, 20, 30, 40, 50, 50, 50, 60, 60, 60),   y = as.integer(c(0, 0, 0, 0, 0, 1, 0, 0, 1, 2)),   ID = 1L:10L,   cohort = as.integer(c(1:4, 5, 5, 5, 6, 6, 6)),   doseGrid = c(seq(from = 10, to = 100, by = 10)),   yCategories = c(\"No tox\" = 0L, \"Sub-tox AE\" = 1L, \"DLT\" = 2L),   placebo = FALSE )  plot(data)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDA-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Method for the DataDA Class — plot,DataDA,missing-method","title":"Plot Method for the DataDA Class — plot,DataDA,missing-method","text":"method creates plot DataDA object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDA-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Method for the DataDA Class — plot,DataDA,missing-method","text":"","code":"# S4 method for class 'DataDA,missing' plot(x, y, blind = FALSE, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDA-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Method for the DataDA Class — plot,DataDA,missing-method","text":"x (DataDA) object want plot. y (missing) missing object, compatibility generic function. blind (flag) indicates whether blind data. TRUE, placebo subjects reported level active dose level corresponding cohort, DLTs always assigned first subjects cohort. ... passed first inherited method plot current method.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDA-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Method for the DataDA Class — plot,DataDA,missing-method","text":"ggplot2 object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDA-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Method for the DataDA Class — plot,DataDA,missing-method","text":"","code":"# Create some data of class 'DataDA'. my_data <- DataDA(   u = c(42, 30, 15, 5, 20, 25, 30, 60),   t0 = c(0, 15, 30, 40, 55, 70, 75, 85),   Tmax = 60,   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 1, 1, 0, 0, 1, 0),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Plot the data. plot(my_data)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDual-ModelEff-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of the fitted dose-efficacy based with a given pseudo efficacy model and data without samples — plot,DataDual,ModelEff-method","title":"Plot of the fitted dose-efficacy based with a given pseudo efficacy model and data without samples — plot,DataDual,ModelEff-method","text":"Plot fitted dose-efficacy based given pseudo efficacy model data without samples","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDual-ModelEff-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of the fitted dose-efficacy based with a given pseudo efficacy model and data without samples — plot,DataDual,ModelEff-method","text":"","code":"# S4 method for class 'DataDual,ModelEff' plot(   x,   y,   ...,   xlab = \"Dose level\",   ylab = \"Expected Efficacy\",   showLegend = TRUE )"},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDual-ModelEff-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of the fitted dose-efficacy based with a given pseudo efficacy model and data without samples — plot,DataDual,ModelEff-method","text":"x data DataDual class object y model ModelEff class object ... used xlab x axis label ylab y axis label showLegend legend shown? (default)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDual-ModelEff-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of the fitted dose-efficacy based with a given pseudo efficacy model and data without samples — plot,DataDual,ModelEff-method","text":"returns ggplot object dose-efficacy model plot","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDual-ModelEff-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of the fitted dose-efficacy based with a given pseudo efficacy model and data without samples — plot,DataDual,ModelEff-method","text":"","code":"# nolint start  ##plot the dose-efficacy curve given a pseudo efficacy model using data without samples ##data must be of 'DataDual' class ##define the data data<-DataDual(x=c(25,50,50,75,100,100,225,300),y=c(0,0,0,0,1,1,1,1),                w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),                doseGrid=seq(25,300,25),placebo=FALSE) #> Used default patient IDs! #> Used best guess cohort indices! ##model must be from 'ModelEff' class e.g 'Effloglog' class model ##define the model (see Effloglog example) Effmodel<-Effloglog(eff=c(1.223,2.513),eff_dose=c(25,300),nu=c(a=1,b=0.025),data=data) ## plot the dose-efficacy curve ## 'x' is the data and 'y' is the model in plot plot(x=data,y=Effmodel)   # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDual-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Method for the DataDual Class — plot,DataDual,missing-method","title":"Plot Method for the DataDual Class — plot,DataDual,missing-method","text":"method creates plot DataDual object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDual-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Method for the DataDual Class — plot,DataDual,missing-method","text":"","code":"# S4 method for class 'DataDual,missing' plot(x, y, blind = FALSE, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDual-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Method for the DataDual Class — plot,DataDual,missing-method","text":"x (DataDual) object want plot. y (missing) missing object, compatibility generic function. blind (flag) indicates whether blind data. TRUE, placebo subjects reported level active dose level corresponding cohort, DLTs always assigned first subjects cohort. ... passed first inherited method plot current method.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDual-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Method for the DataDual Class — plot,DataDual,missing-method","text":"ggplot2 object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DataDual-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Method for the DataDual Class — plot,DataDual,missing-method","text":"","code":"# Create some data of class 'DataDual'. my_data <- DataDual(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   w = rnorm(8),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Plot the data. plot(my_data)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-DualSimulations-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot dual-endpoint simulations — plot,DualSimulations,missing-method","title":"Plot dual-endpoint simulations — plot,DualSimulations,missing-method","text":"plot method can applied DualSimulations objects order summarize graphically. addition standard plot types, sigma2W Plot boxplot final biomarker variance estimates simulated trials rho Plot boxplot final correlation estimates simulated trials","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DualSimulations-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot dual-endpoint simulations — plot,DualSimulations,missing-method","text":"","code":"# S4 method for class 'DualSimulations,missing' plot(x, y, type = c(\"trajectory\", \"dosesTried\", \"sigma2W\", \"rho\"), ...)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-DualSimulations-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot dual-endpoint simulations — plot,DualSimulations,missing-method","text":"x DualSimulations object want plot y missing type type plots want obtain. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DualSimulations-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot dual-endpoint simulations — plot,DualSimulations,missing-method","text":"single ggplot object single plot asked , otherwise gridExtra{gTree} object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DualSimulations-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot dual-endpoint simulations — plot,DualSimulations,missing-method","text":"","code":"# Define the dose-grid. emptydata <- DataDual(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))  # Create some data. my_data <- DataDual(   x = c(     0.1, 0.5, 1.5, 3, 6, 10, 10, 10,     20, 20, 20, 40, 40, 40, 50, 50, 50   ),   y = c(     0, 0, 0, 0, 0, 0, 1, 0,     0, 1, 1, 0, 0, 1, 0, 1, 1   ),   ID = 1:17,   cohort = c(1L, 2L, 3L, 4L, 5L, 6L, 6L, 6L, 7L, 7L, 7L, 8L, 8L, 8L, 9L, 9L, 9L),   w = c(     0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.55, 0.6,     0.52, 0.54, 0.56, 0.43, 0.41, 0.39, 0.34, 0.38, 0.21   ),   doseGrid = c(     0.1, 0.5, 1.5, 3, 6,     seq(from = 10, to = 80, by = 2)   ) )  # Initialize the CRM model. my_model <- DualEndpointRW(   mean = c(0, 1),   cov = matrix(c(1, 0, 0, 1), nrow = 2),   sigma2betaW = 0.01,   sigma2W = c(a = 0.1, b = 0.1),   rho = c(a = 1, b = 1),   rw1 = TRUE )  # Choose the rule for selecting the next dose. my_next_best <- NextBestDualEndpoint(   target = c(0.9, 1),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort-size mySize1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) mySize2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) mySize <- maxSize(mySize1, mySize2)  # Choose the rule for stopping myStopping4 <- StoppingTargetBiomarker(   target = c(0.9, 1),   prob = 0.5 ) myStopping <- myStopping4 | StoppingMinPatients(40)  my_size1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) my_size2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) my_size <- maxSize(my_size1, my_size2)  # Choose the rule for stopping my_stopping4 <- StoppingTargetBiomarker(   target = c(0.9, 1),   prob = 0.5 ) my_stopping <- my_stopping4 | StoppingMinPatients(40) | StoppingMissingDose()  # Choose the rule for dose increments my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design  my_design <- DualDesign(   model = my_model,   data = emptydata,   nextBest = my_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = CohortSizeConst(3),   startingDose = 3 )  # Define scenarios for the TRUE toxicity and efficacy profiles. beta_mod <- function(dose, e0, eMax, delta1, delta2, scal) {   maxDens <- (delta1^delta1) * (delta2^delta2) / ((delta1 + delta2)^(delta1 + delta2))   dose <- dose / scal   e0 + eMax / maxDens * (dose^delta1) * (1 - dose)^delta2 }  true_biomarker <- function(dose) {   beta_mod(dose, e0 = 0.2, eMax = 0.6, delta1 = 5, delta2 = 5 * 0.5 / 0.5, scal = 100) }  true_tox <- function(dose) {   pnorm((dose - 60) / 10) }  # Draw the TRUE profiles par(mfrow = c(1, 2)) curve(true_tox(x), from = 0, to = 80) curve(true_biomarker(x), from = 0, to = 80)  # Run the simulation on the desired design. # We only generate 1 trial outcome here for illustration, for the actual study. # Also for illustration purpose, we will use 5 burn-ins to generate 20 samples, # this should be increased of course. my_sims <- simulate(   object = my_design,   trueTox = true_tox,   trueBiomarker = true_biomarker,   sigma2W = 0.01,   rho = 0,   nsim = 1,   parallel = FALSE,   seed = 9,   startingDose = 6,   mcmcOptions = McmcOptions(     burnin = 1,     step = 1,     samples = 2   ) )  # Plot the results of the simulation. print(plot(my_sims))"},{"path":"https://openpharma.github.io/crmPack/reference/plot-DualSimulationsSummary-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot summaries of the dual-endpoint design simulations — plot,DualSimulationsSummary,missing-method","title":"Plot summaries of the dual-endpoint design simulations — plot,DualSimulationsSummary,missing-method","text":"plot method can applied DualSimulationsSummary objects order summarize graphically. Possible type plots moment listed plot,SimulationsSummary,missing-method plus: meanBiomarkerFit Plot showing average fitted dose-biomarker curve across trials, together 95% credible intervals, comparison assumed truth (specified trueBiomarker argument summary,DualSimulations-method) can specify subset type argument.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DualSimulationsSummary-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot summaries of the dual-endpoint design simulations — plot,DualSimulationsSummary,missing-method","text":"","code":"# S4 method for class 'DualSimulationsSummary,missing' plot(   x,   y,   type = c(\"nObs\", \"doseSelected\", \"propDLTs\", \"nAboveTarget\", \"meanFit\",     \"meanBiomarkerFit\"),   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/plot-DualSimulationsSummary-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot summaries of the dual-endpoint design simulations — plot,DualSimulationsSummary,missing-method","text":"x DualSimulationsSummary object want plot y missing type types plots want obtain. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DualSimulationsSummary-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot summaries of the dual-endpoint design simulations — plot,DualSimulationsSummary,missing-method","text":"single ggplot object single plot asked , otherwise gridExtra{gTree} object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-DualSimulationsSummary-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot summaries of the dual-endpoint design simulations — plot,DualSimulationsSummary,missing-method","text":"","code":"# Define the dose-grid. emptydata <- DataDual(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))   # Initialize the CRM model. my_model <- DualEndpointRW(   mean = c(0, 1),   cov = matrix(c(1, 0, 0, 1), nrow = 2),   sigma2betaW = 0.01,   sigma2W = c(a = 0.1, b = 0.1),   rho = c(a = 1, b = 1),   rw1 = TRUE )   # Choose the rule for selecting the next dose. my_next_best <- NextBestDualEndpoint(   target = c(0.9, 1),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort-size. my_size1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) my_size2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) my_size <- maxSize(my_size1, my_size2)  # Choose the rule for stopping. my_stopping4 <- StoppingTargetBiomarker(   target = c(0.9, 1),   prob = 0.5 ) # Only 10 patients here for illustration! my_stopping <- my_stopping4 | StoppingMinPatients(10) | StoppingMissingDose()  # Choose the rule for dose increments. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design. my_design <- DualDesign(   model = my_model,   data = emptydata,   nextBest = my_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = CohortSizeConst(3),   startingDose = 3 )  # Define scenarios for the TRUE toxicity and efficacy profiles. beta_mod <- function(dose, e0, eMax, delta1, delta2, scal) {   maxDens <- (delta1^delta1) * (delta2^delta2) / ((delta1 + delta2)^(delta1 + delta2))   dose <- dose / scal   e0 + eMax / maxDens * (dose^delta1) * (1 - dose)^delta2 }    true_biomarker <- function(dose) {   beta_mod(dose, e0 = 0.2, eMax = 0.6, delta1 = 5, delta2 = 5 * 0.5 / 0.5, scal = 100) }  true_tox <- function(dose) {   pnorm((dose - 60) / 10) }  # Draw the TRUE profiles. par(mfrow = c(1, 2)) curve(true_tox(x), from = 0, to = 80) curve(true_biomarker(x), from = 0, to = 80)  # Run the simulation on the desired design. # We only generate 1 trial outcome here for illustration, for the actual study. # For illustration purpose we will use 5 burn-ins to generate 20 samples, # this should be increased of course. my_sims <- simulate(   object = my_design,   trueTox = true_tox,   trueBiomarker = true_biomarker,   sigma2W = 0.01,   rho = 0,   nsim = 1,   parallel = FALSE,   seed = 3,   startingDose = 6,   mcmcOptions = McmcOptions(     burnin = 5,     step = 1,     samples = 20   ) )  # Plot the summary of the Simulations. plot(summary(my_sims,   trueTox = true_tox,   trueBiomarker = true_biomarker ))"},{"path":"https://openpharma.github.io/crmPack/reference/plot-GeneralSimulations-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot simulations — plot,GeneralSimulations,missing-method","title":"Plot simulations — plot,GeneralSimulations,missing-method","text":"Summarize simulations plots","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-GeneralSimulations-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot simulations — plot,GeneralSimulations,missing-method","text":"","code":"# S4 method for class 'GeneralSimulations,missing' plot(x, y, type = c(\"trajectory\", \"dosesTried\"), ...)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-GeneralSimulations-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot simulations — plot,GeneralSimulations,missing-method","text":"x GeneralSimulations object want plot y missing type type plots want obtain. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-GeneralSimulations-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot simulations — plot,GeneralSimulations,missing-method","text":"single ggplot object single plot asked , otherwise gridExtra{gTree} object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-GeneralSimulations-missing-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot simulations — plot,GeneralSimulations,missing-method","text":"plot method can applied GeneralSimulations objects order summarize graphically. Possible types plots moment : trajectory Summary trajectory simulated trials dosesTried Average proportions doses tested patients can specify one type argument.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-GeneralSimulations-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot simulations — plot,GeneralSimulations,missing-method","text":"","code":"# nolint start  ## obtain the plot for the simulation results ## If only DLE responses are considered in the simulations  ## Specified your simulations when no DLE samples are used ## Define your data set first using an empty data set ## with dose levels from 25 to 300 with increments 25 data <- Data(doseGrid = seq(25, 300, 25))  ## Specified the model of 'ModelTox' class eg 'LogisticIndepBeta' class model model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = data ) ## Then the escalation rule tdNextBest <- NextBestTD(   prob_target_drt = 0.35,   prob_target_eot = 0.3 )  ## The cohort size, size of 3 subjects mySize <- CohortSizeConst(size = 3) ## Deifne the increments for the dose-escalation process ## The maximum increase of 200% for doses up to the maximum of the dose specified in the doseGrid ## The maximum increase of 200% for dose above the maximum of the dose specified in the doseGrid ## This is to specified a maximum of 3-fold restriction in dose-esclation myIncrements <- IncrementsRelative(   intervals = c(min(data@doseGrid), max(data@doseGrid)),   increments = c(2, 2) ) ## Specified the stopping rule e.g stop when the maximum sample size of 12 patients has been reached myStopping <- StoppingMinPatients(nPatients = 12) ## Now specified the design with all the above information and starting with a dose of 25 design <- TDDesign(   model = model,   nextBest = tdNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   data = data, startingDose = 25 )  ## Specify the truth of the DLE responses myTruth <- probFunction(model, phi1 = -53.66584, phi2 = 10.50499)  ## Then specified the simulations and generate the trial ## For illustration purpose only 1 simulation is produced (nsim=1). ## The simulations mySim <- simulate(design,   args = NULL,   truth = myTruth,   nsim = 1,   seed = 819,   parallel = FALSE )   ## plot the simulations print(plot(mySim))     ## If DLE samples are involved ## The escalation rule tdNextBest <- NextBestTDsamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, probs = 0.3))   } ) ## specify the design design <- TDsamplesDesign(   model = model,   nextBest = tdNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   data = data, startingDose = 25 ) ## options for MCMC ## The simulations ## For illustration purpose only 1 simulation is produced (nsim=1). # mySim <- simulate(design, #                   args=NULL, #                   truth=myTruth, #                   nsim=1, #                   seed=819, #                   mcmcOptions=options, #                   parallel=FALSE) # # ##plot the simulations # print(plot(mySim)) #  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/plot-GeneralSimulationsSummary-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphical display of the general simulation summary — plot,GeneralSimulationsSummary,missing-method","title":"Graphical display of the general simulation summary — plot,GeneralSimulationsSummary,missing-method","text":"plot method can applied GeneralSimulationsSummary objects order summarize graphically. Possible types plots moment :","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-GeneralSimulationsSummary-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphical display of the general simulation summary — plot,GeneralSimulationsSummary,missing-method","text":"","code":"# S4 method for class 'GeneralSimulationsSummary,missing' plot(x, y, type = c(\"nObs\", \"doseSelected\", \"propDLTs\", \"nAboveTarget\"), ...)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-GeneralSimulationsSummary-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphical display of the general simulation summary — plot,GeneralSimulationsSummary,missing-method","text":"x GeneralSimulationsSummary object want plot y missing type types plots want obtain. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-GeneralSimulationsSummary-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphical display of the general simulation summary — plot,GeneralSimulationsSummary,missing-method","text":"single ggplot object single plot asked , otherwise gridExtra{gTree} object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-GeneralSimulationsSummary-missing-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graphical display of the general simulation summary — plot,GeneralSimulationsSummary,missing-method","text":"nObs Distribution number patients simulated trials doseSelected Distribution final selected doses trials. Note can include zero entries, meaning trial stopped doses dose grid appeared toxic. propDLTs Distribution proportion patients DLTs trials nAboveTarget Distribution number patients treated doses target toxicity interval (specified truth target arguments summary,GeneralSimulations-method) can specify subset type argument.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualFlexiSimulations-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"This plot method can be applied to PseudoDualFlexiSimulations objects in order to summarize them graphically. Possible types of plots at the moment are:  trajectory Summary of the trajectory of the simulated trials dosesTried Average proportions of the doses tested in patients sigma2 The variance of the efficacy responses sigma2betaW The variance of the random walk model  You can specify one or both of these in the type argument. — plot,PseudoDualFlexiSimulations,missing-method","title":"This plot method can be applied to PseudoDualFlexiSimulations objects in order to summarize them graphically. Possible types of plots at the moment are:  trajectory Summary of the trajectory of the simulated trials dosesTried Average proportions of the doses tested in patients sigma2 The variance of the efficacy responses sigma2betaW The variance of the random walk model  You can specify one or both of these in the type argument. — plot,PseudoDualFlexiSimulations,missing-method","text":"plot method can applied PseudoDualFlexiSimulations objects order summarize graphically. Possible types plots moment : trajectory Summary trajectory simulated trials dosesTried Average proportions doses tested patients sigma2 variance efficacy responses sigma2betaW variance random walk model can specify one type argument.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualFlexiSimulations-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This plot method can be applied to PseudoDualFlexiSimulations objects in order to summarize them graphically. Possible types of plots at the moment are:  trajectory Summary of the trajectory of the simulated trials dosesTried Average proportions of the doses tested in patients sigma2 The variance of the efficacy responses sigma2betaW The variance of the random walk model  You can specify one or both of these in the type argument. — plot,PseudoDualFlexiSimulations,missing-method","text":"","code":"# S4 method for class 'PseudoDualFlexiSimulations,missing' plot(x, y, type = c(\"trajectory\", \"dosesTried\", \"sigma2\", \"sigma2betaW\"), ...)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualFlexiSimulations-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This plot method can be applied to PseudoDualFlexiSimulations objects in order to summarize them graphically. Possible types of plots at the moment are:  trajectory Summary of the trajectory of the simulated trials dosesTried Average proportions of the doses tested in patients sigma2 The variance of the efficacy responses sigma2betaW The variance of the random walk model  You can specify one or both of these in the type argument. — plot,PseudoDualFlexiSimulations,missing-method","text":"x PseudoDualFlexiSimulations object want plot y missing type type plots want obtain. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualFlexiSimulations-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This plot method can be applied to PseudoDualFlexiSimulations objects in order to summarize them graphically. Possible types of plots at the moment are:  trajectory Summary of the trajectory of the simulated trials dosesTried Average proportions of the doses tested in patients sigma2 The variance of the efficacy responses sigma2betaW The variance of the random walk model  You can specify one or both of these in the type argument. — plot,PseudoDualFlexiSimulations,missing-method","text":"single ggplot object single plot asked , otherwise gridExtra{gTree} object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualFlexiSimulations-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This plot method can be applied to PseudoDualFlexiSimulations objects in order to summarize them graphically. Possible types of plots at the moment are:  trajectory Summary of the trajectory of the simulated trials dosesTried Average proportions of the doses tested in patients sigma2 The variance of the efficacy responses sigma2betaW The variance of the random walk model  You can specify one or both of these in the type argument. — plot,PseudoDualFlexiSimulations,missing-method","text":"","code":"# Obtain the plot for the simulation results if DLE and efficacy responses # are considered in the simulations. emptydata <- DataDual(doseGrid = seq(25, 300, 25))  # The DLE model must be of 'ModelTox' (e.g 'LogisticIndepBeta') class. dle_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = emptydata )  # The efficacy model must be of 'EffFlexi' class. eff_model <- EffFlexi(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   sigma2W = c(a = 0.1, b = 0.1),   sigma2betaW = c(a = 20, b = 50),   rw1 = FALSE,   data = emptydata )  # The escalation rule using the 'NextBestMaxGainSamples' class. my_next_best <- NextBestMaxGainSamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, prob = 0.3))   },   mg_derive = function(mg_samples) {     as.numeric(quantile(mg_samples, prob = 0.5))   } )  # The cohort size, size of 3 subjects. my_size <- CohortSizeConst(size = 3)  # Allow increase of 200%. my_increments <- IncrementsRelative(intervals = 0, increments = 2)  # Define the stopping rule. Stop when the maximum sample size of 36 patients has # been reached or when the next dose is NA. my_stopping <- StoppingMinPatients(nPatients = 36) | StoppingMissingDose()  # Specify the design. design <- DualResponsesSamplesDesign(   nextBest = my_next_best,   cohort_size = my_size,   startingDose = 25,   model = dle_model,   eff_model = eff_model,   data = emptydata,   stopping = my_stopping,   increments = my_increments ) # Specify the true DLE curve and the true expected efficacy values # at all dose levels. my_truth_dle <- probFunction(dle_model, phi1 = -53.66584, phi2 = 10.50499)  my_truth_eff <- c(   -0.5478867, 0.1645417, 0.5248031, 0.7604467,   0.9333009, 1.0687031, 1.1793942, 1.2726408,   1.3529598, 1.4233411, 1.4858613, 1.5420182 )  # The true gain curve. my_truth_gain <- function(dose) {   return((myTruthEff(dose)) / (1 + (myTruthDLE(dose) / (1 - myTruthDLE(dose))))) }  # MCMC options. my_options <- McmcOptions(burnin = 10, step = 1, samples = 20)  # For illustration purpose only 1 simulation is produced. my_sim <- simulate(   object = design,   args = NULL,   trueDLE = my_truth_dle,   trueEff = my_truth_eff,   trueSigma2 = 0.025,   trueSigma2betaW = 1,   mcmcOptions = my_options,   nsim = 1,   seed = 819,   parallel = FALSE )  # Plot the simulated results. print(plot(my_sim))"},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualSimulations-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot simulations — plot,PseudoDualSimulations,missing-method","title":"Plot simulations — plot,PseudoDualSimulations,missing-method","text":"Summarize simulations plots","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualSimulations-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot simulations — plot,PseudoDualSimulations,missing-method","text":"","code":"# S4 method for class 'PseudoDualSimulations,missing' plot(x, y, type = c(\"trajectory\", \"dosesTried\", \"sigma2\"), ...)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualSimulations-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot simulations — plot,PseudoDualSimulations,missing-method","text":"x PseudoDualSimulations object want plot y missing type type plots want obtain. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualSimulations-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot simulations — plot,PseudoDualSimulations,missing-method","text":"single ggplot object single plot asked , otherwise gridExtra{gTree} object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualSimulations-missing-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot simulations — plot,PseudoDualSimulations,missing-method","text":"plot method can applied PseudoDualSimulations objects order summarize graphically. Possible types plots moment : trajectory Summary trajectory simulated trials dosesTried Average proportions doses tested patients sigma2 variance efficacy responses can specify one type argument.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualSimulations-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot simulations — plot,PseudoDualSimulations,missing-method","text":"","code":"# Obtain the plot for the simulation results if DLE and efficacy responses # are considered in the simulations.  # Example to run simulations when no samples are used. The data object # must be defined with doses >= 1: emptydata <- DataDual(doseGrid = seq(25, 300, 25), placebo = FALSE)  # The DLE model must be of 'ModelTox' (e.g 'LogisticIndepBeta') class. dle_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = emptydata )  # The efficacy model must be of 'ModelEff' (e.g 'Effloglog') class. eff_model <- Effloglog(   eff = c(1.223, 2.513), eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = emptydata )  # The escalation rule using the 'NextBestMaxGain' class. my_next_best <- NextBestMaxGain(   prob_target_drt = 0.35,   prob_target_eot = 0.3 )  # Allow increase of 200%. my_increments <- IncrementsRelative(intervals = 0, increments = 2)  # Cohort size of 3. my_size <- CohortSizeConst(size = 3)  # Stop only when 36 subjects are treated or next dose is NA. my_stopping <- StoppingMinPatients(nPatients = 36) | StoppingMissingDose()  # Now specify the design with all the above information and starting with a # dose of 25 (for details please refer to the 'DualResponsesDesign' example). my_design <- DualResponsesDesign(   nextBest = my_next_best,   model = dle_model,   eff_model = eff_model,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = emptydata,   startingDose = 25 )  # Specify the true DLE and efficacy curves. my_truth_dle <- probFunction(dle_model, phi1 = -53.66584, phi2 = 10.50499) my_truth_eff <- efficacyFunction(eff_model, theta1 = -4.818429, theta2 = 3.653058)  # Run simulations (for illustration purpose only 1 simulation is produced). my_sim <- simulate(   object = my_design,   args = NULL,   trueDLE = my_truth_dle,   trueEff = my_truth_eff,   trueNu = 1 / 0.025,   nsim = 1,   seed = 819,   parallel = FALSE )  # Plot the simulation results. print(plot(my_sim))  # Example if DLE and efficacy samples are involved. # The escalation rule using the 'NextBestMaxGainSamples' class. my_next_best <- NextBestMaxGainSamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, prob = 0.3))   },   mg_derive = function(mg_samples) {     as.numeric(quantile(mg_samples, prob = 0.5))   } )  # The design of 'DualResponsesSamplesDesign' class. my_design <- DualResponsesSamplesDesign(   nextBest = my_next_best,   cohort_size = my_size,   startingDose = 25,   model = dle_model,   eff_model = eff_model,   data = emptydata,   stopping = my_stopping,   increments = my_increments )  # Options for MCMC. my_options <- McmcOptions(burnin = 10, step = 1, samples = 20)  # For illustration purpose only 1 simulation is produced (nsim = 1). my_sim <- simulate(   object = my_design,   args = NULL,   trueDLE = my_truth_dle,   trueEff = my_truth_eff,   trueNu = 1 / 0.025,   nsim = 1,   mcmcOptions = my_options,   seed = 819,   parallel = FALSE )  # Plot the simulation results. print(plot(my_sim))"},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualSimulationsSummary-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the summary of Pseudo Dual Simulations summary — plot,PseudoDualSimulationsSummary,missing-method","title":"Plot the summary of Pseudo Dual Simulations summary — plot,PseudoDualSimulationsSummary,missing-method","text":"plot method can applied PseudoDualSimulationsSummary objects order summarize graphically. Possible type plots moment listed plot,PseudoSimulationsSummary,missing-method plus: can specify subset type argument.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualSimulationsSummary-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the summary of Pseudo Dual Simulations summary — plot,PseudoDualSimulationsSummary,missing-method","text":"","code":"# S4 method for class 'PseudoDualSimulationsSummary,missing' plot(   x,   y,   type = c(\"nObs\", \"doseSelected\", \"propDLE\", \"nAboveTargetEndOfTrial\", \"meanFit\",     \"meanEffFit\"),   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualSimulationsSummary-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the summary of Pseudo Dual Simulations summary — plot,PseudoDualSimulationsSummary,missing-method","text":"x PseudoDualSimulationsSummary object want plot y missing type types plots want obtain. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualSimulationsSummary-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the summary of Pseudo Dual Simulations summary — plot,PseudoDualSimulationsSummary,missing-method","text":"single ggplot object single plot asked , otherwise gridExtra{gTree} object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoDualSimulationsSummary-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the summary of Pseudo Dual Simulations summary — plot,PseudoDualSimulationsSummary,missing-method","text":"","code":"# Obtain the summary plot for the simulation results if DLE and efficacy # responses are considered in the simulations.  # In the example when no samples are used a data object with doses >= 1 # needs to be defined. emptydata <- DataDual(doseGrid = seq(25, 300, 25), placebo = FALSE)  # The DLE model must be of 'ModelTox' (e.g 'LogisticIndepBeta') class. dle_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = emptydata )  # The efficacy model of 'ModelEff' (e.g 'Effloglog') class. eff_model <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = emptydata )  # The escalation rule using the 'NextBestMaxGain' class. my_next_best <- NextBestMaxGain(   prob_target_drt = 0.35,   prob_target_eot = 0.3 )  # Allow increase of 200%. my_increments <- IncrementsRelative(intervals = 0, increments = 2)  # Cohort size of 3. my_size <- CohortSizeConst(size = 3)  # Stop when 10 subjects are treated (for illustration only). my_stopping <- StoppingMinPatients(nPatients = 10)  ## Now specified the design with all the above information and starting with a dose of 25  # Specify the design. (For details please refer to the 'DualResponsesDesign' example.) my_design <- DualResponsesDesign(   nextBest = my_next_best,   model = dle_model,   eff_model = eff_model,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = emptydata,   startingDose = 25 )  # Specify the true DLE and efficacy curves. my_truth_dle <- probFunction(dle_model, phi1 = -53.66584, phi2 = 10.50499) my_truth_eff <- efficacyFunction(eff_model, theta1 = -4.818429, theta2 = 3.653058)  # For illustration purpose only 1 simulation is produced. my_sim <- simulate(   object = my_design,   args = NULL,   trueDLE = my_truth_dle,   trueEff = my_truth_eff,   trueNu = 1 / 0.025,   nsim = 1,   mcmcOptions = McmcOptions(burnin = 10, step = 1, samples = 50),   seed = 819,   parallel = FALSE )  # Summary of the simulations. my_sum <- summary(   my_sim,   trueDLE = my_truth_dle,   trueEff = my_truth_eff )  # Plot the summary of the simulations. print(plot(my_sum))  # Example where DLE and efficacy samples are involved. # Please refer to design-method 'simulate DualResponsesSamplesDesign' examples # for details. # Specify the next best method. my_next_best <- NextBestMaxGainSamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, prob = 0.3))   },   mg_derive = function(mg_samples) {     as.numeric(quantile(mg_samples, prob = 0.5))   } )  # Specify the design. my_design <- DualResponsesSamplesDesign(   nextBest = my_next_best,   cohort_size = my_size,   startingDose = 25,   model = dle_model,   eff_model = eff_model,   data = emptydata,   stopping = my_stopping,   increments = my_increments )  # MCMC options. my_options <- McmcOptions(burnin = 10, step = 2, samples = 50)  # For illustration purpose only 1 simulation is produced. my_sim <- simulate(   object = my_design,   args = NULL,   trueDLE = my_truth_dle,   trueEff = my_truth_eff,   trueNu = 1 / 0.025,   nsim = 1,   mcmcOptions = my_options,   seed = 819,   parallel = FALSE )   # Generate a summary of the simulations. my_sum <- summary(   my_sim,   trueDLE = my_truth_dle,   trueEff = my_truth_eff )  # Plot the summary of the simulations. print(plot(my_sum))  # Example where the 'EffFlexi' class is used for the efficacy model. eff_model <- EffFlexi(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   sigma2W = c(a = 0.1, b = 0.1),   sigma2betaW = c(a = 20, b = 50),   rw1 = FALSE,   data = emptydata )  # Specify the design. my_design <- DualResponsesSamplesDesign(   nextBest = my_next_best,   cohort_size = my_size,   startingDose = 25,   model = dle_model,   eff_model = eff_model,   data = emptydata,   stopping = my_stopping,   increments = my_increments )  # Specify the true DLE curve and the true expected efficacy values at all dose levels. my_truth_dle <- probFunction(dle_model, phi1 = -53.66584, phi2 = 10.50499)  my_truth_eff <- c(   -0.5478867, 0.1645417, 0.5248031, 0.7604467,   0.9333009, 1.0687031, 1.1793942, 1.2726408,   1.3529598, 1.4233411, 1.4858613, 1.5420182 )  # Define the true gain curve. my_truth_gain <- function(dose) {   return((my_truth_eff(dose)) / (1 + (my_truth_dle(dose) / (1 - my_truth_dle(dose))))) }  ## The simulations ## For illustration purpose only 1 simulation is produced (nsim=1). mySim <- simulate(   object = my_design,   args = NULL,   trueDLE = my_truth_dle,   trueEff = my_truth_eff,   trueSigma2 = 0.025,   trueSigma2betaW = 1,   nsim = 1,   mcmcOptions = my_options,   seed = 819,   parallel = FALSE )  # Produce a summary of the simulations. my_sum <- summary(   my_sim,   trueDLE = my_truth_dle,   trueEff = my_truth_eff )  # Plot the summary of the simulations. print(plot(my_sim))"},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoSimulationsSummary-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot summaries of the pseudo simulations — plot,PseudoSimulationsSummary,missing-method","title":"Plot summaries of the pseudo simulations — plot,PseudoSimulationsSummary,missing-method","text":"Graphical display simulation summary","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoSimulationsSummary-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot summaries of the pseudo simulations — plot,PseudoSimulationsSummary,missing-method","text":"","code":"# S4 method for class 'PseudoSimulationsSummary,missing' plot(   x,   y,   type = c(\"nObs\", \"doseSelected\", \"propDLE\", \"nAboveTargetEndOfTrial\", \"meanFit\"),   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoSimulationsSummary-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot summaries of the pseudo simulations — plot,PseudoSimulationsSummary,missing-method","text":"x PseudoSimulationsSummary object want plot y missing type types plots want obtain. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoSimulationsSummary-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot summaries of the pseudo simulations — plot,PseudoSimulationsSummary,missing-method","text":"single ggplot object single plot asked , otherwise gridExtra{gTree} object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoSimulationsSummary-missing-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot summaries of the pseudo simulations — plot,PseudoSimulationsSummary,missing-method","text":"plot method can applied PseudoSimulationsSummary objects order summarize graphically. can used DLE responses involved simulations. also applied results without samples generated simulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-PseudoSimulationsSummary-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot summaries of the pseudo simulations — plot,PseudoSimulationsSummary,missing-method","text":"","code":"# nolint start  ## obtain the plot for the simulation results ## If only DLE responses are considered in the simulations ## Specified your simulations when no DLE samples are used ## Define your data set first using an empty data set ## with dose levels from 25 to 300 with increments 25 data <- Data(doseGrid = seq(25, 300, 25))  ## Specified the model of 'ModelTox' class eg 'LogisticIndepBeta' class model model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = data ) ## Then the escalation rule tdNextBest <- NextBestTD(   prob_target_drt = 0.35,   prob_target_eot = 0.3 )  ## The cohort size, size of 3 subjects mySize <- CohortSizeConst(size = 3) ## Deifne the increments for the dose-escalation process ## The maximum increase of 200% for doses up to the maximum of the dose specified in the doseGrid ## The maximum increase of 200% for dose above the maximum of the dose specified in the doseGrid ## This is to specified a maximum of 3-fold restriction in dose-esclation myIncrements <- IncrementsRelative(   intervals = c(min(data@doseGrid), max(data@doseGrid)),   increments = c(2, 2) ) ## Specified the stopping rule e.g stop when the maximum sample size of 12 patients has been reached myStopping <- StoppingMinPatients(nPatients = 12) ## Now specified the design with all the above information and starting with a dose of 25 design <- TDDesign(   model = model,   nextBest = tdNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   data = data, startingDose = 25 )  ## Specify the truth of the DLE responses myTruth <- probFunction(model, phi1 = -53.66584, phi2 = 10.50499)  ## Then specified the simulations and generate the trial ## For illustration purpose only 1 simulation is produced (nsim=1). ## The simulations mySim <- simulate(design,   args = NULL,   truth = myTruth,   nsim = 1,   seed = 819,   parallel = FALSE )  ## Then produce a summary of your simulations MYSUM <- summary(mySim,   truth = myTruth ) ## plot the summary of the simulations print(plot(MYSUM))   ## If DLE samples are involved ## The escalation rule tdNextBest <- NextBestTDsamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, probs = 0.3))   } ) ## specify the design design <- TDsamplesDesign(   model = model,   nextBest = tdNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   data = data, startingDose = 25 ) ## options for MCMC options <- McmcOptions(burnin = 100, step = 2, samples = 200) ## The simulations ## For illustration purpose only 1 simulation is produced (nsim=1). # mySim <- simulate(design, #                   args=NULL, #                   truth=myTruth, #                   nsim=1, #                   seed=819, #                   mcmcOptions=options, #                   parallel=FALSE) # ##Then produce a summary of your simulations # MYSUM <- summary(mySim, #                  truth=myTruth) # ##plot the summary of the simulations # print(plot(MYSUM))  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-DALogisticLogNormal-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting dose-toxicity model fits — plot,Samples,DALogisticLogNormal-method","title":"Plotting dose-toxicity model fits — plot,Samples,DALogisticLogNormal-method","text":"Plotting dose-toxicity model fits","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-DALogisticLogNormal-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting dose-toxicity model fits — plot,Samples,DALogisticLogNormal-method","text":"","code":"# S4 method for class 'Samples,DALogisticLogNormal' plot(x, y, data, hazard = FALSE, ..., showLegend = TRUE)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-DALogisticLogNormal-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting dose-toxicity model fits — plot,Samples,DALogisticLogNormal-method","text":"x Samples object y DALogisticLogNormal object data DataDA object hazard see fitPEM explanation ... used showLegend legend shown? (default)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-DALogisticLogNormal-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting dose-toxicity model fits — plot,Samples,DALogisticLogNormal-method","text":"returns ggplot object dose-toxicity model fit","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-DualEndpoint-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting dose-toxicity and dose-biomarker model fits — plot,Samples,DualEndpoint-method","title":"Plotting dose-toxicity and dose-biomarker model fits — plot,Samples,DualEndpoint-method","text":"dual endpoint model, also dose-biomarker fit shown plot","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-DualEndpoint-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting dose-toxicity and dose-biomarker model fits — plot,Samples,DualEndpoint-method","text":"","code":"# S4 method for class 'Samples,DualEndpoint' plot(x, y, data, extrapolate = TRUE, showLegend = FALSE, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-DualEndpoint-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting dose-toxicity and dose-biomarker model fits — plot,Samples,DualEndpoint-method","text":"x Samples object y DualEndpoint object data DataDual object extrapolate biomarker fit extrapolated whole dose grid? (default) showLegend legend shown? (default) ... additional arguments parent method plot,Samples,GeneralModel-method","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-DualEndpoint-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting dose-toxicity and dose-biomarker model fits — plot,Samples,DualEndpoint-method","text":"returns ggplot object dose-toxicity dose-biomarker model fits","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-DualEndpoint-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting dose-toxicity and dose-biomarker model fits — plot,Samples,DualEndpoint-method","text":"","code":"# nolint start  # Create some data data <- DataDual(   x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10,       20, 20, 20, 40, 40, 40, 50, 50, 50),   y=c(0, 0, 0, 0, 0, 0, 1, 0,       0, 1, 1, 0, 0, 1, 0, 1, 1),   w=c(0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.55, 0.6,       0.52, 0.54, 0.56, 0.43, 0.41, 0.39, 0.34, 0.38, 0.21),   doseGrid=c(0.1, 0.5, 1.5, 3, 6,              seq(from=10, to=80, by=2))) #> Used default patient IDs! #> Used best guess cohort indices!  # Initialize the Dual-Endpoint model (in this case RW1) model <- DualEndpointRW(mean = c(0, 1),                         cov = matrix(c(1, 0, 0, 1), nrow=2),                         sigma2betaW = 0.01,                         sigma2W = c(a=0.1, b=0.1),                         rho = c(a=1, b=1),                         rw1 = TRUE)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=500) set.seed(94) samples <- mcmc(data, model, options)  # Plot the posterior mean  (and empirical 2.5 and 97.5 percentile) # for the prob(DLT) by doses and the Biomarker by doses #grid.arrange(plot(x = samples, y = model, data = data))  plot(x = samples, y = model, data = data)   # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-GeneralModel-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting dose-toxicity model fits — plot,Samples,GeneralModel-method","title":"Plotting dose-toxicity model fits — plot,Samples,GeneralModel-method","text":"Plotting dose-toxicity model fits","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-GeneralModel-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting dose-toxicity model fits — plot,Samples,GeneralModel-method","text":"","code":"# S4 method for class 'Samples,GeneralModel' plot(   x,   y,   data,   ...,   xlab = \"Dose level\",   ylab = \"Probability of DLT [%]\",   showLegend = TRUE )"},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-GeneralModel-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting dose-toxicity model fits — plot,Samples,GeneralModel-method","text":"x Samples object y GeneralModel object data Data object ... used xlab x axis label ylab y axis label showLegend legend shown? (default)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-GeneralModel-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting dose-toxicity model fits — plot,Samples,GeneralModel-method","text":"returns ggplot object dose-toxicity model fit","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-GeneralModel-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting dose-toxicity model fits — plot,Samples,GeneralModel-method","text":"","code":"# nolint start  # Create some data data <- Data(x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y = c(0, 0, 0, 0, 0, 0, 1, 0),              cohort = c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid = c(0.1, 0.5, 1.5, 3, 6,                           seq(from = 10, to = 80, by=2))) #> Used default patient IDs!  # Initialize a model  model <- LogisticLogNormal(mean = c(-0.85, 1),                            cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),                            ref_dose = 56)  # Get posterior for all model parameters options <- McmcOptions(burnin = 100,                        step = 2,                        samples = 2000) set.seed(94) samples <- mcmc(data, model, options)  # Plot the posterior mean  (and empirical 2.5 and 97.5 percentile) # for the prob(DLT) by doses plot(x = samples, y = model, data = data)                 # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-ModelEff-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the fitted dose-efficacy curve using a model from ModelEff class with samples — plot,Samples,ModelEff-method","title":"Plot the fitted dose-efficacy curve using a model from ModelEff class with samples — plot,Samples,ModelEff-method","text":"Plot fitted dose-efficacy curve using model ModelEff class samples","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-ModelEff-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the fitted dose-efficacy curve using a model from ModelEff class with samples — plot,Samples,ModelEff-method","text":"","code":"# S4 method for class 'Samples,ModelEff' plot(   x,   y,   data,   ...,   xlab = \"Dose level\",   ylab = \"Expected Efficacy\",   showLegend = TRUE )"},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-ModelEff-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the fitted dose-efficacy curve using a model from ModelEff class with samples — plot,Samples,ModelEff-method","text":"x Samples object y ModelEff model class object data Data object ... used xlab x axis label ylab y axis label showLegend legend shown? (default)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-ModelEff-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the fitted dose-efficacy curve using a model from ModelEff class with samples — plot,Samples,ModelEff-method","text":"returns ggplot object dose-efficacy model fit","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-ModelEff-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the fitted dose-efficacy curve using a model from ModelEff class with samples — plot,Samples,ModelEff-method","text":"","code":"# nolint start  ## we need a data object with doses >= 1: data <-DataDual(x=c(25,50,25,50,75,300,250,150),                 y=c(0,0,0,0,0,1,1,0),                 w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),                 doseGrid=seq(25,300,25),                 placebo=FALSE) #> Used default patient IDs! #> Used best guess cohort indices! ##plot the dose-efficacy curve with samples using the model from 'ModelEff' ##class e.g. 'Effloglog' class model ##define the model (see Effloglog example) Effmodel<-Effloglog(eff=c(1.223,2.513),eff_dose=c(25,300),nu=c(a=1,b=0.025),data=data) ## define the samples obtained using the 'Effloglog' model (see details in 'Samples' example) ##options for MCMC options<-McmcOptions(burnin=100,step=2,samples=200) ## samples must be of 'Samples' class samples <- mcmc(data=data,model=Effmodel,options=options) ## plot the fitted dose-efficacy curve including the 95% credibility interval of the samples ## 'x' should be of 'Samples' class and 'y' of 'ModelEff' class plot(x=samples,y=Effmodel,data=data)  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-ModelTox-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the fitted dose-DLE curve using a ModelTox class model with samples — plot,Samples,ModelTox-method","title":"Plot the fitted dose-DLE curve using a ModelTox class model with samples — plot,Samples,ModelTox-method","text":"Plot fitted dose-DLE curve using ModelTox class model samples","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-ModelTox-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the fitted dose-DLE curve using a ModelTox class model with samples — plot,Samples,ModelTox-method","text":"","code":"# S4 method for class 'Samples,ModelTox' plot(   x,   y,   data,   ...,   xlab = \"Dose level\",   ylab = \"Probability of DLT [%]\",   showLegend = TRUE )"},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-ModelTox-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the fitted dose-DLE curve using a ModelTox class model with samples — plot,Samples,ModelTox-method","text":"x Samples object y ModelTox model class object data Data object ... used xlab x axis label ylab y axis label showLegend legend shown? (default)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-ModelTox-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the fitted dose-DLE curve using a ModelTox class model with samples — plot,Samples,ModelTox-method","text":"returns ggplot object dose-DLE model fit","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-Samples-ModelTox-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the fitted dose-DLE curve using a ModelTox class model with samples — plot,Samples,ModelTox-method","text":"","code":"## we need a data object with doses >= 1: data <- Data(   x = c(25, 50, 50, 75, 150, 200, 225, 300),   y = c(0, 0, 0, 0, 1, 1, 1, 1),   doseGrid = seq(from = 25, to = 300, by = 25) ) #> Used default patient IDs! #> Used best guess cohort indices! ## plot the dose-DLE curve with samples using the model from 'ModelTox' ## class e.g. 'LogisticIndepBeta' class model ## define the model (see LogisticIndepBeta example) model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = data ) ## define the samples obtained using the 'LogisticIndepGBeta' model  ## Define options for MCMC options <- McmcOptions(burnin = 100, step = 2, samples = 200) ## (see details in 'Samples' example) samples must be of 'Samples' class samples <- mcmc(data = data, model = model, options = options) ## plot the fitted dose-DLE curve including the 95% credibility interval of the samples ## 'x' should be of 'Samples' class and 'y' of 'ModelTox' class plot(x = samples, y = model, data = data)"},{"path":"https://openpharma.github.io/crmPack/reference/plot-SimulationsSummary-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot summaries of the model-based design simulations — plot,SimulationsSummary,missing-method","title":"Plot summaries of the model-based design simulations — plot,SimulationsSummary,missing-method","text":"Graphical display simulation summary","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-SimulationsSummary-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot summaries of the model-based design simulations — plot,SimulationsSummary,missing-method","text":"","code":"# S4 method for class 'SimulationsSummary,missing' plot(   x,   y,   type = c(\"nObs\", \"doseSelected\", \"propDLTs\", \"nAboveTarget\", \"meanFit\"),   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/plot-SimulationsSummary-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot summaries of the model-based design simulations — plot,SimulationsSummary,missing-method","text":"x SimulationsSummary object want plot y missing type types plots want obtain. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-SimulationsSummary-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot summaries of the model-based design simulations — plot,SimulationsSummary,missing-method","text":"single ggplot object single plot asked , otherwise gridExtra{gTree} object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-SimulationsSummary-missing-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot summaries of the model-based design simulations — plot,SimulationsSummary,missing-method","text":"plot method can applied SimulationsSummary objects order summarize graphically. Possible type plots moment listed plot,GeneralSimulationsSummary,missing-method plus: meanFit Plot showing average fitted dose-toxicity curve across trials, together 95% credible intervals, comparison assumed truth (specified truth argument summary,Simulations-method) can specify subset type argument.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot-SimulationsSummary-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot summaries of the model-based design simulations — plot,SimulationsSummary,missing-method","text":"","code":"# nolint start  # Define the dose-grid emptydata <- Data(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))  # Initialize the CRM model model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov =     matrix(c(1, -0.5, -0.5, 1),       nrow = 2     ),   ref_dose = 56 )  # Choose the rule for selecting the next dose myNextBest <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort-size mySize1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) mySize2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) mySize <- maxSize(mySize1, mySize2)  # Choose the rule for stopping myStopping1 <- StoppingMinCohorts(nCohorts = 3) myStopping2 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) myStopping3 <- StoppingMinPatients(nPatients = 20) myStopping <- (myStopping1 & myStopping2) | myStopping3  # Choose the rule for dose increments myIncrements <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design design <- Design(   model = model,   nextBest = myNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   data = emptydata,   startingDose = 3 )  ## define the true function myTruth <- probFunction(model, alpha0 = 7, alpha1 = 8)  # Run the simulation on the desired design # We only generate 1 trial outcomes here for illustration, for the actual study # this should be increased of course options <- McmcOptions(   burnin = 10,   step = 1,   samples = 100 ) time <- system.time(mySims <- simulate(design,   args = NULL,   truth = myTruth,   nsim = 1,   seed = 819,   mcmcOptions = options,   parallel = FALSE ))[3]  # Plot the Summary of the Simulations plot(summary(mySims, truth = myTruth))   # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/plot.gtable.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot gtable Objects — plot.gtable","title":"Plot gtable Objects — plot.gtable","text":"needed crmPack uses gridExtra::arrangeGrob() combine ggplot2 plots, resulting gtable object plotted otherwise implicitly printing console, e.g.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plot.gtable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot gtable Objects — plot.gtable","text":"","code":"# S3 method for class 'gtable' plot(x, ...)  # S3 method for class 'gtable' print(x, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/plot.gtable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot gtable Objects — plot.gtable","text":"x (gtable) object plot. ... additional parameters grid::grid.draw().","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plotDualResponses.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of the DLE and efficacy curve side by side given a DLE pseudo model, a DLE sample, an efficacy pseudo model and a given efficacy sample — plotDualResponses","title":"Plot of the DLE and efficacy curve side by side given a DLE pseudo model, a DLE sample, an efficacy pseudo model and a given efficacy sample — plotDualResponses","text":"Plot DLE efficacy curve side side given DLE pseudo model, DLE sample, efficacy pseudo model given efficacy sample Plot dose-DLE dose-efficacy curve side side given DLE pseudo model given pseudo efficacy model without DLE efficacy samples","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plotDualResponses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of the DLE and efficacy curve side by side given a DLE pseudo model, a DLE sample, an efficacy pseudo model and a given efficacy sample — plotDualResponses","text":"","code":"plotDualResponses(DLEmodel, DLEsamples, Effmodel, Effsamples, data, ...)  # S4 method for class 'ModelTox,Samples,ModelEff,Samples' plotDualResponses(   DLEmodel,   DLEsamples,   Effmodel,   Effsamples,   data,   extrapolate = TRUE,   showLegend = FALSE,   ... )  # S4 method for class 'ModelTox,missing,ModelEff,missing' plotDualResponses(DLEmodel, DLEsamples, Effmodel, Effsamples, data, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/plotDualResponses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of the DLE and efficacy curve side by side given a DLE pseudo model, a DLE sample, an efficacy pseudo model and a given efficacy sample — plotDualResponses","text":"DLEmodel pseudo DLE model ModelTox class object DLEsamples DLE samples Samples class object Effmodel pseudo efficacy model ModelEff class object Effsamples Efficacy samples Samples class object data data input DataDual class object ... additional arguments parent method plot,Samples,GeneralModel-method extrapolate biomarker fit extrapolated whole dose grid? (default) showLegend legend shown? (default)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plotDualResponses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of the DLE and efficacy curve side by side given a DLE pseudo model, a DLE sample, an efficacy pseudo model and a given efficacy sample — plotDualResponses","text":"returns ggplot object dose-toxicity dose-efficacy model fits","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plotDualResponses.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plot of the DLE and efficacy curve side by side given a DLE pseudo model, a DLE sample, an efficacy pseudo model and a given efficacy sample — plotDualResponses","text":"plotDualResponses(   DLEmodel = ModelTox,   DLEsamples = Samples,   Effmodel = ModelEff,   Effsamples = Samples ): function still documented plotDualResponses(   DLEmodel = ModelTox,   DLEsamples = missing,   Effmodel = ModelEff,   Effsamples = missing ): Plot DLE efficacy curve side side given DLE model efficacy model without samples","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plotDualResponses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of the DLE and efficacy curve side by side given a DLE pseudo model, a DLE sample, an efficacy pseudo model and a given efficacy sample — plotDualResponses","text":"","code":"# nolint start  ## we need a data object with doses >= 1: data <-DataDual(x=c(25,50,25,50,75,300,250,150),                 y=c(0,0,0,0,0,1,1,0),                 w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),                 doseGrid=seq(25,300,25),                 placebo=FALSE) #> Used default patient IDs! #> Used best guess cohort indices! ##plot the dose-DLE and dose-efficacy curves in two plots with DLE and efficacy samples ##define the DLE model which must be of 'ModelTox' class ##(e.g 'LogisticIndepBeta' class model) DLEmodel<-LogisticIndepBeta(binDLE=c(1.05,1.8),DLEweights=c(3,3),DLEdose=c(25,300),data=data) ## define the efficacy model which must be of 'ModelEff' class ## (e.g 'Effloglog' class) Effmodel<-Effloglog(eff=c(1.223,2.513),eff_dose=c(25,300),nu=c(a=1,b=0.025),data=data) ##define the DLE sample of 'Samples' class ##set up the same data set in class 'Data' for MCMC sampling for DLE data1 <- Data(x=data@x,y=data@y,doseGrid=data@doseGrid) #> Used default patient IDs! #> Used best guess cohort indices! ##Specify the options for MCMC options <- McmcOptions(burnin=100,step=2,samples=1000)   DLEsamples <- mcmc(data=data1,model=DLEmodel,options=options) ##define the efficacy sample of 'Samples' class Effsamples <- mcmc(data=data,model=Effmodel,options=options) ##plot the dose-DLE and dose-efficacy curves with two plot side by side. ##For each curve the 95% credibility interval of the two samples are alos given plotDualResponses(DLEmodel=DLEmodel,DLEsamples=DLEsamples,          Effmodel=Effmodel,Effsamples=Effsamples,          data=data)  # nolint end # nolint start  ## we need a data object with doses >= 1: data <-DataDual(x=c(25,50,25,50,75,300,250,150),                 y=c(0,0,0,0,0,1,1,0),                 w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),                 doseGrid=seq(25,300,25),                 placebo=FALSE) #> Used default patient IDs! #> Used best guess cohort indices! ##plot the dose-DLE and dose-efficacy curves in two plots without DLE and efficacy samples ##define the DLE model which must be of 'ModelTox' class ##(e.g 'LogisticIndepBeta' class model) DLEmodel<-LogisticIndepBeta(binDLE=c(1.05,1.8),DLEweights=c(3,3),DLEdose=c(25,300),data=data) ## define the efficacy model which must be of 'ModelEff' class ## (e.g 'Effloglog' class) Effmodel<-Effloglog(eff=c(1.223,2.513),eff_dose=c(25,300),nu=c(a=1,b=0.025),data=data) ##plot the dose-DLE and dose-efficacy curves with two plot side by side. plotDualResponses(DLEmodel=DLEmodel,                   Effmodel=Effmodel,                   data=data)   # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/plotGain.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the gain curve in addition with the dose-DLE and dose-efficacy curve using a given DLE pseudo model, a DLE sample, a given efficacy pseudo model and an efficacy sample — plotGain","title":"Plot the gain curve in addition with the dose-DLE and dose-efficacy curve using a given DLE pseudo model, a DLE sample, a given efficacy pseudo model and an efficacy sample — plotGain","text":"Plot gain curve addition dose-DLE dose-efficacy curve using given DLE pseudo model, DLE sample, given efficacy pseudo model efficacy sample Plot gain curve addition dose-DLE dose-efficacy curve using given DLE pseudo model, given efficacy pseudo model","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plotGain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the gain curve in addition with the dose-DLE and dose-efficacy curve using a given DLE pseudo model, a DLE sample, a given efficacy pseudo model and an efficacy sample — plotGain","text":"","code":"plotGain(DLEmodel, DLEsamples, Effmodel, Effsamples, data, ...)  # S4 method for class 'ModelTox,Samples,ModelEff,Samples' plotGain(DLEmodel, DLEsamples, Effmodel, Effsamples, data, ...)  # S4 method for class 'ModelTox,missing,ModelEff,missing' plotGain(DLEmodel, Effmodel, data, size = c(8L, 8L), shape = c(16L, 17L), ...)"},{"path":"https://openpharma.github.io/crmPack/reference/plotGain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the gain curve in addition with the dose-DLE and dose-efficacy curve using a given DLE pseudo model, a DLE sample, a given efficacy pseudo model and an efficacy sample — plotGain","text":"DLEmodel dose-DLE model ModelTox class object DLEsamples DLE sample Samples class object Effmodel dose-efficacy model ModelEff class object Effsamples efficacy sample Samples class object data data input DataDual class object ... used size (integer) vector length two defining sizes shapes used identify doses , respectively, p(DLE = 0.3) maximum gain shape (integer) vector length two defining shapes used identify doses , respectively, p(DLE = 0.3) maximum gain","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plotGain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the gain curve in addition with the dose-DLE and dose-efficacy curve using a given DLE pseudo model, a DLE sample, a given efficacy pseudo model and an efficacy sample — plotGain","text":"returns ggplot object plot","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plotGain.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plot the gain curve in addition with the dose-DLE and dose-efficacy curve using a given DLE pseudo model, a DLE sample, a given efficacy pseudo model and an efficacy sample — plotGain","text":"plotGain(   DLEmodel = ModelTox,   DLEsamples = Samples,   Effmodel = ModelEff,   Effsamples = Samples ): Standard method plotGain(   DLEmodel = ModelTox,   DLEsamples = missing,   Effmodel = ModelEff,   Effsamples = missing ): Standard method","code":""},{"path":"https://openpharma.github.io/crmPack/reference/plotGain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the gain curve in addition with the dose-DLE and dose-efficacy curve using a given DLE pseudo model, a DLE sample, a given efficacy pseudo model and an efficacy sample — plotGain","text":"","code":"# nolint start  ## we need a data object with doses >= 1: data <-DataDual(x=c(25,50,25,50,75,300,250,150),                 y=c(0,0,0,0,0,1,1,0),                 w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),                 doseGrid=seq(25,300,25),                 placebo=FALSE) #> Used default patient IDs! #> Used best guess cohort indices! ##plot the dose-DLE , dose-efficacy and gain curve in the same plot with DLE and efficacy samples ##define the DLE model which must be of 'ModelTox' class ##(e.g 'LogisticIndepBeta' class model) DLEmodel<-LogisticIndepBeta(binDLE=c(1.05,1.8),DLEweights=c(3,3),DLEdose=c(25,300),data=data) ## define the efficacy model which must be of 'ModelEff' class ## (e.g 'Effloglog' class) Effmodel<-Effloglog(eff=c(1.223,2.513),eff_dose=c(25,300),nu=c(a=1,b=0.025),data=data,const=0) ##define the DLE sample of 'Samples' class ##set up the same data set in class 'Data' for MCMC sampling for DLE data1 <- Data(x=data@x,y=data@y,doseGrid=data@doseGrid) #> Used default patient IDs! #> Used best guess cohort indices!  ##Define the options for MCMC options <- McmcOptions(burnin=100,step=2,samples=1000)   DLEsamples <- mcmc(data=data1,model=DLEmodel,options=options) ##define the efficacy sample of 'Samples' class Effsamples <- mcmc(data=data,model=Effmodel,options=options) ##plot the three curves of mean values of the DLEsamples, Effsamples and ##gain value samples (obtained within this plotGain function) at all dose levels plotGain(DLEmodel=DLEmodel,DLEsamples=DLEsamples,          Effmodel=Effmodel,Effsamples=Effsamples,          data=data)  # nolint end # nolint start ## we need a data object with doses >= 1: data <-DataDual(x=c(25,50,25,50,75,300,250,150),                 y=c(0,0,0,0,0,1,1,0),                 w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),                 doseGrid=seq(25,300,25),                 placebo=FALSE) #> Used default patient IDs! #> Used best guess cohort indices! ##plot the dose-DLE , dose-efficacy and gain curve in the same plot with DLE and efficacy samples ##define the DLE model which must be of 'ModelTox' class ##(e.g 'LogisticIndepBeta' class model) DLEmodel<-LogisticIndepBeta(binDLE=c(1.05,1.8),DLEweights=c(3,3),DLEdose=c(25,300),data=data) ## define the efficacy model which must be of 'ModelEff' class ## (e.g 'Effloglog' class) Effmodel<-Effloglog(eff=c(1.223,2.513),eff_dose=c(25,300),nu=c(a=1,b=0.025),data=data) ##plot the three curves of using modal estimates of model parameters at all dose levels plotGain(DLEmodel=DLEmodel,          Effmodel=Effmodel,          data=data)  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/positive_number.html","id":null,"dir":"Reference","previous_headings":"","what":"positive_number — positive_number","title":"positive_number — positive_number","text":"positive_number class class store NULL, non NA, finite strictly positive numerical value. mainly used store reference dose value model classes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/printVignette.html","id":null,"dir":"Reference","previous_headings":"","what":"Taken from utils package (print.vignette) — printVignette","title":"Taken from utils package (print.vignette) — printVignette","text":"Taken utils package (print.vignette)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/printVignette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taken from utils package (print.vignette) — printVignette","text":"","code":"printVignette(x, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing Toxicity Probabilities for a Given Dose, Model and Samples — prob","title":"Computing Toxicity Probabilities for a Given Dose, Model and Samples — prob","text":"function computes probability occurrence DLE specified dose level, based model parameters (samples).","code":""},{"path":"https://openpharma.github.io/crmPack/reference/prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing Toxicity Probabilities for a Given Dose, Model and Samples — prob","text":"","code":"prob(dose, model, samples, ...)  # S4 method for class 'numeric,LogisticNormal,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,LogisticLogNormal,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,LogisticLogNormalSub,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,ProbitLogNormal,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,ProbitLogNormalRel,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,LogisticLogNormalGrouped,Samples' prob(dose, model, samples, group, ...)  # S4 method for class 'numeric,LogisticKadane,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,LogisticKadaneBetaGamma,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,LogisticNormalMixture,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,LogisticNormalFixedMixture,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,LogisticLogNormalMixture,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,DualEndpoint,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,LogisticIndepBeta,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,LogisticIndepBeta,missing' prob(dose, model, samples, ...)  # S4 method for class 'numeric,OneParLogNormalPrior,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,OneParExpPrior,Samples' prob(dose, model, samples, ...)  # S4 method for class 'numeric,LogisticLogNormalOrdinal,Samples' prob(dose, model, samples, grade, cumulative = TRUE, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing Toxicity Probabilities for a Given Dose, Model and Samples — prob","text":"dose (number numeric) dose targeted. following recycling rule applies samples missing: vectors size 1 recycled size sample (.e. size(samples)). Otherwise, dose must size sample. model (GeneralModel ModelTox) model single agent dose escalation pseudo DLE (dose-limiting events)/toxicity model. samples (Samples) samples model's parameters used compute toxicity probabilities. Can also missing models. ... model specific parameters samples used. group (character factor) LogisticLogNormalGrouped, indicating whether calculate probability mono combo arm. grade (integer integer_vector) toxicity grade probabilities required cumulative (flag) returned probability cumulative (default) grade-specific?","code":""},{"path":"https://openpharma.github.io/crmPack/reference/prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computing Toxicity Probabilities for a Given Dose, Model and Samples — prob","text":"proportion numeric vector toxicity probabilities. non-scalar samples used, every element returned vector corresponds one element sample. Hence, case, output vector length sample vector. scalar samples used samples used, e.g. pseudo DLE/toxicity model, output length length dose.  case LogisticLogNormalOrdinal, probabilities relate toxicities  grade given grade.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/prob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computing Toxicity Probabilities for a Given Dose, Model and Samples — prob","text":"prob() function computes probability toxicity given doses, using samples model parameter(s). work multivariate model parameters, assume model specific prob() method receives samples matrix rows correspond sampling index, .e. layout nSamples x dimParameter.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/prob.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Computing Toxicity Probabilities for a Given Dose, Model and Samples — prob","text":"prob(dose = numeric, model = LogisticNormal, samples = Samples): prob(dose = numeric, model = LogisticLogNormal, samples = Samples): prob(dose = numeric, model = LogisticLogNormalSub, samples = Samples): prob(dose = numeric, model = ProbitLogNormal, samples = Samples): prob(dose = numeric, model = ProbitLogNormalRel, samples = Samples): prob(dose = numeric, model = LogisticLogNormalGrouped, samples = Samples): method LogisticLogNormalGrouped needs group argument addition. prob(dose = numeric, model = LogisticKadane, samples = Samples): prob(dose = numeric, model = LogisticKadaneBetaGamma, samples = Samples): prob(dose = numeric, model = LogisticNormalMixture, samples = Samples): prob(dose = numeric, model = LogisticNormalFixedMixture, samples = Samples): prob(dose = numeric, model = LogisticLogNormalMixture, samples = Samples): prob(dose = numeric, model = DualEndpoint, samples = Samples): prob(dose = numeric, model = LogisticIndepBeta, samples = Samples): compute toxicity probabilities occurrence DLE specified dose level, based samples LogisticIndepBeta model parameters. prob(dose = numeric, model = LogisticIndepBeta, samples = missing): compute toxicity probabilities occurrence DLE specified dose level, based LogisticIndepBeta model parameters. model parameters (except dose) present model object. prob(dose = numeric, model = OneParLogNormalPrior, samples = Samples): prob(dose = numeric, model = OneParExpPrior, samples = Samples): prob(dose = numeric, model = LogisticLogNormalOrdinal, samples = Samples):","code":""},{"path":"https://openpharma.github.io/crmPack/reference/prob.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Computing Toxicity Probabilities for a Given Dose, Model and Samples — prob","text":"prob() dose() functions inverse , dose() methods first argument, .e. given independent variable dose depends , represents toxicity probability.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/prob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computing Toxicity Probabilities for a Given Dose, Model and Samples — prob","text":"","code":"# Create some data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) ) #> Used default patient IDs!  # Initialize a model, e.g. 'LogisticLogNormal'. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Get samples from posterior. my_options <- McmcOptions(burnin = 100, step = 2, samples = 20) my_samples <- mcmc(data = my_data, model = my_model, options = my_options)  # Posterior for Prob(DLT | dose = 50). prob(dose = 50, model = my_model, samples = my_samples) #>  [1] 0.2506863 0.2506863 0.2506863 0.4632177 0.3635809 0.2416590 0.2416590 #>  [8] 0.6544323 0.6544323 0.7890429 0.6059464 0.6059464 0.4639107 0.7064120 #> [15] 0.4902011 0.4182529 0.4182529 0.4182529 0.4182529 0.4182529  # Create data from the 'DataDual' class. data_dual <- DataDual(   x = c(25, 50, 25, 50, 75, 300, 250, 150),   y = c(0, 0, 0, 0, 0, 1, 1, 0),   w = c(0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.6, 0.52),   doseGrid = seq(from = 25, to = 300, by = 25) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Initialize a toxicity model using 'LogisticIndepBeta' model. dlt_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = data_dual )  # Get samples from posterior. dlt_sample <- mcmc(data = data_dual, model = dlt_model, options = my_options)  # Posterior for Prob(DLT | dose = 100). prob(dose = 100, model = dlt_model, samples = dlt_sample) #>  [1] 0.1723670 0.1723670 0.4748224 0.4748224 0.4748224 0.2628373 0.2628373 #>  [8] 0.4670407 0.4670407 0.4670407 0.4670407 0.4670407 0.4670407 0.4670407 #> [15] 0.4670407 0.4670407 0.4670407 0.4670407 0.4670407 0.4670407 prob(dose = c(50, 150), model = dlt_model) #> [1] 0.1981823 0.4601234"},{"path":"https://openpharma.github.io/crmPack/reference/probFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting the Prob Function for a Given Model Type — probFunction","title":"Getting the Prob Function for a Given Model Type — probFunction","text":"function returns prob() function computes toxicity probabilities given dose level, based model specific parameters.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/probFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting the Prob Function for a Given Model Type — probFunction","text":"","code":"probFunction(model, ...)  # S4 method for class 'GeneralModel' probFunction(model, ...)  # S4 method for class 'ModelTox' probFunction(model, ...)  # S4 method for class 'LogisticLogNormalOrdinal' probFunction(model, grade, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/probFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting the Prob Function for a Given Model Type — probFunction","text":"model (GeneralModel ModelTox) model. ... model specific parameters. grade (integer) toxicity grade dose function required","code":""},{"path":"https://openpharma.github.io/crmPack/reference/probFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getting the Prob Function for a Given Model Type — probFunction","text":"prob() function computes toxicity probabilities.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/probFunction.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Getting the Prob Function for a Given Model Type — probFunction","text":"probFunction(GeneralModel): probFunction(ModelTox): probFunction(LogisticLogNormalOrdinal):","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/reference/probFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getting the Prob Function for a Given Model Type — probFunction","text":"","code":"my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 50 )  prob_fun <- probFunction(my_model, alpha0 = 2, alpha1 = 3) prob_fun(30) #> [1] 0.6147973 ordinal_data <- .DefaultDataOrdinal() ordinal_model <- .DefaultLogisticLogNormalOrdinal() opts <- .DefaultMcmcOptions() samples <- mcmc(ordinal_data, ordinal_model, opts) #> Warning: Unused variable \"y\" in data  probFunction(   ordinal_model,   grade = 2L,   alpha2 = samples@data$alpha1,   beta = samples@data$beta )(50) #>    [1] 0.218309535 0.207035481 0.342275027 0.149746318 0.248565303 0.236111639 #>    [7] 0.104894365 0.060965924 0.146410184 0.404468037 0.200013123 0.315874945 #>   [13] 0.212912892 0.272956635 0.119187349 0.100489185 0.103377199 0.054267786 #>   [19] 0.099241696 0.380141196 0.316627903 0.374412959 0.213712389 0.306079181 #>   [25] 0.221307995 0.116959328 0.154418549 0.062781747 0.131926715 0.225331941 #>   [31] 0.296799947 0.363353640 0.166407041 0.187145178 0.200275310 0.240874244 #>   [37] 0.288873908 0.259273376 0.259570347 0.637304158 0.359877587 0.292250981 #>   [43] 0.292057854 0.154880474 0.559862962 0.198977602 0.302615440 0.177224458 #>   [49] 0.639239196 0.282705663 0.192993837 0.004623147 0.031236891 0.055238619 #>   [55] 0.187177603 0.318169953 0.250635787 0.089356958 0.157792748 0.448617471 #>   [61] 0.184738607 0.055724539 0.116505735 0.115681725 0.241574198 0.151935391 #>   [67] 0.275663373 0.173253130 0.337248685 0.127510325 0.251185127 0.446054506 #>   [73] 0.392865867 0.393635317 0.033459035 0.211779296 0.473272067 0.258927332 #>   [79] 0.101591222 0.089116980 0.631267622 0.393865301 0.113270783 0.151737324 #>   [85] 0.078132808 0.081708161 0.295887172 0.205317147 0.151209651 0.052220611 #>   [91] 0.219906095 0.357713948 0.148342701 0.357890254 0.116098986 0.264225042 #>   [97] 0.173014795 0.062902355 0.317486956 0.650999772 0.198836254 0.253754685 #>  [103] 0.184873859 0.566555044 0.107693346 0.408535254 0.174224286 0.397199035 #>  [109] 0.163087944 0.363393790 0.515347705 0.255941739 0.496596733 0.157981725 #>  [115] 0.222839966 0.239810625 0.200994050 0.237112340 0.032241971 0.315784328 #>  [121] 0.175971686 0.134078947 0.057162657 0.036918718 0.118171424 0.180312843 #>  [127] 0.204414276 0.040453690 0.046040731 0.055127445 0.210270045 0.345137010 #>  [133] 0.118307211 0.018731424 0.411102822 0.249701600 0.411562396 0.204877183 #>  [139] 0.164264581 0.187180208 0.068106610 0.139448185 0.252372821 0.052082695 #>  [145] 0.051658506 0.020363252 0.188763544 0.298450097 0.291540059 0.380582488 #>  [151] 0.018353210 0.009053636 0.190343631 0.108475652 0.129158036 0.163563161 #>  [157] 0.271364688 0.213391745 0.270960196 0.204915855 0.065364898 0.098037010 #>  [163] 0.061275743 0.089965294 0.101511900 0.343341555 0.265999799 0.070171730 #>  [169] 0.066398102 0.361470191 0.149954482 0.374814630 0.730805111 0.196056304 #>  [175] 0.107651205 0.153475881 0.137679211 0.275725861 0.239862111 0.531051814 #>  [181] 0.398298826 0.131614281 0.290140628 0.527827268 0.260212028 0.279659488 #>  [187] 0.534666834 0.530057495 0.191766211 0.286207907 0.246789025 0.451985825 #>  [193] 0.206551819 0.451202760 0.104859537 0.223889282 0.132093019 0.355351507 #>  [199] 0.220098531 0.286153231 0.657347117 0.294838768 0.070324433 0.064953923 #>  [205] 0.250124043 0.245147337 0.395744105 0.209778865 0.216599144 0.322795116 #>  [211] 0.248003530 0.151544816 0.172333237 0.145790673 0.362780561 0.375407249 #>  [217] 0.257533945 0.265082806 0.263755164 0.247905312 0.379038841 0.114178017 #>  [223] 0.302770064 0.133728332 0.150444553 0.381769051 0.141163048 0.224130073 #>  [229] 0.163539030 0.159049443 0.223598712 0.145064635 0.086371041 0.374131949 #>  [235] 0.246570667 0.228813897 0.268612805 0.455820670 0.232597637 0.482426507 #>  [241] 0.277669116 0.349806946 0.207065699 0.400469125 0.422459470 0.452054393 #>  [247] 0.299037019 0.134764794 0.108953182 0.088725657 0.267710944 0.221934914 #>  [253] 0.141881784 0.079564677 0.432865442 0.198452947 0.388649957 0.299261391 #>  [259] 0.190195214 0.209493406 0.293170320 0.278999097 0.277624839 0.410025477 #>  [265] 0.149733304 0.219118778 0.348827250 0.132951919 0.120108629 0.197611968 #>  [271] 0.190692567 0.507189478 0.506119105 0.260506589 0.425929646 0.166073157 #>  [277] 0.267521981 0.073155273 0.134855036 0.434984990 0.131135118 0.079926530 #>  [283] 0.087018479 0.041237222 0.145716625 0.156082402 0.179013584 0.242171767 #>  [289] 0.029125857 0.029227187 0.014699325 0.022087182 0.028817522 0.203356630 #>  [295] 0.171723814 0.141458416 0.133361943 0.301324174 0.111257968 0.074444276 #>  [301] 0.293708377 0.145178475 0.196708262 0.322007140 0.129513240 0.244952801 #>  [307] 0.494226226 0.153050843 0.054320695 0.067558530 0.247298694 0.133254401 #>  [313] 0.035191883 0.530026877 0.455296596 0.274793699 0.262073866 0.266423142 #>  [319] 0.175853334 0.127991966 0.341387740 0.226455789 0.351558282 0.150298787 #>  [325] 0.311574487 0.383026261 0.487431771 0.324698688 0.264140101 0.371240302 #>  [331] 0.076454021 0.135209199 0.059441590 0.017699669 0.339236157 0.258826132 #>  [337] 0.163779706 0.155610304 0.252595437 0.137596274 0.150072082 0.075524283 #>  [343] 0.180986634 0.164041671 0.269228215 0.361340572 0.187035212 0.236555437 #>  [349] 0.434291882 0.198075785 0.230989596 0.186128489 0.149126676 0.228390744 #>  [355] 0.163496833 0.225062715 0.108893587 0.453454856 0.134594375 0.530977686 #>  [361] 0.141354935 0.187629556 0.295589041 0.399212193 0.078076601 0.125654424 #>  [367] 0.229307330 0.102597355 0.244803437 0.277448302 0.143167972 0.190302295 #>  [373] 0.405780223 0.395564394 0.143968913 0.284216403 0.116419754 0.177068615 #>  [379] 0.118231123 0.755376746 0.365404198 0.373073672 0.072844926 0.389285474 #>  [385] 0.325208797 0.207179835 0.327389809 0.268421406 0.300157320 0.044737029 #>  [391] 0.129577350 0.389019647 0.216348341 0.377476233 0.445407972 0.185592559 #>  [397] 0.228149735 0.213365433 0.105428499 0.041710519 0.108933384 0.133780052 #>  [403] 0.239134308 0.060466217 0.148806171 0.325834138 0.271907930 0.177974850 #>  [409] 0.115912245 0.399161280 0.314557721 0.182567493 0.322495486 0.183808349 #>  [415] 0.558678616 0.107890464 0.179707593 0.173869477 0.224096041 0.463132256 #>  [421] 0.378223683 0.325788688 0.218961115 0.141784580 0.232442776 0.387539081 #>  [427] 0.143286968 0.095259049 0.165234431 0.100435531 0.195091244 0.214697430 #>  [433] 0.209732817 0.519032968 0.092695534 0.280504550 0.385941514 0.253224977 #>  [439] 0.170340650 0.368222085 0.292001652 0.353253163 0.133378017 0.021144944 #>  [445] 0.434599561 0.138127902 0.140460011 0.172849726 0.008101998 0.026092763 #>  [451] 0.023577574 0.050597299 0.018495330 0.117452152 0.188708974 0.248127943 #>  [457] 0.313734650 0.107158607 0.308013534 0.154581145 0.352110468 0.162405616 #>  [463] 0.122178787 0.215561442 0.235855063 0.186677605 0.288218051 0.143916038 #>  [469] 0.200497087 0.167715643 0.205395903 0.184540300 0.197729822 0.067721542 #>  [475] 0.524583876 0.543239931 0.369970073 0.331015472 0.070120341 0.284726182 #>  [481] 0.246871763 0.363591796 0.185808819 0.255126670 0.354535918 0.364240978 #>  [487] 0.159469985 0.493689321 0.320495462 0.051050209 0.570268724 0.105734153 #>  [493] 0.153707925 0.049471166 0.058004851 0.175014884 0.412778068 0.146221753 #>  [499] 0.060419315 0.076592177 0.339479367 0.194604274 0.189512074 0.196472806 #>  [505] 0.138086510 0.722875759 0.632792792 0.263189724 0.111878515 0.314969701 #>  [511] 0.225210650 0.185065920 0.292438692 0.342117704 0.391623289 0.243223369 #>  [517] 0.175308704 0.213013024 0.104820582 0.057117761 0.198205938 0.213726909 #>  [523] 0.183241747 0.423337990 0.214987104 0.324527900 0.313156995 0.126471604 #>  [529] 0.194748943 0.328237163 0.228312333 0.116793932 0.122822120 0.030054961 #>  [535] 0.022102082 0.046481829 0.069464373 0.383551068 0.194556872 0.162974325 #>  [541] 0.027469799 0.111317185 0.240586734 0.654402449 0.273587042 0.213925578 #>  [547] 0.267976680 0.027142304 0.031200539 0.044018156 0.170688981 0.529085210 #>  [553] 0.251389481 0.161590843 0.279453716 0.125984922 0.049155641 0.068550058 #>  [559] 0.274671994 0.429496971 0.332831309 0.166736593 0.222732936 0.136575232 #>  [565] 0.386654358 0.326382151 0.281413852 0.164384997 0.167458753 0.371315021 #>  [571] 0.097160112 0.183750135 0.345426489 0.149117057 0.064409309 0.208301365 #>  [577] 0.214101435 0.299475097 0.625989934 0.420532256 0.329954932 0.096660811 #>  [583] 0.106719855 0.632551160 0.392931595 0.590282970 0.236016368 0.468804605 #>  [589] 0.182077500 0.224974679 0.148706647 0.400882051 0.371930217 0.225812775 #>  [595] 0.470237536 0.458926865 0.257373221 0.422490147 0.627567389 0.194115836 #>  [601] 0.191255286 0.045313190 0.118343154 0.304722119 0.189772812 0.539094130 #>  [607] 0.122654635 0.119443536 0.204129403 0.141826445 0.304240538 0.140025611 #>  [613] 0.235827973 0.403809672 0.492574154 0.513561297 0.180025782 0.294630775 #>  [619] 0.291047319 0.262182307 0.087775692 0.166797200 0.260868465 0.408443945 #>  [625] 0.199971881 0.355020364 0.162455673 0.120238166 0.133649297 0.131688656 #>  [631] 0.367054537 0.534959355 0.107214986 0.130982280 0.190320519 0.335629311 #>  [637] 0.137817238 0.066026247 0.287189336 0.184298010 0.278309642 0.453081585 #>  [643] 0.549027086 0.155018330 0.084018123 0.218908516 0.168593711 0.159248909 #>  [649] 0.093052100 0.026928633 0.139685936 0.329423895 0.349937880 0.226111277 #>  [655] 0.402553714 0.380028204 0.358788633 0.171605164 0.306222830 0.202176228 #>  [661] 0.223936456 0.412526677 0.181830019 0.417827953 0.738742155 0.673972497 #>  [667] 0.141811990 0.184197116 0.346255292 0.367850619 0.446544081 0.473290424 #>  [673] 0.325980834 0.356773217 0.361224333 0.236088382 0.441436908 0.204728467 #>  [679] 0.152032889 0.527577007 0.369505631 0.414031083 0.417986431 0.318109063 #>  [685] 0.312984304 0.335923887 0.136006442 0.193067206 0.422546887 0.159323367 #>  [691] 0.198964411 0.170502577 0.131705305 0.079709262 0.043876513 0.090242923 #>  [697] 0.297023772 0.118380308 0.065038572 0.337787049 0.489911031 0.135884945 #>  [703] 0.226483876 0.076893117 0.174156701 0.105401726 0.178130513 0.144304736 #>  [709] 0.410598420 0.310356629 0.264831689 0.101572825 0.326144570 0.325922239 #>  [715] 0.376630412 0.167681818 0.106886470 0.125616454 0.465043324 0.296707859 #>  [721] 0.197943818 0.246845780 0.638388970 0.207684000 0.005471166 0.225533637 #>  [727] 0.201251301 0.255633124 0.150175941 0.219341597 0.384569396 0.054087701 #>  [733] 0.125275856 0.074632900 0.044322454 0.231446020 0.105399218 0.110803348 #>  [739] 0.165605402 0.105556297 0.419876488 0.181050464 0.083580980 0.051891158 #>  [745] 0.185681540 0.534430647 0.281392012 0.198120428 0.449375698 0.172257937 #>  [751] 0.419613021 0.233221884 0.144109346 0.145593888 0.178552922 0.080608648 #>  [757] 0.273267806 0.099217248 0.121892203 0.147216747 0.129053642 0.288125965 #>  [763] 0.212372207 0.356624337 0.089396749 0.092667663 0.206339078 0.297853462 #>  [769] 0.543042102 0.694901944 0.090289652 0.011415028 0.031233505 0.040293003 #>  [775] 0.073135817 0.156461092 0.105490620 0.225318335 0.388662305 0.237908473 #>  [781] 0.228250883 0.213306637 0.416624780 0.212831618 0.298511049 0.257347698 #>  [787] 0.330044204 0.212197175 0.403699827 0.188448352 0.325886711 0.244163099 #>  [793] 0.246647916 0.100520667 0.076821368 0.583513706 0.323116087 0.091318775 #>  [799] 0.188771484 0.138078540 0.423875547 0.094895088 0.382555304 0.749063268 #>  [805] 0.449217021 0.518060491 0.121572409 0.080026724 0.095438052 0.115044272 #>  [811] 0.192651698 0.289023676 0.335052718 0.389105401 0.419967146 0.227737082 #>  [817] 0.129658772 0.139420288 0.120481383 0.140448470 0.184933295 0.087804250 #>  [823] 0.247995810 0.288960980 0.325502244 0.337499915 0.138374051 0.304120440 #>  [829] 0.320428940 0.223732232 0.371567019 0.258332181 0.212108062 0.239863435 #>  [835] 0.368327384 0.088039674 0.038728713 0.021368761 0.099509821 0.153297918 #>  [841] 0.197303923 0.092086542 0.011362000 0.076563351 0.011752095 0.011988577 #>  [847] 0.009895233 0.207598351 0.196837034 0.454264672 0.291573772 0.492410573 #>  [853] 0.153488686 0.226593706 0.309562165 0.196523022 0.242831148 0.061034174 #>  [859] 0.253172209 0.129954030 0.299530669 0.088041676 0.028611281 0.130685317 #>  [865] 0.215608085 0.147334787 0.153056822 0.181230387 0.161983737 0.247049336 #>  [871] 0.193858619 0.075984545 0.043185773 0.091685288 0.262104228 0.318822386 #>  [877] 0.533442588 0.250934445 0.216417278 0.483333877 0.401778625 0.199953893 #>  [883] 0.175985583 0.394524028 0.214587668 0.143101467 0.064845917 0.226707552 #>  [889] 0.154800890 0.138963526 0.073577699 0.401590292 0.333746288 0.043985979 #>  [895] 0.089219402 0.216575758 0.069677316 0.001692350 0.003393690 0.009562557 #>  [901] 0.021133339 0.045609265 0.179874502 0.158548224 0.119935124 0.178138485 #>  [907] 0.085785106 0.052077397 0.327084696 0.178497895 0.086933700 0.151282946 #>  [913] 0.196618427 0.118795060 0.290832947 0.241731143 0.250103838 0.125393252 #>  [919] 0.171919064 0.135928503 0.378387568 0.228685747 0.320881856 0.294529706 #>  [925] 0.114830315 0.064965825 0.091423591 0.374689263 0.303698229 0.325176987 #>  [931] 0.056083827 0.407874320 0.033460029 0.019438222 0.011206400 0.020656081 #>  [937] 0.086746656 0.103936842 0.089103481 0.133776442 0.061763294 0.278533007 #>  [943] 0.472460115 0.204787142 0.180578434 0.303954976 0.302800578 0.121994284 #>  [949] 0.191177276 0.195848541 0.117338307 0.083277284 0.450141287 0.132169308 #>  [955] 0.363378630 0.153279133 0.030463064 0.447623282 0.325125195 0.117896165 #>  [961] 0.127281355 0.102048715 0.098498100 0.009623487 0.084869203 0.576629994 #>  [967] 0.122030203 0.303117751 0.451113522 0.227168177 0.294432395 0.253817947 #>  [973] 0.286972313 0.335165184 0.134389239 0.253031943 0.327722413 0.396786499 #>  [979] 0.287520411 0.458509031 0.112561042 0.285245561 0.461795745 0.124256352 #>  [985] 0.267096238 0.302069689 0.327368679 0.234727931 0.325580288 0.227333362 #>  [991] 0.175786424 0.129018448 0.288319647 0.161400542 0.155344613 0.511998440 #>  [997] 0.100445593 0.108671217 0.019731039 0.015174309"},{"path":"https://openpharma.github.io/crmPack/reference/probit.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorthand for probit function — probit","title":"Shorthand for probit function — probit","text":"Shorthand probit function","code":""},{"path":"https://openpharma.github.io/crmPack/reference/probit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorthand for probit function — probit","text":"","code":"probit(x)"},{"path":"https://openpharma.github.io/crmPack/reference/probit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorthand for probit function — probit","text":"x function argument","code":""},{"path":"https://openpharma.github.io/crmPack/reference/probit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shorthand for probit function — probit","text":"probit(x)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/qinvGamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the quantile function of Inverse gamma distribution — qinvGamma","title":"Compute the quantile function of Inverse gamma distribution — qinvGamma","text":"Compute quantile function Inverse gamma distribution","code":""},{"path":"https://openpharma.github.io/crmPack/reference/qinvGamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the quantile function of Inverse gamma distribution — qinvGamma","text":"","code":"qinvGamma(p, a, b, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://openpharma.github.io/crmPack/reference/qinvGamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the quantile function of Inverse gamma distribution — qinvGamma","text":"p vector probabilities shape parameter inverse gamma distribution b scale parameter inverse gamma distribution lower.tail logical; TRUE (default), probabilities P(X  > x), otherwise, P(X <= x). log.p FALSE TRUE, probabilities/densities p returned log(p)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/rinvGamma.html","id":null,"dir":"Reference","previous_headings":"","what":"The random generation of the Inverse gamma distribution — rinvGamma","title":"The random generation of the Inverse gamma distribution — rinvGamma","text":"random generation Inverse gamma distribution","code":""},{"path":"https://openpharma.github.io/crmPack/reference/rinvGamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The random generation of the Inverse gamma distribution — rinvGamma","text":"","code":"rinvGamma(n, a, b)"},{"path":"https://openpharma.github.io/crmPack/reference/rinvGamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The random generation of the Inverse gamma distribution — rinvGamma","text":"n number observations shape parameter inverse gamma distribution b scale parameter inverse gamma distribution","code":""},{"path":"https://openpharma.github.io/crmPack/reference/safeInteger.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe conversion to integer vector — safeInteger","title":"Safe conversion to integer vector — safeInteger","text":"Safe conversion integer vector","code":""},{"path":"https://openpharma.github.io/crmPack/reference/safeInteger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe conversion to integer vector — safeInteger","text":"","code":"safeInteger(x)"},{"path":"https://openpharma.github.io/crmPack/reference/safeInteger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safe conversion to integer vector — safeInteger","text":"x numeric vector","code":""},{"path":"https://openpharma.github.io/crmPack/reference/safeInteger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safe conversion to integer vector — safeInteger","text":"integer vector","code":""},{"path":"https://openpharma.github.io/crmPack/reference/saveSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Determining if this Sample Should be Saved — saveSample","title":"Determining if this Sample Should be Saved — saveSample","text":"method determines sample given iteration saved. sample saved : burn-period matches step.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/saveSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determining if this Sample Should be Saved — saveSample","text":"","code":"saveSample(object, iteration, ...)  # S4 method for class 'McmcOptions' saveSample(object, iteration, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/saveSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determining if this Sample Should be Saved — saveSample","text":"object (McmcOptions) object based answer determined. iteration (count) current iteration index. ... used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/saveSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determining if this Sample Should be Saved — saveSample","text":"TRUE sample saved.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/saveSample.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determining if this Sample Should be Saved — saveSample","text":"saveSample(McmcOptions): determine sample saved.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/saveSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determining if this Sample Should be Saved — saveSample","text":"","code":"# Set up the MCMC option in order to have a burn-in of 10000 iterations and # then take every other iteration up to a collection of 10000 samples. my_options <- McmcOptions(burnin = 10000, step = 2, samples = 10000)  size(my_options) #> [1] 10000 saveSample(my_options, iteration = 5) #> [1] FALSE"},{"path":"https://openpharma.github.io/crmPack/reference/set_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Set and Save the RNG Seed — set_seed","title":"Helper Function to Set and Save the RNG Seed — set_seed","text":"code basically copied stats:::simulate.lm.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/set_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Set and Save the RNG Seed — set_seed","text":"","code":"set_seed(seed = NULL)"},{"path":"https://openpharma.github.io/crmPack/reference/set_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Set and Save the RNG Seed — set_seed","text":"seed object specifying random number generator initialized (\"seeded\"). Either NULL (default) integer used call set.seed() simulating response vectors. set, value saved seed slot returned object. default, NULL change random generator state.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/set_seed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to Set and Save the RNG Seed — set_seed","text":"integer vector containing random number generate state returned, order call function input reproduce obtained simulation results.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-DualSimulationsSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the summary of the dual-endpoint simulations — show,DualSimulationsSummary-method","title":"Show the summary of the dual-endpoint simulations — show,DualSimulationsSummary-method","text":"Show summary dual-endpoint simulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-DualSimulationsSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the summary of the dual-endpoint simulations — show,DualSimulationsSummary-method","text":"","code":"# S4 method for class 'DualSimulationsSummary' show(object)"},{"path":"https://openpharma.github.io/crmPack/reference/show-DualSimulationsSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the summary of the dual-endpoint simulations — show,DualSimulationsSummary-method","text":"object DualSimulationsSummary object want print","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-DualSimulationsSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the summary of the dual-endpoint simulations — show,DualSimulationsSummary-method","text":"invisibly returns data frame results one row appropriate column names","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-DualSimulationsSummary-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the summary of the dual-endpoint simulations — show,DualSimulationsSummary-method","text":"","code":"# Define the dose-grid. emptydata <- DataDual(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 30))  # Initialize the CRM model. my_model <- DualEndpointRW(   mean = c(0, 1),   cov = matrix(c(1, 0, 0, 1), nrow = 2),   sigma2betaW = 0.01,   sigma2W = c(a = 0.1, b = 0.1),   rho = c(a = 1, b = 1),   rw1 = TRUE )  # Choose the rule for selecting the next dose. my_next_best <- NextBestDualEndpoint(   target = c(0.9, 1),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort-size. my_size1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) my_size2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) my_size <- maxSize(my_size1, my_size2)  # Choose the rule for stopping. my_stopping1 <- StoppingTargetBiomarker(   target = c(0.9, 1),   prob = 0.5 )  # Stop with a small number of patients for illustration. my_stopping <- my_stopping1 | StoppingMinPatients(10) | StoppingMissingDose()  # Choose the rule for dose increments. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design. my_design <- DualDesign(   model = my_model,   data = emptydata,   nextBest = my_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = CohortSizeConst(3),   startingDose = 3 )  # Define scenarios for the TRUE toxicity and efficacy profiles. beta_mod <- function(dose, e0, eMax, delta1, delta2, scal) {   maxDens <- (delta1^delta1) * (delta2^delta2) / ((delta1 + delta2)^(delta1 + delta2))   dose <- dose / scal   e0 + eMax / maxDens * (dose^delta1) * (1 - dose)^delta2 }  true_biomarker <- function(dose) {   beta_mod(dose, e0 = 0.2, eMax = 0.6, delta1 = 5, delta2 = 5 * 0.5 / 0.5, scal = 100) }  true_tox <- function(dose) {   pnorm((dose - 60) / 10) }  # Draw the TRUE profiles. par(mfrow = c(1, 2)) curve(true_tox(x), from = 0, to = 80) curve(true_biomarker(x), from = 0, to = 80)   # Run the simulation on the desired design. # For illustration purposes only 1 trial outcome is generated and 5 burn-ins # to generate 20 samples are used here. my_sims <- simulate(   object = my_design,   trueTox = true_tox,   trueBiomarker = true_biomarker,   sigma2W = 0.01,   rho = 0,   nsim = 1,   parallel = FALSE,   seed = 3,   startingDose = 6,   mcmcOptions = McmcOptions(     burnin = 5,     step = 1,     samples = 20   ) )  # Show the summary of the simulations. show(summary(   my_sims,   trueTox = true_tox,   trueBiomarker = true_biomarker )) #> Summary of 1 simulations #>  #> Target toxicity interval was 20, 35 % #> Target dose interval corresponding to this was NA, NA  #> Intervals are corresponding to 10 and 90 % quantiles #>  #> Number of patients overall : mean 3 (3, 3)  #> Number of patients treated above target tox interval : mean 0 (0, 0)  #> Proportions of DLTs in the trials : mean 0 % (0 %, 0 %)  #> Mean toxicity risks for the patients on active : mean 0 % (0 %, 0 %)  #> Doses selected as MTD : mean 0 (0, 0)  #> True toxicity at doses selected : mean 0 % (0 %, 0 %)  #> Proportion of trials selecting target MTD: 0 % #> Dose most often selected as MTD: 0  #> Observed toxicity rate at dose most often selected: NaN % #> Fitted toxicity rate at dose most often selected : mean NA % (NA %, NA %)  #> Stop reason triggered: #>  P(0.9 ≤ Biomarker ≤ 1) ≥ 0.5 (relative) :  0 % #>  ≥ 10 patients dosed :  0 % #>  Stopped because of missing dose :  100 % #> Fitted biomarker level at dose most often selected : mean NA (NA, NA)"},{"path":"https://openpharma.github.io/crmPack/reference/show-GeneralSimulationsSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the summary of the simulations — show,GeneralSimulationsSummary-method","title":"Show the summary of the simulations — show,GeneralSimulationsSummary-method","text":"Show summary simulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-GeneralSimulationsSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the summary of the simulations — show,GeneralSimulationsSummary-method","text":"","code":"# S4 method for class 'GeneralSimulationsSummary' show(object)"},{"path":"https://openpharma.github.io/crmPack/reference/show-GeneralSimulationsSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the summary of the simulations — show,GeneralSimulationsSummary-method","text":"object GeneralSimulationsSummary object want print","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-GeneralSimulationsSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the summary of the simulations — show,GeneralSimulationsSummary-method","text":"invisibly returns data frame results one row appropriate column names","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-PseudoDualSimulationsSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the summary of Pseudo Dual simulations summary — show,PseudoDualSimulationsSummary-method","title":"Show the summary of Pseudo Dual simulations summary — show,PseudoDualSimulationsSummary-method","text":"Show summary Pseudo Dual simulations summary","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-PseudoDualSimulationsSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the summary of Pseudo Dual simulations summary — show,PseudoDualSimulationsSummary-method","text":"","code":"# S4 method for class 'PseudoDualSimulationsSummary' show(object)"},{"path":"https://openpharma.github.io/crmPack/reference/show-PseudoDualSimulationsSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the summary of Pseudo Dual simulations summary — show,PseudoDualSimulationsSummary-method","text":"object PseudoDualSimulationsSummary object want print","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-PseudoDualSimulationsSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the summary of Pseudo Dual simulations summary — show,PseudoDualSimulationsSummary-method","text":"invisibly returns data frame results one row appropriate column names","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-PseudoDualSimulationsSummary-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the summary of Pseudo Dual simulations summary — show,PseudoDualSimulationsSummary-method","text":"","code":"# Example where DLE and efficacy responses are considered in the simulations. # In simulations where no samples are used a data object with doses >= 1 needs # to be generated. emptydata <- DataDual(doseGrid = seq(25, 300, 25), placebo = FALSE)  # The DLE model must be of 'ModelTox' (e.g 'LogisticIndepBeta') class. dle_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = emptydata )  # The efficacy model of 'ModelEff' (e.g 'Effloglog') class. eff_model <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = emptydata )  # The escalation rule using the 'NextBestMaxGain' class. my_next_best <- NextBestMaxGain(   prob_target_drt = 0.35,   prob_target_eot = 0.3 )  # Allow increase of 200%. my_increments <- IncrementsRelative(intervals = 0, increments = 2)   # Cohort size of 3. my_size <- CohortSizeConst(size = 3)  # Stop when 36 subjects are treated or next dose is NA. my_stopping <- StoppingMinPatients(nPatients = 36) | StoppingMissingDose()  # Specify the design. (For details please refer to the 'DualResponsesDesign' example.) my_design <- DualResponsesDesign(   nextBest = my_next_best,   model = dle_model,   eff_model = eff_model,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = emptydata,   startingDose = 25 )  # Specify the true DLE and efficacy curves. my_truth_dle <- probFunction(dle_model, phi1 = -53.66584, phi2 = 10.50499) my_truth_eff <- efficacyFunction(eff_model, theta1 = -4.818429, theta2 = 3.653058)  # For illustration purpose only 2 simulations are produced. my_sim <- simulate(   object = my_design,   args = NULL,   trueDLE = my_truth_dle,   trueEff = my_truth_eff,   trueNu = 1 / 0.025,   nsim = 2,   seed = 819,   parallel = FALSE )  # Summary of the simulations. my_sum <- summary(   my_sim,   trueDLE = my_truth_dle,   trueEff = my_truth_eff )  # Show the summary of the simulations in a data frame. show(my_sum) #> Summary of 2 simulations #>  #> Target probability of DLE p(DLE) used at the end of a trial was 30 % #> The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  #> TDEOT at dose Grid was 150  #> Target p(DLE) used during a trial was 35 % #> The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  #> TDDT at dose Grid was 150  #> Number of patients overall : mean 36 (36, 36)  #> Number of patients treated above the target p(DLE) used at the end of a trial : mean 6 (6, 6)  #> Number of patients treated above the target p(DLE) used during a trial : mean 6 (6, 6)  #> Proportions of observed DLT in the trials : mean 22 % (20 %, 24 %)  #> Mean toxicity risks for the patients : mean 21 % (20 %, 22 %)  #> Doses selected as TDEOT : mean 125 (125, 125)  #> True toxicity at TDEOT : mean 5 % (5 %, 5 %)  #> Proportion of trials selecting the TDEOT: 0 % #> Proportion of trials selecting the TDDT: 0 % #> Dose most often selected as TDEOT: 125  #> Observed toxicity rate at dose most often selected: 7 % #> Fitted probabilities of DLE at dose most often selected : mean 23 % (21 %, 26 %)  #> The summary table of the final TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    137.6   143.9   150.2   150.2   156.5   162.8   #> The summary table of the final ratios of the TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    2.206   2.209   2.212   2.212   2.215   2.218   #> The summary table of the final TDDT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    155.6   162.5   169.3   169.3   176.2   183.1   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    137.6   140.5   143.5   143.5   146.4   149.4   #> The summary table of the final ratios of the optimal dose for stopping across #>                   all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    2.206   2.606   3.006   3.006   3.406   3.806   #>  #> Stop reason triggered: #>  ≥ 36 patients dosed :  100 % #>  Stopped because of missing dose :  0 % #> Target Gstar, the dose which gives the maximum gain value was 130.0097  #> Target Gstar at dose Grid was 125  #> The summary table of the final Gstar across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    146.2   147.0   147.8   147.8   148.6   149.4   #> The summary table of the final ratios of the Gstar across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    3.799   3.801   3.802   3.802   3.804   3.806   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    137.6   140.5   143.5   143.5   146.4   149.4   #> The summary table of the final ratios of the optimal dose for stopping across #>         all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    2.206   2.606   3.006   3.006   3.406   3.806   #> Fitted expected efficacy level at dose most often selected : mean 1 (1, 1)  #> Stop reason triggered: #>  ≥ 36 patients dosed :  100 % #>  Stopped because of missing dose :  0 %  # Example when DLE and efficacy samples are involved.  # The escalation rule using the 'NextBestMaxGainSamples' class. my_next_best <- NextBestMaxGainSamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, prob = 0.3))   },   mg_derive = function(mg_samples) {     as.numeric(quantile(mg_samples, prob = 0.5))   } )  # The design of 'DualResponsesSamplesDesign' class. my_design <- DualResponsesSamplesDesign(   nextBest = my_next_best,   cohort_size = my_size,   startingDose = 25,   model = dle_model,   eff_model = eff_model,   data = emptydata,   stopping = my_stopping,   increments = my_increments )  # MCMC options. # For illustration purpose 50 burn-ins to generate 200 samples are used. my_options <- McmcOptions(burnin = 50, step = 2, samples = 200)  # For illustration purpose 2 trials are simulated. my_sim <- simulate(   object = my_design,   args = NULL,   trueDLE = my_truth_dle,   trueEff = my_truth_eff,   trueNu = 1 / 0.025,   nsim = 2,   mcmcOptions = my_options,   seed = 819,   parallel = FALSE )  # Produce a summary of the simulations. my_sum <- summary(   my_sim,   trueDLE = my_truth_dle,   trueEff = my_truth_eff )  # Show the summary in data frame for the simulations. show(my_sum) #> Summary of 2 simulations #>  #> Target probability of DLE p(DLE) used at the end of a trial was 30 % #> The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  #> TDEOT at dose Grid was 150  #> Target p(DLE) used during a trial was 35 % #> The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  #> TDDT at dose Grid was 150  #> Number of patients overall : mean 24 (14, 34)  #> Number of patients treated above the target p(DLE) used at the end of a trial : mean 3 (1, 5)  #> Number of patients treated above the target p(DLE) used during a trial : mean 3 (1, 5)  #> Proportions of observed DLT in the trials : mean 7 % (1 %, 12 %)  #> Mean toxicity risks for the patients : mean 10 % (2 %, 18 %)  #> Doses selected as TDEOT : mean 100 (20, 180)  #> True toxicity at TDEOT : mean 44 % (9 %, 79 %)  #> Proportion of trials selecting the TDEOT: 0 % #> Proportion of trials selecting the TDDT: 0 % #> Dose most often selected as TDEOT: 0  #> Observed toxicity rate at dose most often selected: NaN % #> Fitted probabilities of DLE at dose most often selected : mean NA % (NA %, NA %)  #> The summary table of the final TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    1.736  55.402 109.068 109.068 162.734 216.400   #> The summary table of the final ratios of the TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>        1       1       1       1       1       1   #> The summary table of the final TDDT across all simulations #>      Min.  1st Qu.   Median     Mean  3rd Qu.     Max.   #>    0.1401  75.4949 150.8497 150.8497 226.2044 301.5592   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    1.736  55.402 109.068 109.068 162.734 216.400   #> The summary table of the final ratios of the optimal dose for stopping across #>                   all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>        1       1       1       1       1       1   #>  #> Stop reason triggered: #>  ≥ 36 patients dosed :  50 % #>  Stopped because of missing dose :  50 % #> Target Gstar, the dose which gives the maximum gain value was 130.0097  #> Target Gstar at dose Grid was 125  #> The summary table of the final Gstar across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>      300     300     300     300     300     300   #> The summary table of the final ratios of the Gstar across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>     1.00    1.35    1.70    1.70    2.05    2.40   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    1.736  55.402 109.068 109.068 162.734 216.400   #> The summary table of the final ratios of the optimal dose for stopping across #>         all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>        1       1       1       1       1       1   #> Fitted expected efficacy level at dose most often selected : mean NA (NA, NA)  #> Stop reason triggered: #>  ≥ 36 patients dosed :  50 % #>  Stopped because of missing dose :  50 %"},{"path":"https://openpharma.github.io/crmPack/reference/show-PseudoSimulationsSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the summary of the simulations — show,PseudoSimulationsSummary-method","title":"Show the summary of the simulations — show,PseudoSimulationsSummary-method","text":"Show summary simulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-PseudoSimulationsSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the summary of the simulations — show,PseudoSimulationsSummary-method","text":"","code":"# S4 method for class 'PseudoSimulationsSummary' show(object)"},{"path":"https://openpharma.github.io/crmPack/reference/show-PseudoSimulationsSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the summary of the simulations — show,PseudoSimulationsSummary-method","text":"object PseudoSimulationsSummary object want print","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-PseudoSimulationsSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the summary of the simulations — show,PseudoSimulationsSummary-method","text":"invisibly returns data frame results one row appropriate column names","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-PseudoSimulationsSummary-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the summary of the simulations — show,PseudoSimulationsSummary-method","text":"","code":"# Obtain the plot for the simulation results if only DLE responses are # considered in the simulations.  # Specified simulations when no DLE samples are used. emptydata <- Data(doseGrid = seq(25, 300, 25))  # The design only incorporate DLE responses and DLE samples are involved. # Specify the model of 'ModelTox' class eg 'LogisticIndepBeta' class model. my_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = emptydata )  # The escalation rule. td_next_best <- NextBestTD(   prob_target_drt = 0.35,   prob_target_eot = 0.3 )  # The cohort size is 3 subjects. my_size <- CohortSizeConst(size = 3)  # Allow increase of 200%. my_increments <- IncrementsRelative(intervals = 0, increments = 2)  # Specify the stopping rule with maximum sample size of 36 patients or when the # next dose is NA. my_stopping <- StoppingMinPatients(nPatients = 36) | StoppingMissingDose()  # Specify the design. (For details please refer to the 'TDDesign' example.) my_design <- TDDesign(   model = my_model,   nextBest = td_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = emptydata,   startingDose = 25 )  # Specify the truth of the DLE responses. my_truth <- probFunction(my_model, phi1 = -53.66584, phi2 = 10.50499)  # For illustration purpose only 1 simulation is produced. my_sim <- simulate(   object = my_design,   args = NULL,   truth = my_truth,   nsim = 1,   seed = 819,   parallel = FALSE )  # Summary of the simulations. my_sum <- summary(   my_sim,   truth = my_truth )  # Show the summary of the simulated results in a data frame. show(my_sum) #> Summary of 1 simulations #>  #> Target probability of DLE p(DLE) used at the end of a trial was 30 % #> The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  #> TDEOT at dose Grid was 150  #> Target p(DLE) used during a trial was 35 % #> The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  #> TDDT at dose Grid was 150  #> Number of patients overall : mean 36 (36, 36)  #> Number of patients treated above the target p(DLE) used at the end of a trial : mean 9 (9, 9)  #> Number of patients treated above the target p(DLE) used during a trial : mean 9 (9, 9)  #> Proportions of observed DLT in the trials : mean 22 % (22 %, 22 %)  #> Mean toxicity risks for the patients : mean 27 % (27 %, 27 %)  #> Doses selected as TDEOT : mean 150 (150, 150)  #> True toxicity at TDEOT : mean 26 % (26 %, 26 %)  #> Proportion of trials selecting the TDEOT: 100 % #> Proportion of trials selecting the TDDT: 100 % #> Dose most often selected as TDEOT: 150  #> Observed toxicity rate at dose most often selected: 33 % #> Fitted probabilities of DLE at dose most often selected : mean 29 % (29 %, 29 %)  #> The summary table of the final TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    155.1   155.1   155.1   155.1   155.1   155.1   #> The summary table of the final ratios of the TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    2.405   2.405   2.405   2.405   2.405   2.405   #> The summary table of the final TDDT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    177.8   177.8   177.8   177.8   177.8   177.8   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    155.1   155.1   155.1   155.1   155.1   155.1   #> The summary table of the final ratios of the optimal dose for stopping across #>                   all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    2.405   2.405   2.405   2.405   2.405   2.405   #>  #> Stop reason triggered: #>  ≥ 36 patients dosed :  100 % #>  Stopped because of missing dose :  0 %  # Example where DLE samples are involved.  # The escalation rule. td_next_best <- NextBestTDsamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, probs = 0.3))   } )  # The design. my_design <- TDsamplesDesign(   model = my_model,   nextBest = td_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = emptydata,   startingDose = 25 )  # For illustration purposes 2 trails are simulated with 50 burn-ins to generate # 200 samples. my_options <- McmcOptions(burnin = 50, step = 2, samples = 200)  my_sim <- simulate(   object = my_design,   args = NULL,   truth = my_truth,   nsim = 2,   seed = 819,   mcmcOptions = my_options,   parallel = FALSE )  # Produce a summary of the simulations. my_sum <- summary(   my_sim,   truth = my_truth )  # Show the summary of the simulated results in a data frame. show(my_sum) #> Summary of 2 simulations #>  #> Target probability of DLE p(DLE) used at the end of a trial was 30 % #> The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  #> TDEOT at dose Grid was 150  #> Target p(DLE) used during a trial was 35 % #> The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  #> TDDT at dose Grid was 150  #> Number of patients overall : mean 20 (6, 33)  #> Number of patients treated above the target p(DLE) used at the end of a trial : mean 6 (1, 11)  #> Number of patients treated above the target p(DLE) used during a trial : mean 6 (1, 11)  #> Proportions of observed DLT in the trials : mean 11 % (2 %, 20 %)  #> Mean toxicity risks for the patients : mean 16 % (3 %, 28 %)  #> Doses selected as TDEOT : mean 50 (10, 90)  #> True toxicity at TDEOT : mean 0 % (0 %, 0 %)  #> Proportion of trials selecting the TDEOT: 0 % #> Proportion of trials selecting the TDDT: 0 % #> Dose most often selected as TDEOT: 0  #> Observed toxicity rate at dose most often selected: NaN % #> Fitted probabilities of DLE at dose most often selected : mean NA % (NA %, NA %)  #> The summary table of the final TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    17.95   43.51   69.07   69.07   94.63  120.19   #> The summary table of the final ratios of the TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    473.5   781.3  1089.2  1089.2  1397.0  1704.8   #> The summary table of the final TDDT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    24.92   56.13   87.34   87.34  118.56  149.77   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    17.95   43.51   69.07   69.07   94.63  120.19   #> The summary table of the final ratios of the optimal dose for stopping across #>                   all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    473.5   781.3  1089.2  1089.2  1397.0  1704.8   #>  #> Stop reason triggered: #>  ≥ 36 patients dosed :  50 % #>  Stopped because of missing dose :  50 %"},{"path":"https://openpharma.github.io/crmPack/reference/show-SimulationsSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the summary of the simulations — show,SimulationsSummary-method","title":"Show the summary of the simulations — show,SimulationsSummary-method","text":"Show summary simulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-SimulationsSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the summary of the simulations — show,SimulationsSummary-method","text":"","code":"# S4 method for class 'SimulationsSummary' show(object)"},{"path":"https://openpharma.github.io/crmPack/reference/show-SimulationsSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the summary of the simulations — show,SimulationsSummary-method","text":"object SimulationsSummary object want print","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-SimulationsSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the summary of the simulations — show,SimulationsSummary-method","text":"invisibly returns data frame results one row appropriate column names","code":""},{"path":"https://openpharma.github.io/crmPack/reference/show-SimulationsSummary-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the summary of the simulations — show,SimulationsSummary-method","text":"","code":"# nolint start  # Define the dose-grid emptydata <- Data(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))  # Initialize the CRM model model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov =     matrix(c(1, -0.5, -0.5, 1),       nrow = 2     ),   ref_dose = 56 )  # Choose the rule for selecting the next dose myNextBest <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort-size mySize1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) mySize2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) mySize <- maxSize(mySize1, mySize2)  # Choose the rule for stopping myStopping1 <- StoppingMinCohorts(nCohorts = 3) myStopping2 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) myStopping3 <- StoppingMinPatients(nPatients = 20) myStopping <- (myStopping1 & myStopping2) | myStopping3  # Choose the rule for dose increments myIncrements <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design design <- Design(   model = model,   nextBest = myNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   data = emptydata,   startingDose = 3 )  ## define the true function myTruth <- probFunction(model, alpha0 = 7, alpha1 = 8)  # Run the simulation on the desired design # We only generate 1 trial outcome here for illustration, for the actual study # this should be increased of course options <- McmcOptions(   burnin = 100,   step = 2,   samples = 1000 ) time <- system.time(mySims <- simulate(design,   args = NULL,   truth = myTruth,   nsim = 1,   seed = 819,   mcmcOptions = options,   parallel = FALSE ))[3]  # Show the Summary of the Simulations show(summary(mySims, truth = myTruth)) #> Summary of 1 simulations #>  #> Target toxicity interval was 20, 35 % #> Target dose interval corresponding to this was 19.6, 21.6  #> Intervals are corresponding to 10 and 90 % quantiles #>  #> Number of patients overall : mean 13 (13, 13)  #> Number of patients treated above target tox interval : mean 6 (6, 6)  #> Proportions of DLTs in the trials : mean 23 % (23 %, 23 %)  #> Mean toxicity risks for the patients on active : mean 36 % (36 %, 36 %)  #> Doses selected as MTD : mean 25 (25, 25)  #> True toxicity at doses selected : mean 63 % (63 %, 63 %)  #> Proportion of trials selecting target MTD: 0 % #> Dose most often selected as MTD: 25  #> Observed toxicity rate at dose most often selected: 33 % #> Fitted toxicity rate at dose most often selected : mean 25 % (25 %, 25 %)  #> Stop reason triggered: #>  ≥ 3 cohorts dosed :  100 % #>  P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5 :  100 % #>  ≥ 20 patients dosed :  0 %  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DADesign-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate outcomes from a time-to-DLT augmented CRM design (DADesign) — simulate,DADesign-method","title":"Simulate outcomes from a time-to-DLT augmented CRM design (DADesign) — simulate,DADesign-method","text":"Simulate outcomes time--DLT augmented CRM design (DADesign)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DADesign-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate outcomes from a time-to-DLT augmented CRM design (DADesign) — simulate,DADesign-method","text":"","code":"# S4 method for class 'DADesign' simulate(   object,   nsim = 1L,   seed = NULL,   truthTox,   truthSurv,   trueTmax = NULL,   args = NULL,   firstSeparate = FALSE,   deescalate = TRUE,   mcmcOptions = McmcOptions(),   DA = TRUE,   parallel = FALSE,   nCores = min(parallel::detectCores(), 5),   derive = list(),   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DADesign-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate outcomes from a time-to-DLT augmented CRM design (DADesign) — simulate,DADesign-method","text":"object DADesign object want simulate data nsim number simulations (default: 1) seed see set_seed truthTox function takes input dose (vector) returns true probability (vector) toxicity time DLT occurs. Additional arguments can supplied args. truthSurv CDF takes input time (vector) returns true cumulative probability (vector) DLT occur conditioning patient DLTs. trueTmax (number NULL) true maximum time DLTs can occur. Note must larger thank Tmax object's base data, length DLT window, .e. time DLTs officially declared used trial. args data frame arguments truth function. column names correspond argument names, rows values arguments. rows appropriately recycled nsim simulations. order produce outcomes posterior predictive distribution, e.g, pass object contains data observed far, truth contains prob function model object, args contains posterior samples model. firstSeparate enroll first patient separately rest cohort? (default) yes, cohort closed DLT occurs patient. deescalate deescalation DLT occurs cohorts lower dose level. mcmcOptions object class McmcOptions, giving MCMC options evaluation trial. default, standard options used. DA document rename parameter make meaningful parallel simulation runs parallelized across clusters computer? (default) nCores many cores used parallel computing? Defaults number cores machine (maximum 5) derive named list functions derives statistics, based vector posterior MTD samples. list element must therefore accept one one argument, numeric vector, return number. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DADesign-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate outcomes from a time-to-DLT augmented CRM design (DADesign) — simulate,DADesign-method","text":"object class Simulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DADesign-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate outcomes from a time-to-DLT augmented CRM design (DADesign) — simulate,DADesign-method","text":"","code":"# nolint start  # Define the dose-grid and PEM parameters emptydata <- DataDA(   doseGrid = c(0.1, 0.5, 1, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)),   Tmax = 60 )  # Initialize the mDA-CRM model npiece_ <- 10 Tmax_ <- 60  lambda_prior <- function(k) {   npiece_ / (Tmax_ * (npiece_ - k + 0.5)) }  model <- DALogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56,   npiece = npiece_,   l = as.numeric(t(apply(as.matrix(c(1:npiece_), 1, npiece_), 2, lambda_prior))),   c_par = 2 ) # Choose the rule for dose increments myIncrements <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  myNextBest <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort-size mySize1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) mySize2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) mySize <- maxSize(mySize1, mySize2)  # Choose the rule for stopping myStopping1 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) myStopping2 <- StoppingMinPatients(nPatients = 50)  myStopping <- (myStopping1 | myStopping2)  # Choose the safety window mysafetywindow <- SafetyWindowConst(c(6, 2), 7, 7)  # Initialize the design design <- DADesign(   model = model,   increments = myIncrements,   nextBest = myNextBest,   stopping = myStopping,   cohort_size = mySize,   data = emptydata,   safetyWindow = mysafetywindow,   startingDose = 3 )  ## set up truth curves myTruth <- probFunction(model, alpha0 = 2, alpha1 = 3) curve(myTruth(x), from = 0, to = 100, ylim = c(0, 1))   exp_cond.cdf <- function(x, onset = 15) {   a <- pexp(28, 1 / onset, lower.tail = FALSE)   1 - (pexp(x, 1 / onset, lower.tail = FALSE) - a) / (1 - a) }  # set up simulation settings options <- McmcOptions(   burnin = 10,   step = 1,   samples = 200 )  mySims <- simulate(design,   args = NULL,   truthTox = myTruth,   truthSurv = exp_cond.cdf,   trueTmax = 80,   nsim = 2,   seed = 819,   mcmcOptions = options,   firstSeparate = TRUE,   deescalate = FALSE,   parallel = FALSE )  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-Design-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate outcomes from a CRM design — simulate,Design-method","title":"Simulate outcomes from a CRM design — simulate,Design-method","text":"Simulate outcomes CRM design","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-Design-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate outcomes from a CRM design — simulate,Design-method","text":"","code":"# S4 method for class 'Design' simulate(   object,   nsim = 1L,   seed = NULL,   truth,   args = NULL,   firstSeparate = FALSE,   mcmcOptions = McmcOptions(),   parallel = FALSE,   nCores = min(parallel::detectCores(), 5),   derive = list(),   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-Design-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate outcomes from a CRM design — simulate,Design-method","text":"object Design object want simulate data nsim number simulations (default: 1) seed see set_seed truth function takes input dose (vector) returns true probability (vector) toxicity. Additional arguments can supplied args. args data frame arguments truth function. column names correspond argument names, rows values arguments. rows appropriately recycled nsim simulations. order produce outcomes posterior predictive distribution, e.g, pass object contains data observed far, truth contains prob function model object, args contains posterior samples model. firstSeparate enroll first patient separately rest cohort? (default) yes, cohort closed DLT occurs patient. mcmcOptions object class McmcOptions, giving MCMC options evaluation trial. default, standard options used parallel simulation runs parallelized across clusters computer? (default) nCores many cores used parallel computing? Defaults number cores machine, maximum 5. derive named list functions derives statistics, based vector posterior MTD samples. list element must therefore accept one one argument, numeric vector, return number. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-Design-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate outcomes from a CRM design — simulate,Design-method","text":"object class Simulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-Design-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate outcomes from a CRM design — simulate,Design-method","text":"","code":"# nolint start  # Define the dose-grid emptydata <- Data(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))  # Initialize the CRM model model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov =     matrix(c(1, -0.5, -0.5, 1),       nrow = 2     ),   ref_dose = 56 )  # Choose the rule for selecting the next dose myNextBest <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort-size mySize1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) mySize2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) mySize <- maxSize(mySize1, mySize2)  # Choose the rule for stopping myStopping1 <- StoppingMinCohorts(nCohorts = 3) myStopping2 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) myStopping3 <- StoppingMinPatients(nPatients = 20) myStopping <- (myStopping1 & myStopping2) | myStopping3  # Choose the rule for dose increments myIncrements <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design design <- Design(   model = model,   nextBest = myNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   data = emptydata,   startingDose = 3 )  ## define the true function myTruth <- probFunction(model, alpha0 = 7, alpha1 = 8)  # Run the simulation on the desired design # We only generate 1 trial outcomes here for illustration, for the actual study # this should be increased of course options <- McmcOptions(   burnin = 100,   step = 1,   samples = 2000 )  time <- system.time(mySims <- simulate(design,   args = NULL,   truth = myTruth,   nsim = 1,   seed = 819,   mcmcOptions = options,   parallel = FALSE ))[3]  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DesignGrouped-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Method for the DesignGrouped Class — simulate,DesignGrouped-method","title":"Simulate Method for the DesignGrouped Class — simulate,DesignGrouped-method","text":"simulate method DesignGrouped designs.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DesignGrouped-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Method for the DesignGrouped Class — simulate,DesignGrouped-method","text":"","code":"# S4 method for class 'DesignGrouped' simulate(   object,   nsim = 1L,   seed = NULL,   truth,   combo_truth,   args = data.frame(),   firstSeparate = FALSE,   mcmcOptions = McmcOptions(),   parallel = FALSE,   nCores = min(parallelly::availableCores(), 5),   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DesignGrouped-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Method for the DesignGrouped Class — simulate,DesignGrouped-method","text":"object (DesignGrouped) design want simulate trials . nsim (number) many trials simulated. seed (RNGstate) generated set_seed(). truth (function) function takes input dose (vector) returns true probability (vector) toxicity mono arm. Additional arguments can supplied args. combo_truth (function) truth combo arm. args (data.frame) optional data.frame arguments work truth combo_truth functions. column names correspond argument names, rows values arguments. rows appropriately recycled nsim simulations. firstSeparate (flag) whether enroll first patient separately rest cohort close cohort case DLT occurs first patient. mcmcOptions (McmcOptions) MCMC options evaluation trial. parallel (flag) whether simulation runs parallelized across cores computer. nCores (number) many cores used parallel computing. ... used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DesignGrouped-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Method for the DesignGrouped Class — simulate,DesignGrouped-method","text":"list mono combo simulation results Simulations objects.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DesignGrouped-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Method for the DesignGrouped Class — simulate,DesignGrouped-method","text":"","code":"# Assemble ingredients for our group design. my_stopping <- StoppingTargetProb(target = c(0.2, 0.35), prob = 0.5) |   StoppingMinPatients(10) |   StoppingMissingDose() my_increments <- IncrementsDoseLevels(levels = 3L) my_next_best <- NextBestNCRM(   target = c(0.2, 0.3),   overdose = c(0.3, 1),   max_overdose_prob = 0.3 ) my_cohort_size <- CohortSizeConst(3) empty_data <- Data(doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2))) my_model <- LogisticLogNormalGrouped(   mean = c(-4, -4, -4, -4),   cov = diag(rep(6, 4)),   ref_dose = 0.1 )  # Put together the design. Note that if we only specify the mono arm, # then the combo arm is having the same settings. my_design <- DesignGrouped(   model = my_model,   mono = Design(     model = my_model,     stopping = my_stopping,     increments = my_increments,     nextBest = my_next_best,     cohort_size = my_cohort_size,     data = empty_data,     startingDose = 0.1   ),   first_cohort_mono_only = TRUE,   same_dose_for_all = TRUE )  # Set up a realistic simulation scenario. my_truth <- function(x) plogis(-4 + 0.2 * log(x / 0.1)) my_combo_truth <- function(x) plogis(-4 + 0.5 * log(x / 0.1)) matplot(   x = empty_data@doseGrid,   y = cbind(     mono = my_truth(empty_data@doseGrid),     combo = my_combo_truth(empty_data@doseGrid)   ),   type = \"l\",   ylab = \"true DLT prob\",   xlab = \"dose\" ) legend(\"topright\", c(\"mono\", \"combo\"), lty = c(1, 2), col = c(1, 2))  # Start the simulations. set.seed(123) my_sims <- simulate(   my_design,   nsim = 1, # This should be at least 100 in actual applications.   seed = 123,   truth = my_truth,   combo_truth = my_combo_truth )  # Looking at the summary of the simulations: mono_sims_sum <- summary(my_sims$mono, truth = my_truth) combo_sims_sum <- summary(my_sims$combo, truth = my_combo_truth)  mono_sims_sum #> Summary of 1 simulations #>  #> Target toxicity interval was 20, 35 % #> Target dose interval corresponding to this was NA, NA  #> Intervals are corresponding to 10 and 90 % quantiles #>  #> Number of patients overall : mean 12 (12, 12)  #> Number of patients treated above target tox interval : mean 0 (0, 0)  #> Proportions of DLTs in the trials : mean 0 % (0 %, 0 %)  #> Mean toxicity risks for the patients on active : mean 3 % (3 %, 3 %)  #> Doses selected as MTD : mean 12 (12, 12)  #> True toxicity at doses selected : mean 5 % (5 %, 5 %)  #> Proportion of trials selecting target MTD: 0 % #> Dose most often selected as MTD: 12  #> Observed toxicity rate at dose most often selected: NaN % #> Fitted toxicity rate at dose most often selected : mean 8 % (8 %, 8 %)  #> Stop reason triggered: #>  P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5 :  0 % #>  ≥ 10 patients dosed :  100 % #>  Stopped because of missing dose :  0 % combo_sims_sum #> Summary of 1 simulations #>  #> Target toxicity interval was 20, 35 % #> Target dose interval corresponding to this was 18.6, NA  #> Intervals are corresponding to 10 and 90 % quantiles #>  #> Number of patients overall : mean 12 (12, 12)  #> Number of patients treated above target tox interval : mean 0 (0, 0)  #> Proportions of DLTs in the trials : mean 17 % (17 %, 17 %)  #> Mean toxicity risks for the patients on active : mean 8 % (8 %, 8 %)  #> Doses selected as MTD : mean 10 (10, 10)  #> True toxicity at doses selected : mean 15 % (15 %, 15 %)  #> Proportion of trials selecting target MTD: 0 % #> Dose most often selected as MTD: 10  #> Observed toxicity rate at dose most often selected: NaN % #> Fitted toxicity rate at dose most often selected : mean 21 % (21 %, 21 %)  #> Stop reason triggered: #>  P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5 :  0 % #>  ≥ 10 patients dosed :  100 % #>  Stopped because of missing dose :  0 %  plot(mono_sims_sum) plot(combo_sims_sum)   # Looking at specific simulated trials: trial_index <- 1 plot(my_sims$mono@data[[trial_index]])  plot(my_sims$combo@data[[trial_index]])"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualDesign-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate outcomes from a dual-endpoint design — simulate,DualDesign-method","title":"Simulate outcomes from a dual-endpoint design — simulate,DualDesign-method","text":"Simulate outcomes dual-endpoint design","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualDesign-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate outcomes from a dual-endpoint design — simulate,DualDesign-method","text":"","code":"# S4 method for class 'DualDesign' simulate(   object,   nsim = 1L,   seed = NULL,   trueTox,   trueBiomarker,   args = NULL,   sigma2W,   rho = 0,   firstSeparate = FALSE,   mcmcOptions = McmcOptions(),   parallel = FALSE,   nCores = min(parallel::detectCores(), 5),   derive = list(),   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualDesign-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate outcomes from a dual-endpoint design — simulate,DualDesign-method","text":"object DualDesign object want simulate data nsim number simulations (default: 1) seed see set_seed trueTox function takes input dose (vector) returns true probability (vector) toxicity. Additional arguments can supplied args. trueBiomarker function takes input dose (vector) returns true biomarker level (vector). Additional arguments can supplied args. args data frame arguments trueTox trueBiomarker function. column names correspond argument names, rows values arguments. rows appropriately recycled nsim simulations. sigma2W variance biomarker measurements rho correlation toxicity biomarker measurements (default: 0) firstSeparate enroll first patient separately rest cohort? (default) yes, cohort closed DLT occurs patient. mcmcOptions object class McmcOptions, giving MCMC options evaluation trial. default, standard options used parallel simulation runs parallelized across clusters computer? (default) nCores many cores used parallel computing? Defaults number cores machine, maximum 5. derive named list functions derives statistics, based vector posterior MTD samples. list element must therefore accept one one argument, numeric vector, return number. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualDesign-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate outcomes from a dual-endpoint design — simulate,DualDesign-method","text":"object class DualSimulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualDesign-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate outcomes from a dual-endpoint design — simulate,DualDesign-method","text":"","code":"# nolint start  # Define the dose-grid emptydata <- DataDual(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))  # Initialize the CRM model model <- DualEndpointRW(   mean = c(0, 1),   cov = matrix(c(1, 0, 0, 1), nrow = 2),   sigma2betaW = 0.01,   sigma2W = c(a = 0.1, b = 0.1),   use_log_dose = TRUE,   ref_dose = 2,   rho = c(a = 1, b = 1),   rw1 = TRUE )  # Choose the rule for selecting the next dose myNextBest <- NextBestDualEndpoint(   target = c(0.9, 1),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort-size mySize1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) mySize2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) mySize <- maxSize(mySize1, mySize2)  # Choose the rule for stopping myStopping4 <- StoppingTargetBiomarker(   target = c(0.9, 1),   prob = 0.5 ) myStopping <- myStopping4 | StoppingMinPatients(10)  # Choose the rule for dose increments myIncrements <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design design <- DualDesign(   model = model,   data = emptydata,   nextBest = myNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   startingDose = 3 )  # define scenarios for the TRUE toxicity and efficacy profiles betaMod <- function(dose, e0, eMax, delta1, delta2, scal) {   maxDens <- (delta1^delta1) * (delta2^delta2) / ((delta1 + delta2)^(delta1 + delta2))   dose <- dose / scal   e0 + eMax / maxDens * (dose^delta1) * (1 - dose)^delta2 }  trueBiomarker <- function(dose) {   betaMod(dose, e0 = 0.2, eMax = 0.6, delta1 = 5, delta2 = 5 * 0.5 / 0.5, scal = 100) }  trueTox <- function(dose) {   pnorm((dose - 60) / 10) }  # Draw the TRUE profiles par(mfrow = c(1, 2)) curve(trueTox(x), from = 0, to = 80) curve(trueBiomarker(x), from = 0, to = 80)   # Run the simulation on the desired design # We only generate 1 trial outcome here for illustration, for the actual study # this should be increased of course, similarly for the McmcOptions - # they also need to be increased. mySims <- simulate(design,   trueTox = trueTox,   trueBiomarker = trueBiomarker,   sigma2W = 0.01,   rho = 0,   nsim = 1,   parallel = FALSE,   seed = 3,   startingDose = 6,   mcmcOptions =     McmcOptions(       burnin = 100,       step = 1,       samples = 300     ) )  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualResponsesDesign-method.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a methods to simulate dose escalation procedure using both DLE and efficacy responses. This is a method based on the DualResponsesDesign where DLEmodel used are of ModelTox class object and efficacy model used are of ModelEff class object. In addition, no DLE and efficacy samples are involved or generated in the simulation process — simulate,DualResponsesDesign-method","title":"This is a methods to simulate dose escalation procedure using both DLE and efficacy responses. This is a method based on the DualResponsesDesign where DLEmodel used are of ModelTox class object and efficacy model used are of ModelEff class object. In addition, no DLE and efficacy samples are involved or generated in the simulation process — simulate,DualResponsesDesign-method","text":"methods simulate dose escalation procedure using DLE efficacy responses. method based DualResponsesDesign DLEmodel used ModelTox class object efficacy model used ModelEff class object. addition, DLE efficacy samples involved generated simulation process","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualResponsesDesign-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a methods to simulate dose escalation procedure using both DLE and efficacy responses. This is a method based on the DualResponsesDesign where DLEmodel used are of ModelTox class object and efficacy model used are of ModelEff class object. In addition, no DLE and efficacy samples are involved or generated in the simulation process — simulate,DualResponsesDesign-method","text":"","code":"# S4 method for class 'DualResponsesDesign' simulate(   object,   nsim = 1L,   seed = NULL,   trueDLE,   trueEff,   trueNu,   args = NULL,   firstSeparate = FALSE,   parallel = FALSE,   nCores = min(parallel::detectCores(), 5L),   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualResponsesDesign-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a methods to simulate dose escalation procedure using both DLE and efficacy responses. This is a method based on the DualResponsesDesign where DLEmodel used are of ModelTox class object and efficacy model used are of ModelEff class object. In addition, no DLE and efficacy samples are involved or generated in the simulation process — simulate,DualResponsesDesign-method","text":"object DualResponsesDesign object want simulate data nsim number simulations (default :1) seed see set_seed trueDLE function takes input dose (vector) returns true probability (vector) occurrence DLE. Additional arguments can supplied args. trueEff function takes input dose (vector) returns expected efficacy responses (vector). Additional arguments can supplied args. trueNu precision, inverse variance efficacy responses args data frame arguments trueDLE trueEff function. column names correspond argument names, rows values arguments. rows appropriately recycled nsim simulations. firstSeparate enroll first patient separately rest cohort? (default) yes, cohort closed DLT occurs patient. parallel simulation runs parallelized across clusters computer? (default) nCores many cores used parallel computing? Defaults number cores machine, maximum 5. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualResponsesDesign-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is a methods to simulate dose escalation procedure using both DLE and efficacy responses. This is a method based on the DualResponsesDesign where DLEmodel used are of ModelTox class object and efficacy model used are of ModelEff class object. In addition, no DLE and efficacy samples are involved or generated in the simulation process — simulate,DualResponsesDesign-method","text":"object class PseudoDualSimulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualResponsesDesign-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This is a methods to simulate dose escalation procedure using both DLE and efficacy responses. This is a method based on the DualResponsesDesign where DLEmodel used are of ModelTox class object and efficacy model used are of ModelEff class object. In addition, no DLE and efficacy samples are involved or generated in the simulation process — simulate,DualResponsesDesign-method","text":"","code":"# nolint start  ## Simulate dose-escalation procedure based on DLE and efficacy responses where no DLE ## and efficacy samples are used ## we need a data object with doses >= 1: data <- DataDual(doseGrid = seq(25, 300, 25), placebo = FALSE) ## First for the DLE model ## The DLE model must be of 'ModelTox' (e.g 'LogisticIndepBeta') class DLEmodel <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = data )  ## The efficacy model of 'ModelEff' (e.g 'Effloglog') class Effmodel <- Effloglog(   eff = c(1.223, 2.513), eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025), data = data )  ## The escalation rule using the 'NextBestMaxGain' class mynextbest <- NextBestMaxGain(   prob_target_drt = 0.35,   prob_target_eot = 0.3 )   ## The increments (see Increments class examples) ## 200% allowable increase for dose below 300 and 200% increase for dose above 300 myIncrements <- IncrementsRelative(   intervals = c(25, 300),   increments = c(2, 2) ) ## cohort size of 3 mySize <- CohortSizeConst(size = 3) ## Stop only when 36 subjects are treated myStopping <- StoppingMinPatients(nPatients = 36) ## Now specified the design with all the above information and starting with a dose of 25  ## Specified the design(for details please refer to the 'DualResponsesDesign' example) design <- DualResponsesDesign(   nextBest = mynextbest,   model = DLEmodel,   eff_model = Effmodel,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   data = data, startingDose = 25 ) ## Specify the true DLE and efficacy curves myTruthDLE <- probFunction(DLEmodel, phi1 = -53.66584, phi2 = 10.50499) myTruthEff <- efficacyFunction(Effmodel, theta1 = -4.818429, theta2 = 3.653058)  ## The true gain curve can also be seen myTruthGain <- function(dose) {   return((myTruthEff(dose)) / (1 + (myTruthDLE(dose) / (1 - myTruthDLE(dose))))) }   ## Then specified the simulations and generate the trial ## For illustration purpose only 1 simulation is produced (nsim=1). options <- McmcOptions(burnin = 100, step = 2, samples = 200) mySim <- simulate(   object = design,   args = NULL,   trueDLE = myTruthDLE,   trueEff = myTruthEff,   trueNu = 1 / 0.025,   nsim = 1,   seed = 819,   parallel = FALSE )  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualResponsesSamplesDesign-method.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a methods to simulate dose escalation procedure using both DLE and efficacy responses. This is a method based on the DualResponsesSamplesDesign where DLEmodel used are of ModelTox class object and efficacy model used are of ModelEff class object (special case is EffFlexi class model object). In addition, DLE and efficacy samples are involved or generated in the simulation process — simulate,DualResponsesSamplesDesign-method","title":"This is a methods to simulate dose escalation procedure using both DLE and efficacy responses. This is a method based on the DualResponsesSamplesDesign where DLEmodel used are of ModelTox class object and efficacy model used are of ModelEff class object (special case is EffFlexi class model object). In addition, DLE and efficacy samples are involved or generated in the simulation process — simulate,DualResponsesSamplesDesign-method","text":"methods simulate dose escalation procedure using DLE efficacy responses. method based DualResponsesSamplesDesign DLEmodel used ModelTox class object efficacy model used ModelEff class object (special case EffFlexi class model object). addition, DLE efficacy samples involved generated simulation process","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualResponsesSamplesDesign-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a methods to simulate dose escalation procedure using both DLE and efficacy responses. This is a method based on the DualResponsesSamplesDesign where DLEmodel used are of ModelTox class object and efficacy model used are of ModelEff class object (special case is EffFlexi class model object). In addition, DLE and efficacy samples are involved or generated in the simulation process — simulate,DualResponsesSamplesDesign-method","text":"","code":"# S4 method for class 'DualResponsesSamplesDesign' simulate(   object,   nsim = 1L,   seed = NULL,   trueDLE,   trueEff,   trueNu = NULL,   trueSigma2 = NULL,   trueSigma2betaW = NULL,   args = NULL,   firstSeparate = FALSE,   mcmcOptions = McmcOptions(),   parallel = FALSE,   nCores = min(parallel::detectCores(), 5L),   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualResponsesSamplesDesign-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a methods to simulate dose escalation procedure using both DLE and efficacy responses. This is a method based on the DualResponsesSamplesDesign where DLEmodel used are of ModelTox class object and efficacy model used are of ModelEff class object (special case is EffFlexi class model object). In addition, DLE and efficacy samples are involved or generated in the simulation process — simulate,DualResponsesSamplesDesign-method","text":"object DualResponsesSamplesDesign object want simulate data nsim number simulations (default :1) seed see set_seed trueDLE function takes input dose (vector) returns true probability (vector) occurrence DLE. Additional arguments can supplied args. trueEff function takes input dose (vector) returns expected efficacy responses (vector). Additional arguments can supplied args. trueNu (codeEffFlexi) precision, inverse variance efficacy responses trueSigma2 (codeEffFlexi) true variance efficacy responses must single positive scalar. trueSigma2betaW (codeEffFlexi) true variance random walk model used smoothing. must single positive scalar. args data frame arguments trueDLE trueEff function. column names correspond argument names, rows values arguments. rows appropriately recycled nsim simulations. firstSeparate enroll first patient separately rest cohort? (default) yes, cohort closed DLT occurs patient. mcmcOptions object class McmcOptions, giving MCMC options evaluation trial. default, standard options used parallel simulation runs parallelized across clusters computer? (default) nCores many cores used parallel computing? Defaults number cores machine, maximum 5. ... used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualResponsesSamplesDesign-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is a methods to simulate dose escalation procedure using both DLE and efficacy responses. This is a method based on the DualResponsesSamplesDesign where DLEmodel used are of ModelTox class object and efficacy model used are of ModelEff class object (special case is EffFlexi class model object). In addition, DLE and efficacy samples are involved or generated in the simulation process — simulate,DualResponsesSamplesDesign-method","text":"object class PseudoDualSimulations PseudoDualFlexiSimulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-DualResponsesSamplesDesign-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This is a methods to simulate dose escalation procedure using both DLE and efficacy responses. This is a method based on the DualResponsesSamplesDesign where DLEmodel used are of ModelTox class object and efficacy model used are of ModelEff class object (special case is EffFlexi class model object). In addition, DLE and efficacy samples are involved or generated in the simulation process — simulate,DualResponsesSamplesDesign-method","text":"","code":"# nolint start  ## Simulate dose-escalation procedure based on DLE and efficacy responses where DLE ## and efficacy samples are used data <- DataDual(doseGrid = seq(25, 300, 25), placebo = FALSE) ## First for the DLE model ## The DLE model must be of 'ModelTox' (e.g 'LogisticIndepBeta') class DLEmodel <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = data )  ## The efficacy model of 'ModelEff' (e.g 'Effloglog') class Effmodel <- Effloglog(   eff = c(1.223, 2.513), eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025), data = data )   ## The escalation rule using the 'NextBestMaxGainSamples' class mynextbest <- NextBestMaxGainSamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, prob = 0.3))   },   mg_derive = function(mg_samples) {     as.numeric(quantile(mg_samples, prob = 0.5))   } )  ## The increments (see Increments class examples) ## 200% allowable increase for dose below 300 and 200% increase for dose above 300 myIncrements <- IncrementsRelative(   intervals = c(25, 300),   increments = c(2, 2) ) ## cohort size of 3 mySize <- CohortSizeConst(size = 3) ## Stop only when 10 subjects are treated (only for illustration such a low ## sample size) myStopping <- StoppingMinPatients(nPatients = 10) ## Now specified the design with all the above information and starting with ## a dose of 25   ## Specified the design design <- DualResponsesSamplesDesign(   nextBest = mynextbest,   cohort_size = mySize,   startingDose = 25,   model = DLEmodel,   eff_model = Effmodel,   data = data,   stopping = myStopping,   increments = myIncrements ) ## specified the true DLE and efficacy curve myTruthDLE <- probFunction(DLEmodel, phi1 = -53.66584, phi2 = 10.50499) myTruthEff <- efficacyFunction(Effmodel, theta1 = -4.818429, theta2 = 3.653058)  ## The true gain curve can also be seen myTruthGain <- function(dose) {   return((myTruthEff(dose)) / (1 + (myTruthDLE(dose) / (1 - myTruthDLE(dose))))) }  ## simulate the trial for 10 times involving samples ## for illustration purpose we use 10 burn-ins to generate 50 samples options <- McmcOptions(burnin = 10, step = 1, samples = 50) ## For illustration purpose only 1 simulations are produced (nsim=1). mySim <- simulate(design,   args = NULL,   trueDLE = myTruthDLE,   trueEff = myTruthEff,   trueNu = 1 / 0.025,   nsim = 1,   mcmcOptions = options,   seed = 819,   parallel = FALSE )    ## Simulate dose-escalation procedure based on DLE and efficacy responses where DLE ## and efficacy samples are used ## when the efficacy model is of 'EffFlexi' class Effmodel <- EffFlexi(   eff = c(1.223, 2.513), eff_dose = c(25, 300),   sigma2W = c(a = 0.1, b = 0.1), sigma2betaW = c(a = 20, b = 50), rw1 = FALSE, data = data )   ## Specified the design design <- DualResponsesSamplesDesign(   nextBest = mynextbest,   cohort_size = mySize,   startingDose = 25,   model = DLEmodel,   eff_model = Effmodel,   data = data,   stopping = myStopping,   increments = myIncrements ) ## specified the true DLE curve and the true expected efficacy values at all dose levels myTruthDLE <- probFunction(DLEmodel, phi1 = -53.66584, phi2 = 10.50499)  myTruthEff <- c(   -0.5478867, 0.1645417, 0.5248031, 0.7604467,   0.9333009, 1.0687031, 1.1793942, 1.2726408,   1.3529598, 1.4233411, 1.4858613, 1.5420182 ) ## The true gain curve can also be seen d1 <- data@doseGrid myTruthGain <- (myTruthEff) / (1 + (myTruthDLE(d1) / (1 - myTruthDLE(d1))))   mySim <- simulate(   object = design,   args = NULL,   trueDLE = myTruthDLE,   trueEff = myTruthEff,   trueSigma2 = 0.025,   trueSigma2betaW = 1,   mcmcOptions = options,   nsim = 1,   seed = 819,   parallel = FALSE )  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-RuleDesign-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate outcomes from a rule-based design — simulate,RuleDesign-method","title":"Simulate outcomes from a rule-based design — simulate,RuleDesign-method","text":"Simulate outcomes rule-based design","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-RuleDesign-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate outcomes from a rule-based design — simulate,RuleDesign-method","text":"","code":"# S4 method for class 'RuleDesign' simulate(   object,   nsim = 1L,   seed = NULL,   truth,   args = NULL,   parallel = FALSE,   nCores = min(parallel::detectCores(), 5L),   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-RuleDesign-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate outcomes from a rule-based design — simulate,RuleDesign-method","text":"object RuleDesign object want simulate data nsim number simulations (default: 1) seed see set_seed truth function takes input dose (vector) returns true probability (vector) toxicity. Additional arguments can supplied args. args data frame arguments truth function. column names correspond argument names, rows values arguments. rows appropriately recycled nsim simulations. parallel simulation runs parallelized across clusters computer? (default) nCores many cores used parallel computing? Defaults number cores machine, maximum 5. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-RuleDesign-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate outcomes from a rule-based design — simulate,RuleDesign-method","text":"object class GeneralSimulations","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-RuleDesign-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate outcomes from a rule-based design — simulate,RuleDesign-method","text":"","code":"# nolint start  # Define the dose-grid emptydata <- Data(doseGrid = c(5, 10, 15, 25, 35, 50, 80))  # inizialing a 3+3 design with constant cohort size of 3 and # starting dose equal 5 myDesign <- RuleDesign(   nextBest = NextBestThreePlusThree(),   cohort_size = CohortSizeConst(size = 3L),   data = emptydata,   startingDose = 5 )  model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 50 )  ## define the true function myTruth <- probFunction(model, alpha0 = 7, alpha1 = 8)  # Perform the simulation ## For illustration purpose only 10 simulation is produced (nsim=10). threeSims <- simulate(myDesign,   nsim = 10,   seed = 35,   truth = myTruth,   parallel = FALSE )  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-TDDesign-method.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a methods to simulate dose escalation procedure only using the DLE responses. This is a method based on the TDDesign where model used are of ModelTox class object and no samples are involved. — simulate,TDDesign-method","title":"This is a methods to simulate dose escalation procedure only using the DLE responses. This is a method based on the TDDesign where model used are of ModelTox class object and no samples are involved. — simulate,TDDesign-method","text":"methods simulate dose escalation procedure using DLE responses. method based TDDesign model used ModelTox class object samples involved.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-TDDesign-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a methods to simulate dose escalation procedure only using the DLE responses. This is a method based on the TDDesign where model used are of ModelTox class object and no samples are involved. — simulate,TDDesign-method","text":"","code":"# S4 method for class 'TDDesign' simulate(   object,   nsim = 1L,   seed = NULL,   truth,   args = NULL,   firstSeparate = FALSE,   parallel = FALSE,   nCores = min(parallel::detectCores(), 5L),   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-TDDesign-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a methods to simulate dose escalation procedure only using the DLE responses. This is a method based on the TDDesign where model used are of ModelTox class object and no samples are involved. — simulate,TDDesign-method","text":"object TDDesign object want simulate data nsim number simulations (default :1) seed see set_seed truth function takes input dose (vector) returns true probability (vector) occurrence DLE. Additional arguments can supplied args. args data frame arguments truth function. column names correspond argument names, rows values arguments. rows appropriately recycled nsim simulations. order produce outcomes posterior predictive distribution, e.g, pass object contains data observed far, truth contains prob function model object, args contains posterior samples model. firstSeparate enroll first patient separately rest cohort? (default) yes, cohort closed DLT occurs patient. parallel simulation runs parallelized across clusters computer? (default) nCores many cores used parallel computing? Defaults number cores machine, maximum 5. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-TDDesign-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is a methods to simulate dose escalation procedure only using the DLE responses. This is a method based on the TDDesign where model used are of ModelTox class object and no samples are involved. — simulate,TDDesign-method","text":"object class PseudoSimulations @export @keywords methods","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-TDDesign-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This is a methods to simulate dose escalation procedure only using the DLE responses. This is a method based on the TDDesign where model used are of ModelTox class object and no samples are involved. — simulate,TDDesign-method","text":"","code":"# nolint start  ## Simulate dose-escalation procedure based only on DLE responses and no DLE samples are used  ## The design comprises a model, the escalation rule, starting data, ## a cohort size and a starting dose ## Define your data set first using an empty data set ## with dose levels from 25 to 300 with increments 25 data <- Data(doseGrid = seq(25, 300, 25))  ## The design only incorporate DLE responses and DLE samples are involved ## Specified the model of 'ModelTox' class eg 'LogisticIndepBeta' class model model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = data ) ## Then the escalation rule tdNextBest <- NextBestTD(   prob_target_drt = 0.35,   prob_target_eot = 0.3 ) doseRecommendation <- nextBest(tdNextBest,   doselimit = max(data@doseGrid),   model = model,   data = data ) #> Warning: TD 35 = 24.9999999999785 not within dose grid #> Warning: TD 30 = 14.3714101936776 not within dose grid ## Then the starting data, an empty data set emptydata <- Data(doseGrid = seq(25, 300, 25)) ## The cohort size, size of 3 subjects mySize <- CohortSizeConst(size = 3) ## Deifne the increments for the dose-escalation process ## The maximum increase of 200% for doses up to the maximum of the dose specified in the doseGrid ## The maximum increase of 200% for dose above the maximum of the dose specified in the doseGrid ## This is to specified a maximum of 3-fold restriction in dose-esclation myIncrements <- IncrementsRelative(   intervals = c(min(data@doseGrid), max(data@doseGrid)),   increments = c(2, 2) ) ## Specified the stopping rule e.g stop when the maximum sample size of 36 patients has been reached myStopping <- StoppingMinPatients(nPatients = 36)   ## Specified the design(for details please refer to the 'TDDesign' example) design <- TDDesign(   model = model,   nextBest = tdNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   data = data, startingDose = 25 )  ## Specify the truth of the DLE responses myTruth <- probFunction(model, phi1 = -53.66584, phi2 = 10.50499)  ## then plot the truth to see how the truth dose-DLE curve look like curve(myTruth(x), from = 0, to = 300, ylim = c(0, 1))    ## For illustration purpose only 1 simulation is produced (nsim=1). mySim <- simulate(   object = design,   args = NULL,   truth = myTruth,   nsim = 1,   seed = 819,   parallel = FALSE )  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-TDsamplesDesign-method.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a methods to simulate dose escalation procedure only using the DLE responses. This is a method based on the TDsamplesDesign where model used are of ModelTox class object DLE samples are also used — simulate,TDsamplesDesign-method","title":"This is a methods to simulate dose escalation procedure only using the DLE responses. This is a method based on the TDsamplesDesign where model used are of ModelTox class object DLE samples are also used — simulate,TDsamplesDesign-method","text":"methods simulate dose escalation procedure using DLE responses. method based TDsamplesDesign model used ModelTox class object DLE samples also used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-TDsamplesDesign-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a methods to simulate dose escalation procedure only using the DLE responses. This is a method based on the TDsamplesDesign where model used are of ModelTox class object DLE samples are also used — simulate,TDsamplesDesign-method","text":"","code":"# S4 method for class 'TDsamplesDesign' simulate(   object,   nsim = 1L,   seed = NULL,   truth,   args = NULL,   firstSeparate = FALSE,   mcmcOptions = McmcOptions(),   parallel = FALSE,   nCores = min(parallel::detectCores(), 5L),   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/simulate-TDsamplesDesign-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a methods to simulate dose escalation procedure only using the DLE responses. This is a method based on the TDsamplesDesign where model used are of ModelTox class object DLE samples are also used — simulate,TDsamplesDesign-method","text":"object TDsamplesDesign object want simulate data nsim number simulations (default :1) seed see set_seed truth function takes input dose (vector) returns true probability (vector) occurrence DLE. Additional arguments can supplied args. args data frame arguments truth function. column names correspond argument names, rows values arguments. rows appropriately recycled nsim simulations. order produce outcomes posterior predictive distribution, e.g, pass object contains data observed far, truth contains prob function model object, args contains posterior samples model. firstSeparate enroll first patient separately rest cohort? (default) yes, cohort closed DLT occurs patient. mcmcOptions object class McmcOptions, giving MCMC options evaluation trial. default, standard options used parallel simulation runs parallelized across clusters computer? (default) nCores many cores used parallel computing? Defaults number cores machine, maximum 5. ... used","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-TDsamplesDesign-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is a methods to simulate dose escalation procedure only using the DLE responses. This is a method based on the TDsamplesDesign where model used are of ModelTox class object DLE samples are also used — simulate,TDsamplesDesign-method","text":"object class PseudoSimulations @export @keywords methods","code":""},{"path":"https://openpharma.github.io/crmPack/reference/simulate-TDsamplesDesign-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This is a methods to simulate dose escalation procedure only using the DLE responses. This is a method based on the TDsamplesDesign where model used are of ModelTox class object DLE samples are also used — simulate,TDsamplesDesign-method","text":"","code":"# nolint start  ## Simulate dose-escalation procedure based only on DLE responses with DLE samples involved  ## The design comprises a model, the escalation rule, starting data, ## a cohort size and a starting dose ## Define your data set first using an empty data set ## with dose levels from 25 to 300 with increments 25 data <- Data(doseGrid = seq(25, 300, 25))  ## The design only incorporate DLE responses and DLE samples are involved ## Specified the model of 'ModelTox' class eg 'LogisticIndepBeta' class model model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = data ) ## Then the escalation rule tdNextBest <- NextBestTDsamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, probs = 0.3))   } )  ## The cohort size, size of 3 subjects mySize <- CohortSizeConst(size = 3) ## Deifne the increments for the dose-escalation process ## The maximum increase of 200% for doses up to the maximum of the dose specified in the doseGrid ## The maximum increase of 200% for dose above the maximum of the dose specified in the doseGrid ## This is to specified a maximum of 3-fold restriction in dose-esclation myIncrements <- IncrementsRelative(   intervals = c(min(data@doseGrid), max(data@doseGrid)),   increments = c(2, 2) ) ## Specified the stopping rule e.g stop when the maximum sample size of 36 patients has been reached myStopping <- StoppingMinPatients(nPatients = 36)  ## Specified the design(for details please refer to the 'TDsamplesDesign' example) design <- TDsamplesDesign(   model = model,   nextBest = tdNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   data = data, startingDose = 25 )  ## Specify the truth of the DLE responses myTruth <- probFunction(model, phi1 = -53.66584, phi2 = 10.50499)  ## then plot the truth to see how the truth dose-DLE curve look like curve(myTruth(x), from = 0, to = 300, ylim = c(0, 1))   ## Then specified the simulations and generate the trial ## options for MCMC options <- McmcOptions(burnin = 100, step = 2, samples = 200) ## The simulations ## For illustration purpose only 1 simulation is produced (nsim=1). mySim <- simulate(   object = design,   args = NULL,   truth = myTruth,   nsim = 1,   seed = 819,   mcmcOptions = options,   parallel = FALSE )  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/size.html","id":null,"dir":"Reference","previous_headings":"","what":"Size of an Object — size","title":"Size of an Object — size","text":"method computes size given object. can instance size MCMC sample, size cohort. See help specific method details.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size of an Object — size","text":"","code":"size(object, ...)  # S4 method for class 'McmcOptions' size(object, ...)  # S4 method for class 'CohortSizeRange' size(object, dose, data)  # S4 method for class 'CohortSizeDLT' size(object, dose, data)  # S4 method for class 'CohortSizeMax' size(object, dose, data)  # S4 method for class 'CohortSizeMin' size(object, dose, data)  # S4 method for class 'CohortSizeConst' size(object, dose, ...)  # S4 method for class 'CohortSizeParts' size(object, dose, data)  # S4 method for class 'CohortSizeOrdinal' size(object, dose, data, ...)  # S4 method for class 'Samples' size(object, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size of an Object — size","text":"object (McmcOptions Samples CohortSize) object size computed. ... used. dose (numeric) next dose. data data input, object class DataOrdinal.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Size of an Object — size","text":"size given object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/size.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Size of an Object — size","text":"size(McmcOptions): compute number MCMC samples based McmcOptions object. size(CohortSizeRange): Determines size next cohort based range next dose falls . size(CohortSizeDLT): Determines size next cohort based number DLTs far. size(CohortSizeMax): Determines size next cohort based maximum multiple cohort size rules. size(CohortSizeMin): Determines size next cohort based minimum multiple cohort size rules. size(CohortSizeConst): Constant cohort size. size(CohortSizeParts): Determines size next cohort based parts. size(CohortSizeOrdinal): Determines size next cohort ordinal CRM trial. size(Samples): get number MCMC samples Samples object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size of an Object — size","text":"","code":"# Set up the MCMC option in order to have a burn-in of 10000 iterations and # then take every other iteration up to a collection of 10000 samples. my_options <- McmcOptions(burnin = 10000, step = 2, samples = 10000)  size(my_options) #> [1] 10000 # nolint start  # Create the data data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y=c(0, 0, 0, 0, 0, 0, 1, 0),              cohort=c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid=                c(0.1, 0.5, 1.5, 3, 6,                  seq(from=10, to=80, by=2))) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(mean=c(-0.85, 1),                            cov=                              matrix(c(1, -0.5, -0.5, 1),                                     nrow=2),                            ref_dose=56)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=2000) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Rule for the cohort size: #   - having cohort of size 1 for doses <10 #   - and having cohort of size 3 for doses >=10 mySize <- CohortSizeRange(intervals = c(0, 10), cohort_size = c(1, 3))  # Determine the cohort size for the next cohort size(mySize, dose=doseRecommendation$value, data = data) #> [1] 3  # nolint end # nolint start  # Create the data data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid =     c(       0.1, 0.5, 1.5, 3, 6,       seq(from = 10, to = 80, by = 2)     ) ) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov =     matrix(c(1, -0.5, -0.5, 1),       nrow = 2     ),   ref_dose = 56 )  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(   burnin = 100,   step = 2,   samples = 2000 ) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) ) nextMaxDose <- maxDose(myIncrements,   data = data )  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,   doselimit = nextMaxDose,   samples = samples, model = model, data = data )  # Rule for the cohort size: #   - having cohort of size 1 if no DLTs were yet observed #   - and having cohort of size 3 if at least 1 DLT was already observed mySize <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) )  # Determine the cohort size for the next cohort size(mySize, dose = doseRecommendation$value, data = data) #> [1] 3  # nolint end # nolint start  # Create the data data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid =     c(       0.1, 0.5, 1.5, 3, 6,       seq(from = 10, to = 80, by = 2)     ) ) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov =     matrix(c(1, -0.5, -0.5, 1),       nrow = 2     ),   ref_dose = 56 )  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(   burnin = 100,   step = 2,   samples = 2000 ) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) ) nextMaxDose <- maxDose(myIncrements,   data = data )  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,   doselimit = nextMaxDose,   samples = samples, model = model, data = data )  # Rule for having cohort of size 1 for doses <30 #      and having cohort of size 3 for doses >=30 mySize1 <- CohortSizeRange(   intervals = c(0, 10),   cohort_size = c(1, 3) )  # Rule for having cohort of size 1 until no DLT were observed #      and having cohort of size 3 as soon as 1 DLT is observed mySize2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) )  # Combining the two rules for cohort size by taking the maximum of the sample sizes # of the single rules mySize <- maxSize(mySize1, mySize2)  # Determine the cohort size for the next cohort size(mySize, dose = doseRecommendation$value, data = data) #> [1] 3  # nolint end # nolint start  # Create the data data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid =     c(       0.1, 0.5, 1.5, 3, 6,       seq(from = 10, to = 80, by = 2)     ) ) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov =     matrix(c(1, -0.5, -0.5, 1),       nrow = 2     ),   ref_dose = 56 )  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(   burnin = 100,   step = 2,   samples = 2000 ) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) ) nextMaxDose <- maxDose(myIncrements,   data = data )  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,   doselimit = nextMaxDose,   samples = samples, model = model, data = data )  # Rule for having cohort of size 1 for doses <30 #      and having cohort of size 3 for doses >=30 mySize1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) )  # Rule for having cohort of size 1 until no DLT were observed #      and having cohort of size 3 as soon as 1 DLT is observed mySize2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) )  # Combining the two rules for cohort size by taking the minimum of the sample sizes # of the single rules mySize <- minSize(mySize1, mySize2)  # Determine the cohort size for the next cohort size(mySize, dose = doseRecommendation$value, data = data) #> [1] 1  # nolint end # nolint start  # Create the data data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y=c(0, 0, 0, 0, 0, 0, 1, 0),              cohort=c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid=                c(0.1, 0.5, 1.5, 3, 6,                  seq(from=10, to=80, by=2))) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(mean=c(-0.85, 1),                            cov=                              matrix(c(1, -0.5, -0.5, 1),                                     nrow=2),                            ref_dose=56)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=2000) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Rule for having cohorts with constant cohort size of 3 mySize <- CohortSizeConst(size=3)  # Determine the cohort size for the next cohort size(mySize, dose=doseRecommendation$value) #> [1] 3  # nolint end # nolint start  # create an object of class 'DataParts' data <- DataParts(   x = c(0.1, 0.5, 1.5),   y = c(0, 0, 0),   doseGrid = c(     0.1, 0.5, 1.5, 3, 6,     seq(from = 10, to = 80, by = 2)   ),   part = c(1L, 1L, 1L),   nextPart = 1L,   part1Ladder = c(0.1, 0.5, 1.5, 3, 6, 10) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov =     matrix(c(1, -0.5, -0.5, 1),       nrow = 2     ),   ref_dose = 56 )  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(   burnin = 100,   step = 2,   samples = 2000 ) set.seed(94) samples <- mcmc(data, model, options)  myIncrements <- IncrementsRelativeParts(   dlt_start = 0,   clean_start = 1 ) nextMaxDose <- maxDose(myIncrements,   data = data )  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,   doselimit = nextMaxDose,   samples = samples,   model = model,   data = data )  # Rule for the cohort size: mySize <- CohortSizeParts(cohort_sizes = c(1, 3))  # Determine the cohort size for the next cohort size(mySize, dose = doseRecommendation$value, data = data) #> [1] 1  # nolint end CohortSizeOrdinal(   grade = 1L,   rule = CohortSizeRange(intervals = c(0L, 30L), cohort_size = c(1L, 3L)) ) #> An object of class \"CohortSizeOrdinal\" #> Slot \"grade\": #> [1] 1 #>  #> Slot \"rule\": #> An object of class \"CohortSizeRange\" #> Slot \"intervals\": #> [1]  0 30 #>  #> Slot \"cohort_size\": #> [1] 1 3 #>  #>  # Set up the MCMC option in order to have a burn-in of 100 iterations and # then take every other iteration up to a collection of 200 samples. my_options <- McmcOptions(burnin = 100, step = 2, samples = 200)  my_samples <- Samples(   data = list(alpha = rnorm(200), beta = rnorm(200)),   options = my_options )  size(my_samples) #> [1] 200"},{"path":"https://openpharma.github.io/crmPack/reference/stopTrial.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop the trial? — stopTrial","title":"Stop the trial? — stopTrial","text":"function returns whether stop trial.  Stopping rule based precision MTD estimation. trial stopped, MTD can estimated sufficient precision. criteria based robust coefficient variation (CV) calculated posterior distribution. robust CV defined mad(MTD) / median(MTD), mad median absolute deviation. Stopping based based lowest non placebo dose. trial stopped lowest non placebo dose meets Hard Safety Rule, .e. deemed overly toxic. Stopping based observed data lowest dose level using Bin-Beta model based DLT probability.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/stopTrial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop the trial? — stopTrial","text":"","code":"stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingMissingDose,numeric,ANY,ANY,Data' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingList,ANY,ANY,ANY,ANY' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingAll,ANY,ANY,ANY,ANY' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingAny,ANY,ANY,ANY,ANY' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingCohortsNearDose,numeric,ANY,ANY,Data' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingPatientsNearDose,numeric,ANY,ANY,Data' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingMinCohorts,ANY,ANY,ANY,Data' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingMinPatients,ANY,ANY,ANY,Data' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingTargetProb,numeric,Samples,GeneralModel,ANY' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingMTDdistribution,numeric,Samples,GeneralModel,ANY' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingMTDCV,numeric,Samples,GeneralModel,ANY' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingLowestDoseHSRBeta,numeric,Samples,ANY,ANY' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingTargetBiomarker,numeric,Samples,DualEndpoint,ANY' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingSpecificDose,numeric,ANY,ANY,Data' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingHighestDose,numeric,ANY,ANY,Data' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingOrdinal,numeric,ANY,LogisticLogNormalOrdinal,DataOrdinal' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingOrdinal,numeric,ANY,ANY,ANY' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingExternal,numeric,ANY,ANY,ANY' stopTrial(stopping, dose, samples, model, data, external, ...)  # S4 method for class 'StoppingTDCIRatio,ANY,Samples,ModelTox,ANY' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingTDCIRatio,ANY,missing,ModelTox,ANY' stopTrial(stopping, dose, samples, model, data, ...)  # S4 method for class 'StoppingMaxGainCIRatio,ANY,Samples,ModelTox,DataDual' stopTrial(   stopping,   dose,   samples,   model,   data,   TDderive,   Effmodel,   Effsamples,   Gstarderive,   ... )  # S4 method for class 'StoppingMaxGainCIRatio,ANY,missing,ModelTox,DataDual' stopTrial(stopping, dose, model, data, Effmodel, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/stopTrial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop the trial? — stopTrial","text":"stopping (Stopping) rule stopping trial. dose recommended next best dose. samples (Samples) mcmc samples. model (GeneralModel) model. data (Data) input data. ... additional arguments without method dispatch. external (flag) whether stop based external result . TDderive function derives input, vector posterior samples called TDsamples dose probability occurrence DLE equals either targetDuringTrial targetEndOfTrial, final next best TDtargetDuringTrial (dose probability occurrence DLE equals targetDuringTrial)TDtargetEndOfTrial estimate. Effmodel efficacy model ModelEff class object Effsamples efficacy samples Samples class object Gstarderive function derives input, vector posterior Gstar (dose gives maximum gain value) samples called Gstarsamples, final next best Gstar estimate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/stopTrial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop the trial? — stopTrial","text":"logical value: TRUE trial can stopped, FALSE otherwise. attribute message gives reason decision.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/stopTrial.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Stop the trial? — stopTrial","text":"stopTrial(   stopping = StoppingMissingDose,   dose = numeric,   samples = ,   model = ,   data = Data ): Stop based value returned next best dose. stopTrial(   stopping = StoppingList,   dose = ,   samples = ,   model = ,   data = ): Stop based multiple stopping rules stopTrial(   stopping = StoppingAll,   dose = ,   samples = ,   model = ,   data = ): Stop based fulfillment multiple stopping rules stopTrial(   stopping = StoppingAny,   dose = ,   samples = ,   model = ,   data = ): Stop based fulfillment stopping rule stopTrial(   stopping = StoppingCohortsNearDose,   dose = numeric,   samples = ,   model = ,   data = Data ): Stop based number cohorts near next best dose stopTrial(   stopping = StoppingPatientsNearDose,   dose = numeric,   samples = ,   model = ,   data = Data ): Stop based number patients near next best dose stopTrial(   stopping = StoppingMinCohorts,   dose = ,   samples = ,   model = ,   data = Data ): Stop based minimum number cohorts stopTrial(   stopping = StoppingMinPatients,   dose = ,   samples = ,   model = ,   data = Data ): Stop based minimum number patients stopTrial(   stopping = StoppingTargetProb,   dose = numeric,   samples = Samples,   model = GeneralModel,   data = ): Stop based probability target tox interval stopTrial(   stopping = StoppingMTDdistribution,   dose = numeric,   samples = Samples,   model = GeneralModel,   data = ): Stop based MTD distribution stopTrial(   stopping = StoppingTargetBiomarker,   dose = numeric,   samples = Samples,   model = DualEndpoint,   data = ): Stop based probability targeting biomarker stopTrial(   stopping = StoppingSpecificDose,   dose = numeric,   samples = ,   model = ,   data = Data ): Stopping rule met specific dose planned dose grid just default next best dose. stopTrial(   stopping = StoppingHighestDose,   dose = numeric,   samples = ,   model = ,   data = Data ): Stop highest dose reached stopTrial(   stopping = StoppingOrdinal,   dose = numeric,   samples = ,   model = LogisticLogNormalOrdinal,   data = DataOrdinal ): Stop based value returned next best dose. stopTrial(   stopping = StoppingOrdinal,   dose = numeric,   samples = ,   model = ,   data = ): Stop based value returned next best dose. stopTrial(   stopping = StoppingExternal,   dose = numeric,   samples = ,   model = ,   data = ): Stop based external flag. stopTrial(   stopping = StoppingTDCIRatio,   dose = ,   samples = Samples,   model = ModelTox,   data = ): Stop based 'StoppingTDCIRatio' class reaching target ratio upper lower 95% credibility interval estimate (TDtargetEndOfTrial). stopping rule incorporate DLE responses DLE samples given stopTrial(   stopping = StoppingTDCIRatio,   dose = ,   samples = missing,   model = ModelTox,   data = ): Stop based 'StoppingTDCIRatio' class reaching target ratio upper lower 95% credibility interval estimate (TDtargetEndOfTrial). stopping rule incorporate DLE responses DLE samples involved stopTrial(   stopping = StoppingMaxGainCIRatio,   dose = ,   samples = Samples,   model = ModelTox,   data = DataDual ): Stop based reaching target ratio upper lower 95% credibility interval estimate (minimum Gstar TDtargetEndOfTrial). stopping rule incorporate DLE efficacy responses DLE efficacy samples also used. stopTrial(   stopping = StoppingMaxGainCIRatio,   dose = ,   samples = missing,   model = ModelTox,   data = DataDual ): Stop based reaching target ratio upper lower 95% credibility interval estimate (minimum Gstar TDtargetEndOfTrial). stopping rule incorporate DLE efficacy responses without DLE efficacy samples involved.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/stopTrial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop the trial? — stopTrial","text":"","code":"## Example of combining stopping rules with '&' and/or '|' operators  myStopping1 <- StoppingMinCohorts(nCohorts=3) myStopping2 <- StoppingTargetProb(target=c(0.2, 0.35),                                   prob=0.5) myStopping3 <- StoppingMinPatients(nPatients=20)  myStopping <- (myStopping1 & myStopping2) | myStopping3     # Example of usage for `StoppingMissingDose` StopTrial class.  # Create the data. my_data <- Data(   x = c(0.01, 0.1, 0.5, 3, 6, 10, 10, 10),   y = c(0, 1, 1, 0, 0, 0, 0, 1),   cohort = c(1, 1, 2, 3, 4, 5, 5, 5),   ID = 1:8,   doseGrid = c(     0.01, 0.1, 0.5, 1.5, 3, 6,     seq(from = 10, to = 80, by = 2)   ),   placebo = TRUE )  # Initialize the CRM model used to model the data. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov =     matrix(c(1, -0.5, -0.5, 1),       nrow = 2     ),   ref_dose = 56 )  # Set-up some MCMC parameters and generate samples from the posterior. my_options <- McmcOptions(   burnin = 100,   step = 2,   samples = 2000 )  my_samples <- mcmc(my_data, my_model, my_options)  # Define the rule for dose increments and calculate the maximum dose allowed. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  next_max_dose <- maxDose(my_increments,   data = my_data )  # Define the rule which will be used to select the next best dose based # on the class 'NextBestNCRM'. my_next_best <- NextBestNCRM(   target = c(0.1, 0.25),   overdose = c(0.2, 1),   max_overdose_prob = 0.25 )  # Calculate the next best dose. dose_recommendation <- nextBest(   my_next_best,   doselimit = next_max_dose,   samples = my_samples, model = my_model, data = my_data )  # Define the stopping rule such that the study would be stopped if there is # no safe active dose returned from dose_recommendation. my_stopping <- StoppingMissingDose() my_stopping <- StoppingAny(   stop_list = c(     StoppingMinPatients(nPatients = 16),     StoppingMissingDose()   ) )  # Evaluate if to stop the trial. stopTrial(   stopping = my_stopping,   dose = dose_recommendation$value,   data = my_data,   model = my_model ) #> [1] TRUE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> [1] \"Number of patients is 8 and thus below the prespecified minimum number 16\" #>  #> attr(,\"message\")[[2]] #> [1] \"Next dose is NA , i.e., no active dose is safe enough according to the NextBest rule.\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Number of patients is 8 and thus below the prespecified minimum number 16\" #> attr(,\"report_label\") #> [1] \"≥ 16 patients dosed\" #>  #> attr(,\"individual\")[[2]] #> [1] TRUE #> attr(,\"message\") #> [1] \"Next dose is NA , i.e., no active dose is safe enough according to the NextBest rule.\" #> attr(,\"report_label\") #> [1] \"Stopped because of missing dose\" #>  #> attr(,\"report_label\") #> [1] NA # nolint start  # Create some data data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y=c(0, 0, 0, 0, 0, 0, 1, 0),              cohort=c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid=                c(0.1, 0.5, 1.5, 3, 6,                  seq(from=10, to=80, by=2))) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(mean=c(-0.85, 1),                            cov=                              matrix(c(1, -0.5, -0.5, 1),                                     nrow=2),                            ref_dose=56)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=2000) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Define the stopping rules myStopping1 <- StoppingMinCohorts(nCohorts=3) myStopping2 <- StoppingTargetProb(target=c(0.2, 0.35),                                   prob=0.5) myStopping3 <- StoppingMinPatients(nPatients=20)  # Create a list of stopping rules (of class 'StoppingList') which will then be # summarized (in this specific example) with the 'any' function, meaning that the study # would be stopped if 'any' of the single stopping rules is TRUE. mystopping <- StoppingList(stop_list=c(myStopping1,myStopping2,myStopping3),                            summary=any)  # Evaluate if to stop the Trial stopTrial(stopping=myStopping, dose=doseRecommendation$value,           samples=samples, model=model, data=data) #> [1] FALSE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> attr(,\"message\")[[1]][[1]] #> [1] \"Number of cohorts is 6 and thus reached the prespecified minimum number 3\" #>  #> attr(,\"message\")[[1]][[2]] #> [1] \"Probability for target toxicity is 33 % for dose 20 and thus below the required 50 %\" #>  #>  #> attr(,\"message\")[[2]] #> [1] \"Number of patients is 8 and thus below the prespecified minimum number 20\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] FALSE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> [1] \"Number of cohorts is 6 and thus reached the prespecified minimum number 3\" #>  #> attr(,\"message\")[[2]] #> [1] \"Probability for target toxicity is 33 % for dose 20 and thus below the required 50 %\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] TRUE #> attr(,\"message\") #> [1] \"Number of cohorts is 6 and thus reached the prespecified minimum number 3\" #> attr(,\"report_label\") #> [1] \"≥ 3 cohorts dosed\" #>  #> attr(,\"individual\")[[2]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Probability for target toxicity is 33 % for dose 20 and thus below the required 50 %\" #> attr(,\"report_label\") #> [1] \"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5\" #>  #> attr(,\"report_label\") #> [1] NA #>  #> attr(,\"individual\")[[2]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Number of patients is 8 and thus below the prespecified minimum number 20\" #> attr(,\"report_label\") #> [1] \"≥ 20 patients dosed\" #>  #> attr(,\"report_label\") #> [1] NA  # nolint end # nolint start  # Create some data data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y=c(0, 0, 0, 0, 0, 0, 1, 0),              cohort=c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid=                c(0.1, 0.5, 1.5, 3, 6,                  seq(from=10, to=80, by=2))) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(mean=c(-0.85, 1),                            cov=                              matrix(c(1, -0.5, -0.5, 1),                                     nrow=2),                            ref_dose=56)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=2000) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Define the stopping rules myStopping1 <- StoppingMinCohorts(nCohorts=3) myStopping2 <- StoppingTargetProb(target=c(0.2, 0.35),                                   prob=0.5) myStopping3 <- StoppingMinPatients(nPatients=20)  # Combine the stopping rules, obtaining (in this specific example) a list of stopping # rules of class 'StoppingAll' myStopping <- (myStopping1 | myStopping2) & myStopping3  # Evaluate if to stop the Trial stopTrial(stopping=myStopping, dose=doseRecommendation$value,           samples=samples, model=model, data=data) #> [1] FALSE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> attr(,\"message\")[[1]][[1]] #> [1] \"Number of cohorts is 6 and thus reached the prespecified minimum number 3\" #>  #> attr(,\"message\")[[1]][[2]] #> [1] \"Probability for target toxicity is 32 % for dose 20 and thus below the required 50 %\" #>  #>  #> attr(,\"message\")[[2]] #> [1] \"Number of patients is 8 and thus below the prespecified minimum number 20\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] TRUE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> [1] \"Number of cohorts is 6 and thus reached the prespecified minimum number 3\" #>  #> attr(,\"message\")[[2]] #> [1] \"Probability for target toxicity is 32 % for dose 20 and thus below the required 50 %\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] TRUE #> attr(,\"message\") #> [1] \"Number of cohorts is 6 and thus reached the prespecified minimum number 3\" #> attr(,\"report_label\") #> [1] \"≥ 3 cohorts dosed\" #>  #> attr(,\"individual\")[[2]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Probability for target toxicity is 32 % for dose 20 and thus below the required 50 %\" #> attr(,\"report_label\") #> [1] \"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5\" #>  #> attr(,\"report_label\") #> [1] NA #>  #> attr(,\"individual\")[[2]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Number of patients is 8 and thus below the prespecified minimum number 20\" #> attr(,\"report_label\") #> [1] \"≥ 20 patients dosed\" #>  #> attr(,\"report_label\") #> [1] NA  # nolint end # nolint start  # Create some data data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y=c(0, 0, 0, 0, 0, 0, 1, 0),              cohort=c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid=                c(0.1, 0.5, 1.5, 3, 6,                  seq(from=10, to=80, by=2))) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(mean=c(-0.85, 1),                            cov=                              matrix(c(1, -0.5, -0.5, 1),                                     nrow=2),                            ref_dose=56)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=2000) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Define the stopping rules myStopping1 <- StoppingMinCohorts(nCohorts=3) myStopping2 <- StoppingTargetProb(target=c(0.2, 0.35),                                   prob=0.5) myStopping3 <- StoppingMinPatients(nPatients=20)  # Combine the stopping rules, obtaining (in this specific example) a list of stopping # rules of class 'StoppingAny' myStopping <- (myStopping1 | myStopping2) | myStopping3  # Evaluate if to stop the Trial stopTrial(stopping=myStopping, dose=doseRecommendation$value,           samples=samples, model=model, data=data) #> [1] TRUE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> [1] \"Number of cohorts is 6 and thus reached the prespecified minimum number 3\" #>  #> attr(,\"message\")[[2]] #> [1] \"Probability for target toxicity is 37 % for dose 20 and thus below the required 50 %\" #>  #> attr(,\"message\")[[3]] #> [1] \"Number of patients is 8 and thus below the prespecified minimum number 20\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] TRUE #> attr(,\"message\") #> [1] \"Number of cohorts is 6 and thus reached the prespecified minimum number 3\" #> attr(,\"report_label\") #> [1] \"≥ 3 cohorts dosed\" #>  #> attr(,\"individual\")[[2]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Probability for target toxicity is 37 % for dose 20 and thus below the required 50 %\" #> attr(,\"report_label\") #> [1] \"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5\" #>  #> attr(,\"individual\")[[3]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Number of patients is 8 and thus below the prespecified minimum number 20\" #> attr(,\"report_label\") #> [1] \"≥ 20 patients dosed\" #>  #> attr(,\"report_label\") #> [1] NA  # nolint end # nolint start  # Create the data data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y=c(0, 0, 0, 0, 0, 0, 1, 0),              cohort=c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid=                c(0.1, 0.5, 1.5, 3, 6,                  seq(from=10, to=80, by=2))) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(mean=c(-0.85, 1),                            cov=                              matrix(c(1, -0.5, -0.5, 1),                                     nrow=2),                            ref_dose=56)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=2000) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Define the stopping rule such that the study would be stopped if at least 3 # cohorts were already dosed within 1 +/- 0.2 of the next best dose myStopping <- StoppingCohortsNearDose(nCohorts = 3,                                       percentage = 0.2)  # Evaluate if to stop the trial stopTrial(stopping=myStopping,           dose=doseRecommendation$value,           data=data) #> [1] FALSE #> attr(,\"message\") #> [1] \"0 cohorts lie within 0.2% of the next best dose 20. This is below the required 3 cohorts\" #> attr(,\"report_label\") #> [1] \"≥ 3 cohorts dosed in 0.2 % dose range around NBD\"  # nolint end # nolint start  # Create the data data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y=c(0, 0, 0, 0, 0, 0, 1, 0),              cohort=c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid=                c(0.1, 0.5, 1.5, 3, 6,                  seq(from=10, to=80, by=2))) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(mean=c(-0.85, 1),                            cov=                              matrix(c(1, -0.5, -0.5, 1),                                     nrow=2),                            ref_dose=56)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=2000) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Define the stopping rule such that the study would be stopped if at least 9 # patients were already dosed within 1 +/- 0.2 of the next best dose myStopping <- StoppingPatientsNearDose(nPatients = 9,                                        percentage = 0.2)  # Evaluate if to stop the trial stopTrial(stopping=myStopping,           dose=doseRecommendation$value,           data=data) #> [1] FALSE #> attr(,\"message\") #> [1] \"0 patients lie within 0.2% of the next best dose 20. This is below the required 9 patients\" #> attr(,\"report_label\") #> [1] \"≥ 9 patients dosed in 0.2 % dose range around NBD\"  # nolint end # nolint start  # Create the data data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y=c(0, 0, 0, 0, 0, 0, 1, 0),              cohort=c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid=                c(0.1, 0.5, 1.5, 3, 6,                  seq(from=10, to=80, by=2))) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(mean=c(-0.85, 1),                            cov=                              matrix(c(1, -0.5, -0.5, 1),                                     nrow=2),                            ref_dose=56)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=2000) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Define the stopping rule such that the study would be stopped if at least 6 # cohorts were already dosed myStopping <- StoppingMinCohorts(nCohorts = 6)  # Evaluate if to stop the trial stopTrial(stopping=myStopping,           dose=doseRecommendation$value,           data=data) #> [1] TRUE #> attr(,\"message\") #> [1] \"Number of cohorts is 6 and thus reached the prespecified minimum number 6\" #> attr(,\"report_label\") #> [1] \"≥ 6 cohorts dosed\"  # nolint end # nolint start  # Create the data data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y=c(0, 0, 0, 0, 0, 0, 1, 0),              cohort=c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid=                c(0.1, 0.5, 1.5, 3, 6,                  seq(from=10, to=80, by=2))) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(mean=c(-0.85, 1),                            cov=                              matrix(c(1, -0.5, -0.5, 1),                                     nrow=2),                            ref_dose=56)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=2000) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Define the stopping rule such that the study would be stopped if at least 20 # patients were already dosed myStopping <- StoppingMinPatients(nPatients = 20)  # Evaluate if to stop the trial stopTrial(stopping=myStopping,           dose=doseRecommendation$value,           data=data) #> [1] FALSE #> attr(,\"message\") #> [1] \"Number of patients is 8 and thus below the prespecified minimum number 20\" #> attr(,\"report_label\") #> [1] \"≥ 20 patients dosed\"  # nolint end # nolint start  # Create the data data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y=c(0, 0, 0, 0, 0, 0, 1, 0),              cohort=c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid=                c(0.1, 0.5, 1.5, 3, 6,                  seq(from=10, to=80, by=2))) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(mean=c(-0.85, 1),                            cov=                              matrix(c(1, -0.5, -0.5, 1),                                     nrow=2),                            ref_dose=56)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=2000) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Define the stopping rule such that the study would be stopped if there is at least # 0.5 posterior probability that [0.2 =< Prob(DLT | next-best-dose) <= 0.35] myStopping <- StoppingTargetProb(target=c(0.2, 0.35),                                  prob=0.5)  # Evaluate if to stop the trial stopTrial(stopping=myStopping,           dose=doseRecommendation$value,           samples=samples,           model=model,           data=data) #> [1] FALSE #> attr(,\"message\") #> [1] \"Probability for target toxicity is 33 % for dose 20 and thus below the required 50 %\" #> attr(,\"report_label\") #> [1] \"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5\"  # nolint end # nolint start  # Create the data data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),              y=c(0, 0, 0, 0, 0, 0, 1, 0),              cohort=c(0, 1, 2, 3, 4, 5, 5, 5),              doseGrid=                c(0.1, 0.5, 1.5, 3, 6,                  seq(from=10, to=80, by=2))) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(mean=c(-0.85, 1),                            cov=                              matrix(c(1, -0.5, -0.5, 1),                                     nrow=2),                            ref_dose=56)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=2000) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Define the stopping rule such that the study would be stopped if there is at least # 0.9 probability that MTD > 0.5*next_best_dose. Here MTD is defined as the dose for # which prob(DLE)=0.33 myStopping <- StoppingMTDdistribution(target = 0.33,                                       thresh = 0.5,                                       prob = 0.9)  # Evaluate if to stop the trial stopTrial(stopping=myStopping,           dose=doseRecommendation$value,           samples=samples,           model=model,           data=data) #> [1] TRUE #> attr(,\"message\") #> [1] \"Probability of MTD above 50 % of current dose 20 is 93 % and thus greater than or equal to the required 90 %\" #> attr(,\"report_label\") #> [1] \"P(MTD > 0.5 * NBD | P(DLE) = 0.33) ≥ 0.9\"  # nolint end # Create the data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) ) #> Used default patient IDs!  # Initialize the CRM model used to model the data. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Set-up some MCMC parameters and generate samples from the posterior. my_options <- McmcOptions(   burnin = 100, step = 2, samples = 2000, rng_kind = \"Mersenne-Twister\", rng_seed = 94 ) my_samples <- mcmc(my_data, my_model, my_options)  # Define the rule for dose increments and calculate the maximum dose allowed. my_increments <- IncrementsRelative(intervals = c(0, 20), increments = c(1, 0.33)) next_max_dose <- maxDose(my_increments, data = my_data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM'. my_next_best <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Calculate the next best dose. dose_recommendation <- nextBest(   my_next_best,   doselimit = next_max_dose,   samples = my_samples,   model = my_model,   data = my_data )  # Define the stopping rule such that the study would be stopped if the # the MTD can be estimated with sufficient precision, i.e. if robust coefficient # of variation is below 40%. my_stopping <- StoppingMTDCV(target = 0.3, thresh_cv = 40)  # Evaluate if to stop the trial. stopTrial(   stopping = my_stopping,   dose = dose_recommendation$value,   samples = my_samples,   model = my_model,   data = my_data ) #> [1] FALSE #> attr(,\"message\") #> [1] \"CV of MTD is 70 % and thus above the required precision threshold of 40 %\" #> attr(,\"report_label\") #> [1] \"CV(MTD) > 0.3\"  # Create the data. data <- Data(   x = c(0.1, 0.1, 0.1),   y = c(0, 0, 1),   cohort = c(1, 1, 1),   doseGrid = c(     0.1, 0.5, 1.5, 3, 6,     seq(from = 10, to = 80, by = 2)   ),   ID = 1:3 )  # Initialize the CRM model used to model the data. model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 56 )  # Set-up some MCMC parameters and generate samples from the posterior. options <- McmcOptions(   burnin = 100,   step = 2,   samples = 2000 ) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  next_max_dose <- maxDose(my_increments, data = data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM'. my_next_best <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Calculate the next best dose. dose_recommendation <- nextBest(my_next_best,   doselimit = next_max_dose,   samples = samples, model = model, data = data )  # Define the stopping rule such that the study would be stopped if first dose # is toxic based on a Beta posterior distribution with Beta(1,1) prior. my_stopping <- StoppingLowestDoseHSRBeta(   target = 0.3,   prob = 0.9 )  # Evaluate if the trial will be stopped. stopTrial(   stopping = my_stopping,   dose = dose_recommendation$value,   samples = samples,   model = model,   data = data ) #> [1] FALSE #> attr(,\"message\") #> [1] \"Probability that the lowest active dose of 0.1 being toxic based on posterior Beta distribution using a Beta(1,1) prior is 65% and thus below the required 90% threshold.\" #> attr(,\"report_label\") #> [1] \"Pβ(lowest dose > P(DLE) = 0.3) > 0.9\" # nolint start  # Create the data data <- DataDual(   x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10,       20, 20, 20, 40, 40, 40, 50, 50, 50),   y=c(0, 0, 0, 0, 0, 0, 1, 0,       0, 1, 1, 0, 0, 1, 0, 1, 1),   w=c(0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.55, 0.6,       0.52, 0.54, 0.56, 0.43, 0.41, 0.39, 0.34, 0.38, 0.21),   doseGrid=c(0.1, 0.5, 1.5, 3, 6,              seq(from=10, to=80, by=2))) #> Used default patient IDs! #> Used best guess cohort indices!  # Initialize the Dual-Endpoint model (in this case RW1) model <- DualEndpointRW(mean = c(0, 1),                         cov = matrix(c(1, 0, 0, 1), nrow=2),                         sigma2betaW = 0.01,                         sigma2W = c(a=0.1, b=0.1),                         rho = c(a=1, b=1),                         rw1 = TRUE)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=500) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # In this case target a dose achieving at least 0.9 of maximum biomarker level (efficacy) # and with a probability below 0.25 that prob(DLT)>0.35 (safety) myNextBest <- NextBestDualEndpoint(target=c(0.9, 1),                                    overdose=c(0.35, 1),                                    max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples,                                model=model,                                data=data)  # Define the stopping rule such that the study would be stopped if if there is at # least 0.5 posterior probability that the biomarker (efficacy) is within the # biomarker target range of [0.9, 1.0] (relative to the maximum for the biomarker). myStopping <- StoppingTargetBiomarker(target = c(0.9, 1),                                       prob = 0.5)  # Evaluate if to stop the trial stopTrial(stopping=myStopping,           dose=doseRecommendation$value,           samples=samples,           model=model,           data=data) #> [1] FALSE #> attr(,\"message\") #> [1] \"Probability for target biomarker is 10 % for dose 12 and thus below the required 50 %\" #> attr(,\"report_label\") #> [1] \"P(0.9 ≤ Biomarker ≤ 1) ≥ 0.5 (relative)\"  # nolint end  # Create some data. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   ID = 1:8,   cohort = c(0, 1, 2, 3, 4, 5, 5, 5),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) )  # Initialize the CRM model used to model the data. my_model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),   ref_dose = 50 )  # Set-up some MCMC parameters and generate samples from the posterior. my_options <- McmcOptions(burnin = 100, step = 2, samples = 500) my_samples <- mcmc(my_data, my_model, my_options)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM'. my_nb_ncrm <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Calculate the next best dose. my_dose_recommendation <- nextBest(   nextBest = my_nb_ncrm,   doselimit = 100,   samples = my_samples,   model = my_model,   data = my_data )  # Define the stopping rules. highest_dose_safe <- StoppingSpecificDose(   rule = StoppingTargetProb(target = c(0, 0.3), prob = 0.8),   dose = 80 ) max_patients <- StoppingMinPatients(nPatients = 20) patients_near_dose <- StoppingPatientsNearDose(nPatients = 3, percentage = 0)  # Create a list of stopping rules (of class 'StoppingList') which will then be # summarized (in this specific example) with the 'any' function, meaning that # the study would be stopped if 'any' of the single stopping rules is TRUE. my_stopping <- highest_dose_safe | max_patients | patients_near_dose  # Evaluate if to stop the Trial stopTrial(   stopping = my_stopping,   dose = doseRecommendation$value,   samples = samples,   model = model,   data = data ) #> [1] FALSE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> [1] \"Probability for target toxicity is 0 % for dose 80 and thus below the required 80 %\" #>  #> attr(,\"message\")[[2]] #> [1] \"Number of patients is 17 and thus below the prespecified minimum number 20\" #>  #> attr(,\"message\")[[3]] #> [1] \"0 patients lie within 0% of the next best dose 12. This is below the required 3 patients\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Probability for target toxicity is 0 % for dose 80 and thus below the required 80 %\" #> attr(,\"report_label\") #> [1] \"Dose 80 used for testing a stopping rule\" #>  #> attr(,\"individual\")[[2]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Number of patients is 17 and thus below the prespecified minimum number 20\" #> attr(,\"report_label\") #> [1] \"≥ 20 patients dosed\" #>  #> attr(,\"individual\")[[3]] #> [1] FALSE #> attr(,\"message\") #> [1] \"0 patients lie within 0% of the next best dose 12. This is below the required 3 patients\" #> attr(,\"report_label\") #> [1] \"≥ 3 patients dosed in 0 % dose range around NBD\" #>  #> attr(,\"report_label\") #> [1] NA # nolint start  # Create the data data <- Data(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10, 20, 20, 20, 40, 40, 40,                  80, 80, 80),              y=c(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),              cohort=c(0, 1, 2, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8),              doseGrid=                c(0.1, 0.5, 1.5, 3, 6,                  seq(from=10, to=80, by=2))) #> Used default patient IDs!  # Initialize the CRM model used to model the data model <- LogisticLogNormal(mean=c(-0.85, 1),                            cov=                              matrix(c(1, -0.5, -0.5, 1),                                     nrow=2),                            ref_dose=56)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=2000) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Define the stopping rule such that the study would be stopped if there is at least # 0.5 posterior probability that [0.2 =< Prob(DLT | next-best-dose) <= 0.35] stopTarget <- StoppingTargetProb(target=c(0.2, 0.35),                                  prob=0.5)  ## now use the StoppingHighestDose rule: stopHigh <-   StoppingHighestDose() &   StoppingPatientsNearDose(nPatients=3, percentage=0) &   StoppingTargetProb(target=c(0, 0.2),                      prob=0.5)  ## and combine everything: myStopping <- stopTarget | stopHigh  # Then evaluate if to stop the trial stopTrial(stopping=myStopping,           dose=doseRecommendation$value,           samples=samples,           model=model,           data=data) #> [1] TRUE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> [1] \"Probability for target toxicity is 51 % for dose 66 and thus above the required 50 %\" #>  #> attr(,\"message\")[[2]] #> attr(,\"message\")[[2]][[1]] #> [1] \"Next best dose is 66 and thus not the highest dose\" #>  #> attr(,\"message\")[[2]][[2]] #> [1] \"0 patients lie within 0% of the next best dose 66. This is below the required 3 patients\" #>  #> attr(,\"message\")[[2]][[3]] #> [1] \"Probability for target toxicity is 27 % for dose 66 and thus below the required 50 %\" #>  #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] TRUE #> attr(,\"message\") #> [1] \"Probability for target toxicity is 51 % for dose 66 and thus above the required 50 %\" #> attr(,\"report_label\") #> [1] \"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5\" #>  #> attr(,\"individual\")[[2]] #> [1] FALSE #> attr(,\"message\") #> attr(,\"message\")[[1]] #> [1] \"Next best dose is 66 and thus not the highest dose\" #>  #> attr(,\"message\")[[2]] #> [1] \"0 patients lie within 0% of the next best dose 66. This is below the required 3 patients\" #>  #> attr(,\"message\")[[3]] #> [1] \"Probability for target toxicity is 27 % for dose 66 and thus below the required 50 %\" #>  #> attr(,\"individual\") #> attr(,\"individual\")[[1]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Next best dose is 66 and thus not the highest dose\" #> attr(,\"report_label\") #> [1] \"NBD is the highest dose\" #>  #> attr(,\"individual\")[[2]] #> [1] FALSE #> attr(,\"message\") #> [1] \"0 patients lie within 0% of the next best dose 66. This is below the required 3 patients\" #> attr(,\"report_label\") #> [1] \"≥ 3 patients dosed in 0 % dose range around NBD\" #>  #> attr(,\"individual\")[[3]] #> [1] FALSE #> attr(,\"message\") #> [1] \"Probability for target toxicity is 27 % for dose 66 and thus below the required 50 %\" #> attr(,\"report_label\") #> [1] \"P(0 ≤ prob(DLE | NBD) ≤ 0.2) ≥ 0.5\" #>  #> attr(,\"report_label\") #> [1] NA #>  #> attr(,\"report_label\") #> [1] NA  # nolint end data <- .DefaultDataOrdinal() model <- .DefaultLogisticLogNormalOrdinal() options <- .DefaultMcmcOptions() samples <- mcmc(data, model, options) #> Warning: Unused variable \"y\" in data  myIncrements <- .DefaultIncrementsOrdinal() nextMaxDose <- maxDose(myIncrements, data = data)  myNextBest <- .DefaultNextBestOrdinal()  doseRecommendation <- nextBest(   myNextBest,   doselimit = nextMaxDose,   samples = samples,   model = model,   data = data )  myStopping <- .DefaultStoppingOrdinal()  stopTrial(   stopping = myStopping,   dose = doseRecommendation$value,   samples = samples,   model = model,   data = data ) #> [1] FALSE #> attr(,\"message\") #> [1] \"Probability for target toxicity is 34 % for dose 50 and thus below the required 60 %\" #> attr(,\"report_label\") #> [1] \"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.6\" data <- .DefaultDataOrdinal() model <- .DefaultLogisticLogNormalOrdinal() options <- .DefaultMcmcOptions() samples <- mcmc(data, model, options) #> Warning: Unused variable \"y\" in data  myIncrements <- .DefaultIncrementsOrdinal() nextMaxDose <- maxDose(myIncrements, data = data)  myNextBest <- .DefaultNextBestOrdinal()  doseRecommendation <- nextBest(   myNextBest,   doselimit = nextMaxDose,   samples = samples,   model = model,   data = data )  myStopping <- .DefaultStoppingOrdinal()  stopTrial(   stopping = myStopping,   dose = doseRecommendation$value,   samples = samples,   model = model,   data = data ) #> [1] FALSE #> attr(,\"message\") #> [1] \"Probability for target toxicity is 32 % for dose 50 and thus below the required 60 %\" #> attr(,\"report_label\") #> [1] \"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.6\" my_rule <- StoppingExternal(report_label = \"Based on combo stop\")  stopTrial(my_rule, 5, .DefaultSamples(), .DefaultModelLogNormal(), .DefaultData(), external = TRUE) #> [1] TRUE #> attr(,\"message\") #> [1] \"Based on external result stop\" #> attr(,\"report_label\") #> [1] \"Based on combo stop\" # nolint start  ##define the stopping rules based on the 'StoppingTDCIRatio' class ##Using only DLE responses with samples ## we need a data object with doses >= 1: data<-Data(x=c(25,50,50,75,150,200,225,300),            y=c(0,0,0,0,1,1,1,1),            doseGrid=seq(from=25,to=300,by=25)) #> Used default patient IDs! #> Used best guess cohort indices!  ##model can be specified of 'Model' or 'ModelTox' class ##For example, the 'logisticIndepBeta' class model model<-LogisticIndepBeta(binDLE=c(1.05,1.8),DLEweights=c(3,3),DLEdose=c(25,300),data=data) ##define MCMC options ##for illustration purpose we use 10 burn-in and generate 50 samples options<-McmcOptions(burnin=10,step=2,samples=50) ##samples of 'Samples' class samples<-mcmc(data,model,options) ##define the 'StoppingTDCIRatio' class myStopping <- StoppingTDCIRatio(target_ratio = 5, prob_target = 0.3) ##Find the next Recommend dose using the nextBest method (plesae refer to nextbest examples) tdNextBest <- NextBestTDsamples(   prob_target_drt = 0.35, prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, probs = 0.3))   } )  RecommendDose<-nextBest(tdNextBest,doselimit=max(data@doseGrid),samples=samples,                         model=model,data=data) ##use 'stopTrial' to determine if the rule has been fulfilled ##use 0.3 as the target proability of DLE at the end of the trial  stopTrial(stopping=myStopping,dose=RecommendDose$next_dose_drt,           samples=samples,model=model,data=data) #> [1] FALSE #> attr(,\"message\") #> [1] \"95% CI is (2.87962060593596e-11, 11670.389917859), Ratio = 405275260699345 is greater than target_ratio = 5\" #> attr(,\"report_label\") #> [1] \"TD 5 for 0.3 target prob\"  # nolint end # nolint start  ##define the stopping rules based on the 'StoppingTDCIRatio' class ##Using only DLE responses ## we need a data object with doses >= 1: data<-Data(x=c(25,50,50,75,150,200,225,300),            y=c(0,0,0,0,1,1,1,1),            doseGrid=seq(from=25,to=300,by=25)) #> Used default patient IDs! #> Used best guess cohort indices!  ##model must be of 'ModelTox' class ##For example, the 'logisticIndepBeta' class model model<-LogisticIndepBeta(binDLE=c(1.05,1.8),DLEweights=c(3,3),DLEdose=c(25,300),data=data) ##define the 'StoppingTDCIRatio' class myStopping <- StoppingTDCIRatio(target_ratio = 5, prob_target = 0.3) ##Find the next Recommend dose using the nextBest method (plesae refer to nextbest examples) tdNextBest<-NextBestTD(prob_target_drt=0.35,prob_target_eot=0.3)   RecommendDose<-nextBest(tdNextBest,doselimit=max(data@doseGrid),model=model,data=data) ##use 'stopTrial' to determine if the rule has been fulfilled ##use 0.3 as the target proability of DLE at the end of the trial  stopTrial(stopping=myStopping,dose=RecommendDose$next_dose_drt,           model=model,data=data) #> [1] FALSE #> attr(,\"message\") #> [1] \"95% CI is ( 15.2619 , 173.8695 ), Ratio = 11.3924 is  greater than target_ratio = 5\" #> attr(,\"report_label\") #> [1] \"TD 5 for 0.3 target prob\"  # nolint end # nolint start ##define the stopping rules based on the 'StoppingMaxGainCIRatio' class ##Using both DLE and efficacy responses ## we need a data object with doses >= 1: data <-DataDual(x=c(25,50,25,50,75,300,250,150),                 y=c(0,0,0,0,0,1,1,0),                 w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),                 doseGrid=seq(25,300,25),                 placebo=FALSE) #> Used default patient IDs! #> Used best guess cohort indices!  ##DLEmodel must be of 'ModelTox' class ##For example, the 'logisticIndepBeta' class model DLEmodel<-LogisticIndepBeta(binDLE=c(1.05,1.8),DLEweights=c(3,3),DLEdose=c(25,300),data=data)  ##Effmodel must be  of 'ModelEff' class ##For example, the 'Effloglog' class model Effmodel<-Effloglog(eff=c(1.223,2.513),eff_dose=c(25,300),nu=c(a=1,b=0.025),data=data) ##for illustration purpose we use 10 burn-in and generate 50 samples options<-McmcOptions(burnin=10,step=2,samples=50) ##DLE and efficacy samples must be of 'Samples' class DLEsamples<-mcmc(data,DLEmodel,options) Effsamples<-mcmc(data,Effmodel,options)  ##define the 'StoppingMaxGainCIRatio' class myStopping <- StoppingMaxGainCIRatio(target_ratio = 5, prob_target = 0.3) ##Find the next Recommend dose using the nextBest method (plesae refer to nextbest examples) mynextbest <- NextBestMaxGainSamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, prob = 0.3))   },   mg_derive = function(mg_samples) {     as.numeric(quantile(mg_samples, prob = 0.5))   } )  RecommendDose<-nextBest(mynextbest,doselimit=max(data@doseGrid),samples=DLEsamples,model=DLEmodel,                         data=data,model_eff=Effmodel,samples_eff=Effsamples) #> [1] \"Estimated TD 35 = 14.8679719869239 not within dose grid\" #> [1] \"Estimated TD 30 = 9.60973788445752 not within dose grid\" #> [1] \"Estimated max gain dose = 300 not within dose grid\" ##use 'stopTrial' to determine if the rule has been fulfilled ##use 0.3 as the target proability of DLE at the end of the trial  stopTrial(stopping=myStopping,           dose=RecommendDose$next_dose,           samples=DLEsamples,           model=DLEmodel,           data=data,           TDderive=function(TDsamples){             quantile(TDsamples,prob=0.3)},           Effmodel=Effmodel,           Effsamples=Effsamples,           Gstarderive=function(Gstarsamples){             quantile(Gstarsamples,prob=0.5)}) #> [1] FALSE #> attr(,\"message\") #> [1] \"Gstar estimate is 300 with 95% CI ( 25 , 300 ) and its ratio = 12\"                                                        #> [2] \"TDtargetEndOfTrial estimate is  9.6097 with 95% CI ( 0.0014 , 2.68928250389749e+39 ) and its ratio= 1.93690997063425e+42\" #> [3] \"TDtargetEndOfTrial estimate is smaller with ratio = 1.93690997063425e+42  which is  greater than target_ratio = 5\"        #> attr(,\"report_label\") #> [1] \"GStar 5 for 0.3 target prob\"  # nolint end # nolint start  ##define the stopping rules based on the 'StoppingMaxGainCIRatio' class ##Using both DLE and efficacy responses ## we need a data object with doses >= 1: data <-DataDual(x=c(25,50,25,50,75,300,250,150),                 y=c(0,0,0,0,0,1,1,0),                 w=c(0.31,0.42,0.59,0.45,0.6,0.7,0.6,0.52),                 doseGrid=seq(25,300,25),                 placebo=FALSE) #> Used default patient IDs! #> Used best guess cohort indices!  ##DLEmodel must be of 'ModelTox' class ##For example, the 'logisticIndepBeta' class model DLEmodel<-LogisticIndepBeta(binDLE=c(1.05,1.8),DLEweights=c(3,3),DLEdose=c(25,300),data=data)  ##Effmodel must be  of 'ModelEff' class ##For example, the 'Effloglog' class model Effmodel<-Effloglog(eff=c(1.223,2.513),eff_dose=c(25,300),nu=c(a=1,b=0.025),data=data)   ##define the 'StoppingMaxGainCIRatio' class myStopping <- StoppingMaxGainCIRatio(target_ratio = 5, prob_target = 0.3) ##Find the next Recommend dose using the nextBest method (plesae refer to nextbest examples) mynextbest<-NextBestMaxGain(prob_target_drt=0.35, prob_target_eot=0.3)  RecommendDose<-nextBest(mynextbest,doselimit=max(data@doseGrid),model=DLEmodel,                         model_eff=Effmodel,data=data)  ##use 'stopTrial' to determine if the rule has been fulfilled ##use 0.3 as the target proability of DLE at the end of the trial   stopTrial(stopping=myStopping,dose=RecommendDose$next_dose,model=DLEmodel,           data=data, Effmodel=Effmodel) #> [1] FALSE #> attr(,\"message\") #> [1] \"Gstar estimate is 94.942 with 95% CI ( 16.771 , 537.4745 ) and its ratio = 32.0479\"                  #> [2] \"TDtargetEndOfTrial estimate is  81.4924 with 95% CI ( 24.3435 , 272.804 ) and its ratio= 11.2064\"    #> [3] \"TDatrgetEndOfTrial estimate is smaller with ratio = 11.2064 which is  greater than target_ratio = 5\" #> attr(,\"report_label\") #> [1] \"GStar 5 for 0.3 target prob\"  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/summary-DualSimulations-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the dual-endpoint design simulations, relative to given true dose-toxicity and dose-biomarker curves — summary,DualSimulations-method","title":"Summarize the dual-endpoint design simulations, relative to given true dose-toxicity and dose-biomarker curves — summary,DualSimulations-method","text":"Summarize dual-endpoint design simulations, relative given true dose-toxicity dose-biomarker curves","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-DualSimulations-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the dual-endpoint design simulations, relative to given true dose-toxicity and dose-biomarker curves — summary,DualSimulations-method","text":"","code":"# S4 method for class 'DualSimulations' summary(object, trueTox, trueBiomarker, target = c(0.2, 0.35), ...)"},{"path":"https://openpharma.github.io/crmPack/reference/summary-DualSimulations-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the dual-endpoint design simulations, relative to given true dose-toxicity and dose-biomarker curves — summary,DualSimulations-method","text":"object DualSimulations object want summarize trueTox function takes input dose (vector) returns true probability (vector) toxicity. trueBiomarker function takes input dose (vector) returns true biomarker level (vector). target target toxicity interval (default: 20-35%) used computations ... Additional arguments can supplied trueTox trueBiomarker","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-DualSimulations-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the dual-endpoint design simulations, relative to given true dose-toxicity and dose-biomarker curves — summary,DualSimulations-method","text":"object class DualSimulationsSummary","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-DualSimulations-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the dual-endpoint design simulations, relative to given true dose-toxicity and dose-biomarker curves — summary,DualSimulations-method","text":"","code":"# Define the dose-grid. emptydata <- DataDual(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))   # Initialize the CRM model. my_model <- DualEndpointRW(   mean = c(0, 1),   cov = matrix(c(1, 0, 0, 1), nrow = 2),   sigma2betaW = 0.01,   sigma2W = c(a = 0.1, b = 0.1),   rho = c(a = 1, b = 1),   rw1 = TRUE )  # Choose the rule for selecting the next dose. my_next_best <- NextBestDualEndpoint(   target = c(0.9, 1),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for stopping. my_stopping1 <- StoppingTargetBiomarker(   target = c(0.9, 1),   prob = 0.5 )  # For illustration stop with 6 subjects. my_stopping <- my_stopping1 | StoppingMinPatients(6) | StoppingMissingDose()  # Choose the rule for dose increments. my_increments <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design. design <- DualDesign(   model = my_model,   data = emptydata,   nextBest = my_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = CohortSizeConst(3),   startingDose = 3 )  # Define scenarios for the TRUE toxicity and efficacy profiles. beta_mod <- function(dose, e0, eMax, delta1, delta2, scal) {   maxDens <- (delta1^delta1) * (delta2^delta2) / ((delta1 + delta2)^(delta1 + delta2))   dose <- dose / scal   e0 + eMax / maxDens * (dose^delta1) * (1 - dose)^delta2 }  true_biomarker <- function(dose) {   beta_mod(dose, e0 = 0.2, eMax = 0.6, delta1 = 5, delta2 = 5 * 0.5 / 0.5, scal = 100) }  true_tox <- function(dose) {   pnorm((dose - 60) / 10) }  # Draw the TRUE profiles. par(mfrow = c(1, 2)) curve(true_tox(x), from = 0, to = 80) curve(true_biomarker(x), from = 0, to = 80)   # Run the simulation on the desired design. # For illustration purposes 1 trial is simulated with 5 burn-ins to generate 20 samples. my_sims <- simulate(   object = design,   trueTox = true_tox,   trueBiomarker = true_biomarker,   sigma2W = 0.01,   rho = 0,   nsim = 1,   parallel = FALSE,   seed = 3,   startingDose = 6,   mcmcOptions = McmcOptions(     burnin = 5,     step = 1,     samples = 20   ) )  # Summarize the results of the simulations. summary(   my_sims,   trueTox = true_tox,   trueBiomarker = true_biomarker ) #> Summary of 1 simulations #>  #> Target toxicity interval was 20, 35 % #> Target dose interval corresponding to this was 51.6, 56.1  #> Intervals are corresponding to 10 and 90 % quantiles #>  #> Number of patients overall : mean 6 (6, 6)  #> Number of patients treated above target tox interval : mean 0 (0, 0)  #> Proportions of DLTs in the trials : mean 0 % (0 %, 0 %)  #> Mean toxicity risks for the patients on active : mean 0 % (0 %, 0 %)  #> Doses selected as MTD : mean 1 (1, 1)  #> True toxicity at doses selected : mean 0 % (0 %, 0 %)  #> Proportion of trials selecting target MTD: 0 % #> Dose most often selected as MTD: 1  #> Observed toxicity rate at dose most often selected: 0 % #> Fitted toxicity rate at dose most often selected : mean 11 % (11 %, 11 %)  #> Stop reason triggered: #>  P(0.9 ≤ Biomarker ≤ 1) ≥ 0.5 (relative) :  0 % #>  ≥ 6 patients dosed :  100 % #>  Stopped because of missing dose :  0 % #> Fitted biomarker level at dose most often selected : mean 0.2 (0.2, 0.2)"},{"path":"https://openpharma.github.io/crmPack/reference/summary-GeneralSimulations-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the simulations, relative to a given truth — summary,GeneralSimulations-method","title":"Summarize the simulations, relative to a given truth — summary,GeneralSimulations-method","text":"Summarize simulations, relative given truth","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-GeneralSimulations-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the simulations, relative to a given truth — summary,GeneralSimulations-method","text":"","code":"# S4 method for class 'GeneralSimulations' summary(object, truth, target = c(0.2, 0.35), ...)"},{"path":"https://openpharma.github.io/crmPack/reference/summary-GeneralSimulations-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the simulations, relative to a given truth — summary,GeneralSimulations-method","text":"object GeneralSimulations object want summarize truth function takes input dose (vector) returns true probability (vector) toxicity target target toxicity interval (default: 20-35%) used computations ... Additional arguments can supplied truth","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-GeneralSimulations-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the simulations, relative to a given truth — summary,GeneralSimulations-method","text":"object class GeneralSimulationsSummary","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoDualFlexiSimulations-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for Pseudo Dual responses simulations given a pseudo DLE model and the Flexible efficacy model. — summary,PseudoDualFlexiSimulations-method","title":"Summary for Pseudo Dual responses simulations given a pseudo DLE model and the Flexible efficacy model. — summary,PseudoDualFlexiSimulations-method","text":"Summary Pseudo Dual responses simulations given pseudo DLE model Flexible efficacy model.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoDualFlexiSimulations-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for Pseudo Dual responses simulations given a pseudo DLE model and the Flexible efficacy model. — summary,PseudoDualFlexiSimulations-method","text":"","code":"# S4 method for class 'PseudoDualFlexiSimulations' summary(   object,   trueDLE,   trueEff,   targetEndOfTrial = 0.3,   targetDuringTrial = 0.35,   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoDualFlexiSimulations-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for Pseudo Dual responses simulations given a pseudo DLE model and the Flexible efficacy model. — summary,PseudoDualFlexiSimulations-method","text":"object PseudoDualFlexiSimulations object want summarize trueDLE function takes input dose (vector) returns true probability DLE (vector) trueEff vector takes input true mean efficacy values dose levels (order) targetEndOfTrial target probability DLE used end trial. Default 0.3. targetDuringTrial target probability DLE used trial. Default 0.35. ... Additional arguments can supplied trueDLE trueEff","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoDualFlexiSimulations-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for Pseudo Dual responses simulations given a pseudo DLE model and the Flexible efficacy model. — summary,PseudoDualFlexiSimulations-method","text":"object class PseudoDualSimulationsSummary","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoDualFlexiSimulations-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for Pseudo Dual responses simulations given a pseudo DLE model and the Flexible efficacy model. — summary,PseudoDualFlexiSimulations-method","text":"","code":"# nolint start  ## If DLE and efficacy responses are considered in the simulations and the 'EffFlexi' class is used ## we need a data object with doses >= 1: data <- DataDual(doseGrid = seq(25, 300, 25)) ## First for the DLE model ## The DLE model must be of 'ModelTox' (e.g 'LogisticIndepBeta') class DLEmodel <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = data )  ## for the efficacy model Effmodel <- EffFlexi(   eff = c(1.223, 2.513), eff_dose = c(25, 300),   sigma2W = c(a = 0.1, b = 0.1), sigma2betaW = c(a = 20, b = 50), rw1 = FALSE, data = data )   ## specified the next best mynextbest <- NextBestMaxGainSamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, prob = 0.3))   },   mg_derive = function(mg_samples) {     as.numeric(quantile(mg_samples, prob = 0.5))   } )  ## The increments (see Increments class examples) ## 200% allowable increase for dose below 300 and 200% increase for dose above 300 myIncrements <- IncrementsRelative(   intervals = c(25, 300),   increments = c(2, 2) ) ## cohort size of 3 mySize <- CohortSizeConst(size = 3) ## Stop only when 10 subjects are treated: ## very low sample size is just for illustration here myStopping <- StoppingMinPatients(nPatients = 10)  ## Specified the design design <- DualResponsesSamplesDesign(   nextBest = mynextbest,   cohort_size = mySize,   startingDose = 25,   model = DLEmodel,   eff_model = Effmodel,   data = data,   stopping = myStopping,   increments = myIncrements ) ## specified the true DLE curve and the true expected efficacy values at all dose levels myTruthDLE <- probFunction(DLEmodel, phi1 = -53.66584, phi2 = 10.50499)  myTruthEff <- c(   -0.5478867, 0.1645417, 0.5248031, 0.7604467,   0.9333009, 1.0687031, 1.1793942, 1.2726408,   1.3529598, 1.4233411, 1.4858613, 1.5420182 )   ## specify the options for MCMC # For illustration purpose, we use 10 burn-in and generate 100 samples options <- McmcOptions(burnin = 10, step = 1, samples = 100) ## The simulation ## For illustration purpose only 1 simulation is produced (nsim=1). mySim <- simulate(   object = design,   args = NULL,   trueDLE = myTruthDLE,   trueEff = myTruthEff,   trueSigma2 = 0.025,   trueSigma2betaW = 1,   nsim = 1,   seed = 819,   parallel = FALSE,   mcmcOptions = options ) ## summarize the simulation results summary(mySim,   trueDLE = myTruthDLE,   trueEff = myTruthEff ) #> Summary of 1 simulations #>  #> Target probability of DLE p(DLE) used at the end of a trial was 30 % #> The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  #> TDEOT at dose Grid was 150  #> Target p(DLE) used during a trial was 35 % #> The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  #> TDDT at dose Grid was 150  #> Number of patients overall : mean 12 (12, 12)  #> Number of patients treated above the target p(DLE) used at the end of a trial : mean 0 (0, 0)  #> Number of patients treated above the target p(DLE) used during a trial : mean 0 (0, 0)  #> Proportions of observed DLT in the trials : mean 0 % (0 %, 0 %)  #> Mean toxicity risks for the patients : mean 0 % (0 %, 0 %)  #> Doses selected as TDEOT : mean 0 (0, 0)  #> True toxicity at TDEOT : mean 0 % (0 %, 0 %)  #> Proportion of trials selecting the TDEOT: 0 % #> Proportion of trials selecting the TDDT: 0 % #> Dose most often selected as TDEOT: 0  #> Observed toxicity rate at dose most often selected: NaN % #> Fitted probabilities of DLE at dose most often selected : mean NA % (NA %, NA %)  #> The summary table of the final TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    10.12   10.12   10.12   10.12   10.12   10.12   #> The summary table of the final ratios of the TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>        1       1       1       1       1       1   #> The summary table of the final TDDT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    6.222   6.222   6.222   6.222   6.222   6.222   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    10.12   10.12   10.12   10.12   10.12   10.12   #> The summary table of the final ratios of the optimal dose for stopping across #>                   all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>        1       1       1       1       1       1   #>  #> Stop reason triggered: #>  ≥ 10 patients dosed :  100 % #> Target Gstar, the dose which gives the maximum gain value was 125  #> Target Gstar at dose Grid was 125  #> The summary table of the final Gstar across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>      250     250     250     250     250     250   #> The summary table of the final ratios of the Gstar across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    2.192   2.192   2.192   2.192   2.192   2.192   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    10.12   10.12   10.12   10.12   10.12   10.12   #> The summary table of the final ratios of the optimal dose for stopping across #>         all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>        1       1       1       1       1       1   #> Fitted expected efficacy level at dose most often selected : mean NA (NA, NA)  #> Stop reason triggered: #>  ≥ 10 patients dosed :  100 %  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoDualSimulations-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for Pseudo Dual responses simulations, relative to a given pseudo DLE and efficacy model (except the EffFlexi class model) — summary,PseudoDualSimulations-method","title":"Summary for Pseudo Dual responses simulations, relative to a given pseudo DLE and efficacy model (except the EffFlexi class model) — summary,PseudoDualSimulations-method","text":"Summary Pseudo Dual responses simulations, relative given pseudo DLE efficacy model (except EffFlexi class model)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoDualSimulations-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for Pseudo Dual responses simulations, relative to a given pseudo DLE and efficacy model (except the EffFlexi class model) — summary,PseudoDualSimulations-method","text":"","code":"# S4 method for class 'PseudoDualSimulations' summary(   object,   trueDLE,   trueEff,   targetEndOfTrial = 0.3,   targetDuringTrial = 0.35,   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoDualSimulations-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for Pseudo Dual responses simulations, relative to a given pseudo DLE and efficacy model (except the EffFlexi class model) — summary,PseudoDualSimulations-method","text":"object PseudoDualSimulations object want summarize trueDLE function takes input dose (vector) returns true probability (vector) DLE trueEff function takes input dose (vector) returns mean efficacy value(s) (vector). targetEndOfTrial target probability DLE used end trial. Default 0.3. targetDuringTrial target probability DLE used trial. Default 0.35. ... Additional arguments can supplied trueDLE trueEff","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoDualSimulations-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for Pseudo Dual responses simulations, relative to a given pseudo DLE and efficacy model (except the EffFlexi class model) — summary,PseudoDualSimulations-method","text":"object class PseudoDualSimulationsSummary","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoDualSimulations-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for Pseudo Dual responses simulations, relative to a given pseudo DLE and efficacy model (except the EffFlexi class model) — summary,PseudoDualSimulations-method","text":"","code":"# Obtain the plot for the simulation results if DLE and efficacy responses # are considered in the simulations.  # Specified simulations when no samples are used. emptydata <- DataDual(doseGrid = seq(25, 300, 25))  # The DLE model must be of 'ModelTox' (e.g 'LogisticIndepBeta') class. dle_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = emptydata )  # The efficacy model of 'ModelEff' (e.g 'Effloglog') class. eff_model <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = emptydata )  # The escalation rule using the 'NextBestMaxGain' class. my_next_best <- NextBestMaxGain(   prob_target_drt = 0.35,   prob_target_eot = 0.3 )  # Allow increase of 200%. my_increments <- IncrementsRelative(intervals = 0, increments = 2)  # Cohort size of 3. my_size <- CohortSizeConst(size = 3)  # Stop when 36 subjects are treated or next dose is NA. my_stopping <- StoppingMinPatients(nPatients = 36) | StoppingMissingDose()  # Specify the design. (For details please refer to the 'DualResponsesDesign' example.) my_design <- DualResponsesDesign(   nextBest = my_next_best,   model = dle_model,   eff_model = eff_model,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = emptydata,   startingDose = 25 )  # Specify the true DLE and efficacy curves. my_truth_dle <- probFunction(dle_model, phi1 = -53.66584, phi2 = 10.50499) my_truth_eff <- efficacyFunction(eff_model, theta1 = -4.818429, theta2 = 3.653058)  # Specify the simulations and generate the 2 trials. my_sim <- simulate(   object = my_design,   args = NULL,   trueDLE = my_truth_dle,   trueEff = my_truth_eff,   trueNu = 1 / 0.025,   nsim = 2,   seed = 819,   parallel = FALSE )  # Produce a summary of the simulations. summary(   my_sim,   trueDLE = my_truth_dle,   trueEff = my_truth_eff ) #> Summary of 2 simulations #>  #> Target probability of DLE p(DLE) used at the end of a trial was 30 % #> The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  #> TDEOT at dose Grid was 150  #> Target p(DLE) used during a trial was 35 % #> The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  #> TDDT at dose Grid was 150  #> Number of patients overall : mean 36 (36, 36)  #> Number of patients treated above the target p(DLE) used at the end of a trial : mean 6 (6, 6)  #> Number of patients treated above the target p(DLE) used during a trial : mean 6 (6, 6)  #> Proportions of observed DLT in the trials : mean 22 % (20 %, 24 %)  #> Mean toxicity risks for the patients : mean 21 % (20 %, 22 %)  #> Doses selected as TDEOT : mean 125 (125, 125)  #> True toxicity at TDEOT : mean 5 % (5 %, 5 %)  #> Proportion of trials selecting the TDEOT: 0 % #> Proportion of trials selecting the TDDT: 0 % #> Dose most often selected as TDEOT: 125  #> Observed toxicity rate at dose most often selected: 7 % #> Fitted probabilities of DLE at dose most often selected : mean 23 % (21 %, 26 %)  #> The summary table of the final TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    137.6   143.9   150.2   150.2   156.5   162.8   #> The summary table of the final ratios of the TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    2.206   2.209   2.212   2.212   2.215   2.218   #> The summary table of the final TDDT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    155.6   162.5   169.3   169.3   176.2   183.1   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    137.6   140.5   143.5   143.5   146.4   149.4   #> The summary table of the final ratios of the optimal dose for stopping across #>                   all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    2.206   2.606   3.006   3.006   3.406   3.806   #>  #> Stop reason triggered: #>  ≥ 36 patients dosed :  100 % #>  Stopped because of missing dose :  0 % #> Target Gstar, the dose which gives the maximum gain value was 130.0097  #> Target Gstar at dose Grid was 125  #> The summary table of the final Gstar across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    146.2   147.0   147.8   147.8   148.6   149.4   #> The summary table of the final ratios of the Gstar across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    3.799   3.801   3.802   3.802   3.804   3.806   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    137.6   140.5   143.5   143.5   146.4   149.4   #> The summary table of the final ratios of the optimal dose for stopping across #>         all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    2.206   2.606   3.006   3.006   3.406   3.806   #> Fitted expected efficacy level at dose most often selected : mean 1 (1, 1)  #> Stop reason triggered: #>  ≥ 36 patients dosed :  100 % #>  Stopped because of missing dose :  0 %  # Example where DLE and efficacy samples are involved. # Please refer to design-method 'simulate DualResponsesSamplesDesign' examples for details.  # Specify the next best rule. my_next_best <- NextBestMaxGainSamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, prob = 0.3))   },   mg_derive = function(mg_samples) {     as.numeric(quantile(mg_samples, prob = 0.5))   } )  # Specify the design. my_design <- DualResponsesSamplesDesign(   nextBest = my_next_best,   cohort_size = my_size,   startingDose = 25,   model = dle_model,   eff_model = eff_model,   data = emptydata,   stopping = my_stopping,   increments = my_increments )  # For illustration purpose 50 burn-ins to generate 200 samples are used. my_options <- McmcOptions(burnin = 50, step = 2, samples = 200)  # For illustration purpose 2 simulation are created. my_sim <- simulate(   object = my_design,   args = NULL,   trueDLE = my_truth_dle,   trueEff = my_truth_eff,   trueNu = 1 / 0.025,   nsim = 2,   mcmcOptions = my_options,   seed = 819,   parallel = FALSE )  # Produce a summary of the simulations. summary(   my_sim,   trueDLE = my_truth_dle,   trueEff = my_truth_eff ) #> Summary of 2 simulations #>  #> Target probability of DLE p(DLE) used at the end of a trial was 30 % #> The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  #> TDEOT at dose Grid was 150  #> Target p(DLE) used during a trial was 35 % #> The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  #> TDDT at dose Grid was 150  #> Number of patients overall : mean 24 (14, 34)  #> Number of patients treated above the target p(DLE) used at the end of a trial : mean 3 (1, 5)  #> Number of patients treated above the target p(DLE) used during a trial : mean 3 (1, 5)  #> Proportions of observed DLT in the trials : mean 7 % (1 %, 12 %)  #> Mean toxicity risks for the patients : mean 10 % (2 %, 18 %)  #> Doses selected as TDEOT : mean 100 (20, 180)  #> True toxicity at TDEOT : mean 44 % (9 %, 79 %)  #> Proportion of trials selecting the TDEOT: 0 % #> Proportion of trials selecting the TDDT: 0 % #> Dose most often selected as TDEOT: 0  #> Observed toxicity rate at dose most often selected: NaN % #> Fitted probabilities of DLE at dose most often selected : mean NA % (NA %, NA %)  #> The summary table of the final TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    1.736  55.402 109.068 109.068 162.734 216.400   #> The summary table of the final ratios of the TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>        1       1       1       1       1       1   #> The summary table of the final TDDT across all simulations #>      Min.  1st Qu.   Median     Mean  3rd Qu.     Max.   #>    0.1401  75.4949 150.8497 150.8497 226.2044 301.5592   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    1.736  55.402 109.068 109.068 162.734 216.400   #> The summary table of the final ratios of the optimal dose for stopping across #>                   all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>        1       1       1       1       1       1   #>  #> Stop reason triggered: #>  ≥ 36 patients dosed :  50 % #>  Stopped because of missing dose :  50 % #> Target Gstar, the dose which gives the maximum gain value was 130.0097  #> Target Gstar at dose Grid was 125  #> The summary table of the final Gstar across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>      300     300     300     300     300     300   #> The summary table of the final ratios of the Gstar across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>     1.00    1.35    1.70    1.70    2.05    2.40   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    1.736  55.402 109.068 109.068 162.734 216.400   #> The summary table of the final ratios of the optimal dose for stopping across #>         all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>        1       1       1       1       1       1   #> Fitted expected efficacy level at dose most often selected : mean NA (NA, NA)  #> Stop reason triggered: #>  ≥ 36 patients dosed :  50 % #>  Stopped because of missing dose :  50 %"},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoSimulations-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the simulations, relative to a given truth — summary,PseudoSimulations-method","title":"Summarize the simulations, relative to a given truth — summary,PseudoSimulations-method","text":"Summarize simulations, relative given truth","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoSimulations-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the simulations, relative to a given truth — summary,PseudoSimulations-method","text":"","code":"# S4 method for class 'PseudoSimulations' summary(object, truth, targetEndOfTrial = 0.3, targetDuringTrial = 0.35, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoSimulations-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the simulations, relative to a given truth — summary,PseudoSimulations-method","text":"object PseudoSimulations object want summarize truth function takes input dose (vector) returns true probability (vector) toxicity targetEndOfTrial target probability DLE wanted achieve end trial targetDuringTrial target probability DLE wanted achieve trial ... Additional arguments can supplied truth","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoSimulations-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the simulations, relative to a given truth — summary,PseudoSimulations-method","text":"object class PseudoSimulationsSummary","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-PseudoSimulations-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the simulations, relative to a given truth — summary,PseudoSimulations-method","text":"","code":"emptydata <- Data(doseGrid = seq(25, 300, 25))  # The design incorporate DLE responses and DLE samples. # Specify the model of 'ModelTox' class eg 'LogisticIndepBeta' class model. my_model <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = emptydata )  # The escalation rule. td_next_best <- NextBestTD(   prob_target_drt = 0.35,   prob_target_eot = 0.3 )  # Cohort size is 3 subjects. my_size <- CohortSizeConst(size = 3)  # Allow increase of 200%. my_increments <- IncrementsRelative(intervals = 0, increments = 2)  # Stopp when the maximum sample size of 36 patients has been reached or the next # dose is NA. my_stopping <- StoppingMinPatients(nPatients = 36) | StoppingMissingDose()  # Specify the design. (For details please refer to the 'TDDesign' example.) my_design <- TDDesign(   model = my_model,   nextBest = td_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = emptydata,   startingDose = 25 )  # Specify the truth of the DLE responses. my_truth <- probFunction(my_model, phi1 = -53.66584, phi2 = 10.50499)  # For illustration purpose 50 burn-ins to generate 200 samples are used. my_options <- McmcOptions(burnin = 50, step = 2, samples = 200)  # Refer to design-method 'simulate TDDesign' examples for details. # For illustration purpose only 1 simulation is produced. my_sim <- simulate(   object = my_design,   args = NULL,   truth = my_truth,   nsim = 1,   seed = 819,   parallel = FALSE,   mcmcOptions = my_options )  # Produce a summary of the simulations. summary(   my_sim,   truth = my_truth ) #> Summary of 1 simulations #>  #> Target probability of DLE p(DLE) used at the end of a trial was 30 % #> The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  #> TDEOT at dose Grid was 150  #> Target p(DLE) used during a trial was 35 % #> The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  #> TDDT at dose Grid was 150  #> Number of patients overall : mean 36 (36, 36)  #> Number of patients treated above the target p(DLE) used at the end of a trial : mean 9 (9, 9)  #> Number of patients treated above the target p(DLE) used during a trial : mean 9 (9, 9)  #> Proportions of observed DLT in the trials : mean 22 % (22 %, 22 %)  #> Mean toxicity risks for the patients : mean 27 % (27 %, 27 %)  #> Doses selected as TDEOT : mean 150 (150, 150)  #> True toxicity at TDEOT : mean 26 % (26 %, 26 %)  #> Proportion of trials selecting the TDEOT: 100 % #> Proportion of trials selecting the TDDT: 100 % #> Dose most often selected as TDEOT: 150  #> Observed toxicity rate at dose most often selected: 33 % #> Fitted probabilities of DLE at dose most often selected : mean 29 % (29 %, 29 %)  #> The summary table of the final TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    155.1   155.1   155.1   155.1   155.1   155.1   #> The summary table of the final ratios of the TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    2.405   2.405   2.405   2.405   2.405   2.405   #> The summary table of the final TDDT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    177.8   177.8   177.8   177.8   177.8   177.8   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    155.1   155.1   155.1   155.1   155.1   155.1   #> The summary table of the final ratios of the optimal dose for stopping across #>                   all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    2.405   2.405   2.405   2.405   2.405   2.405   #>  #> Stop reason triggered: #>  ≥ 36 patients dosed :  100 % #>  Stopped because of missing dose :  0 %  # Example where DLE samples are involved.  # Specify the next best rule. td_next_best <- NextBestTDsamples(   prob_target_drt = 0.35,   prob_target_eot = 0.3,   derive = function(samples) {     as.numeric(quantile(samples, probs = 0.3))   } )  # The design. my_design <- TDsamplesDesign(   model = my_model,   nextBest = td_next_best,   stopping = my_stopping,   increments = my_increments,   cohort_size = my_size,   data = emptydata,   startingDose = 25 )  # For illustration purpose 50 burn-ins to generate 200 samples are used. my_options <- McmcOptions(burnin = 50, step = 2, samples = 200)  # For illustration purpose 2 trials are simulated. my_sim <- simulate(   object = my_design,   args = NULL,   truth = my_truth,   nsim = 2,   seed = 819,   mcmcOptions = my_options,   parallel = FALSE )  # Produce a summary of the simulations. summary(   my_sim,   truth = my_truth ) #> Summary of 2 simulations #>  #> Target probability of DLE p(DLE) used at the end of a trial was 30 % #> The dose level corresponds to the target p(DLE) used at the end of a trial, TDEOT, was 152.6195  #> TDEOT at dose Grid was 150  #> Target p(DLE) used during a trial was 35 % #> The dose level corresponds to the target p(DLE) used during a trial, TDDT, was 155.972  #> TDDT at dose Grid was 150  #> Number of patients overall : mean 20 (6, 33)  #> Number of patients treated above the target p(DLE) used at the end of a trial : mean 6 (1, 11)  #> Number of patients treated above the target p(DLE) used during a trial : mean 6 (1, 11)  #> Proportions of observed DLT in the trials : mean 11 % (2 %, 20 %)  #> Mean toxicity risks for the patients : mean 16 % (3 %, 28 %)  #> Doses selected as TDEOT : mean 50 (10, 90)  #> True toxicity at TDEOT : mean 0 % (0 %, 0 %)  #> Proportion of trials selecting the TDEOT: 0 % #> Proportion of trials selecting the TDDT: 0 % #> Dose most often selected as TDEOT: 0  #> Observed toxicity rate at dose most often selected: NaN % #> Fitted probabilities of DLE at dose most often selected : mean NA % (NA %, NA %)  #> The summary table of the final TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    17.95   43.51   69.07   69.07   94.63  120.19   #> The summary table of the final ratios of the TDEOT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    473.5   781.3  1089.2  1089.2  1397.0  1704.8   #> The summary table of the final TDDT across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    24.92   56.13   87.34   87.34  118.56  149.77   #> The summary table of dose levels, the optimal dose #>  to recommend for subsequent study across all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    17.95   43.51   69.07   69.07   94.63  120.19   #> The summary table of the final ratios of the optimal dose for stopping across #>                   all simulations #>     Min. 1st Qu.  Median    Mean 3rd Qu.    Max.   #>    473.5   781.3  1089.2  1089.2  1397.0  1704.8   #>  #> Stop reason triggered: #>  ≥ 36 patients dosed :  50 % #>  Stopped because of missing dose :  50 %"},{"path":"https://openpharma.github.io/crmPack/reference/summary-Simulations-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the model-based design simulations, relative to a given truth — summary,Simulations-method","title":"Summarize the model-based design simulations, relative to a given truth — summary,Simulations-method","text":"Summarize model-based design simulations, relative given truth","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-Simulations-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the model-based design simulations, relative to a given truth — summary,Simulations-method","text":"","code":"# S4 method for class 'Simulations' summary(object, truth, target = c(0.2, 0.35), ...)"},{"path":"https://openpharma.github.io/crmPack/reference/summary-Simulations-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the model-based design simulations, relative to a given truth — summary,Simulations-method","text":"object Simulations object want summarize truth function takes input dose (vector) returns true probability (vector) toxicity target target toxicity interval (default: 20-35%) used computations ... Additional arguments can supplied truth","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-Simulations-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the model-based design simulations, relative to a given truth — summary,Simulations-method","text":"object class SimulationsSummary","code":""},{"path":"https://openpharma.github.io/crmPack/reference/summary-Simulations-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the model-based design simulations, relative to a given truth — summary,Simulations-method","text":"","code":"# nolint start  # Define the dose-grid emptydata <- Data(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))  # Initialize the CRM model model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov =     matrix(c(1, -0.5, -0.5, 1),       nrow = 2     ),   ref_dose = 56 )  # Choose the rule for selecting the next dose myNextBest <- NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 )  # Choose the rule for the cohort-size mySize1 <- CohortSizeRange(   intervals = c(0, 30),   cohort_size = c(1, 3) ) mySize2 <- CohortSizeDLT(   intervals = c(0, 1),   cohort_size = c(1, 3) ) mySize <- maxSize(mySize1, mySize2)  # Choose the rule for stopping myStopping1 <- StoppingMinCohorts(nCohorts = 3) myStopping2 <- StoppingTargetProb(   target = c(0.2, 0.35),   prob = 0.5 ) myStopping3 <- StoppingMinPatients(nPatients = 20) myStopping <- (myStopping1 & myStopping2) | myStopping3  # Choose the rule for dose increments myIncrements <- IncrementsRelative(   intervals = c(0, 20),   increments = c(1, 0.33) )  # Initialize the design design <- Design(   model = model,   nextBest = myNextBest,   stopping = myStopping,   increments = myIncrements,   cohort_size = mySize,   data = emptydata,   startingDose = 3 )  ## define the true function myTruth <- probFunction(model, alpha0 = 7, alpha1 = 8)  # Run the simulation on the desired design # We only generate 1 trial outcomes here for illustration, for the actual study # this should be increased of course options <- McmcOptions(   burnin = 100,   step = 2,   samples = 1000 ) time <- system.time(mySims <- simulate(design,   args = NULL,   truth = myTruth,   nsim = 1,   seed = 819,   mcmcOptions = options,   parallel = FALSE,   derive = list(     max_mtd = max,     mean_mtd = mean,     median_mtd = median   ), ))[3]  # Summarize the Results of the Simulations summary(mySims, truth = myTruth) #> Summary of 1 simulations #>  #> Target toxicity interval was 20, 35 % #> Target dose interval corresponding to this was 19.6, 21.6  #> Intervals are corresponding to 10 and 90 % quantiles #>  #> Number of patients overall : mean 22 (22, 22)  #> Number of patients treated above target tox interval : mean 9 (9, 9)  #> Proportions of DLTs in the trials : mean 27 % (27 %, 27 %)  #> Mean toxicity risks for the patients on active : mean 31 % (31 %, 31 %)  #> Doses selected as MTD : mean 20 (20, 20)  #> True toxicity at doses selected : mean 22 % (22 %, 22 %)  #> Proportion of trials selecting target MTD: 100 % #> Dose most often selected as MTD: 20  #> Observed toxicity rate at dose most often selected: 25 % #> Fitted toxicity rate at dose most often selected : mean 24 % (24 %, 24 %)  #> max_mtd : 187.84  #> mean_mtd : 25.36  #> median_mtd : 23.69  #> Stop reason triggered: #>  ≥ 3 cohorts dosed :  100 % #>  P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5 :  100 % #>  ≥ 20 patients dosed :  100 %  # nolint end"},{"path":"https://openpharma.github.io/crmPack/reference/tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidying CrmPackClass objects — tidy","title":"Tidying CrmPackClass objects — tidy","text":"spirit broom package, provide method convert CrmPackClass object (list ) tibbles. Following principles broom package, convert CrmPackClass object (list ) tibbles.  basic, default representation.  method tidies GeneralData object.  method tidies DataGrouped object.  method tidies DataDA object.  method tidies DataDual object.  method tidies DataParts object.  method tidies DataMixture object.  method tidies DataOrdinal object.  method tidies LogisticIndepBeta object.  method tidies Effloglog object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidying CrmPackClass objects — tidy","text":"","code":"tidy(x, ...)  # S4 method for class 'CrmPackClass' tidy(x, ...)  # S4 method for class 'GeneralData' tidy(x, ...)  # S4 method for class 'DataGrouped' tidy(x, ...)  # S4 method for class 'DataDA' tidy(x, ...)  # S4 method for class 'DataDual' tidy(x, ...)  # S4 method for class 'DataParts' tidy(x, ...)  # S4 method for class 'DataMixture' tidy(x, ...)  # S4 method for class 'DataOrdinal' tidy(x, ...)  # S4 method for class 'Simulations' tidy(x, ...)  # S4 method for class 'LogisticIndepBeta' tidy(x, ...)  # S4 method for class 'Effloglog' tidy(x, ...)  # S4 method for class 'IncrementsMaxToxProb' tidy(x, ...)  # S4 method for class 'IncrementsRelative' tidy(x, ...)  # S4 method for class 'CohortSizeDLT' tidy(x, ...)  # S4 method for class 'CohortSizeMin' tidy(x, ...)  # S4 method for class 'CohortSizeMax' tidy(x, ...)  # S4 method for class 'CohortSizeRange' tidy(x, ...)  # S4 method for class 'CohortSizeParts' tidy(x, ...)  # S4 method for class 'IncrementsMin' tidy(x, ...)  # S4 method for class 'IncrementsRelative' tidy(x, ...)  # S4 method for class 'IncrementsRelativeDLT' tidy(x, ...)  # S4 method for class 'IncrementsRelativeParts' tidy(x, ...)  # S4 method for class 'NextBestNCRM' tidy(x, ...)  # S4 method for class 'NextBestNCRMLoss' tidy(x, ...)  # S4 method for class 'DualDesign' tidy(x, ...)  # S4 method for class 'Samples' tidy(x, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidying CrmPackClass objects — tidy","text":"x (CrmPackClass) object tidied. ... potentially used class-specific methods.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidying CrmPackClass objects — tidy","text":"(list ) tibble(s) representing object tidy form. tibble object. tibble object. tibble object. tibble object. tibble object. tibble object. tibble object. list tibble objects. list tibble objects.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/tidy.html","id":"usage-notes","dir":"Reference","previous_headings":"","what":"Usage Notes","title":"Tidying CrmPackClass objects — tidy","text":"prior observations indicated Cohort value 0 returned tibble.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/tidy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidying CrmPackClass objects — tidy","text":"","code":"CohortSizeConst(3) %>% tidy() #> # A tibble: 1 × 1 #>    size #>   <int> #> 1     3 .DefaultData() %>% tidy() .DefaultDataOrdinal() %>% tidy() #> # A tibble: 10 × 11 #>       ID Cohort  Dose Placebo  NObs NGrid DoseGrid   XLevel Cat0  Cat1  Cat2  #>    <int>  <int> <dbl> <lgl>   <int> <int> <list>      <int> <lgl> <lgl> <lgl> #>  1     1      1    10 FALSE      10    10 <dbl [10]>      1 TRUE  FALSE FALSE #>  2     2      2    20 FALSE      10    10 <dbl [10]>      2 TRUE  FALSE FALSE #>  3     3      3    30 FALSE      10    10 <dbl [10]>      3 TRUE  FALSE FALSE #>  4     4      4    40 FALSE      10    10 <dbl [10]>      4 TRUE  FALSE FALSE #>  5     5      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  6     6      5    50 FALSE      10    10 <dbl [10]>      5 FALSE TRUE  FALSE #>  7     7      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  8     8      6    60 FALSE      10    10 <dbl [10]>      6 TRUE  FALSE FALSE #>  9     9      6    60 FALSE      10    10 <dbl [10]>      6 FALSE TRUE  FALSE #> 10    10      6    60 FALSE      10    10 <dbl [10]>      6 FALSE FALSE TRUE  .DefaultDataGrouped() %>% tidy() #> # A tibble: 3 × 10 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid   Group #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>     <fct> #> 1     1      1     1      1 FALSE FALSE       3    11 <dbl [11]> mono  #> 2     2      2     3      2 FALSE FALSE       3    11 <dbl [11]> mono  #> 3     3      3     5      3 FALSE FALSE       3    11 <dbl [11]> combo .DefaultDataDA() %>% tidy() #> # A tibble: 8 × 12 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid     U    T0  TMax #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>   <dbl> <dbl> <dbl> #> 1     1      1   0.1      1 FALSE FALSE       8    41 <dbl>       42     0    60 #> 2     2      2   0.5      2 FALSE FALSE       8    41 <dbl>       30    15    60 #> 3     3      3   1.5      3 TRUE  FALSE       8    41 <dbl>       15    30    60 #> 4     4      4   3        4 TRUE  FALSE       8    41 <dbl>        5    40    60 #> 5     5      5   6        5 FALSE FALSE       8    41 <dbl>       20    55    60 #> 6     6      6  10        6 FALSE FALSE       8    41 <dbl>       25    70    60 #> 7     7      6  10        6 TRUE  FALSE       8    41 <dbl>       30    75    60 #> 8     8      6  10        6 FALSE FALSE       8    41 <dbl>       60    85    60 .DefaultData() %>% tidy() .DefaultDataOrdinal() %>% tidy() #> # A tibble: 10 × 11 #>       ID Cohort  Dose Placebo  NObs NGrid DoseGrid   XLevel Cat0  Cat1  Cat2  #>    <int>  <int> <dbl> <lgl>   <int> <int> <list>      <int> <lgl> <lgl> <lgl> #>  1     1      1    10 FALSE      10    10 <dbl [10]>      1 TRUE  FALSE FALSE #>  2     2      2    20 FALSE      10    10 <dbl [10]>      2 TRUE  FALSE FALSE #>  3     3      3    30 FALSE      10    10 <dbl [10]>      3 TRUE  FALSE FALSE #>  4     4      4    40 FALSE      10    10 <dbl [10]>      4 TRUE  FALSE FALSE #>  5     5      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  6     6      5    50 FALSE      10    10 <dbl [10]>      5 FALSE TRUE  FALSE #>  7     7      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  8     8      6    60 FALSE      10    10 <dbl [10]>      6 TRUE  FALSE FALSE #>  9     9      6    60 FALSE      10    10 <dbl [10]>      6 FALSE TRUE  FALSE #> 10    10      6    60 FALSE      10    10 <dbl [10]>      6 FALSE FALSE TRUE  .DefaultDataGrouped() %>% tidy() #> # A tibble: 3 × 10 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid   Group #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>     <fct> #> 1     1      1     1      1 FALSE FALSE       3    11 <dbl [11]> mono  #> 2     2      2     3      2 FALSE FALSE       3    11 <dbl [11]> mono  #> 3     3      3     5      3 FALSE FALSE       3    11 <dbl [11]> combo .DefaultDataDA() %>% tidy() #> # A tibble: 8 × 12 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid     U    T0  TMax #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>   <dbl> <dbl> <dbl> #> 1     1      1   0.1      1 FALSE FALSE       8    41 <dbl>       42     0    60 #> 2     2      2   0.5      2 FALSE FALSE       8    41 <dbl>       30    15    60 #> 3     3      3   1.5      3 TRUE  FALSE       8    41 <dbl>       15    30    60 #> 4     4      4   3        4 TRUE  FALSE       8    41 <dbl>        5    40    60 #> 5     5      5   6        5 FALSE FALSE       8    41 <dbl>       20    55    60 #> 6     6      6  10        6 FALSE FALSE       8    41 <dbl>       25    70    60 #> 7     7      6  10        6 TRUE  FALSE       8    41 <dbl>       30    75    60 #> 8     8      6  10        6 FALSE FALSE       8    41 <dbl>       60    85    60 .DefaultData() %>% tidy() .DefaultDataOrdinal() %>% tidy() #> # A tibble: 10 × 11 #>       ID Cohort  Dose Placebo  NObs NGrid DoseGrid   XLevel Cat0  Cat1  Cat2  #>    <int>  <int> <dbl> <lgl>   <int> <int> <list>      <int> <lgl> <lgl> <lgl> #>  1     1      1    10 FALSE      10    10 <dbl [10]>      1 TRUE  FALSE FALSE #>  2     2      2    20 FALSE      10    10 <dbl [10]>      2 TRUE  FALSE FALSE #>  3     3      3    30 FALSE      10    10 <dbl [10]>      3 TRUE  FALSE FALSE #>  4     4      4    40 FALSE      10    10 <dbl [10]>      4 TRUE  FALSE FALSE #>  5     5      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  6     6      5    50 FALSE      10    10 <dbl [10]>      5 FALSE TRUE  FALSE #>  7     7      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  8     8      6    60 FALSE      10    10 <dbl [10]>      6 TRUE  FALSE FALSE #>  9     9      6    60 FALSE      10    10 <dbl [10]>      6 FALSE TRUE  FALSE #> 10    10      6    60 FALSE      10    10 <dbl [10]>      6 FALSE FALSE TRUE  .DefaultDataGrouped() %>% tidy() #> # A tibble: 3 × 10 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid   Group #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>     <fct> #> 1     1      1     1      1 FALSE FALSE       3    11 <dbl [11]> mono  #> 2     2      2     3      2 FALSE FALSE       3    11 <dbl [11]> mono  #> 3     3      3     5      3 FALSE FALSE       3    11 <dbl [11]> combo .DefaultDataDA() %>% tidy() #> # A tibble: 8 × 12 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid     U    T0  TMax #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>   <dbl> <dbl> <dbl> #> 1     1      1   0.1      1 FALSE FALSE       8    41 <dbl>       42     0    60 #> 2     2      2   0.5      2 FALSE FALSE       8    41 <dbl>       30    15    60 #> 3     3      3   1.5      3 TRUE  FALSE       8    41 <dbl>       15    30    60 #> 4     4      4   3        4 TRUE  FALSE       8    41 <dbl>        5    40    60 #> 5     5      5   6        5 FALSE FALSE       8    41 <dbl>       20    55    60 #> 6     6      6  10        6 FALSE FALSE       8    41 <dbl>       25    70    60 #> 7     7      6  10        6 TRUE  FALSE       8    41 <dbl>       30    75    60 #> 8     8      6  10        6 FALSE FALSE       8    41 <dbl>       60    85    60 .DefaultData() %>% tidy() .DefaultDataOrdinal() %>% tidy() #> # A tibble: 10 × 11 #>       ID Cohort  Dose Placebo  NObs NGrid DoseGrid   XLevel Cat0  Cat1  Cat2  #>    <int>  <int> <dbl> <lgl>   <int> <int> <list>      <int> <lgl> <lgl> <lgl> #>  1     1      1    10 FALSE      10    10 <dbl [10]>      1 TRUE  FALSE FALSE #>  2     2      2    20 FALSE      10    10 <dbl [10]>      2 TRUE  FALSE FALSE #>  3     3      3    30 FALSE      10    10 <dbl [10]>      3 TRUE  FALSE FALSE #>  4     4      4    40 FALSE      10    10 <dbl [10]>      4 TRUE  FALSE FALSE #>  5     5      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  6     6      5    50 FALSE      10    10 <dbl [10]>      5 FALSE TRUE  FALSE #>  7     7      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  8     8      6    60 FALSE      10    10 <dbl [10]>      6 TRUE  FALSE FALSE #>  9     9      6    60 FALSE      10    10 <dbl [10]>      6 FALSE TRUE  FALSE #> 10    10      6    60 FALSE      10    10 <dbl [10]>      6 FALSE FALSE TRUE  .DefaultDataGrouped() %>% tidy() #> # A tibble: 3 × 10 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid   Group #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>     <fct> #> 1     1      1     1      1 FALSE FALSE       3    11 <dbl [11]> mono  #> 2     2      2     3      2 FALSE FALSE       3    11 <dbl [11]> mono  #> 3     3      3     5      3 FALSE FALSE       3    11 <dbl [11]> combo .DefaultDataDA() %>% tidy() #> # A tibble: 8 × 12 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid     U    T0  TMax #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>   <dbl> <dbl> <dbl> #> 1     1      1   0.1      1 FALSE FALSE       8    41 <dbl>       42     0    60 #> 2     2      2   0.5      2 FALSE FALSE       8    41 <dbl>       30    15    60 #> 3     3      3   1.5      3 TRUE  FALSE       8    41 <dbl>       15    30    60 #> 4     4      4   3        4 TRUE  FALSE       8    41 <dbl>        5    40    60 #> 5     5      5   6        5 FALSE FALSE       8    41 <dbl>       20    55    60 #> 6     6      6  10        6 FALSE FALSE       8    41 <dbl>       25    70    60 #> 7     7      6  10        6 TRUE  FALSE       8    41 <dbl>       30    75    60 #> 8     8      6  10        6 FALSE FALSE       8    41 <dbl>       60    85    60 .DefaultData() %>% tidy() .DefaultDataOrdinal() %>% tidy() #> # A tibble: 10 × 11 #>       ID Cohort  Dose Placebo  NObs NGrid DoseGrid   XLevel Cat0  Cat1  Cat2  #>    <int>  <int> <dbl> <lgl>   <int> <int> <list>      <int> <lgl> <lgl> <lgl> #>  1     1      1    10 FALSE      10    10 <dbl [10]>      1 TRUE  FALSE FALSE #>  2     2      2    20 FALSE      10    10 <dbl [10]>      2 TRUE  FALSE FALSE #>  3     3      3    30 FALSE      10    10 <dbl [10]>      3 TRUE  FALSE FALSE #>  4     4      4    40 FALSE      10    10 <dbl [10]>      4 TRUE  FALSE FALSE #>  5     5      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  6     6      5    50 FALSE      10    10 <dbl [10]>      5 FALSE TRUE  FALSE #>  7     7      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  8     8      6    60 FALSE      10    10 <dbl [10]>      6 TRUE  FALSE FALSE #>  9     9      6    60 FALSE      10    10 <dbl [10]>      6 FALSE TRUE  FALSE #> 10    10      6    60 FALSE      10    10 <dbl [10]>      6 FALSE FALSE TRUE  .DefaultDataGrouped() %>% tidy() #> # A tibble: 3 × 10 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid   Group #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>     <fct> #> 1     1      1     1      1 FALSE FALSE       3    11 <dbl [11]> mono  #> 2     2      2     3      2 FALSE FALSE       3    11 <dbl [11]> mono  #> 3     3      3     5      3 FALSE FALSE       3    11 <dbl [11]> combo .DefaultDataDA() %>% tidy() #> # A tibble: 8 × 12 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid     U    T0  TMax #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>   <dbl> <dbl> <dbl> #> 1     1      1   0.1      1 FALSE FALSE       8    41 <dbl>       42     0    60 #> 2     2      2   0.5      2 FALSE FALSE       8    41 <dbl>       30    15    60 #> 3     3      3   1.5      3 TRUE  FALSE       8    41 <dbl>       15    30    60 #> 4     4      4   3        4 TRUE  FALSE       8    41 <dbl>        5    40    60 #> 5     5      5   6        5 FALSE FALSE       8    41 <dbl>       20    55    60 #> 6     6      6  10        6 FALSE FALSE       8    41 <dbl>       25    70    60 #> 7     7      6  10        6 TRUE  FALSE       8    41 <dbl>       30    75    60 #> 8     8      6  10        6 FALSE FALSE       8    41 <dbl>       60    85    60 .DefaultData() %>% tidy() .DefaultDataOrdinal() %>% tidy() #> # A tibble: 10 × 11 #>       ID Cohort  Dose Placebo  NObs NGrid DoseGrid   XLevel Cat0  Cat1  Cat2  #>    <int>  <int> <dbl> <lgl>   <int> <int> <list>      <int> <lgl> <lgl> <lgl> #>  1     1      1    10 FALSE      10    10 <dbl [10]>      1 TRUE  FALSE FALSE #>  2     2      2    20 FALSE      10    10 <dbl [10]>      2 TRUE  FALSE FALSE #>  3     3      3    30 FALSE      10    10 <dbl [10]>      3 TRUE  FALSE FALSE #>  4     4      4    40 FALSE      10    10 <dbl [10]>      4 TRUE  FALSE FALSE #>  5     5      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  6     6      5    50 FALSE      10    10 <dbl [10]>      5 FALSE TRUE  FALSE #>  7     7      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  8     8      6    60 FALSE      10    10 <dbl [10]>      6 TRUE  FALSE FALSE #>  9     9      6    60 FALSE      10    10 <dbl [10]>      6 FALSE TRUE  FALSE #> 10    10      6    60 FALSE      10    10 <dbl [10]>      6 FALSE FALSE TRUE  .DefaultDataGrouped() %>% tidy() #> # A tibble: 3 × 10 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid   Group #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>     <fct> #> 1     1      1     1      1 FALSE FALSE       3    11 <dbl [11]> mono  #> 2     2      2     3      2 FALSE FALSE       3    11 <dbl [11]> mono  #> 3     3      3     5      3 FALSE FALSE       3    11 <dbl [11]> combo .DefaultDataDA() %>% tidy() #> # A tibble: 8 × 12 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid     U    T0  TMax #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>   <dbl> <dbl> <dbl> #> 1     1      1   0.1      1 FALSE FALSE       8    41 <dbl>       42     0    60 #> 2     2      2   0.5      2 FALSE FALSE       8    41 <dbl>       30    15    60 #> 3     3      3   1.5      3 TRUE  FALSE       8    41 <dbl>       15    30    60 #> 4     4      4   3        4 TRUE  FALSE       8    41 <dbl>        5    40    60 #> 5     5      5   6        5 FALSE FALSE       8    41 <dbl>       20    55    60 #> 6     6      6  10        6 FALSE FALSE       8    41 <dbl>       25    70    60 #> 7     7      6  10        6 TRUE  FALSE       8    41 <dbl>       30    75    60 #> 8     8      6  10        6 FALSE FALSE       8    41 <dbl>       60    85    60 .DefaultData() %>% tidy() .DefaultDataOrdinal() %>% tidy() #> # A tibble: 10 × 11 #>       ID Cohort  Dose Placebo  NObs NGrid DoseGrid   XLevel Cat0  Cat1  Cat2  #>    <int>  <int> <dbl> <lgl>   <int> <int> <list>      <int> <lgl> <lgl> <lgl> #>  1     1      1    10 FALSE      10    10 <dbl [10]>      1 TRUE  FALSE FALSE #>  2     2      2    20 FALSE      10    10 <dbl [10]>      2 TRUE  FALSE FALSE #>  3     3      3    30 FALSE      10    10 <dbl [10]>      3 TRUE  FALSE FALSE #>  4     4      4    40 FALSE      10    10 <dbl [10]>      4 TRUE  FALSE FALSE #>  5     5      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  6     6      5    50 FALSE      10    10 <dbl [10]>      5 FALSE TRUE  FALSE #>  7     7      5    50 FALSE      10    10 <dbl [10]>      5 TRUE  FALSE FALSE #>  8     8      6    60 FALSE      10    10 <dbl [10]>      6 TRUE  FALSE FALSE #>  9     9      6    60 FALSE      10    10 <dbl [10]>      6 FALSE TRUE  FALSE #> 10    10      6    60 FALSE      10    10 <dbl [10]>      6 FALSE FALSE TRUE  .DefaultDataGrouped() %>% tidy() #> # A tibble: 3 × 10 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid   Group #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>     <fct> #> 1     1      1     1      1 FALSE FALSE       3    11 <dbl [11]> mono  #> 2     2      2     3      2 FALSE FALSE       3    11 <dbl [11]> mono  #> 3     3      3     5      3 FALSE FALSE       3    11 <dbl [11]> combo .DefaultDataDA() %>% tidy() #> # A tibble: 8 × 12 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid     U    T0  TMax #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>   <dbl> <dbl> <dbl> #> 1     1      1   0.1      1 FALSE FALSE       8    41 <dbl>       42     0    60 #> 2     2      2   0.5      2 FALSE FALSE       8    41 <dbl>       30    15    60 #> 3     3      3   1.5      3 TRUE  FALSE       8    41 <dbl>       15    30    60 #> 4     4      4   3        4 TRUE  FALSE       8    41 <dbl>        5    40    60 #> 5     5      5   6        5 FALSE FALSE       8    41 <dbl>       20    55    60 #> 6     6      6  10        6 FALSE FALSE       8    41 <dbl>       25    70    60 #> 7     7      6  10        6 TRUE  FALSE       8    41 <dbl>       30    75    60 #> 8     8      6  10        6 FALSE FALSE       8    41 <dbl>       60    85    60 .DefaultSimulations() %>% tidy() #> $fit #> $fit[[1]] #>        middle        lower     upper #> 1  0.02947800 8.790126e-05 0.1609931 #> 2  0.06205162 1.280740e-03 0.2264179 #> 3  0.09109935 5.304034e-03 0.2710729 #> 4  0.15909233 2.614695e-02 0.3469997 #> 5  0.22297328 6.211872e-02 0.4195754 #> 6  0.28256639 1.164618e-01 0.4806718 #> 7  0.33722611 1.624528e-01 0.5434547 #> 8  0.46924700 2.585951e-01 0.7097959 #> 9  0.53353235 2.967327e-01 0.7876962 #> 10 0.65572346 3.684286e-01 0.9207580 #> 11 0.70439592 3.964258e-01 0.9495574 #>  #>  #> $stop_report #> # A tibble: 1 × 1 #>   stop_report[,NA] [,NA] [,\"≥ 3 cohorts dosed\"] [,\"P(0.2 ≤ prob(DLE | NBD) ≤ 0…¹ #>   <lgl>            <lgl> <lgl>                  <lgl>                            #> 1 TRUE             TRUE  TRUE                   TRUE                             #> # ℹ abbreviated name: ¹​[,\"P(0.2 ≤ prob(DLE | NBD) ≤ 0.35) ≥ 0.5\"] #> # ℹ 1 more variable: stop_report[5] <lgl> #>  #> $data #> $data[[1]] #> # A tibble: 19 × 9 #>       ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid   #>    <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>     #>  1     1      1     3      2 FALSE FALSE      19    11 <dbl [11]> #>  2     2      2     5      3 FALSE FALSE      19    11 <dbl [11]> #>  3     3      3    10      4 FALSE FALSE      19    11 <dbl [11]> #>  4     4      4    20      6 TRUE  FALSE      19    11 <dbl [11]> #>  5     5      5    20      6 FALSE FALSE      19    11 <dbl [11]> #>  6     6      5    20      6 FALSE FALSE      19    11 <dbl [11]> #>  7     7      5    20      6 FALSE FALSE      19    11 <dbl [11]> #>  8     8      6    25      7 FALSE FALSE      19    11 <dbl [11]> #>  9     9      6    25      7 TRUE  FALSE      19    11 <dbl [11]> #> 10    10      6    25      7 FALSE FALSE      19    11 <dbl [11]> #> 11    11      7    25      7 FALSE FALSE      19    11 <dbl [11]> #> 12    12      7    25      7 TRUE  FALSE      19    11 <dbl [11]> #> 13    13      7    25      7 FALSE FALSE      19    11 <dbl [11]> #> 14    14      8    25      7 TRUE  FALSE      19    11 <dbl [11]> #> 15    15      8    25      7 TRUE  FALSE      19    11 <dbl [11]> #> 16    16      8    25      7 TRUE  FALSE      19    11 <dbl [11]> #> 17    17      9    10      4 FALSE FALSE      19    11 <dbl [11]> #> 18    18      9    10      4 FALSE FALSE      19    11 <dbl [11]> #> 19    19      9    10      4 FALSE FALSE      19    11 <dbl [11]> #>  #>  #> $doses #> # A tibble: 1 × 1 #>   doses #>   <dbl> #> 1    20 #>  #> $seed #> # A tibble: 1 × 1 #>    seed #>   <int> #> 1   819 #>  #> attr(,\"class\") #> [1] \"tbl_Simulations\" \"list\"            .DefaultLogisticIndepBeta() %>% tidy() #> $pseudoData #> # A tibble: 2 × 3 #>    Dose     N   Tox #>   <dbl> <int> <dbl> #> 1    25     3  1.05 #> 2   300     3  1.8  #>  #> $data #> # A tibble: 0 × 9 #> # ℹ 9 variables: ID <int>, Cohort <int>, Dose <dbl>, XLevel <int>, Tox <lgl>, #> #   Placebo <lgl>, NObs <int>, NGrid <int>, DoseGrid <list> #>  #> $params #> # A tibble: 2 × 3 #>   Param   mean cov           #>   <chr>  <dbl> <named list>  #> 1 Phi1  -1.95  <dbl [2 × 2]> #> 2 Phi2   0.412 <dbl [2 × 2]> #>  #> attr(,\"class\") #> [1] \"tbl_LogisticIndepBeta\" \"list\"                  .DefaultEffloglog() %>% tidy() #> $pseudoData #> # A tibble: 2 × 2 #>    Dose Response #>   <dbl>    <dbl> #> 1    25     1.22 #> 2   300     2.51 #>  #> $data #> # A tibble: 8 × 10 #>      ID Cohort  Dose XLevel Tox   Placebo  NObs NGrid DoseGrid       W #>   <int>  <int> <dbl>  <int> <lgl> <lgl>   <int> <int> <list>     <dbl> #> 1     1      1    25      1 FALSE FALSE       8    12 <dbl [12]>  0.31 #> 2     2      2    50      2 FALSE FALSE       8    12 <dbl [12]>  0.42 #> 3     3      2    50      2 FALSE FALSE       8    12 <dbl [12]>  0.59 #> 4     4      3    75      3 FALSE FALSE       8    12 <dbl [12]>  0.45 #> 5     5      4   100      4 TRUE  FALSE       8    12 <dbl [12]>  0.6  #> 6     6      4   100      4 TRUE  FALSE       8    12 <dbl [12]>  0.7  #> 7     7      5   225      9 TRUE  FALSE       8    12 <dbl [12]>  0.6  #> 8     8      6   300     12 TRUE  FALSE       8    12 <dbl [12]>  0.52 #>  #> $params #> # A tibble: 2 × 3 #>   Param   mean cov           #>   <chr>  <dbl> <named list>  #> 1 theta1 -2.82 <dbl [2 × 2]> #> 2 theta2  2.71 <dbl [2 × 2]> #>  #> attr(,\"class\") #> [1] \"tbl_Effloglog\" \"list\"          IncrementsMaxToxProb(prob = c(\"DLAE\" = 0.2, \"CRS\" = 0.05)) %>% tidy() #> # A tibble: 2 × 2 #>   Grade  Prob #>   <chr> <dbl> #> 1 DLAE   0.2  #> 2 CRS    0.05 CohortSizeRange(intervals = c(0, 20), cohort_size = c(1, 3)) %>% tidy() #> # A tibble: 2 × 3 #>     min   max cohort_size #>   <dbl> <dbl>       <int> #> 1     0    20           1 #> 2    20   Inf           3 .DefaultCohortSizeDLT() %>% tidy() #> # A tibble: 2 × 3 #>     min   max cohort_size #>   <dbl> <dbl>       <int> #> 1     0     1           1 #> 2     1   Inf           3 .DefaultCohortSizeMin() %>% tidy() #> [[1]] #> # A tibble: 2 × 3 #>     min   max cohort_size #>   <dbl> <dbl>       <int> #> 1     0    10           1 #> 2    10   Inf           3 #>  #> [[2]] #> # A tibble: 2 × 3 #>     min   max cohort_size #>   <dbl> <dbl>       <int> #> 1     0     1           1 #> 2     1   Inf           3 #>  #> attr(,\"class\") #> [1] \"tbl_CohortSizeMin\" \"tbl_CohortSizeMin\" \"list\"              .DefaultCohortSizeMax() %>% tidy() #> [[1]] #> # A tibble: 2 × 3 #>     min   max cohort_size #>   <dbl> <dbl>       <int> #> 1     0    10           1 #> 2    10   Inf           3 #>  #> [[2]] #> # A tibble: 2 × 3 #>     min   max cohort_size #>   <dbl> <dbl>       <int> #> 1     0     1           1 #> 2     1   Inf           3 #>  #> attr(,\"class\") #> [1] \"tbl_CohortSizeMax\" \"tbl_CohortSizeMax\" \"list\"              .DefaultCohortSizeRange() %>% tidy() #> # A tibble: 2 × 3 #>     min   max cohort_size #>   <dbl> <dbl>       <int> #> 1     0    30           1 #> 2    30   Inf           3 CohortSizeParts(cohort_sizes = c(1, 3)) %>% tidy() #> # A tibble: 2 × 2 #>    part cohort_size #>   <int>       <int> #> 1     1           1 #> 2     2           3 .DefaultIncrementsMin() %>% tidy() #> [[1]] #> # A tibble: 3 × 3 #>     min   max increment #>   <dbl> <dbl>     <dbl> #> 1     0     1      1    #> 2     1     3      0.33 #> 3     3   Inf      0.2  #>  #> [[2]] #> # A tibble: 2 × 3 #>     min   max increment #>   <dbl> <dbl>     <dbl> #> 1     0    20      1    #> 2    20   Inf      0.33 #>  #> attr(,\"class\") #> [1] \"tbl_IncrementsMin\" \"tbl_IncrementsMin\" \"list\"              CohortSizeRange(intervals = c(0, 20), cohort_size = c(1, 3)) %>% tidy() #> # A tibble: 2 × 3 #>     min   max cohort_size #>   <dbl> <dbl>       <int> #> 1     0    20           1 #> 2    20   Inf           3 x <- .DefaultIncrementsRelativeDLT() x %>% tidy() #> # A tibble: 3 × 3 #>     min   max increment #>   <dbl> <dbl>     <dbl> #> 1     0     1      1    #> 2     1     3      0.33 #> 3     3   Inf      0.2  .DefaultIncrementsRelativeParts() %>% tidy() #> $dlt_start #> # A tibble: 1 × 1 #>   dlt_start #>       <int> #> 1         0 #>  #> $clean_start #> # A tibble: 1 × 1 #>   clean_start #>         <int> #> 1           1 #>  #> $intervals #> # A tibble: 2 × 1 #>   intervals #>       <dbl> #> 1         0 #> 2         2 #>  #> $increments #> # A tibble: 2 × 1 #>   increments #>        <dbl> #> 1          2 #> 2          1 #>  #> attr(,\"class\") #> [1] \"tbl_IncrementsRelativeParts\" \"list\"                        NextBestNCRM(   target = c(0.2, 0.35),   overdose = c(0.35, 1),   max_overdose_prob = 0.25 ) %>% tidy() #> # A tibble: 3 × 4 #>   Range       min   max max_prob #>   <chr>     <dbl> <dbl>    <dbl> #> 1 Underdose  0     0.2     NA    #> 2 Target     0.2   0.35    NA    #> 3 Overdose   0.35  1        0.25 .DefaultNextBestNCRMLoss() %>% tidy() #> # A tibble: 4 × 5 #>   Range        Lower Upper LossCoefficient MaxOverdoseProb #>   <chr>        <dbl> <dbl>           <dbl>           <dbl> #> 1 Underdose     0     0.2                1            0.25 #> 2 Target        0.2   0.35               0            0.25 #> 3 Overdose      0.35  0.6                1            0.25 #> 4 Unacceptable  0.6   1                  2            0.25 .DefaultDualDesign() %>% tidy() #> $model #> $sigma2betaW #> # A tibble: 1 × 1 #>   sigma2betaW #>         <dbl> #> 1        0.01 #>  #> $rw1 #> # A tibble: 1 × 1 #>   rw1   #>   <lgl> #> 1 TRUE  #>  #> $betaZ_params #> # A tibble: 2 × 3 #>    mean cov[,1]  [,2] prec[,1]  [,2] #>   <dbl>   <dbl> <dbl>    <dbl> <dbl> #> 1     0       1     0        1     0 #> 2     1       0     1        0     1 #>  #> $ref_dose #> # A tibble: 1 × 1 #>   ref_dose   #>   <pstv_nmb> #> 1 1          #>  #> $use_log_dose #> # A tibble: 1 × 1 #>   use_log_dose #>   <lgl>        #> 1 FALSE        #>  #> $sigma2W #> # A tibble: 2 × 1 #>   sigma2W #>     <dbl> #> 1     0.1 #> 2     0.1 #>  #> $rho #> # A tibble: 2 × 1 #>     rho #>   <dbl> #> 1     1 #> 2     1 #>  #> $use_fixed #> # A tibble: 3 × 1 #>   use_fixed #>   <lgl>     #> 1 FALSE     #> 2 FALSE     #> 3 TRUE      #>  #> $datanames #> # A tibble: 5 × 1 #>   datanames #>   <chr>     #> 1 nObs      #> 2 w         #> 3 x         #> 4 xLevel    #> 5 y         #>  #> $datanames_prior #> # A tibble: 2 × 1 #>   datanames_prior #>   <chr>           #> 1 nGrid           #> 2 doseGrid        #>  #> $sample #> # A tibble: 5 × 1 #>   sample #>   <chr>  #> 1 betaZ  #> 2 precW  #> 3 rho    #> 4 betaW  #> 5 delta  #>  #> attr(,\"class\") #> [1] \"tbl_DualEndpointRW\" \"list\"               #>  #> $data #> # A tibble: 0 × 10 #> # ℹ 10 variables: ID <int>, Cohort <int>, Dose <dbl>, XLevel <int>, Tox <lgl>, #> #   Placebo <lgl>, NObs <int>, NGrid <int>, DoseGrid <list>, W <dbl> #>  #> $stopping #> $stop_list #> $stop_list[[1]] #> $target #> # A tibble: 2 × 1 #>   target #>    <dbl> #> 1    0.9 #> 2    1   #>  #> $is_relative #> # A tibble: 1 × 1 #>   is_relative #>   <lgl>       #> 1 TRUE        #>  #> $prob #> # A tibble: 1 × 1 #>    prob #>   <dbl> #> 1   0.5 #>  #> $report_label #> # A tibble: 1 × 1 #>   report_label                            #>   <chr>                                   #> 1 P(0.9 ≤ Biomarker ≤ 1) ≥ 0.5 (relative) #>  #> attr(,\"class\") #> [1] \"tbl_StoppingTargetBiomarker\" \"list\"                        #>  #> $stop_list[[2]] #> # A tibble: 1 × 2 #>   nPatients report_label        #>       <int> <chr>               #> 1        40 ≥ 40 patients dosed #>  #>  #> $report_label #> # A tibble: 1 × 1 #>   report_label #>   <chr>        #> 1 NA           #>  #> attr(,\"class\") #> [1] \"tbl_StoppingAny\" \"list\"            #>  #> $increments #> # A tibble: 2 × 3 #>     min   max increment #>   <dbl> <dbl>     <dbl> #> 1     0    20      1    #> 2    20   Inf      0.33 #>  #> $pl_cohort_size #> # A tibble: 1 × 1 #>    size #>   <int> #> 1     0 #>  #> $nextBest #> $target #> # A tibble: 2 × 1 #>   target #>    <dbl> #> 1    0.9 #> 2    1   #>  #> $overdose #> # A tibble: 2 × 1 #>   overdose #>      <dbl> #> 1     0.35 #> 2     1    #>  #> $max_overdose_prob #> # A tibble: 1 × 1 #>   max_overdose_prob #>               <dbl> #> 1              0.25 #>  #> $target_relative #> # A tibble: 1 × 1 #>   target_relative #>   <lgl>           #> 1 TRUE            #>  #> $target_thresh #> # A tibble: 1 × 1 #>   target_thresh #>           <dbl> #> 1          0.01 #>  #> attr(,\"class\") #> [1] \"tbl_NextBestDualEndpoint\" \"list\"                     #>  #> $cohort_size #> [[1]] #> # A tibble: 2 × 3 #>     min   max cohort_size #>   <dbl> <dbl>       <int> #> 1     0    30           1 #> 2    30   Inf           3 #>  #> [[2]] #> # A tibble: 2 × 3 #>     min   max cohort_size #>   <dbl> <dbl>       <int> #> 1     0     1           1 #> 2     1   Inf           3 #>  #> attr(,\"class\") #> [1] \"tbl_CohortSizeMax\" \"tbl_CohortSizeMax\" \"list\"              #>  #> $startingDose #> # A tibble: 1 × 1 #>   startingDose #>          <dbl> #> 1            3 #>  #> attr(,\"class\") #> [1] \"tbl_DualDesign\" \"list\"           options <- McmcOptions(   burnin = 100,   step = 1,   samples = 2000 )  emptydata <- Data(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))  model <- LogisticLogNormal(   mean = c(-0.85, 1),   cov =     matrix(c(1, -0.5, -0.5, 1),       nrow = 2     ),   ref_dose = 56 )  samples <- mcmc(emptydata, model, options) samples %>% tidy() #> $data #> # A tibble: 2,000 × 10 #>    Iteration Chain alpha0 alpha1 nChains nParameters nIterations nBurnin nThin #>        <int> <int>  <dbl>  <dbl>   <int>       <int>       <int>   <int> <int> #>  1         1     1 -1.70  16.7         1           1        2100     100     1 #>  2         2     1 -1.71   2.66        1           1        2100     100     1 #>  3         3     1  1.31   0.390       1           1        2100     100     1 #>  4         4     1 -0.718  0.996       1           1        2100     100     1 #>  5         5     1  0.407  7.44        1           1        2100     100     1 #>  6         6     1 -1.74   4.85        1           1        2100     100     1 #>  7         7     1 -0.811  9.55        1           1        2100     100     1 #>  8         8     1 -1.61  45.1         1           1        2100     100     1 #>  9         9     1  0.330  3.13        1           1        2100     100     1 #> 10        10     1  0.163  0.580       1           1        2100     100     1 #> # ℹ 1,990 more rows #> # ℹ 1 more variable: parallel <lgl> #>  #> $options #> # A tibble: 1 × 5 #>   iterations burnin  step rng_kind rng_seed #>        <int>  <int> <int> <chr>       <int> #> 1       2100    100     1 NA             NA #>  #> attr(,\"class\") #> [1] \"tbl_Samples\" \"list\""},{"path":"https://openpharma.github.io/crmPack/reference/update-Data-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Updating Data Objects — update,Data-method","title":"Updating Data Objects — update,Data-method","text":"method updates existing Data object new data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-Data-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updating Data Objects — update,Data-method","text":"","code":"# S4 method for class 'Data' update(   object,   x,   y,   ID = length(object@ID) + seq_along(y),   new_cohort = TRUE,   check = TRUE,   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/update-Data-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updating Data Objects — update,Data-method","text":"object (Data) object want update. x (number) dose level (one level !). y (integer) DLT vector (0/1 vector) patients cohort. can also supply numeric vectors, converted integer internally. ID (integer) patient IDs. can also supply numeric vectors, converted integer internally. new_cohort (flag) TRUE (default) new data assigned new cohort. check (flag) whether validation updated object conducted. See details . ... used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-Data-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updating Data Objects — update,Data-method","text":"new, updated Data object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-Data-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Updating Data Objects — update,Data-method","text":"current implementation update method allows updating Data class object adding single dose level x . However, might use cases new cohort added contains placebo active dose. Hence, update need performed iteratively calling update method twice. example, first call user can add placebo, second call, active dose. Since cohort placebo allowed, update method normally throw error attempting add placebo first call. allow updates, check parameter set FALSE first call.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-Data-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updating Data Objects — update,Data-method","text":"","code":"# Create some data of class 'Data'. my_data <- Data(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Update the data with a new cohort. my_data1 <- update(my_data, x = 20, y = c(0L, 1L, 1L)) my_data1 #> An object of class \"Data\" #> Slot \"x\": #>  [1]  0.1  0.5  1.5  3.0  6.0 10.0 10.0 10.0 20.0 20.0 20.0 #>  #> Slot \"y\": #>  [1] 0 0 0 0 0 0 1 0 0 1 1 #>  #> Slot \"doseGrid\": #>  [1]  0.1  0.5  1.5  3.0  6.0 10.0 12.0 14.0 16.0 18.0 20.0 22.0 24.0 26.0 28.0 #> [16] 30.0 32.0 34.0 36.0 38.0 40.0 42.0 44.0 46.0 48.0 50.0 52.0 54.0 56.0 58.0 #> [31] 60.0 62.0 64.0 66.0 68.0 70.0 72.0 74.0 76.0 78.0 80.0 #>  #> Slot \"nGrid\": #> [1] 41 #>  #> Slot \"xLevel\": #>  [1]  1  2  3  4  5  6  6  6 11 11 11 #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #>  [1]  1  2  3  4  5  6  7  8  9 10 11 #>  #> Slot \"cohort\": #>  [1] 1 2 3 4 5 6 6 6 7 7 7 #>  #> Slot \"nObs\": #> [1] 11 #>"},{"path":"https://openpharma.github.io/crmPack/reference/update-DataDA-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Updating DataDA Objects — update,DataDA-method","title":"Updating DataDA Objects — update,DataDA-method","text":"method updates existing DataDA object new data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataDA-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updating DataDA Objects — update,DataDA-method","text":"","code":"# S4 method for class 'DataDA' update(object, u, t0, trialtime, y, ..., check = TRUE)"},{"path":"https://openpharma.github.io/crmPack/reference/update-DataDA-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updating DataDA Objects — update,DataDA-method","text":"object (DataDA) object want update. u (numeric) new DLT free survival times patients, .e. existing patients object well new patients. t0 (numeric) time patient starts DLT observation window. parameter covers patients, .e. existing patients object well new patients. trialtime (number) current time trial, .e. followup time. y (numeric) new DLTs patients, .e. existing patients object well new patients. ... arguments passed Data update method update-Data. used new patients added cohort. check (flag) whether validation updated object conducted. See help update-Data details use case parameter.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataDA-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updating DataDA Objects — update,DataDA-method","text":"new, updated DataDA object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataDA-method.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Updating DataDA Objects — update,DataDA-method","text":"function capable adding new patients also updates existing ones respect y, t0, u slots.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataDA-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updating DataDA Objects — update,DataDA-method","text":"","code":"# Create an object of class 'DataDA'. my_data <- DataDA(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 1, 1, 0, 0, 1, 0),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)),   u = c(42, 30, 15, 5, 20, 25, 30, 60),   t0 = c(0, 15, 30, 40, 55, 70, 75, 85),   Tmax = 60 ) #> Used default patient IDs! #> Used best guess cohort indices!  # Update the data. my_data1 <- update(   object = my_data,   y = c(my_data@y, 0), # The 'y' will be updated according to 'u'.   u = c(my_data@u, 20),   t0 = c(my_data@t0, 95),   x = 20,   trialtime = 120 # This is the global timeline for a trial. ) my_data1 #> An object of class \"DataDA\" #> Slot \"u\": #> [1] 42 30 15  5 20 25 30 35 20 #>  #> Slot \"t0\": #> [1]  0 15 30 40 55 70 75 85 95 #>  #> Slot \"Tmax\": #> [1] 60 #>  #> Slot \"x\": #> [1]  0.1  0.5  1.5  3.0  6.0 10.0 10.0 10.0 20.0 #>  #> Slot \"y\": #> [1] 0 0 1 1 0 0 1 0 0 #>  #> Slot \"doseGrid\": #>  [1]  0.1  0.5  1.5  3.0  6.0 10.0 12.0 14.0 16.0 18.0 20.0 22.0 24.0 26.0 28.0 #> [16] 30.0 32.0 34.0 36.0 38.0 40.0 42.0 44.0 46.0 48.0 50.0 52.0 54.0 56.0 58.0 #> [31] 60.0 62.0 64.0 66.0 68.0 70.0 72.0 74.0 76.0 78.0 80.0 #>  #> Slot \"nGrid\": #> [1] 41 #>  #> Slot \"xLevel\": #> [1]  1  2  3  4  5  6  6  6 11 #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #> [1] 1 2 3 4 5 6 7 8 9 #>  #> Slot \"cohort\": #> [1] 1 2 3 4 5 6 6 6 7 #>  #> Slot \"nObs\": #> [1] 9 #>"},{"path":"https://openpharma.github.io/crmPack/reference/update-DataDual-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Updating DataDual Objects — update,DataDual-method","title":"Updating DataDual Objects — update,DataDual-method","text":"method updates existing DataDual object new data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataDual-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updating DataDual Objects — update,DataDual-method","text":"","code":"# S4 method for class 'DataDual' update(object, w, ..., check = TRUE)"},{"path":"https://openpharma.github.io/crmPack/reference/update-DataDual-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updating DataDual Objects — update,DataDual-method","text":"object (DataDual) object want update. w (numeric) continuous vector biomarker values patients update. ... arguments passed Data update method update-Data. check (flag) whether validation updated object conducted. See help update-Data details use case parameter.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataDual-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updating DataDual Objects — update,DataDual-method","text":"new, updated DataDual object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataDual-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updating DataDual Objects — update,DataDual-method","text":"","code":"# Create some data of class 'DataDual'. my_data <- DataDual(   x = c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),   y = c(0, 0, 0, 0, 0, 0, 1, 0),   w = rnorm(8),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Update the data with a new cohort. my_data1 <- update(my_data, x = 20, y = c(0, 1, 1), w = c(0.4, 1.2, 2.2)) my_data1 #> An object of class \"DataDual\" #> Slot \"w\": #>  [1] -0.38377314 -0.20837647 -0.84199596 -0.58915968  0.75582202  0.77971207 #>  [7]  0.53335135 -0.08566696  0.40000000  1.20000000  2.20000000 #>  #> Slot \"x\": #>  [1]  0.1  0.5  1.5  3.0  6.0 10.0 10.0 10.0 20.0 20.0 20.0 #>  #> Slot \"y\": #>  [1] 0 0 0 0 0 0 1 0 0 1 1 #>  #> Slot \"doseGrid\": #>  [1]  0.1  0.5  1.5  3.0  6.0 10.0 12.0 14.0 16.0 18.0 20.0 22.0 24.0 26.0 28.0 #> [16] 30.0 32.0 34.0 36.0 38.0 40.0 42.0 44.0 46.0 48.0 50.0 52.0 54.0 56.0 58.0 #> [31] 60.0 62.0 64.0 66.0 68.0 70.0 72.0 74.0 76.0 78.0 80.0 #>  #> Slot \"nGrid\": #> [1] 41 #>  #> Slot \"xLevel\": #>  [1]  1  2  3  4  5  6  6  6 11 11 11 #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #>  [1]  1  2  3  4  5  6  7  8  9 10 11 #>  #> Slot \"cohort\": #>  [1] 1 2 3 4 5 6 6 6 7 7 7 #>  #> Slot \"nObs\": #> [1] 11 #>"},{"path":"https://openpharma.github.io/crmPack/reference/update-DataOrdinal-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Updating DataOrdinal Objects — update,DataOrdinal-method","title":"Updating DataOrdinal Objects — update,DataOrdinal-method","text":"method updates existing DataOrdinal object new data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataOrdinal-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updating DataOrdinal Objects — update,DataOrdinal-method","text":"","code":"# S4 method for class 'DataOrdinal' update(   object,   x,   y,   ID = length(object@ID) + seq_along(y),   new_cohort = TRUE,   check = TRUE,   ... )"},{"path":"https://openpharma.github.io/crmPack/reference/update-DataOrdinal-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updating DataOrdinal Objects — update,DataOrdinal-method","text":"object (DataOrdinal) object want update. x (number) dose level (one level !). y (integer) vector toxicity grades (0, 1, 2, ...) patients cohort. can also supply numeric vectors, converted integer internally. ID (integer) patient IDs. can also supply numeric vectors, converted integer internally. new_cohort (flag) TRUE (default) new data assigned new cohort. check (flag) whether validation updated object conducted. See Details . ... used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataOrdinal-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updating DataOrdinal Objects — update,DataOrdinal-method","text":"new, updated DataOrdinal object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataOrdinal-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Updating DataOrdinal Objects — update,DataOrdinal-method","text":"current implementation update method allows updating DataOrdinal class object adding single dose level x . However, might use cases new cohort added contains placebo active dose. Hence, update need performed iteratively calling update method twice. example, first call user can add placebo, second call, active dose. Since cohort placebo allowed, update method normally throw error attempting add placebo first call. allow updates, check parameter set FALSE first call.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataOrdinal-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updating DataOrdinal Objects — update,DataOrdinal-method","text":"","code":"data <- DataOrdinal(   x = c(10, 20, 30, 40, 50, 50, 50, 60, 60, 60),   y = as.integer(c(0, 0, 0, 0, 0, 1, 0, 0, 1, 2)),   ID = 1L:10L,   cohort = as.integer(c(1:4, 5, 5, 5, 6, 6, 6)),   doseGrid = c(seq(from = 10, to = 100, by = 10)),   yCategories = c(\"No tox\" = 0L, \"Sub-tox AE\" = 1L, \"DLT\" = 2L),   placebo = FALSE )  update(data, x = 70, y = c(1L, 2L, 1L)) #> An object of class \"DataOrdinal\" #> Slot \"x\": #>  [1] 10 20 30 40 50 50 50 60 60 60 70 70 70 #>  #> Slot \"y\": #>  [1] 0 0 0 0 0 1 0 0 1 2 1 2 1 #>  #> Slot \"doseGrid\": #>  [1]  10  20  30  40  50  60  70  80  90 100 #>  #> Slot \"nGrid\": #> [1] 10 #>  #> Slot \"xLevel\": #>  [1] 1 2 3 4 5 5 5 6 6 6 7 7 7 #>  #> Slot \"yCategories\": #>     No tox Sub-tox AE        DLT  #>          0          1          2  #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 #>  #> Slot \"cohort\": #>  [1] 1 2 3 4 5 5 5 6 6 6 7 7 7 #>  #> Slot \"nObs\": #> [1] 13 #>"},{"path":"https://openpharma.github.io/crmPack/reference/update-DataParts-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Updating DataParts Objects — update,DataParts-method","title":"Updating DataParts Objects — update,DataParts-method","text":"method updates existing DataParts object new data.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataParts-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updating DataParts Objects — update,DataParts-method","text":"","code":"# S4 method for class 'DataParts' update(object, x, y, ..., check = TRUE)"},{"path":"https://openpharma.github.io/crmPack/reference/update-DataParts-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updating DataParts Objects — update,DataParts-method","text":"object (DataParts) object want update. x (number) dose level (one level !). y (integer) DLT vector (0/1 vector) patients cohort. can also supply numeric vectors, converted integer internally. ... arguments passed Data update method update-Data. check (flag) whether validation updated object conducted. See help update-Data details use case parameter.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataParts-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updating DataParts Objects — update,DataParts-method","text":"new, updated DataParts object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-DataParts-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updating DataParts Objects — update,DataParts-method","text":"","code":"# Create an object of class 'DataParts'. my_data <- DataParts(   x = c(0.1, 0.5, 1.5),   y = c(0, 0, 0),   doseGrid = c(0.1, 0.5, 1.5, 3, 6, seq(from = 10, to = 80, by = 2)),   part = c(1L, 1L, 1L),   nextPart = 1L,   part1Ladder = c(0.1, 0.5, 1.5, 3, 6, 10) ) #> Used default patient IDs! #> Used best guess cohort indices!  # Update the data with a new cohort. # Note that since we reached the last level from 'part1Ladder' # then the 'nextPart' is switched from '1' to '2'. my_data1 <- update(my_data, x = 10, y = 0L) my_data1 #> An object of class \"DataParts\" #> Slot \"part\": #> [1] 1 1 1 1 #>  #> Slot \"nextPart\": #> [1] 2 #>  #> Slot \"part1Ladder\": #> [1]  0.1  0.5  1.5  3.0  6.0 10.0 #>  #> Slot \"x\": #> [1]  0.1  0.5  1.5 10.0 #>  #> Slot \"y\": #> [1] 0 0 0 0 #>  #> Slot \"doseGrid\": #>  [1]  0.1  0.5  1.5  3.0  6.0 10.0 12.0 14.0 16.0 18.0 20.0 22.0 24.0 26.0 28.0 #> [16] 30.0 32.0 34.0 36.0 38.0 40.0 42.0 44.0 46.0 48.0 50.0 52.0 54.0 56.0 58.0 #> [31] 60.0 62.0 64.0 66.0 68.0 70.0 72.0 74.0 76.0 78.0 80.0 #>  #> Slot \"nGrid\": #> [1] 41 #>  #> Slot \"xLevel\": #> [1] 1 2 3 6 #>  #> Slot \"placebo\": #> [1] FALSE #>  #> Slot \"ID\": #> [1] 1 2 3 4 #>  #> Slot \"cohort\": #> [1] 1 2 3 4 #>  #> Slot \"nObs\": #> [1] 4 #>"},{"path":"https://openpharma.github.io/crmPack/reference/update-ModelPseudo-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Update method for the ModelPseudo model class. This is a method to update the model class slots (estimates, parameters, variables and etc.), when the new data (e.g. new observations of responses) are available. This method is mostly used to obtain new modal estimates for pseudo model parameters. — update,ModelPseudo-method","title":"Update method for the ModelPseudo model class. This is a method to update the model class slots (estimates, parameters, variables and etc.), when the new data (e.g. new observations of responses) are available. This method is mostly used to obtain new modal estimates for pseudo model parameters. — update,ModelPseudo-method","text":"Update method ModelPseudo model class. method update model class slots (estimates, parameters, variables etc.), new data (e.g. new observations responses) available. method mostly used obtain new modal estimates pseudo model parameters.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-ModelPseudo-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update method for the ModelPseudo model class. This is a method to update the model class slots (estimates, parameters, variables and etc.), when the new data (e.g. new observations of responses) are available. This method is mostly used to obtain new modal estimates for pseudo model parameters. — update,ModelPseudo-method","text":"","code":"# S4 method for class 'ModelPseudo' update(object, data, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/update-ModelPseudo-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update method for the ModelPseudo model class. This is a method to update the model class slots (estimates, parameters, variables and etc.), when the new data (e.g. new observations of responses) are available. This method is mostly used to obtain new modal estimates for pseudo model parameters. — update,ModelPseudo-method","text":"object (ModelPseudo) model update. data (Data) currently available data. ... used.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-ModelPseudo-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update method for the ModelPseudo model class. This is a method to update the model class slots (estimates, parameters, variables and etc.), when the new data (e.g. new observations of responses) are available. This method is mostly used to obtain new modal estimates for pseudo model parameters. — update,ModelPseudo-method","text":"new ModelPseudo class object.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/update-ModelPseudo-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update method for the ModelPseudo model class. This is a method to update the model class slots (estimates, parameters, variables and etc.), when the new data (e.g. new observations of responses) are available. This method is mostly used to obtain new modal estimates for pseudo model parameters. — update,ModelPseudo-method","text":"","code":"# Update the 'LogisticIndepBeta' model with new data. empty_data <- Data(doseGrid = seq(25, 300, 25))  my_model_lib <- LogisticIndepBeta(   binDLE = c(1.05, 1.8),   DLEweights = c(3, 3),   DLEdose = c(25, 300),   data = empty_data )  # Then, we have some new observations data. data <- Data(   x = c(25, 50, 50, 75, 100, 100, 225, 300),   y = c(0, 0, 0, 0, 1, 1, 1, 1),   ID = 1:8,   cohort = c(1L, 2L, 2L, 3L, 4L, 4L, 5L, 6L),   doseGrid = empty_data@doseGrid )  # Update the model to get new estimates. new_model_lib <- update(object = my_model_lib, data = data)  # Update the 'Effloglog' model with new data. empty_data_dual <- DataDual(doseGrid = seq(25, 300, 25), placebo = FALSE)  my_model_eff <- Effloglog(   eff = c(1.223, 2.513),   eff_dose = c(25, 300),   nu = c(a = 1, b = 0.025),   data = empty_data_dual,   const = 0 )  # Data with new observations data. my_data_dual <- DataDual(   x = c(25, 50, 50, 75, 100, 100, 225, 300),   y = c(0, 0, 0, 0, 1, 1, 1, 1),   w = c(0.31, 0.42, 0.59, 0.45, 0.6, 0.7, 0.6, 0.52),   ID = 1:8,   cohort = c(1L, 2L, 2L, 3L, 4L, 4L, 5L, 6L),   doseGrid = empty_data_dual@doseGrid )  # Update the model to get new estimates. new_model_eff <- update(object = my_model_eff, data = my_data_dual)"},{"path":"https://openpharma.github.io/crmPack/reference/v_cohort_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of CohortSize Objects — v_cohort_size","title":"Internal Helper Functions for Validation of CohortSize Objects — v_cohort_size","text":"functions used internally validate format input CohortSize inherited classes therefore exported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_cohort_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of CohortSize Objects — v_cohort_size","text":"","code":"v_cohort_size_range(object)  v_cohort_size_dlt(object)  v_cohort_size_const(object)  v_cohort_size_parts(object)  v_cohort_size_max(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_cohort_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of CohortSize Objects — v_cohort_size","text":"object (CohortSize) object validate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_cohort_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of CohortSize Objects — v_cohort_size","text":"character vector validation failure messages, TRUE case validation passes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_cohort_size.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of CohortSize Objects — v_cohort_size","text":"v_cohort_size_range(): validates CohortSizeRange object contains valid intervals  cohort_size slots. v_cohort_size_dlt(): validates CohortSizeDLT object contains valid intervals  cohort_size slots. v_cohort_size_const(): validates CohortSizeConst object contains valid size slot. v_cohort_size_parts(): validates CohortSizeParts object contains valid sizes slot. v_cohort_size_max(): validates CohortSizeMax object contains valid cohort_sizes slot.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_data_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of GeneralData Objects — v_data_objects","title":"Internal Helper Functions for Validation of GeneralData Objects — v_data_objects","text":"functions used internally validate format input GeneralData inherited classes therefore exported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_data_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of GeneralData Objects — v_data_objects","text":"","code":"v_general_data(object)  h_doses_unique_per_cohort(dose, cohort)  v_data(object)  v_data_dual(object)  v_data_parts(object)  v_data_mixture(object)  v_data_da(object)  v_data_ordinal(object)  v_data_grouped(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_data_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of GeneralData Objects — v_data_objects","text":"object (GeneralData) object validate. dose (numeric) dose values. cohort (integer) cohort indices parallel doses.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_data_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of GeneralData Objects — v_data_objects","text":"character vector validation failure messages, TRUE case validation passes. TRUE dose unique per cohort, otherwise FALSE.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_data_objects.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of GeneralData Objects — v_data_objects","text":"v_general_data(): validates GeneralData object contains unique ID, non-negative cohort indices ID cohort vectors length nObs. h_doses_unique_per_cohort(): helper function verifies whether dose values unique every different cohort. v_data(): validates Data object contains valid elements respect types, dependency length. v_data_dual(): validates DataDual object contains valid biomarker vector respect type length. v_data_parts(): validates DataParts object contains valid elements respect types, dependency length. v_data_mixture(): validates DataMixture object contains valid elements respect types, dependency length. v_data_da(): validates DataDA object contains valid elements respect types, dependency length. v_data_ordinal(): validates DataOrdinal object contains valid elements respect types, dependency length. v_data_grouped(): validates DataGrouped object contains valid group information.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of RuleDesign Objects — v_design","title":"Internal Helper Functions for Validation of RuleDesign Objects — v_design","text":"functions used internally validate format input RuleDesign inherited classes therefore exported.  functions used internally validate format input RuleDesignOrdinal inherited classes therefore exported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of RuleDesign Objects — v_design","text":"","code":"v_rule_design(object)  v_rule_design_ordinal(object)  v_design_grouped(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of RuleDesign Objects — v_design","text":"object (RuleDesignOrdinal) object validate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of RuleDesign Objects — v_design","text":"character vector validation failure messages, TRUE case validation passes. character vector validation failure messages, TRUE case validation passes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_design.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of RuleDesign Objects — v_design","text":"v_rule_design(): validates RuleDesign object contains valid startingDose. v_rule_design_ordinal(): validates RuleDesignOrdinal object contains valid starting_dose. v_design_grouped(): validates DesignGrouped object contains valid flags.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_general_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of GeneralSimulations Objects — v_general_simulations","title":"Internal Helper Functions for Validation of GeneralSimulations Objects — v_general_simulations","text":"functions used internally validate format input GeneralSimulations inherited classes therefore exported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_general_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of GeneralSimulations Objects — v_general_simulations","text":"","code":"v_general_simulations(object)  v_simulations(object)  v_dual_simulations(object)  v_da_simulations(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_general_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of GeneralSimulations Objects — v_general_simulations","text":"object (GeneralSimulations) object validate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_general_simulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of GeneralSimulations Objects — v_general_simulations","text":"character vector validation failure messages, TRUE case validation passes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_general_simulations.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of GeneralSimulations Objects — v_general_simulations","text":"v_general_simulations(): validates GeneralSimulations object contains valid data object valid dose simulations. v_simulations(): validates Simulations object contains valid object fit, stop_reasons, stop_report, additional_stats compared general class GeneralSimulations. v_dual_simulations(): validates DualSimulations object capture dose-biomarker fits, sigma2W rho estimates. v_da_simulations(): validates DASimulations object contains valid trialduration vector trial duration values simulations.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_increments.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of Increments Objects — v_increments","title":"Internal Helper Functions for Validation of Increments Objects — v_increments","text":"functions used internally validate format input Increments inherited classes therefore exported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_increments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of Increments Objects — v_increments","text":"","code":"v_increments_relative(object)  v_increments_relative_parts(object)  v_increments_relative_dlt(object)  v_increments_dose_levels(object)  v_increments_hsr_beta(object)  v_increments_min(object)  v_increments_maxtoxprob(object)  v_increments_ordinal(object)  v_cohort_size_ordinal(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_increments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of Increments Objects — v_increments","text":"object (Increments) object validate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_increments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of Increments Objects — v_increments","text":"character vector validation failure messages, TRUE case validation passes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_increments.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of Increments Objects — v_increments","text":"v_increments_relative(): validates IncrementsRelative object contains valid intervals increments parameters. v_increments_relative_parts(): validates IncrementsRelativeParts object contains valid dlt_start clean_start parameters. v_increments_relative_dlt(): validates IncrementsRelativeDLT object contains valid intervals increments parameters. v_increments_dose_levels(): validates IncrementsDoseLevels object contains valid levels basis_level option. v_increments_hsr_beta(): validates IncrementsHSRBeta object contains valid probability target, threshold shape parameters. v_increments_min(): validates IncrementsMin object contains list Increments objects. v_increments_maxtoxprob(): validates IncrementsMaxToxProb v_increments_ordinal(): validates IncrementsOrdinal object contains valid grade standard Increments rule. v_cohort_size_ordinal(): validates CohortSizeOrdinal object contains valid grade standard CohortSize rule.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_mcmcoptions_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of McmcOptions Objects — v_mcmcoptions_objects","title":"Internal Helper Functions for Validation of McmcOptions Objects — v_mcmcoptions_objects","text":"functions used internally validate format input McmcOptions inherited classes therefore exported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_mcmcoptions_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of McmcOptions Objects — v_mcmcoptions_objects","text":"","code":"v_mcmc_options(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_mcmcoptions_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of McmcOptions Objects — v_mcmcoptions_objects","text":"object (McmcOptions) object validate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_mcmcoptions_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of McmcOptions Objects — v_mcmcoptions_objects","text":"character vector validation failure messages, TRUE case validation passes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_mcmcoptions_objects.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of McmcOptions Objects — v_mcmcoptions_objects","text":"v_mcmc_options(): validates McmcOptions object contains valid integer scalars iterations, burnin step well proper parameters Random Number Generator.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_model_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of GeneralModel and ModelPseudo Objects — v_model_objects","title":"Internal Helper Functions for Validation of GeneralModel and ModelPseudo Objects — v_model_objects","text":"functions used internally validate format input GeneralModel ModelPseudo inherited classes therefore exported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_model_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of GeneralModel and ModelPseudo Objects — v_model_objects","text":"","code":"v_general_model(object)  v_model_logistic_kadane(object)  v_model_logistic_kadane_beta_gamma(object)  v_model_logistic_normal_mix(object)  v_model_logistic_normal_fixed_mix(object)  v_model_logistic_log_normal_mix(object)  v_model_dual_endpoint(object)  v_model_dual_endpoint_rw(object)  v_model_dual_endpoint_beta(object)  v_model_dual_endpoint_emax(object)  v_model_logistic_indep_beta(object)  v_model_eff_log_log(object)  v_model_eff_flexi(object)  v_model_da_logistic_log_normal(object)  v_model_tite_logistic_log_normal(object)  v_model_one_par_exp_normal_prior(object)  v_model_one_par_exp_prior(object)  v_logisticlognormalordinal(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_model_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of GeneralModel and ModelPseudo Objects — v_model_objects","text":"object (GeneralModel) (ModelPseudo)  object validate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_model_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of GeneralModel and ModelPseudo Objects — v_model_objects","text":"character vector validation failure messages, TRUE case validation passes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_model_objects.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of GeneralModel and ModelPseudo Objects — v_model_objects","text":"v_general_model(): validates names arguments init function included datanames datanames_prior slots. v_model_logistic_kadane(): validates logistic Kadane model parameters valid. v_model_logistic_kadane_beta_gamma(): validates logistic Kadane model parameters beta gamma prior valid. v_model_logistic_normal_mix(): validates weightpar valid. v_model_logistic_normal_fixed_mix(): validates component list valid ModelParamsNormal objects well weights correct. v_model_logistic_log_normal_mix(): validates share_weight represents probability. v_model_dual_endpoint(): validates DualEndpoint class slots valid. v_model_dual_endpoint_rw(): validates DualEndpointRW class slots valid. v_model_dual_endpoint_beta(): validates DualEndpointBeta class slots valid. v_model_dual_endpoint_emax(): validates DualEndpointEmax class slots valid. v_model_logistic_indep_beta(): validates LogisticIndepBeta class slots valid. v_model_eff_log_log(): validates Effloglog class slots valid. v_model_eff_flexi(): validates EffFlexi class slots valid. v_model_da_logistic_log_normal(): validates DALogisticLogNormal class slots valid. v_model_tite_logistic_log_normal(): validates TITELogisticLogNormal class slots valid. v_model_one_par_exp_normal_prior(): validates OneParLogNormalPrior class slots valid. v_model_one_par_exp_prior(): validates OneParExpPrior class slots valid. v_logisticlognormalordinal(): confirms cov diagonal","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_model_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of Model Parameters Objects — v_model_params","title":"Internal Helper Functions for Validation of Model Parameters Objects — v_model_params","text":"functions used internally validate format object model parameters inherited classes therefore exported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_model_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of Model Parameters Objects — v_model_params","text":"","code":"v_model_params_normal(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_model_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of Model Parameters Objects — v_model_params","text":"object (ModelParamsNormal) multivariate normal parameters object validate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_model_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of Model Parameters Objects — v_model_params","text":"character vector validation failure messages, TRUE case validation passes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_model_params.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of Model Parameters Objects — v_model_params","text":"v_model_params_normal(): helper function validates multivariate normal parameters.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_next_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of NextBest Objects — v_next_best","title":"Internal Helper Functions for Validation of NextBest Objects — v_next_best","text":"functions used internally validate format input NextBest inherited classes therefore exported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_next_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of NextBest Objects — v_next_best","text":"","code":"v_next_best_mtd(object)  v_next_best_ncrm(object)  v_next_best_ncrm_loss(object)  v_next_best_dual_endpoint(object)  v_next_best_min_dist(object)  v_next_best_inf_theory(object)  v_next_best_td(object)  v_next_best_td_samples(object)  v_next_best_max_gain_samples(object)  v_next_best_prob_mtd_lte(object)  v_next_best_prob_mtd_min_dist(object)  v_next_best_ordinal(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_next_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of NextBest Objects — v_next_best","text":"object (NextBest) object validate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_next_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of NextBest Objects — v_next_best","text":"character vector validation failure messages, TRUE case validation passes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_next_best.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of NextBest Objects — v_next_best","text":"v_next_best_mtd(): validates NextBestMTD object contains valid target probability derive function. v_next_best_ncrm(): validates NextBestNCRM object contains valid target probability, overdose max_overdose_prob probability ranges. v_next_best_ncrm_loss(): validates NextBestNCRMLoss object contains valid objects. v_next_best_dual_endpoint(): validates NextBestDualEndpoint object contains valid probability objects. v_next_best_min_dist(): validates NextBestMinDist object contains valid target object. v_next_best_inf_theory(): validates NextBestInfTheory object contains valid target asymmetry objects. v_next_best_td(): validates NextBestTD object contains valid prob_target_drt prob_target_eot probabilities. v_next_best_td_samples(): validates NextBestTDsamples object contains valid derive function. v_next_best_max_gain_samples(): validates NextBestMaxGainSamples object contains valid derive mg_derive functions. v_next_best_prob_mtd_lte(): validates NextBestProbMTDLTE object contains valid target probability method string value. v_next_best_prob_mtd_min_dist(): validates NextBestProbMTDMinDist object contains valid target probability method string value. v_next_best_ordinal(): validates NextBestOrdinal object contains valid grade standard NextBest rule.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_pseudo_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of PseudoSimulations Objects — v_pseudo_simulations","title":"Internal Helper Functions for Validation of PseudoSimulations Objects — v_pseudo_simulations","text":"functions used internally validate format input PseudoSimulations inherited classes therefore exported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_pseudo_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of PseudoSimulations Objects — v_pseudo_simulations","text":"","code":"v_pseudo_simulations(object)  v_pseudo_dual_simulations(object)  v_pseudo_dual_flex_simulations(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_pseudo_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of PseudoSimulations Objects — v_pseudo_simulations","text":"object (PseudoSimulations) object validate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_pseudo_simulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of PseudoSimulations Objects — v_pseudo_simulations","text":"character vector validation failure messages, TRUE case validation passes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_pseudo_simulations.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of PseudoSimulations Objects — v_pseudo_simulations","text":"v_pseudo_simulations(): validates PseudoSimulations object contains valid fit, FinalTDtargetEndOfTrialEstimates , FinalTDtargetDuringTrialAtDoseGrid,FinalTDtargetEndOfTrialAtDoseGrid , FinalTDEOTCIs, FinalTDEOTRatios, FinalCIs, FinalRatios, object valid stopReasons simulations. v_pseudo_dual_simulations(): validates PseudoDualSimulations object contains valid fit_eff, final_gstar_estimates , final_gstar_at_dose_grid, final_gstar_cis , final_gstar_ratios, final_optimal_dose, final_optimal_dose_at_dose_grid object valid sigma2_est simulations. v_pseudo_dual_flex_simulations(): validates PseudoDualFlexiSimulations object contains valid sigma2_beta_w_est vector final posterior mean sigma2betaW estimates.FinalGstarEstimates , FinalGstarAtDoseGrid,","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_safety_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of SafetyWindow Objects — v_safety_window","title":"Internal Helper Functions for Validation of SafetyWindow Objects — v_safety_window","text":"functions used internally validate format input SafetyWindow inherited classes therefore exported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_safety_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of SafetyWindow Objects — v_safety_window","text":"","code":"v_safety_window_size(object)  v_safety_window_const(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_safety_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of SafetyWindow Objects — v_safety_window","text":"object (SafetyWindow) object validate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_safety_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of SafetyWindow Objects — v_safety_window","text":"character vector validation failure messages, TRUE case validation passes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_safety_window.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of SafetyWindow Objects — v_safety_window","text":"v_safety_window_size(): validates SafetyWindowSize object contains valid slots. v_safety_window_const(): validates SafetyWindowConst object contains valid slots.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_samples_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of Samples Objects — v_samples_objects","title":"Internal Helper Functions for Validation of Samples Objects — v_samples_objects","text":"functions used internally validate format input Samples inherited classes therefore exported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_samples_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of Samples Objects — v_samples_objects","text":"","code":"v_samples(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_samples_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of Samples Objects — v_samples_objects","text":"object (Samples) object validate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_samples_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of Samples Objects — v_samples_objects","text":"character vector validation failure messages, TRUE case validation passes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_samples_objects.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of Samples Objects — v_samples_objects","text":"v_samples(): validates Samples object contains valid data slot.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_starting_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of StartingDose Objects — v_starting_dose","title":"Internal Helper Functions for Validation of StartingDose Objects — v_starting_dose","text":"Validates StartingDose object contains valid starting_dose.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_starting_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of StartingDose Objects — v_starting_dose","text":"","code":"v_starting_dose(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_starting_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of StartingDose Objects — v_starting_dose","text":"object (StartingDose) object validate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_starting_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of StartingDose Objects — v_starting_dose","text":"character vector validation failure messages, TRUE case validation passes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_stopping.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Helper Functions for Validation of Stopping Objects — v_stopping","title":"Internal Helper Functions for Validation of Stopping Objects — v_stopping","text":"functions used internally validate format input Stopping inherited classes therefore exported.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_stopping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Helper Functions for Validation of Stopping Objects — v_stopping","text":"","code":"v_stopping_cohorts_near_dose(object)  v_stopping_patients_near_dose(object)  v_stopping_min_cohorts(object)  v_stopping_min_patients(object)  v_stopping_target_prob(object)  v_stopping_mtd_distribution(object)  v_stopping_mtd_cv(object)  v_stopping_target_biomarker(object)  v_stopping_list(object)  v_stopping_all(object)  v_stopping_tdci_ratio(object)"},{"path":"https://openpharma.github.io/crmPack/reference/v_stopping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Helper Functions for Validation of Stopping Objects — v_stopping","text":"object (Stopping) object validate.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_stopping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Helper Functions for Validation of Stopping Objects — v_stopping","text":"character vector validation failure messages, TRUE case validation passes.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/v_stopping.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Internal Helper Functions for Validation of Stopping Objects — v_stopping","text":"v_stopping_cohorts_near_dose(): validates StoppingCohortsNearDose object contains valid nCohorts percentage parameters. v_stopping_patients_near_dose(): validates StoppingPatientsNearDose object contains valid nPatients percentage parameters. v_stopping_min_cohorts(): validates StoppingMinCohorts object contains valid nCohorts parameter. v_stopping_min_patients(): validates StoppingMinPatients object contains valid nPatients parameter. v_stopping_target_prob(): validates StoppingTargetProb object contains valid target prob parameters. v_stopping_mtd_distribution(): validates StoppingMTDdistribution object contains valid target, thresh prob parameters. v_stopping_mtd_cv(): validates StoppingMTDCV object contains valid probability target percentage threshold. v_stopping_target_biomarker(): validates StoppingTargetBiomarker object contains valid target, is_relative probslots. v_stopping_list(): validates StoppingList object contains valid stop_list, summary slots. v_stopping_all(): validates StoppingAll object contains valid stop_list slot. v_stopping_tdci_ratio(): validates StoppingTDCIRatio object contains valid target_ratio  prob_target slots.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/windowLength.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the safety window length of the next cohort — windowLength","title":"Determine the safety window length of the next cohort — windowLength","text":"function determines safety window length next cohort.","code":""},{"path":"https://openpharma.github.io/crmPack/reference/windowLength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the safety window length of the next cohort — windowLength","text":"","code":"windowLength(safetyWindow, size, ...)  # S4 method for class 'SafetyWindowSize' windowLength(safetyWindow, size, data, ...)  # S4 method for class 'SafetyWindowConst' windowLength(safetyWindow, size, ...)"},{"path":"https://openpharma.github.io/crmPack/reference/windowLength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the safety window length of the next cohort — windowLength","text":"safetyWindow rule, object class SafetyWindow size next cohort size ... additional arguments data data input, object class DataDA","code":""},{"path":"https://openpharma.github.io/crmPack/reference/windowLength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the safety window length of the next cohort — windowLength","text":"windowLength list safety window parameters (gap, follow, follow_min)","code":""},{"path":"https://openpharma.github.io/crmPack/reference/windowLength.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determine the safety window length of the next cohort — windowLength","text":"windowLength(SafetyWindowSize): Determine safety window length based cohort size windowLength(SafetyWindowConst): Constant safety window length","code":""},{"path":"https://openpharma.github.io/crmPack/reference/windowLength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the safety window length of the next cohort — windowLength","text":"","code":"# nolint start  # Create the data data <- DataDA(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),                y=c(0, 0, 1, 1, 0, 0, 1, 0),                doseGrid=                  c(0.1, 0.5, 1.5, 3, 6,                    seq(from=10, to=80, by=2)),                u=c(42,30,15,5,20,25,30,60),                t0=c(0,15,30,40,55,70,75,85),                Tmax=60) #> Used default patient IDs! #> Used best guess cohort indices!  # Initialize the CRM model used to model the data npiece_ <- 10 lambda_prior<-function(k){   npiece_/(data@Tmax*(npiece_-k+0.5)) }  model<-DALogisticLogNormal(mean=c(-0.85,1),                            cov=matrix(c(1,-0.5,-0.5,1),nrow=2),                            ref_dose=56,                            npiece=npiece_,                            l=as.numeric(t(apply(as.matrix(c(1:npiece_),1,npiece_),2,lambda_prior))),                            c_par=2)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=200) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Define the rule which will be used to select the next cohort size # based on the class 'CohortSizeConst' mySize <- CohortSizeConst(size=3)  # Determine the cohort size for the next cohort sizeRecommendation <- size(mySize, dose=doseRecommendation$value, data = data)  # Rule for the safety window length: #   -having patientGap as (0,7,3,3,...) for cohort size <4 #   -and having patientGap as (0,9,5,5,...) for cohort size >=4 myWindowLength <- SafetyWindowSize(gap = list(c(7,3),c(9,5)),                                    size = c(1,4),                                    follow = 7,                                    follow_min = 14)  # Determine the safety window parameters for the next cohort windowLength(myWindowLength, size=sizeRecommendation) #> $patientGap #> [1] 0 7 3 #>  #> $patientFollow #> [1] 7 #>  #> $patientFollowMin #> [1] 14 #>   # nolint end # nolint start  # Create the data data <- DataDA(x=c(0.1, 0.5, 1.5, 3, 6, 10, 10, 10),                y=c(0, 0, 1, 1, 0, 0, 1, 0),                doseGrid=                  c(0.1, 0.5, 1.5, 3, 6,                    seq(from=10, to=80, by=2)),                u=c(42,30,15,5,20,25,30,60),                t0=c(0,15,30,40,55,70,75,85),                Tmax=60) #> Used default patient IDs! #> Used best guess cohort indices!  # Initialize the CRM model used to model the data npiece_ <- 10 lambda_prior<-function(k){   npiece_/(data@Tmax*(npiece_-k+0.5)) }  model<-DALogisticLogNormal(mean=c(-0.85,1),                            cov=matrix(c(1,-0.5,-0.5,1),nrow=2),                            ref_dose=56,                            npiece=npiece_,                            l=as.numeric(t(apply(as.matrix(c(1:npiece_),1,npiece_),2,lambda_prior))),                            c_par=2)  # Set-up some MCMC parameters and generate samples from the posterior options <- McmcOptions(burnin=100,                        step=2,                        samples=200) set.seed(94) samples <- mcmc(data, model, options)  # Define the rule for dose increments and calculate the maximum dose allowed myIncrements <- IncrementsRelative(intervals=c(0, 20),                                    increments=c(1, 0.33)) nextMaxDose <- maxDose(myIncrements,                        data=data)  # Define the rule which will be used to select the next best dose # based on the class 'NextBestNCRM' myNextBest <- NextBestNCRM(target=c(0.2, 0.35),                            overdose=c(0.35, 1),                            max_overdose_prob=0.25)  # Calculate the next best dose doseRecommendation <- nextBest(myNextBest,                                doselimit=nextMaxDose,                                samples=samples, model=model, data=data)  # Define the rule which will be used to select the next cohort size # based on the class 'CohortSizeConst' mySize <- CohortSizeConst(size=3)  # Determine the cohort size for the next cohort sizeRecommendation <- size(mySize, dose=doseRecommendation$value, data = data)  # Rule for having safety window length with constant safety window parameters myWindowLength <- SafetyWindowConst(gap = c(7,3),                                     follow = 7,                                     follow_min = 14)  # Determine the safety window parameters for the next cohort windowLength(myWindowLength, size=sizeRecommendation) #> $patientGap #> [1] 0 7 3 #>  #> $patientFollow #> [1] 7 #>  #> $patientFollowMin #> [1] 14 #>   # nolint end"},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-2009002","dir":"Changelog","previous_headings":"","what":"Version 2.0.0.9002","title":"Version 2.0.0.9002","text":"Note: release (1.0 -> 2.0) signifies major breaking revamp package. Users advised carefully review release notes documentation detailed information changes necessary updates existing code. Implemented IncrementsMaxToxProb class Implemented knit_print methods almost crmPack classes improve rendering Markdown Quarto documents. See vignette details. Provided basic support ordinal CRM models. See vignette details. Implemented broom-like tidy methods concrete crmPack classes. See vignette details. Removed multiplot function. Use Please use equivalent functionality packages, cowplot ggpubr. Added new DataGrouped DesignGrouped classes corresponding model LogisticLogNormalGrouped support simultaneous dose escalation monotherapy combination therapy arms. Created CrmPackClass class ultimate ancestor crmPack classes allow identification crmPack classes simpler definition generic methods. approximate now returns list containing fitted model , optionally, ggplot object approximated dose/toxicity curve. Modified wording attribute stopTrial’s return value StoppingMTDdistribution objects strictly match definition given online documentation. return value unchanged. Corrected spelling name messgae [sic] attribute return value stopTrial signature stopping = \"StoppingTDCIRatio\". Changed type ref_dose LogisticNormalMixture LogisticNormalFixedMixture classes positive_number numeric consistency classes. Added -parameter constructor functions named .Default<class name> provide usable instances concrete subclasses Increments, Model, NextBest Stopping. Added new function dose_grid_range returns range doses dose grid. Added new function ngrid returns number doses dose grid. Modified efficacy-EffFlexi method: allowed vectorized dose; NA now returned doses outside dose grid range (warning thrown). Added new custom checkmate function check_range. Added method names objects class Samples. Added method size objects class Samples. Added new custom checkmate function check_length. Added unique flag assert_probabilities checkmate custom functions. Created new vignette describes use certain functions features crmPack major refactoring. Removed MASS Imports Rcpp, RcppArmadillo Suggests used old development version. doselimit argument nextBest method now specified Inf instead numeric(0). Added new helper functions nextBest methods, particularly plotting finding dose closest grid. Added new NextBestNCRMLoss class corresponding nextBest method. Warning message printed anymore nextBest methods doselimit specified. Set prototype target = 0.3 NextBestMinDist class. Added new customized checkmate functions probability values checking. Renamed argument derive function mtdSamples mtd_samples NextBestMTD class. Allowed from_prior flag - argument modelspecs function GeneralModel class. Created new ProbitLogNormalRel model class support (standardized) dose. Changed ProbitLogNormal supports log (standardized) dose . Added logger feature. user interface consists four functions: enable_logging, disable_logging, is_logging_enabled, log_trace. Re-factored sampleSize function returns 0 burnin > iterations. vector t0 slot DataDA class must sorted ascending order. Replaced warning message cohort ID provided user constructor Data. Introduced validation updated object update methods Data-like classes. Added check flag possibly omit validation updated object. Set package use testthat. Added lifecycle package. Include rolling CRM design, previously available separate GitHub branch. Additional authors change maintainer. Included ‘additional_stats’ add reporting additional parameters method simulate summarize MTD. ‘report_label’ can added stopping rules individual combined stopping rule reporting.","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-100","dir":"Changelog","previous_headings":"","what":"Version 1.0.0","title":"Version 1.0.0","text":"CRAN release: 2019-06-13 Reference JSS publication.","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-029","dir":"Changelog","previous_headings":"","what":"Version 0.2.9","title":"Version 0.2.9","text":"CRAN release: 2018-12-21 default use 5 cores available cores machine. Note value can also changed user. Change maintainer","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"bugfixes-0-2-8","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"Version 0.2.8","text":"PLcohortSize now defaults 0 placebo patients upon Design class initialization (instead 1 - note effect erroneous simulations, due option set Data class) “examine” function also stops stopping rules fulfilled already case DLTs occurring. case beforehand lead infinite looping (thanks John Kirkpatrick reporting bug) Removed RW2 warnings “DualEndpointRW” - seems work nicely now (thanks Charles Warne reporting!) Removed WinBUGS since used anyway (paper describe )","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"new-features-0-2-8","dir":"Changelog","previous_headings":"","what":"New features:","title":"Version 0.2.8","text":"“examine” function now counts number times dose recommended contiguously break e.g. default 100 times (can specified new option “examine”) avoid infinite loops issues corresponding warning condition met New “Increments” class “IncrementsNumDoseLevels” works directly number dose levels dose grid can incremented current next cohort (thanks John Kirkpatrick suggestion). can example used order force design skip dose level escalating. Included JSS manuscript new vignette. now possible specify many cores used parallel computations used.","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-027","dir":"Changelog","previous_headings":"","what":"Version 0.2.7","title":"Version 0.2.7","text":"CRAN release: 2018-03-13","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"bugfixes-0-2-7","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"Version 0.2.7","text":"LogisticNormal now works - prec found .","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-026","dir":"Changelog","previous_headings":"","what":"Version 0.2.6","title":"Version 0.2.6","text":"CRAN release: 2018-02-15","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"bugfixes-0-2-6","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"Version 0.2.6","text":"Replaced BayesLogit dependency JAGS code, since BayesLogit taken CRAN. Speed one example pass CRAN check.","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"new-features-0-2-5","dir":"Changelog","previous_headings":"","what":"New features:","title":"Version 0.2.5","text":"matching doses dose grid now includes tolerance 1e-10, order make user-friendly (thanks YJ Choi Giuseppe investigating)","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"bugfixes-0-2-5","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"Version 0.2.5","text":"minor fix alpha1 description LogisticLogNormal-class minor fix scale_colour_manual import ggplot2 reported R-Core","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"new-features-0-2-4","dir":"Changelog","previous_headings":"","what":"New features:","title":"Version 0.2.4","text":"case multiple nextBest plots now also returned original plots list singlePlots, allow customization, jointly plotting . ProbitLogNormal: Now also model allows reference dose log transformation (standardized) dose. can specified options refDose useLogDose. DualEndpoint: additional options ProbitLogNormal now available DualEndpoint models. consequence, parameter “refDose” class DualEndpointBeta needed renamed “refDoseBeta”, parameter “refDose” class DualEndpointEmax renamed “refDoseEmax”.","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"bugfixes-0-2-4","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"Version 0.2.4","text":"documentation: DualEndpoint description fixed problem formula","code":""},{"path":[]},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"new-features-0-2-3","dir":"Changelog","previous_headings":"","what":"New features:","title":"Version 0.2.3","text":"New increment class “IncrementMin” added allows combine multiple increment rules MIN operation","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-021","dir":"Changelog","previous_headings":"","what":"Version 0.2.1","title":"Version 0.2.1","text":"CRAN release: 2017-05-03","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"new-features-0-2-1","dir":"Changelog","previous_headings":"","what":"New features:","title":"Version 0.2.1","text":"Option targetThresh NextBestDualEndpoint allows tune target probability onwards used derive next best dose (fixed 0.05) Added ProbitLogNormal model NextBestDualEndpoint class, additional option “scale” now allows also specify absolute biomarker target ranges. corresponding method evaluation, safety samples now longer included evaluation biomarker target probability, now description consistent computations. NextBestNCRM NextBestDualEndpoint now return matrix target overdosing probabilities additional list element “probs” result “nextBest” applied. Note StoppingTargetBiomarker evaluation, toxicity longer part biomarker target probability.","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"bugfixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"Version 0.2.1","text":"Added back example vignette, can opened crmPackExample() Clarified DualEndpointRW model samples prior obtained due impropriety RW prior (added model class description). DualEndpointRW models, now possible non-equidistant grid points, obtain sensible results. (still needs thoroughly tested though.) DualEndpointBeta model, now possible negative E0 Emax parameters. Cohort size 0 placebo now possible - e.g. start patients later move larger cohorts also including placebo subjects. simulating firstSeparate=TRUE placebo, now first (sentinel) cohort includes one active one placebo patients, next patients use cohort size active placebo arms, respectively. Barplots work now also one observed value simulations NextBestDualEndpoint now takes account active doses optimizing biomarker outcome next best dose among admissible doses, thus avoiding early stopping placebo dose level. DataMixture objects used, mcmc now correctly sets fromPrior FALSE shared data object contains data.","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-020","dir":"Changelog","previous_headings":"","what":"Version 0.2.0","title":"Version 0.2.0","text":"CRAN release: 2016-07-16 Added arguments probmin probmax MinimalInformative order control probability threshold minimum maximum dose minimally informative prior Values 95% CI corresponding ratio upper lower limit CI displayed results using ‘nextBest’ six- number summary tables including values lowest, 25th percentile, 50th percentile median, mean, 75th precentile highest final (stopping) estimates dose levels corresponds target probability DLE used end trial, TDEOT ratios upper lower 95% credibility intervals (CI) TDEOT dose levels corresponds target probability DLE used trial dose levels corresponds maximum gain value, Gstar ratios upper lower 95% CI final estimates Gstar optimal doses, either TDEOT (DLE response ) minimum TDEOT Gstar (DLE efficacy response) ratios optimal dose across simulations also displayed using ‘summary’ simulations.","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-018","dir":"Changelog","previous_headings":"","what":"Version 0.1.8","title":"Version 0.1.8","text":"CRAN release: 2016-02-17 value 95% CI final estimates displayed results using ‘stopTrial’ Bugfixes dual endpoint designs: Improved graphical display plots nextBest dose Improved methodology compute Gstar Warnings removed using nextBest simulations Stopping rules can now also freely combined using /operators dual endpoint design stopping rules using MCMC samples.","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-016","dir":"Changelog","previous_headings":"","what":"Version 0.1.6","title":"Version 0.1.6","text":"CRAN release: 2015-12-22 New model class “LogisticLogNormalMixture” added, use new data class “DataMixture”. New stopping rule “StoppingHighestDose” added. “examine” method longer stops two consecutive cohorts start dose. important e.g. two-parts study designs, part 1 can end dose part 2 starts. contents “datanames” slot new models longer restricted specific set, previously enforced validation function GeneralModel AllModels classes. Sampling prior can now enabled/disabled user mcmc function, necessary models might prior even though nObs == 0. Bugfix: results MinimalInformative function reproducible beforehand. Now seed parameter can supplied, ensures reproducibility. Bugfix: Compatibility help file links new ggplot2 package version.","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-015","dir":"Changelog","previous_headings":"","what":"Version 0.1.5","title":"Version 0.1.5","text":"CRAN release: 2015-11-12 Bugfix: newer versions grid plotting simulation objects longer work. fixed.","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-012","dir":"Changelog","previous_headings":"","what":"Version 0.1.2","title":"Version 0.1.2","text":"publication) prior quantiles specified approximated logistic (log) normal priors.","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-011","dir":"Changelog","previous_headings":"","what":"Version 0.1.1","title":"Version 0.1.1","text":"Bugfix: Previously, happen NextBestNCRM rule, higher doses lead decreasing probability overdosing, doses numerically probability 1 DLT. bugfix, clarified rules documentation fixed rule method, right limit overdose interval vector inclusive.","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-010","dir":"Changelog","previous_headings":"","what":"Version 0.1.0","title":"Version 0.1.0","text":"Added examine function generate table hypothetical trial courses model-based rule-based DLT-endpoint designs Made results mcmc() (works usual set.seed earlier user code) simulate() (previously already promised) reproducible. See help file mcmc details. Additional improvements reduce confusing warning messages / notes mcmc() higher-level functions. Made simulate parallel=TRUE work r.roche.com (Linux server), using parallelization method laptops (Windows) Passing empty (zero length) vector doselimit parameter nextBest function now considered requesting dose recommendation without strict dose limit, corresponding warning printed. Introduced GeneralModel class, class Model single agent dose escalation derives. Another branch ComboLogistic model multiple agent combinations (future version). Similarly introduced GeneralData class, class Data single agent derives, separately subclass DataCombo (future version).","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-0023","dir":"Changelog","previous_headings":"","what":"Version 0.0.23","title":"Version 0.0.23","text":"Fixed bug mcmc function led error “data elements must many rows sample size ” slightly changed JAGS way handling burnin / thinning (user impact). Reduced number MCMC samples dual-endpoint example vignette able plot vignette","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-0022","dir":"Changelog","previous_headings":"","what":"Version 0.0.22","title":"Version 0.0.22","text":"simulate function fixed (specification arguments) Dual-endpoint model-based design added. 3+3 design simulation now possible, see ?ThreePlusThreeDesign Welcome message attaching crmPack, .e. library(“crmPack”) run crmPackUpgrade() function easy upgrade crmPack latest version Rule-based designs now can specified class RuleDesign, model-based designs stay class Design. even special class DualDesign class, dual-endpoint model-based designs. Corresponding classes GeneralSimulations, Simulations DualSimulations capture output trial simulations rule-based, model-based dual-endpoint designs. class Simulations-summary renamed SimulationsSummary, similarly classes GeneralSimulationsSummary DualSimulationsSummary. Stopping CohortSize rules based intervals (IncrementsRelative, IncrementsRelativeDLT, CohortSizeRange, CohortSizeDLT) now use different intervals definition. Now “intervals” slots contain left bounds intervals. , last element needed infinity. See vignette examples. StoppingMaxPatients class removed, redundant class StoppingMinPatients. Please just use StoppingMinPatients class instead. Initialization methods replaced dedicated initialization functions. Please now use Class(…) functions instead new(“Class”, …) calls obtain correct objects. change also reflected vignette. extract function extracting parameter samples Samples objects removed (due name conflict ggmcmc dependency packages). Please now use instead “get” method Samples objects (see vignette example) obtain data ggmcmc format. crmPack now needs package httr (’s now “Imports” field). Packages Rcpp RcppArmadillo moved “Depends” “Suggests” packages. Currently using . showLegend argument model fit plotting functions, order show legend .","code":""},{"path":"https://openpharma.github.io/crmPack/news/index.html","id":"version-0021","dir":"Changelog","previous_headings":"","what":"Version 0.0.21","title":"Version 0.0.21","text":"NEWS version","code":""}]
