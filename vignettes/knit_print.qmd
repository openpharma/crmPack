---
title: "Describing `crmPack` Objects"
output: rmarkdown::html_vignette
editor: visual
number-sections: true
embed-resources: TRUE
reference-location: margin
citation-location: margin
bibliography: vignettes.bib
vignette: >
  %\VignetteIndexEntry{demo}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
execute:
  error: true
  warning: true
---

```{r}
#| label: setup
#| echo: FALSE

suppressPackageStartupMessages({
  library(tibble)
  library(dplyr)
  library(knitr)
  library(kableExtra)
  library(crmPack)
})
```

## Introduction

Objects created by `crmPack` are almost always S4 objects. Like all S4 objects, by default they do
not render in a particularly user-friendly way.

```{r}
#| label: not-friendly-1
#| echo: TRUE
#| eval: FALSE
cs <- CohortSizeDLT(intervals = 0:2, cohort_size = c(1, 3, 5))
cs
```

```{r}
#| label: not-friendly-2
#| echo: FALSE
#| eval: TRUE
cs <- CohortSizeDLT(intervals = 0:2, cohort_size = c(1, 3, 5))
normal_print(cs)
```

Fortunately, a little known feature of `knitr` can put this right at little or no cost to the end
user: in the simplest case, demonstrated below, all that needs to be done is to reference the object
in a markdown or Quarto chunk.

```{r}
#| label: not-friendly-3
#| echo: TRUE
#| eval: TRUE

cs
```

> The `knit_print`methods provided by `crmPack` are not intended to be fully customisable or
> comprehensive. We do believe, however, that they cover the vast majority of use-cases and are
> easily extended using the techniques described in @sec-override of this vignette.

> Formatting of these objects currently only works for HMTL output. If another format - such as PDF
> or Microsoft Word - is required, our suggested workaround is to create the HTML output and then
> print or save the document to the required format.

## How is this done?

When running code at the console, the result of an R function or statement that is not assigned to
an object is `print`ed. (Unless, of course, it is returned `invisible`ly.) The same process appears
to happen when the chunks of a markdown or Quarto document are evaluated. But that is not quite the
case. Instead, the result is passed to an S3 function called `knit_print` [@Xie2024]. It is the
results of running `knit_print` on the returned expression that appear in the rendered document.

As a simple demonstration of the concept, consider:

```{r}
#| label: demo-1
#| echo: TRUE
#| eval: TRUE

knit_print.DustySpringfield <- function(x, ...) {
  "I just don't know what to do with myself"
}

lyric <- 10

lyric

class(lyric) <- "DustySpringfield"

lyric
```

The actions of `knit_print` are entirely arbitrary, but this mechanism provides developers with an
easy way to provide nicely-rendered versions of any objects that are rendered by `knitr`. We have
provided such methods for (almost) all `crmPack` classes.

## Using `knit_print` in `crmPack`

By default, all that needs to be done is to reference the object to be printed in a markdown or
quarto chunk. This is equivalent to `knit_print(object)`. However, the `knit_print` methods for most
`crmPack` classes have optional arguments that can be used to customise the way in which the object
is rendered. To change the default value of any parameter to `knit_print` the function must be
called explicitly: `knit_print(cs, tox_label = "DLAE")`.

### Common customisations

The most commonly needed customisations are to alter the way in which participants and toxicities
are described. These are handled by the `label` and `tox_label` arguments to `knit_print`.

These arguments can be provided either as a scalar or a vector of length 2. If a vector, the first
element is taken to describe a single instance and the second any other number of instances. If a
scalar, it is converted to a vector, whose first element is the scalar value provided and the second
the scalar with `"s"` appended[^1].

[^1]: Except for `tox_label = "toxicity"`, which becomes `tox_label = c("toxicity", "toxicities")`.

So, for example:

```{r}
#| label: custom-1
#| echo: TRUE
#| eval: TRUE

CohortSizeConst(3)
knit_print(CohortSizeConst(3), label = "subject")
```

Dose units are defined by the `units` parameter. By default, no units are printed.

```{r}
#| label: units-1
#| echo: TRUE
#| eval: TRUE

d <- Data(doseGrid = c(0.1, 0.3, 0.9, 2.5, 5, 10, 15))
d
knit_print(d, units = "mg/dL")
```

The format used to display dose levels (and other information in other classes) can be changed with
the `fmt` parameter:

```{r}
#| label: units-2
#| echo: TRUE
#| eval: TRUE

knit_print(d, units = "mg/dL", fmt = "%.2f")
```

`biomarker_label` and `biomarker_units` allow the representation of a biomarker to be customised.

```{r}
#| label: biomarker
#| echo: TRUE
#| eval: TRUE

x <- .DefaultDualEndpointRW()
x

knit_print(x, biomarker_name = "CRP", biomarker_units = "mg/dL")
```

## Rendering complex classes

Some `crmPack` classes have slots whose values are themselves `crmPack` classes. `CohortSizeMax` is
a simple example. In these cases, the slot values are each passed to `knit_print` in turn.

```{r}
#| label: complex-1
#| echo: TRUE
#| eval: TRUE
.DefaultCohortSizeMax()
```

`knit_print` methods for sub-classes of `RuleDesign` (and related classes) offer slightly more
control. Here, an overall header for the rendition of the object is provided by the `title`
parameter (whose value defaults to "Design" and the slot values are separated by sub-headers. The
styling of the overall header and sub-headers is controlled by the `level` parameter. The default
value of `level` is `2L`, and the level of slots is defined recursively to be one more than the
level of the parent slot[^2]. Class-specific parameters are passed to slot-specific `knit_print`
methods using `...`.

[^2]: Because markdown header styles are defined only for six levels, the greatest value for
    `level`, including values generated by nested calls, is `6`.

```{r}
#| label: complex-2
#| echo: TRUE
#| eval: TRUE

knit_print(.DefaultDesign())
```

Slot headers can be customised using the `sections` parameter. `sections` should be a named vector.
Names should be valid slot names for the object being rendered and values the requested slot
headers.

```{r}
#| label: complex-3
#| echo: TRUE
#| eval: FALSE

knit_print(
  .DefaultDesign(),
  level = 4,
  sections = c(
    "nextBest" = "Selection of the dose for the following cohort",
    "startingDose" = "Initial dose"
  )
)
```

\[Output not shown.\]

> It is not possible to omit slots from the rendition of a `crmPack` object. If you need to do this,
> you can either render the required slots individually, or override the definition of `knit_print`
> for the super class as demonstrated below.

## Restoring console-like behaviour

To restore the default behaviour for `crmPack` objects, simply wrap the object in a call to
`normal_print()`.

```{r}
#| label: restore-default-1
#| echo: TRUE
#| eval: TRUE

normal_print(cs)
```

## Accessing the output of `knit_print`

One of the parameters of `knitr::knit_print` is `asis`, with a default value of `TRUE`. `asis` has
the same effect as setting the chunk option `output` to `asis`. This is achieved by returning an
object of class `knit-asis`.

Setting `asis` to `FALSE` will display the raw HTML code generated by `knit_print` to be displayed.
Alternatively, it may allow easier manipulation of the return value.

```{r}
#| label: restore-default-2
#| echo: TRUE
#| eval: TRUE

csOutput1 <- knit_print(CohortSizeDLT(intervals = 0:2, cohort_size = c(1, 3, 5)))
class(csOutput1)
csOutput1
csOutput2 <- knit_print(CohortSizeDLT(intervals = 0:2, cohort_size = c(1, 3, 5)), asis = FALSE)
class(csOutput2)
csOutput2
```

But with the chunk option `output` set to `asis`...

```{r}
#| label: restore-default-3
#| echo: TRUE
#| eval: TRUE
#| output: asis
cat(csOutput2)
```

## Providing your own `knit_print` method {#sec-override}

If the methods provided in `crmPack` don't do what you want, it's easy to roll your own, using
standard S3 techniques.

The formal arguments to `knitr::knit_print` are `x` and `...`. Additional arguments can be added
after `...`.

As an example, consider `knit_print.NextBestNCRM`, which currently returns a paragraph of text:

```{r}
#| label: override-1
#| echo: TRUE
#| eval: TRUE
.DefaultNextBestNCRM()
```

You might feel this is better presented as a bulleted list. You can achieve this as follows[^3]:

[^3]: For simplicity, the `tox_label` and `asis` parameters, which are defined in the current implementation of the function, are omitted in this custom implementation.  They should be preserved in any "real world" customisation.

```{r}
#| label: override-2
#| echo: TRUE
#| eval: TRUE
knit_print.NextBestNCRM <- function(x, ...) {
  knitr::asis_output(
    paste0(
      "The dose recommended for the next cohort will be chosen in the following ",
      "way.\n\n-  First, doses that are ineligible according to the increments rule ",
      "will be discarded.\n-  Next, any dose for which the mean posterior probability of ",
      " toxicity being in the overdose range - (",
      x@overdose[1], ", ", x@overdose[2],
      "] - is ",
      x@max_overdose_prob,
      " or more will also be discarded.\n-  Finally, the dose amongst those remaining ",
      "which has the highest chance that the mean posterior probability of toxicity ",
      "is in the target toxicity range of ",
      x@target[1],
      " to ",
      x@target[2],
      " (inclusive) will be selected.\n\n"
    )
  )
}
registerS3method("knit_print", "NextBestNCRM", knit_print.NextBestNCRM)

.DefaultNextBestNCRM()
```

## Class coverage

```{r}
#| label: coverage-1
#| echo: FALSE
#| eval: FALSE
crmpackClasses <- getClasses(asNamespace("crmPack"))

h_custom_method_exists <- function(generic, obj) {
  # See https://stackoverflow.com/questions/42738851/r-how-to-find-what-s3-method-will-be-called-on-an-object
  generic_name <- deparse(substitute(generic))
  f <- X <- function(x, obj) UseMethod("X")
  for (m in methods(generic_name)) assign(sub(generic_name, "X", m, fixed = TRUE), "body<-"(f, value = m))
  method_name <- X(obj)
  return(method_name != paste0(generic_name, ".default"))
}

df <- lapply(
  crmpackClasses,
  function(cls) {
    tryCatch(
      {
        x <- do.call(paste0(".Default", cls), list())
        method <- h_custom_method_exists(knit_print, x)
        tibble(Class = cls, Constructor = "OK", KnitPrint = method)
      },
      error = function(e) {
        tibble(Class = cls, Constructor = geterrmessage(), KnitPrint = FALSE)
      }
    )
  }
) %>% bind_rows()
allClasses <- df %>% nrow()
knitPrintDefined <- df %>%
  filter(KnitPrint) %>%
  nrow()
knitPrintNotDefined <- allClasses - knitPrintDefined
virtualClasses <- df %>%
  filter(Constructor != "OK") %>%
  nrow()
stillToDo <- df %>%
  filter(Constructor == "OK", !KnitPrint) %>%
  nrow()
```
```{r}
allClasses <- knitPrintDefined <- knitPrintNotDefined <- virtualClasses <- stillToDo <- 0
```

`crmPack` defines `r allClasses` classes. Custom `knit_print` methods exist for `r knitPrintDefined`
of them. Of the remaining `r knitPrintNotDefined` classes, `r virtualClasses` are virtual classes
that will never be directly instantiated by end users. That leaves `r stillToDo` classes for which
`knit_print` methods may be useful. These classes are listed below.

```{r}
#| label: coverage-2
#| echo: FALSE
#| eval: FALSE

df %>%
  filter(Constructor == "OK", !KnitPrint) %>%
  select(Class) %>%
  kable()
```

The majority of these classes relate to simulation of the operating characteristics of CRM trials.
Reporting of this information is likely to need customisation that is beyond the scope of a simple
function[^4].

[^4]: The `crmPack` team is considering the creation of markdown or Quarto templates that may assist
    in this area, but consider this to be a long-term ambition.
